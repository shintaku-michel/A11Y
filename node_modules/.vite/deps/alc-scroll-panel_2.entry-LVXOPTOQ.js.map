{
  "version": 3,
  "sources": ["../../alcance/dist/esm-es5/src/components/alc-scroll-panel/alc-scroll-panel-base.css", "../../alcance/dist/esm-es5/src/components/alc-scroll-panel/alc-scroll-panel.css", "../../alcance/dist/esm-es5/src/components/alc-scroll-panel/alc-scroll-panel.tsx", "../../alcance/dist/esm-es5/src/components/alc-tab-button/alc-tab-button-base.css", "../../alcance/dist/esm-es5/src/components/alc-tab-button/alc-tab-button.css", "../../alcance/dist/esm-es5/src/components/alc-tab-button/alc-tab-button.tsx"],
  "sourcesContent": ["alc-scroll-panel {\n  @apply block;\n}\n\n.alc-scroll-panel {\n  @apply flex flex-row items-stretch;\n}\n\n.alc-scroll-panel__content {\n  @apply overflow-x-hidden whitespace-nowrap;\n}", "@import 'alc-scroll-panel-base.css';\n\n/* Definição das variáveis - Setup dos temas*/\n\n/* DARK */\n[data-alc-theme=\"dark\"] alc-scroll-panel {\n  --border-color: var(--alc-color-border);\n  --shadow-color:  theme('colors.gray.30');\n  --outline-color: var(--alc-color-action-30);\n}\n\n[data-alc-theme=\"dark\"] .alc-scroll-panel__button {\n  --text-color: var(--alc-color-link-text);\n  --bg-color: theme('colors.transparent');\n}\n\n[data-alc-theme=\"dark\"] .alc-scroll-panel__button:hover {\n  --text-color: var(--alc-color-text-0);\n  --bg-color: var(--alc-color-action-50);\n}\n\n[data-alc-theme=\"dark\"] .alc-scroll-panel__button:active {\n  --text-color: var(--alc-color-text-0);\n  --bg-color: var(--alc-color-action-70);\n}\n\n[data-alc-theme=\"dark\"] .alc-scroll-panel__button:disabled {\n  --text-color: var(--alc-color-neutral-60);\n  --bg-color: theme('colors.transparent');\n}\n\n\n/* LIGHT */\n[data-alc-theme=\"light\"] alc-scroll-panel {\n  --border-color: var(--alc-color-border);\n  --shadow-color:  theme('colors.gray.30');\n  --outline-color: var(--alc-color-action-60);\n}\n\n[data-alc-theme=\"light\"] .alc-scroll-panel__button {\n  --text-color: var(--alc-color-link-text);\n  --bg-color: theme('colors.transparent');\n}\n\n[data-alc-theme=\"light\"] .alc-scroll-panel__button:hover {\n  --text-color: var(--alc-color-text-contrast);\n  --bg-color: var(--alc-color-action-50);\n}\n\n[data-alc-theme=\"light\"] .alc-scroll-panel__button:active {\n  --text-color: var(--alc-color-text-contrast);\n  --bg-color: var(--alc-color-action-70);\n}\n\n[data-alc-theme=\"light\"] .alc-scroll-panel__button:disabled {\n  --text-color: var(--alc-color-neutral-30);\n  --bg-color: theme('colors.transparent');\n}\n\n\n.alc-scroll-panel__button {\n  --border-width: var(--alc-border-width);\n  \n  /* Borda top para deixar o elemento centralizado */\n  border-width: var(--border-width) 0;\n  @apply border-b-[--border-color] border-t-transparent;\n  @apply w-10 h-full text-[--text-color] bg-[--bg-color] transition-colors;\n}\n\n.alc-scroll-panel__wrapper-content {\n  @apply overflow-hidden relative;\n}\n\n.alc-scroll-panel__content {\n  @apply overflow-auto;\n}\n\n.alc-scroll-panel__content::-webkit-scrollbar {\n  display: none;\n}\n\n\n.alc-scroll-panel__has-scroll-left::before,\n.alc-scroll-panel__has-scroll-right::after {\n  @apply block content-[\"\\200C\"];\n  @apply w-3 h-full absolute top-0 z-10 pointer-events-none;\n}\n\n.alc-scroll-panel__has-scroll-left::before {  \n  @apply left-0;\n  box-shadow: inset 8px 0px 8px -8px var(--shadow-color);\n}\n\n.alc-scroll-panel__has-scroll-right::after {\n  @apply right-0;\n  box-shadow: inset -8px 0px 8px -8px var(--shadow-color);\n}\n\n.alc-scroll-panel__button:focus-visible, .alc-scroll-panel__button.active:focus-visible {\n  @apply outline outline-2 outline-[--outline-color] -outline-offset-2;\n}", "import { Component, Host, h, Listen, State, Element, forceUpdate, Prop, Watch } from '@stencil/core';\nimport logger from '../utils/logger';\nimport { throttle } from '../utils/throttle';\n\nconst SCROLL_STEP = 20;\n\n@Component({\n  tag: 'alc-scroll-panel',\n  styleUrls: {\n    base: 'alc-scroll-panel-base.css',\n    theme: 'alc-scroll-panel.css'\n  },\n  scoped: false,\n})\nexport class AlcScrollPanel {\n\n  @Element() el: HTMLAlcScrollPanelElement;\n\n  @State() hasScroll: boolean = false;\n  @State() canScrollRight: boolean = false;\n  @State() canScrollLeft: boolean = false;\n  /**\n  * Define se há foco.\n  */\n  @Prop({ reflect: true }) hasFocus: boolean = true;\n  /**\n  * Define para qual elemento o scroll vai.\n  */\n  @Prop({ reflect: true }) scrollToElement: HTMLElement;\n\n  private content: HTMLDivElement;\n  private scrollWidth: number = 0;\n  private scrolling: number = 0;\n  private mo: MutationObserver;\n  private resizeThrottle = throttle(this.resize, 200);\n  private scrollThrottle = throttle(this.handleScroll, 300);\n\n  @Listen('themeLoaded', {\n    target: 'window'\n  })\n  themeLoadedHandler() {\n    this.handleScroll();\n  }\n\n  @Listen('resize', { target: 'window' })\n  handleResize() {\n    this.resizeThrottle();\n  }\n\n  @Watch('scrollToElement')\n  handleScrollToElement(element: HTMLElement) {\n    if(!!element){\n      element.scrollIntoView({ inline: \"center\", block: 'nearest' });\n    }\n  }\n\n  private resize() {\n    this.handleScroll();\n    this.handleScrollToElement(this.scrollToElement);\n  }\n\n  private handleScroll() {\n    this.scrollWidth = this.content.scrollWidth;\n    this.hasScroll = this.scrollWidth > this.content.offsetWidth;\n    this.setCanScroll();\n  }\n\n  private scrollRight() { // Pra frente >>>\n    this.content.scrollLeft += SCROLL_STEP;\n    this.setCanScroll();\n  }\n\n  private scrollLeft() { // Pra trás <<<\n    this.content.scrollLeft = this.content.scrollLeft - SCROLL_STEP;\n    this.setCanScroll();\n  }\n\n  private startScrolling(button: HTMLButtonElement, scroll: Function) {\n    if (this.scrolling) return;\n\n    this.scrolling = window.setInterval(() => {\n      if (button.disabled) {\n        this.stopScrolling();\n        return;\n      }\n\n      scroll.apply(this);\n    }, 200);\n  }\n\n  private startScrollingRight(e: MouseEvent) {\n    const button = e.currentTarget;\n\n    if(button instanceof HTMLButtonElement) {\n      this.startScrolling(button, this.scrollRight);\n    }\n  }\n\n  private startScrollingLeft(e: MouseEvent) {\n    const button = e.currentTarget;\n\n    if(button instanceof HTMLButtonElement) {\n      this.startScrolling(button, this.scrollLeft);\n    }\n  }\n\n  private stopScrolling() {\n    window.clearInterval(this.scrolling);\n    this.scrolling = 0;\n  }\n\n  private setCanScroll() {\n    // Math.ceil foi necessário ao verificar funcionamento em um dispositivo móvel real,\n    // onde scrollLeft apresenta números fracionários.\n    this.canScrollRight = Math.ceil(this.content.offsetWidth + this.content.scrollLeft) < this.scrollWidth;\n    this.canScrollLeft = this.content.scrollLeft > 0;\n  }\n\n  componentDidRender() {\n    /*\n     O trecho abaixo permite que o componente seja atualizado\n     sempre que houver mudanças no conteúdo (como a inclusão de \"fihos\").\n     Isso foi feito para permitir, por exemplo, que o conteúdo do panel\n     seja atualizado dinamicamente com a manipulação do DOM.\n     */\n    this.mo?.disconnect();\n    this.mo = new MutationObserver(() => {\n      logger.debug('forceUpdate scroll-panel');\n      forceUpdate(this.el);\n    });\n    this.mo.observe(this.el, {\n      childList: true,\n      subtree: true\n    });\n\n    this.handleScroll();\n  }\n\n  disconnectedCallback() {\n    this.mo?.disconnect();\n    this.resizeThrottle.cancel();\n    this.scrollThrottle.cancel();\n  }\n\n  render() {\n    return (\n      <Host>\n        <div class=\"alc-scroll-panel\">\n          {\n            this.hasScroll\n            ? <div\n                key=\"left-button\"\n              >\n                <button\n                  onClick={this.scrollLeft.bind(this)}\n                  onMouseDown={this.startScrollingLeft.bind(this)}\n                  onMouseUp={this.stopScrolling.bind(this)}\n                  onTouchStart={this.startScrollingLeft.bind(this)}\n                  onTouchEnd={this.stopScrolling.bind(this)}\n                  onTouchCancel={this.stopScrolling.bind(this)}\n                  class=\"alc-scroll-panel__button\"\n                  disabled={!this.canScrollLeft}\n                  aria-label=\"Ir para esquerda\"\n                  tabindex={this.hasFocus ? '0' : '-1'}\n                >\n                  <alc-icon name=\"chevron-left\" label=''></alc-icon>\n                </button>\n              </div>\n            : null\n          }\n          <div\n            class={{\n              \"alc-scroll-panel__wrapper-content\": true,\n              \"alc-scroll-panel__has-scroll-left\": this.canScrollLeft,\n              \"alc-scroll-panel__has-scroll-right\": this.canScrollRight\n            }}\n            key=\"content\"\n          >\n            <div\n              class=\"alc-scroll-panel__content\"\n              ref={el => this.content = el}\n              onScroll={() => this.scrollThrottle()}\n            >\n              <slot />\n            </div>\n          </div>\n          {\n            this.hasScroll\n            ? <div\n                key=\"right-button\"\n              >\n                <button\n                  onClick={this.scrollRight.bind(this)}\n                  onMouseDown={this.startScrollingRight.bind(this)}\n                  onMouseUp={this.stopScrolling.bind(this)}\n                  onTouchStart={this.startScrollingRight.bind(this)}\n                  onTouchEnd={this.stopScrolling.bind(this)}\n                  onTouchCancel={this.stopScrolling.bind(this)}\n                  class=\"alc-scroll-panel__button\"\n                  disabled={!this.canScrollRight}\n                  aria-label=\"Ir para direita\"\n                  tabindex={this.hasFocus ? '0' : '-1'}\n                >\n                  <alc-icon name=\"chevron-right\" label=''></alc-icon>\n                </button>\n              </div>\n            : null\n          }\n        </div>\n      </Host>\n    );\n  }\n}", "/* CSS básico para que o componente funcione - sem dependências externas */\nalc-tab-button {\n  @apply inline-block;\n}\n\n.alc-tabs__button.active {\n  @apply underline;\n}", "/* Definição das variáveis - Setup dos temas*/\n\n/* \n  Definição das variáveis que estão no alc-tabs \n    --bg-color\n    --border-color\n    --border-width\n    --outline-color\n*/\n\n/* DARK */\n[data-alc-theme=\"dark\"] .alc-tabs__button {\n  --text-color: theme('colors.cyan.20v');\n  --bg-color-button: var(--alc-color-neutral-70);\n}\n\n[data-alc-theme=\"dark\"] .alc-tabs__button:hover {\n  --bg-color-button: theme('colors.gray-cool.70');\n}\n\n[data-alc-theme=\"dark\"] .alc-tabs__button.active {\n  --text-color: var(--alc-color-text-primary);\n  --bg-color-button: var(--bg-color);\n}\n\n/* LIGHT */\n[data-alc-theme=\"light\"] .alc-tabs__button {\n  --text-color: var(--alc-color-link-text);\n  --bg-color-button: theme('colors.gray-cool.10');\n}\n\n[data-alc-theme=\"light\"] .alc-tabs__button:hover {\n  --bg-color-button: theme('colors.gray-cool.20');\n}\n\n[data-alc-theme=\"light\"] .alc-tabs__button.active {\n  --text-color: var(--alc-color-text-primary);\n  --bg-color-button: var(--bg-color);\n}\n\n/* CSS COMUM a todos os temas */\nalc-tab-button {\n  @apply inline-block;\n}\n\n.alc-tabs__button {\n  @apply z-10 p-2 pt-3 text-[--text-color] bg-[--bg-color-button] border-[--border-color];\n  border-right-width: var(--border-width);\n  border-bottom-width: var(--border-width);\n}\n\n\n.alc-tabs__button.active {\n  @apply no-underline cursor-default pt-2;\n  @apply border-t-4 border-b-transparent;\n}\n\n\n/* \n  O primeiro alc-tab-button quando esta ativo deixa transparente a borda inferior.\n  Porém ficava um espaço entre essa borda invisivel e o do conteudo.\n  Foi adicionado borda no 'host' do primeiro botão para solucionar esse problema. \n*/\nalc-tab-button:first-child {\n  @apply border-[--border-color];\n  border-left-width: var(--border-width);\n}\n\n.alc-tabs__button:focus-visible, .alc-tabs__button.active:focus-visible {\n  @apply outline outline-2 outline-[--outline-color] -outline-offset-8;\n}\n", "import { Component, Host, h, Event, EventEmitter, Prop, Element, Watch } from '@stencil/core';\nimport logger from '../utils/logger';\n\n@Component({\n  tag: 'alc-tab-button',\n  styleUrls: {\n    base: 'alc-tab-button-base.css',\n    theme: 'alc-tab-button.css',\n  },\n  scoped: false,\n})\nexport class AlcTabButton {\n  private button: HTMLElement;\n\n  @Element() el!: HTMLAlcTabButtonElement;\n\n  /**\n   * Um identificador da tab deve ser fornecido para cada `alc-tab`.\n   * Isso é usado internamente para referenciar a tab selecionada.\n   */\n  @Prop({ reflect: true }) tab!: string;\n\n  /**\n   * Indica que a tab está selecionada.\n   */\n  @Prop({ mutable: true, reflect: true }) selected: boolean;\n  @Watch('selected')\n  selectedChanged(newValue: boolean, oldValue: boolean) {\n    if (newValue !== oldValue) {\n      if (newValue) {\n\n        this.button.setAttribute('tabindex', '0');\n      }\n      else {\n\n        this.button.setAttribute('tabindex', '-1');\n      }\n    }\n  }\n\n  /**\n   * Evento disparado ao clicar em alc-tab-button\n   */\n  @Event({ eventName: 'alc-click' }) alcClick: EventEmitter<{\n    tab: string\n  }>;\n  /**\n   * Evento disparado para indicar que o alc-tab-button seguinte deve ser selecionado\n   */\n  @Event({ eventName: 'alc-next' }) alcNext: EventEmitter<null>;\n  /**\n   * Evento disparado para indicar que o alc-tab-button anterior deve ser selecionado\n   */\n  @Event({ eventName: 'alc-previous' }) alcPrevious: EventEmitter<null>;\n  /**\n   * Evento disparado para indicar que o primeiro alc-tab-button deve ser selecionado\n   */\n  @Event({ eventName: 'alc-first' }) alcFirst: EventEmitter<null>;\n  /**\n   * Evento disparado para indicar que o último alc-tab-button deve ser selecionado\n   */\n  @Event({ eventName: 'alc-last' }) alcLast: EventEmitter<null>;\n\n  private selectTab(e: Event) {\n\n    if (this.tab !== undefined) {\n      this.alcClick.emit({\n        tab: this.tab\n      });\n      e.preventDefault();\n    }\n  }\n\n  // Inspirado na implementação do WAI - função onKeyDown().\n  // https://www.w3.org/WAI/content-assets/wai-aria-practices/patterns/tabs/examples/js/tabs-automatic.js\n  private keyDownHandler(e: KeyboardEvent) {\n    let handled = false;\n    switch(e.key) {\n      case 'ArrowRight':\n        this.alcNext.emit();\n        handled = true;\n        break;\n      case 'ArrowLeft':\n        this.alcPrevious.emit();\n        handled = true;\n        break;\n      case 'Home':\n        this.alcFirst.emit();\n        handled = true;\n        break;\n      case 'End':\n        this.alcLast.emit();\n        handled = true;\n        break;\n    }\n    if (handled) {\n      e.preventDefault();\n    }\n  }\n\n  componentWillLoad() {\n  }\n\n  render() {\n    this.tab ?? logger.report('tab', this.el.tagName.toLowerCase(), this.el);\n    const getId = (): string => {\n\n      let id: string;\n      if (this.el.id) {\n        id = this.el.id;\n      }\n      else {\n        id = `alc-button_${this.el.tab}`;\n      }\n\n      return id;\n    }\n\n\n    return (\n      <Host>\n        <button\n          onClick={this.selectTab.bind(this)}\n          onKeyDown={this.keyDownHandler.bind(this)}\n          role='tab'\n          aria-selected={this.selected ? 'true' : 'false'}\n          tabindex='-1'\n          id={getId()} // Precisa ter id (para acessibilidade)\n          class={{\n            'alc-tabs__button': true,\n            active: this.selected\n          }}\n          ref={el => this.button = el}\n        >\n          <slot />\n        </button>\n      </Host>\n    );\n  }\n}\n\n"],
  "mappings": "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",
  "names": ["alcScrollPanelBaseCss", "themeAlcScrollPanelCss", "SCROLL_STEP", "AlcScrollPanel", "hostRef", "this", "hasScroll", "canScrollRight", "canScrollLeft", "hasFocus", "scrollWidth", "scrolling", "resizeThrottle", "throttle", "resize", "scrollThrottle", "handleScroll", "prototype", "themeLoadedHandler", "handleResize", "handleScrollToElement", "element", "scrollIntoView", "inline", "block", "scrollToElement", "content", "offsetWidth", "setCanScroll", "scrollRight", "scrollLeft", "startScrolling", "button", "scroll", "_this", "window", "setInterval", "disabled", "stopScrolling", "apply", "startScrollingRight", "e", "currentTarget", "HTMLButtonElement", "startScrollingLeft", "clearInterval", "Math", "ceil", "componentDidRender", "_a", "mo", "disconnect", "MutationObserver", "logger", "debug", "forceUpdate", "el", "observe", "childList", "subtree", "disconnectedCallback", "t", "cancel", "render", "h", "Host", "key", "class", "onClick", "bind", "onMouseDown", "onMouseUp", "onTouchStart", "onTouchEnd", "onTouchCancel", "tabindex", "name", "label", "ref", "onScroll", "alcTabButtonBaseCss", "themeAlcTabButtonCss", "AlcTabButton", "selectedChanged", "newValue", "oldValue", "setAttribute", "selectTab", "tab", "undefined", "alcClick", "emit", "preventDefault", "keyDownHandler", "handled", "alcNext", "alcPrevious", "alcFirst", "alcLast", "componentWillLoad", "report", "tagName", "toLowerCase", "getId", "id", "concat", "onKeyDown", "role", "selected", "active"]
}
