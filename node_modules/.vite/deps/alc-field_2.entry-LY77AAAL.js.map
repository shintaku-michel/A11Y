{
  "version": 3,
  "sources": ["../../alcance/dist/esm-es5/src/components/alc-field/alc-field.css", "../../alcance/dist/esm-es5/src/components/alc-field/alc-field.tsx", "../../alcance/dist/esm-es5/src/components/alc-theme/alc-theme-base.css", "../../alcance/dist/esm-es5/src/components/alc-theme/alc-theme.css", "../../alcance/dist/esm-es5/src/components/alc-theme/alc-theme.tsx"],
  "sourcesContent": ["\n[data-alc-theme=\"light\"] alc-field {\n  --text-color: var(--alc-color-text-4);\n  --text-color-label: var(--alc-color-text-0);\n  --text-color-placeholder: var(--alc-color-text-4);\n\n  --bg-color: var(--alc-color-surface-primary);\n\n  --shadow-color: var(--alc-color-neutral-5);\n\n  --outline-color: var(--alc-color-action-60);\n\n  --border-color: var(--alc-color-neutral-60);\n  --border-color-hover: var(--alc-color-action-60);\n  --border-color-focus : var(--alc-color-action-20);\n\n  /* Estilização de desabilitado */\n  --bg-color-disabled    : var(--alc-color-neutral-10);\n  --border-color-disabled: var(--alc-color-neutral-40);\n  --text-color-disabled  : var(--alc-color-text-4);\n\n  /* Estilização de error */\n  --text-color-error: var(--alc-color-error-50);\n  --border-color-error       : var(--alc-color-error-50);\n  --border-color-hover-error : var(--alc-color-error-45);\n  --border-color-focus-error : var(--alc-color-error-20);\n}\n\n[data-alc-theme=\"dark\"] alc-field {\n  --text-color: var(--alc-color-text-4);\n  --text-color-label: var(--alc-color-text-0);\n  --text-color-placeholder: var(--alc-color-text-4);\n\n  --bg-color: var(--alc-color-neutral-100);\n\n  --shadow-color: var(--alc-color-neutral-80);\n\n  --outline-color: var(--alc-color-action-30);\n\n  --border-color: var(--alc-color-neutral-30);\n  --border-color-hover: var(--alc-color-action-40);\n  --border-color-focus : var(--alc-color-action-70);\n\n  /* Estilização de desabilitado */\n  --bg-color-disabled    : var(--alc-color-neutral-80);\n  --border-color-disabled: var(--alc-color-neutral-50);\n  --text-color-disabled  : var(--alc-color-text-4);\n\n  /* Estilização de error */\n  --text-color-error: var(--alc-color-error-45);\n  --border-color-error       : var(--alc-color-error-45);\n  --border-color-hover-error : var(--alc-color-error-50);\n  --border-color-focus-error : var(--alc-color-error-70);\n}\n\n\n.alc-field {\n  @apply flex flex-col gap-1;\n}\n\n.alc-field__label {\n  @apply text-[--text-color-label];\n}\n\n.alc-field__core {\n  @apply flex flex-col gap-1;\n}\n\n.alc-field__text {\n  @apply text-sm text-[--text-color];\n\n  &--error {\n    @apply text-[--text-color-error];\n  }\n}\n\n.alc-field__input {\n  @apply shadow-inner shadow-[--shadow-color] w-full transition-colors min-h-[theme(height.10)];\n  @apply bg-[--bg-color] border border-[--border-color];\n  @apply placeholder:text-[--text-color-placeholder];\n\n  @apply hover:border-[--border-color-hover];\n  @apply focus:ring-0 focus:border-[--border-color-hover] focus:outline focus:outline-2 focus:outline-offset-2 focus:outline-[--outline-color];\n\n  @apply disabled:shadow-none disabled:bg-[--bg-color-disabled] disabled:border-[--border-color-disabled];\n  @apply disabled:text-[--text-color-disabled] disabled:cursor-not-allowed;\n  @apply disabled:hover:border-[--border-color-disabled];\n}\n\n.alc-field__input--error {\n  @apply border-[--border-color-error];\n  @apply hover:border-[--border-color-hover-error];\n  @apply focus:border-[--border-color-hover-error];\n}", "import { Component, Element, Host, h, Prop, State, Watch} from '@stencil/core';\nimport { getUniqueId } from '../utils/getUniqueId';\nimport logger from '../utils/logger';\n\n/**\n * @slot - Slot para o controle de formulário.\n * Pode ser um `input` (text, number, password, email etc.), `select` ou `textarea`.\n *\n * @slot label - Slot para o elemento label do campo. Há opção de adicionar apenas o texto por meio da propriedade `label`.\n * Use esse recurso case seja necessário alguma personalização no HTML referente ao label.\n *\n * @cssClass alc-field__label - Aplicada ao elemento `label`.\n * @cssClass alc-field__core - Aplicada ao elemento que agrupa o controle de formulário, mensagem de erro e texto de ajuda.\n*/\n\n@Component({\n  tag: 'alc-field',\n  styleUrl: 'alc-field.css',\n  scoped: false,\n})\nexport class AlcField {\n\n  describedBy = new Map();\n  errorId = '';\n  hintId = '';\n\n  @Element() el: HTMLAlcFieldElement;\n\n  @State() input: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\n  @State() inputId: string;\n  @State() slottedElement: HTMLElement;\n\n  /**\n   * Texto do label do input.\n  */\n  @Prop({ reflect: true }) label?: string;\n\n  /**\n   * Texto de ajuda.\n  */\n  @Prop({ reflect: true }) hint: string = '';\n\n  /**\n   * Indica se o input é obrigatório.\n  */\n  @Prop({ reflect: true }) required: boolean = false;\n\n\n  /**\n   * Texto de mensagem de erro.\n  */\n  @Prop({\n    mutable: true,\n    reflect: true,\n  }) errorMsg: string = '';\n  @Watch('errorMsg')\n  watchErrorMsg(newValue: string) {\n    logger.debug('watchErrorMsg', newValue, this.input);\n\n    if (newValue) {\n      if (this.slottedElement.tagName === 'ALC-INPUT-FILE') {\n        const mode = this.slottedElement.getAttribute('mode');\n        if (mode === 'dropzone') {\n          const dropzoneElement = this.slottedElement.querySelector('.alc-input-file__dropzone');\n          if (dropzoneElement) {\n            dropzoneElement.classList.add('alc-field__input--error');\n          }\n        } else if (mode === 'input') {\n          const textInputElement = this.slottedElement.querySelector('.alc-input-file__text-input');\n          if (textInputElement) {\n            textInputElement.classList.add('alc-field__input--error');\n          }\n        } else if (mode === 'button') {\n          const buttonElement = this.slottedElement.querySelector('button.alc-button');\n          if (buttonElement) {\n            buttonElement.classList.add('alc-field__input--error');\n          }\n        }\n      } else {\n        // É um elemento nativo\n        this.input.classList.add('alc-field__input--error');\n      }\n    } else {\n      if (this.slottedElement.tagName === 'ALC-INPUT-FILE') {\n        const mode = this.slottedElement.getAttribute('mode');\n        if (mode === 'dropzone') {\n          const dropzoneElement = this.slottedElement.querySelector('.alc-input-file__dropzone');\n          if (dropzoneElement) {\n            dropzoneElement.classList.remove('alc-field__input--error');\n          }\n        } else if (mode === 'input') {\n          const textInputElement = this.slottedElement.querySelector('.alc-input-file__text-input');\n          if (textInputElement) {\n            textInputElement.classList.remove('alc-field__input--error');\n          }\n        } else if (mode === 'button') {\n          const buttonElement = this.slottedElement.querySelector('button.alc-button');\n          if (buttonElement) {\n            buttonElement.classList.remove('alc-field__input--error');\n          }\n        }\n      } else {\n        // É um elemento nativo\n        this.input.classList.remove('alc-field__input--error');\n      }\n    }\n  }\n  \n  // Função recursiva para encontrar o <input>\n  private findInputElement(element: Element): HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement | null {\n    if (!element) return null;\n\n    const tagName = element.tagName.toLowerCase();\n    if (tagName === 'input' || tagName === 'select' || tagName === 'textarea') {\n      return element as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\n    }\n\n    for (let i = 0; i < element.children.length; i++) {\n      const found = this.findInputElement(element.children[i]);\n      if (found) {\n        return found;\n      }\n    }\n\n    return null;\n  }\n\n  async componentDidLoad() {\n    // Reserva IDs para os elementos de erro e dica\n    this.errorId = getUniqueId();\n    this.hintId = getUniqueId();\n\n    // Seleciona o elemento slotted\n    this.slottedElement = this.el.querySelector('input, select, textarea, alc-input-file');\n\n    if (this.slottedElement) {\n      // Procura o elemento <input> dentro do componente slotted\n      this.input = this.findInputElement(this.slottedElement);\n\n      if (this.input) {\n        this.input.id = this.input.id || getUniqueId();\n        this.input.setAttribute('aria-required', this.required ? 'true' : 'false');\n        this.input.classList.add('alc-field__input');\n        this.inputId = this.input.getAttribute('id');\n        this.watchErrorMsg(this.errorMsg);\n        this.describedBy.set('original', this.input.getAttribute('aria-describedby') || '');\n      }\n    }\n\n    // Configura o label se não estiver usando o slot \"label\"\n    if (!this.label) {\n      const labelEl = this.el.querySelector('[slot=\"label\"] label');\n      labelEl?.classList.add('alc-field__label');\n      if (labelEl && this.required) {\n        const small = document.createElement('small');\n        small.setAttribute('aria-hidden', 'true');\n        small.innerText = ' (obrigatório)';\n        labelEl.appendChild(small);\n      }\n    }\n\n    // Atualiza os atributos de acessibilidade\n    this.updateAriaDescribedBy();\n  }\n  componentWillRender() {\n    this.updateAriaDescribedBy();\n  }\n\n\n  private updateAriaDescribedBy() {\n    if (this.errorMsg) {\n      this.describedBy.set('error', this.errorId);\n    } else {\n      this.describedBy.delete('error');\n    }\n\n    if (this.hint) {\n      this.describedBy.set('hint', this.hintId);\n    } else {\n      this.describedBy.delete('hint');\n    }\n\n    let currentDescribedBy = '';\n\n    currentDescribedBy += ` ${this.describedBy.get('original') || ''}`;\n    currentDescribedBy += ` ${this.describedBy.get('error') || ''}`;\n    currentDescribedBy += ` ${this.describedBy.get('hint') || ''}`;\n\n    if (this.input) this.input.setAttribute('aria-describedby', currentDescribedBy.trim());\n  }\n\n  render() {\n\n    return (\n      <Host\n        class={{\n          'alc-field': true,\n        }}\n      >\n        {\n          this.label\n            ?\n            <div> {/* Essa div faz o label desvincular-se da estrutura do flex, permitindo que seja mostrado inline, que é o natural */}\n              <label\n                class=\"alc-field__label\"\n                htmlFor={this.inputId}\n              >\n                {this.label}\n                {this.required\n                ?\n                  // aria-hidden porque o \"required\" do input já é suficiente para informar.\n                  <small aria-hidden=\"true\"> (obrigatório)</small>\n                :\n                  null\n                }\n              </label>\n            </div>\n            :\n            <slot name=\"label\"></slot>\n        }\n        <div class=\"alc-field__core\">\n          <slot></slot>\n          { this.errorMsg\n            ?\n              <small\n                class=\"alc-field__text alc-field__text--error\"\n                id={this.errorId}\n              >\n                {this.errorMsg}\n              </small>\n            :\n              null\n          }\n          { this.hint\n            ?\n              <small\n                class=\"alc-field__text\"\n                id={this.hintId}\n              >\n                {this.hint}\n              </small>\n            :\n              null\n          }\n        </div>\n\n      </Host>\n    );\n  }\n\n}\n", "/* CSS básico para que o componente funcione - sem dependências externas */", "/* Definição das variáveis - Setup dos temas*/\n\n\n/* CSS COMUM a todos os temas */\nalc-theme {\n  display: block;\n}\n\n.alc-theme__label {\n  @apply sr-only;\n}\n\n/*\n  Não tem problema em usar .alc-field__core aqui porque:\n  1. alc-theme está usando o componente alc-field, ou seja, um componente já \"conhece\" o outro, porque depende dele.\n  2. A classe alc-field__core faz parte da API pública de alc-field.\n */\n.alc-field__core .alc-theme__select {\n  /*\n    Isso foi feito para manter o visual adotado desde o início com o seletor de tema,\n    que não ocupa 100% da largura disponível, como acontece por padrão para os\n    campos de entrada usando o componente alc-field.\n  */\n  @apply w-auto;\n}\n", "import { Component, Host, h, State } from '@stencil/core';\nimport logger from '../utils/logger';\nimport { getAppliedTheme, setAppliedTheme, loadUserPreference, saveUserPreference, removeUserPreference } from '../utils/theme';\nimport { getUniqueId } from '../utils/getUniqueId';\nimport testAttributes from '../utils/testAttributes';\n\nconst NO_THEME = 0;\nconst LIGHT_THEME = 1;\nconst DARK_THEME = 2;\n\n@Component({\n  tag: 'alc-theme',\n  styleUrls: {\n    base: 'alc-theme-base.css',\n    theme: 'alc-theme.css'\n  },\n  scoped: false\n})\nexport class AlcTheme {\n\n  themeLink: HTMLLinkElement;\n  selectId: string;\n\n  @State() selectedTheme: number;\n\n  private change(theme: number) {\n\n    logger.log('changed to', theme);\n    switch (theme) {\n      case LIGHT_THEME:\n        setAppliedTheme('light');\n        saveUserPreference('light');\n        break;\n        case DARK_THEME:\n        setAppliedTheme('dark');\n        saveUserPreference('dark');\n        break;\n      default:\n        setAppliedTheme(getAppliedTheme('system'));\n        removeUserPreference();\n        break;\n    }\n    this.selectedTheme = theme;\n  }\n\n  private getSelectedValue(select: HTMLSelectElement): number {\n    return parseInt(select.selectedOptions[0].value);\n  }\n\n  componentWillLoad() {\n\n    const userPreference = loadUserPreference();\n    if (userPreference === 'light') {\n      this.selectedTheme = LIGHT_THEME;\n    }\n    else if (userPreference === 'dark') {\n      this.selectedTheme = DARK_THEME;\n    }\n    else {\n      this.selectedTheme = NO_THEME;\n    }\n    this.selectId = getUniqueId();\n  }\n\n  render() {\n\n    return (\n      <Host>\n        <alc-field>\n          {/* Label colocado como slot para poder ter seu visual personalizado (sr-only) */}\n          <label\n            htmlFor={this.selectId}\n            slot=\"label\"\n            class=\"alc-theme__label\"\n            {...testAttributes('data-test-label')}\n          >\n            Tema\n          </label>\n          <div>\n            <select\n              onChange={(e) => this.change(this.getSelectedValue(e.target as HTMLSelectElement))}\n              class=\"alc-theme__select\"\n              id={this.selectId}\n              {...testAttributes('data-test-select')}\n            >\n              <option value={NO_THEME} selected={this.selectedTheme === NO_THEME}>\n                Do Sistema\n                {this.selectedTheme === NO_THEME ? ' ✔' : ''}\n              </option>\n              <option value={LIGHT_THEME} selected={this.selectedTheme === LIGHT_THEME}>\n                Claro\n                {this.selectedTheme === LIGHT_THEME ? ' ✔' : ''}\n              </option>\n              <option value={DARK_THEME} selected={this.selectedTheme === DARK_THEME}>\n                Escuro\n                {this.selectedTheme === DARK_THEME ? ' ✔' : ''}\n              </option>\n            </select>\n          </div>\n        </alc-field>\n      </Host>\n    );\n  }\n\n}\n"],
  "mappings": "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",
  "names": ["alcFieldCss", "AlcField", "class_1", "hostRef", "this", "describedBy", "Map", "errorId", "hintId", "hint", "required", "errorMsg", "prototype", "watchErrorMsg", "newValue", "logger", "debug", "input", "slottedElement", "tagName", "mode", "getAttribute", "dropzoneElement", "querySelector", "classList", "add", "textInputElement", "buttonElement", "remove", "findInputElement", "element", "toLowerCase", "i", "children", "length", "found", "componentDidLoad", "r", "getUniqueId", "el", "id", "setAttribute", "inputId", "set", "label", "labelEl", "small", "document", "createElement", "innerText", "appendChild", "updateAriaDescribedBy", "componentWillRender", "delete", "currentDescribedBy", "concat", "get", "trim", "render", "h", "Host", "key", "class", "htmlFor", "name", "alcThemeBaseCss", "alcThemeCss", "NO_THEME", "LIGHT_THEME", "DARK_THEME", "AlcTheme", "change", "theme", "log", "setAppliedTheme", "saveUserPreference", "getAppliedTheme", "removeUserPreference", "selectedTheme", "getSelectedValue", "select", "parseInt", "selectedOptions", "value", "componentWillLoad", "userPreference", "loadUserPreference", "selectId", "_this", "Object", "assign", "slot", "testAttributes", "onChange", "e", "target", "selected"]
}
