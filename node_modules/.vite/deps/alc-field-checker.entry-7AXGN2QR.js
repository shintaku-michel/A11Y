import {
  getUniqueId
} from "./chunk-6E7TTPYM.js";
import {
  getElement,
  h,
  registerInstance
} from "./chunk-S4YNXM4D.js";
import "./chunk-7D4SUZUM.js";

// node_modules/alcance/dist/esm-es5/alc-field-checker.entry.js
var alcFieldCheckerCss = ".alc-field-checker{display:block}";
var AlcFieldChecker = function() {
  function e(e2) {
    var t = this;
    registerInstance(this, e2);
    this.idAlert = null;
    this.errorFields = [];
    this.checkOnSubmit = false;
    this.handleFormSubmit = function(e3) {
      t.checkAlcFields();
      if (t.errorFields.length > 0) {
        e3.preventDefault();
      }
    };
  }
  e.prototype.componentWillLoad = function() {
    this.idAlert = getUniqueId();
  };
  e.prototype.componentDidLoad = function() {
    var e2 = this;
    if (!this.checkOnSubmit) {
      this.checkAlcFields();
      this.observer = new MutationObserver(function() {
        return e2.checkAlcFields();
      });
      var t = this.hostElement.querySelectorAll("alc-field, alc-fieldset, alc-checkbox, alc-radio");
      t.forEach(function(t2) {
        return e2.observer.observe(t2, { attributes: true, childList: true, subtree: true });
      });
    } else {
      var r = this.hostElement.querySelector("form");
      if (r) {
        r.addEventListener("submit", this.handleFormSubmit);
      }
    }
  };
  e.prototype.disconnectedCallback = function() {
    var e2;
    (e2 = this.observer) === null || e2 === void 0 ? void 0 : e2.disconnect();
  };
  e.prototype.getFieldId = function(e2) {
    var t = e2.querySelector("input, textarea, select");
    return t ? t.getAttribute("id") : "";
  };
  e.prototype.isChildOfFieldset = function(e2) {
    return e2.closest("alc-fieldset") !== null;
  };
  e.prototype.getLabelText = function(e2) {
    var t = e2.querySelector("label");
    return t ? t.textContent.trim() : "";
  };
  e.prototype.checkAlcFields = function() {
    var e2 = this;
    var t = Array.from(this.hostElement.querySelectorAll("alc-field, alc-fieldset, alc-checkbox, alc-radio")).filter(function(t2) {
      if (t2.tagName.toLowerCase() === "alc-checkbox" || t2.tagName.toLowerCase() === "alc-radio") {
        return !e2.isChildOfFieldset(t2);
      }
      return true;
    });
    this.errorFields = t.filter(function(e3) {
      return e3.hasAttribute("error-msg") && e3.getAttribute("error-msg") !== "";
    }).map(function(t2) {
      var r = t2.tagName.toLowerCase() === "alc-checkbox" || t2.tagName.toLowerCase() === "alc-radio";
      var i = t2.tagName.toLowerCase() === "alc-fieldset";
      return { id: e2.getFieldId(t2), label: r ? e2.getLabelText(t2) : i ? t2.getAttribute("legend") : t2.getAttribute("label"), errorMsg: t2.getAttribute("error-msg") };
    });
  };
  e.prototype.render = function() {
    return h("div", { key: "0a9dfd4e96e62c36ef0cc1b9a3a82b943e0bfd9c", class: "alc-field-checker" }, this.errorFields.length > 0 && h("alc-alert", { key: "65030b9165d9c7909cafc0b22a5a1b456e27c768", id: this.idAlert, type: "warning", dismissible: false }, h("span", { key: "9db85f42ff4ea2ec8103cc501e5a602e1a592e04", class: "alc-alert__summary" }, "Atenção: Seu formulário contém ", this.errorFields.length, " ", this.errorFields.length > 1 ? "erros" : "erro"), h("ul", { key: "c724032a1d6eaa5a0cea7cef9f40d3d8be0069f3" }, this.errorFields.map(function(e2) {
      return h("li", null, h("a", { href: "#".concat(e2.id), class: "alc-link alc-link--color-text" }, h("strong", null, e2.label, ":"), " ", e2.errorMsg));
    }))), h("slot", { key: "72e09b858f27172b05f0df38c8c6f9dca12a0ae6" }));
  };
  Object.defineProperty(e.prototype, "hostElement", { get: function() {
    return getElement(this);
  }, enumerable: false, configurable: true });
  return e;
}();
AlcFieldChecker.style = alcFieldCheckerCss;
export {
  AlcFieldChecker as alc_field_checker
};
