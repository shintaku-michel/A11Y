{
  "version": 3,
  "sources": ["../../alcance/dist/esm-es5/src/components/alc-expander/alc-expander.css", "../../alcance/dist/esm-es5/src/components/alc-expander/alc-expander.tsx", "../../alcance/dist/esm-es5/src/components/alc-menu-item-theme/alc-menu-item-theme.css", "../../alcance/dist/esm-es5/src/components/alc-menu-item-theme/alc-menu-item-theme.tsx"],
  "sourcesContent": ["/* Container principal: transparente e com largura total */\n.alc-expander {\n  @apply bg-transparent w-full border-none m-0 p-0;\n}\n\n/* Summary padrão: alinhado à direita */\n.alc-expander__summary {\n  @apply flex items-center justify-end cursor-pointer list-none w-full p-2 bg-transparent border-none dark:shadow-[0px_4px_4px_0px_rgba(255,255,255,0.20)] shadow-[0px_4px_4px_0px_rgba(0,0,0,0.10)];;\n}\n\n/* Quando o summary deve centralizar o chevron (hideSummary true) */\n.alc-expander__summary--center {\n  @apply justify-center;\n}\n\n/* Container do label no summary */\n.alc-expander__label-container {\n  /* Mantém o alinhamento à esquerda quando o label é exibido */\n  @apply mr-auto;\n}\n\n/* Chevrons: renderizados inline */\n.alc-expander__chevron {\n  @apply h-6 shrink-0;\n}\n\n/* Conteúdo do expander */\n.alc-expander__content {\n  @apply bg-transparent w-full dark:shadow-[0px_4px_4px_0px_rgba(255,255,255,0.20)] shadow-[0px_4px_4px_0px_rgba(0,0,0,0.10)];\n}", "import {\n  Component,\n  Element,\n  Host,\n  h,\n  Prop,\n  Event,\n  EventEmitter,\n  Method,\n  Watch,\n  State,\n} from '@stencil/core';\nimport { getUniqueId } from '../utils/getUniqueId';\nimport logger from '../utils/logger';\n\n/**\n * @slot label - Slot para rótulo do controle. Há opção de adicionar apenas texto por meio da propriedade `label`.\n * Use esse recurso caso seja necessário alguma personalização no HTML referente ao rótulo.\n * Não inclua headings (`h1`, `h2` etc.) nem elementos interativos (`a`, `button`, `input` etc.) nesse slot.\n * @slot DEFAULT  - Slot para o conteúdo do expander.\n*/\n\n@Component({\n  tag: 'alc-expander',\n  styleUrl: 'alc-expander.css',\n  shadow: false,\n})\nexport class AlcExpander {\n  @Element() element!: HTMLElement;\n  private expanderId: string = getUniqueId();\n\n  /**\n   * Rótulo do elemento que controla a abertura e o fechamento do expander.\n   */\n  @Prop({ reflect: true }) label!: string;\n\n  /**\n   * Define se o expander está aberto ou fechado.\n   */\n  @Prop({ reflect: true, mutable: true }) open: boolean = false;\n\n  /**\n   * Oculta o rótulo do controle, mantendo-o acessível para leitores de tela.\n   */\n  @Prop({ reflect: true }) hideLabel: boolean = false;\n\n  @State() isOpen: boolean = this.open;\n\n  /**\n   * Evento disparado antes de abrir. Cancelável.\n   */\n  @Event({ eventName: 'alc-show', cancelable: true, bubbles: true })\n  alcShow: EventEmitter<void>;\n\n  /**\n   * Evento disparado após abrir.\n   */\n  @Event({ eventName: 'alc-after-show', bubbles: true })\n  alcAfterShow: EventEmitter<void>;\n\n  /**\n   * Evento disparado antes de fechar. Cancelável.\n   */\n  @Event({ eventName: 'alc-hide', cancelable: true, bubbles: true })\n  alcHide: EventEmitter<void>;\n\n  /**\n   * Evento disparado após fechar.\n   */\n  @Event({ eventName: 'alc-after-hide', bubbles: true })\n  alcAfterHide: EventEmitter<void>;\n\n  @Watch('open')\n  syncOpen(newValue: boolean) {\n    this.isOpen = newValue;\n  }\n\n  componentWillLoad() {\n    this.isOpen = this.open;\n  }\n\n  private toggleExpander = async (event: Event) => {\n    event.preventDefault(); // previne comportamento nativo de abrir imediatamente\n\n    if (!this.isOpen) {\n      await this.show();\n    } else {\n      await this.hide();\n    }\n  };\n\n  /**\n   * Abre o expander programaticamente.\n   */\n  @Method()\n  async show(): Promise<void> {\n    if (!this.isOpen) {\n      const showEvent = this.alcShow.emit();\n      if (showEvent.defaultPrevented) return;\n      this.isOpen = true;\n      this.open = true;\n      this.alcAfterShow.emit();\n    }\n  }\n\n  /**\n   * Fecha o expander programaticamente.\n   */\n  @Method()\n  async hide(): Promise<void> {\n    if (this.isOpen) {\n      const hideEvent = this.alcHide.emit();\n      if (hideEvent.defaultPrevented) return;\n      this.isOpen = false;\n      this.open = false;\n      this.alcAfterHide.emit();\n    }\n  }\n\n  private renderChevron() {\n    const iconName = this.isOpen ? 'chevron-up' : 'chevron-down';\n    return (\n      <alc-icon\n        name={iconName}\n        label=\"\"\n        class=\"alc-expander__chevron\"\n      ></alc-icon>\n    );\n  }\n\n  render() {\n    this.label ?? logger.report('label', this.element.tagName.toLowerCase(), this.element);\n    \n    const labelContent = (\n      <div\n        class={{\n          'alc-expander__label-container': true,\n          'sr-only': this.hideLabel,\n        }}\n      >\n        <slot name=\"label\">{this.label}</slot>\n      </div>\n    );\n\n    const summaryClasses = {\n      'alc-expander__summary': true,\n      'alc-expander__summary--center': this.hideLabel,\n    };\n\n    return (\n      <Host>\n        <details\n          id={this.expanderId}\n          class={{\n            'alc-expander': true,\n            'is-open': this.isOpen,\n          }}\n          open={this.isOpen}\n        >\n          <summary\n            class={summaryClasses}\n            onClick={this.toggleExpander}\n          >\n            {labelContent}\n            {this.renderChevron()}\n          </summary>\n          <div class=\"alc-expander__content\">\n            <slot></slot>\n          </div>\n        </details>\n      </Host>\n    );\n  }\n}", null, "import { Component, Host, Listen, State, h } from '@stencil/core';\nimport { getAppliedTheme, setAppliedTheme, loadUserPreference, saveUserPreference } from '../utils/theme';\n\n@Component({\n  tag: 'alc-menu-item-theme',\n  styleUrl: 'alc-menu-item-theme.css',\n  shadow: false,\n})\nexport class AlcMenuItemTheme {\n  // Estado para controlar se o tema escuro está ativado\n  @State() checked: boolean = false;\n\n  // Constantes para os temas\n  private readonly DARK_THEME = 'dark';\n  private readonly LIGHT_THEME = 'light';\n\n  // Listener para o evento 'alc-select', alterna o tema entre claro e escuro.\n  @Listen('alc-select')\n  handleClick(): void {\n    this.toggleTheme();\n  }\n\n  // Alterna o tema entre claro e escuro.\n  private toggleTheme(): void {\n    this.checked = !this.checked;\n    const theme = this.checked ? this.DARK_THEME : this.LIGHT_THEME;\n    setAppliedTheme(theme);\n    saveUserPreference(theme);\n  }\n\n  // Define o estado inicial do tema com base na preferência do usuário ou no tema do sistema.\n  componentWillLoad(): void {\n    const userPreference = loadUserPreference();\n\n    switch (userPreference) {\n      case this.LIGHT_THEME:\n        this.checked = false;\n        break;\n      case this.DARK_THEME:\n        this.checked = true;\n        break;\n      default:\n        // Se o tema do sistema for dark, então checked 'true' se não 'false'.\n        this.checked = getAppliedTheme('system') === this.DARK_THEME;\n        break;\n    }\n  }\n\n\n  render() {\n    return (\n      <Host>\n        <alc-menu-item type=\"checkbox\" checked={this.checked}>\n          <alc-icon icon=\"moon\" label=\"\" slot=\"prefix\"></alc-icon>\n          Ver no tema escuro\n        </alc-menu-item>\n      </Host>\n    );\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,iBAAiB;AAAA,IC2BVC,cAAW,WAAA;AALxB,WAAAC,EAAAC,IAAAA;AAAA,QAAAC,IAAAC;AAAAA,qBAAAA,MAAAA,EAAAA;AAAAA,SAAAA,UAAAA,YAAAA,MAAAA,YAAAA,CAAAA;AAAAA,SAAAA,eAAAA,YAAAA,MAAAA,kBAAAA,CAAAA;AAAAA,SAAAA,UAAAA,YAAAA,MAAAA,YAAAA,CAAAA;AAAAA,SAAAA,eAAAA,YAAAA,MAAAA,kBAAAA,CAAAA;AAOUA,SAAUC,aAAWC,YAAAA;AAUWF,SAAIG,OAAY;AAK/BH,SAASI,YAAY;AAErCJ,SAAAK,SAAkBL,KAAKG;AAmCxBH,SAAAM,iBAAiB,SAAOC,IAAAA;AAAY,aAAAC,UAAAT,GAAAA,QAAA,QAAA,WAAA;AAAA,eAAA,YAAA,MAAA,SAAAU,IAAA;AAAA,kBAAAA,GAAA,OAAA;YAAA,KAAA;AAC1CF,cAAAA,GAAMG,eAAAA;AAAAA,kBAAAA,CAAAA,CAEDV,KAAKK,OAAN,QAAA,CAAA,GAAA,CAAA;AACF,qBAAA,CAAA,GAAML,KAAKW,KAAAA,CAAAA;YAAAA,KAAAA;AAAXC,cAAAA,GAAAC,KAAAA;AAAAA,qBAAAA,CAAAA,GAAAA,CAAAA;YAAAA,KAAAA;AAEA,qBAAA,CAAA,GAAMb,KAAKc,KAAAA,CAAAA;YAAAA,KAAAA;AAAXF,cAAAA,GAAAC,KAAAA;AAAAA,cAAAA,GAAAA,QAAAA;YAAAA,KAAAA;AAAAA,qBAAAA,CAAAA,CAAAA;UAAAA;QAAAA,CAAAA;MAAAA,CAAAA;IAAAA;EAsFL;AApGChB,IAAAkB,UAAAC,WAAA,SAASC,IAAAA;AACPjB,SAAKK,SAASY;EAAAA;AAGhBpB,IAAAkB,UAAAG,oBAAA,WAAA;AACElB,SAAKK,SAASL,KAAKG;EAAAA;AAiBfN,IAAAkB,UAAAJ,OAAN,WAAA;AAAA,WAAA,UAAA,MAAA,QAAA,QAAA,WAAA;AAAA,UAAAQ;AAAA,aAAA,YAAA,MAAA,SAAA,GAAA;AACE,YAAA,CAAKnB,KAAKK,QAAQ;AACVe,UAAAA,KAAYpB,KAAKqB,QAAQC,KAAAA;AAC/B,cAAIF,GAAUG,iBAAkB,QAAA,CAAA,CAAA;AAChCvB,eAAKK,SAAS;AACdL,eAAKG,OAAO;AACZH,eAAKwB,aAAaF,KAAAA;QAAAA;AAAAA,eAAAA,CAAAA,CAAAA;MAAAA,CAAAA;IAAAA,CAAAA;EAAAA;AAQhBzB,IAAAkB,UAAAD,OAAN,WAAA;AAAA,WAAA,UAAA,MAAA,QAAA,QAAA,WAAA;AAAA,UAAAK;AAAA,aAAA,YAAA,MAAA,SAAA,GAAA;AACE,YAAInB,KAAKK,QAAQ;AACToB,UAAAA,KAAYzB,KAAK0B,QAAQJ,KAAAA;AAC/B,cAAIG,GAAUF,iBAAkB,QAAA,CAAA,CAAA;AAChCvB,eAAKK,SAAS;AACdL,eAAKG,OAAO;AACZH,eAAK2B,aAAaL,KAAAA;QAAAA;AAAAA,eAAAA,CAAAA,CAAAA;MAAAA,CAAAA;IAAAA,CAAAA;EAAAA;AAIdzB,IAAAkB,UAAAa,gBAAA,WAAA;AACN,QAAMC,KAAW7B,KAAKK,SAAS,eAAe;AAC9C,WACEyB,EAAA,YAAA,EACEC,MAAMF,IACNG,OAAM,IACNC,OAAM,wBAAA,CAAA;EAAA;AAKZpC,IAAAkB,UAAAmB,SAAA,WAAA;AAAA,QAAAf;AAAA,KACEgB,KAAAnC,KAAKgC,WAAK,QAAAG,OAAAA,SAAAA,KAAIC,OAAOC,OAAO,SAASrC,KAAKsC,QAAQC,QAAQC,YAAAA,GAAexC,KAAKsC,OAAAA;AAE9E,QAAMG,IACJX,EAAA,OAAA,EAAAY,KAAA,4CACET,OAAO,EACL,iCAAiC,MACjC,WAAWjC,KAAKI,UAAAA,EAAAA,GAGlB0B,EAAM,QAAA,EAAAY,KAAA,4CAAAX,MAAK,QAAA,GAAS/B,KAAKgC,KAAAA,CAAAA;AAI7B,QAAMW,IAAiB,EACrB,yBAAyB,MACzB,iCAAiC3C,KAAKI,UAAAA;AAGxC,WACE0B,EAACc,MAAI,EAAAF,KAAA,2CAAA,GACHZ,EAAA,WAAA,EAAAY,KAAA,4CACEG,IAAI7C,KAAKC,YACTgC,OAAO,EACL,gBAAgB,MAChB,WAAWjC,KAAKK,OAAAA,GAElBF,MAAMH,KAAKK,OAAAA,GAEXyB,EACE,WAAA,EAAAY,KAAA,4CAAAT,OAAOU,GACPG,SAAS9C,KAAKM,eAAAA,GAEbmC,GACAzC,KAAK4B,cAAAA,CAAAA,GAERE,EAAK,OAAA,EAAAY,KAAA,4CAAAT,OAAM,wBAAA,GACTH,EAAA,QAAA,EAAAY,KAAA,2CAAA,CAAA,CAAA,CAAA,CAAA;EAAA;AAAA,SAAA,eAAA,EAAA,WAAA,WAAA,EAAA,KAAA,WAAA;AAAA,WAAA,WAAA,IAAA;EAAA,GAAA,YAAA,OAAA,cAAA,KAAA,CAAA;AAAA,SAAA,eAAA,GAAA,YAAA,EAAA,KAAA,WAAA;AAAA,WAAA,EAAA,MAAA,CAAA,UAAA,EAAA;EAAA,GAAA,YAAA,OAAA,cAAA,KAAA,CAAA;AAAA,SAAA;AAAA,EA5IY;AAAA,YAAA,QAAA;AC3BxB,IAAMK,sBAAsB;AAAA,ICQfC,mBAAgB,WAAA;AAL7B,WAAAA,EAAAlD,IAAAA;AAAAA,qBAAAA,MAAAA,EAAAA;AAOWE,SAAOiD,UAAY;AAGXjD,SAAUkD,aAAG;AACblD,SAAWmD,cAAG;EA6ChC;AAzCCH,IAAAjC,UAAAqC,cAAA,WAAA;AACEpD,SAAKqD,YAAAA;EAAAA;AAICL,IAAAjC,UAAAsC,cAAA,WAAA;AACNrD,SAAKiD,UAAAA,CAAWjD,KAAKiD;AACrB,QAAMK,KAAQtD,KAAKiD,UAAUjD,KAAKkD,aAAalD,KAAKmD;AACpDI,oBAAgBD,EAAAA;AAChBE,uBAAmBF,EAAAA;EAAAA;AAIrBN,IAAAjC,UAAAG,oBAAA,WAAA;AACE,QAAMuC,KAAiBC,mBAAAA;AAEvB,YAAQD,IAAAA;MACN,KAAKzD,KAAKmD;AACRnD,aAAKiD,UAAU;AACf;MACF,KAAKjD,KAAKkD;AACRlD,aAAKiD,UAAU;AACf;MACF;AAEEjD,aAAKiD,UAAUU,gBAAgB,QAAA,MAAc3D,KAAKkD;AAClD;IAAA;EAAA;AAKNF,IAAAjC,UAAAmB,SAAA,WAAA;AACE,WACEJ,EAACc,MAAI,EAAAF,KAAA,2CAAA,GACHZ,EAAe,iBAAA,EAAAY,KAAA,4CAAAkB,MAAK,YAAWX,SAASjD,KAAKiD,QAAAA,GAC3CnB,EAAU,YAAA,EAAAY,KAAA,4CAAAmB,MAAK,QAAO7B,OAAM,IAAG8B,MAAK,SAAA,CAAA,GAEtB,oBAAA,CAAA;EAAA;AAAA,SAAA;AAAA,EA/CK;AAAA,iBAAA,QAAA;",
  "names": ["alcExpanderCss", "AlcExpander", "class_1", "hostRef", "_this", "this", "expanderId", "getUniqueId", "open", "hideLabel", "isOpen", "toggleExpander", "event", "__awaiter", "t", "preventDefault", "show", "_b", "sent", "hide", "prototype", "syncOpen", "newValue", "componentWillLoad", "e", "showEvent", "alcShow", "emit", "defaultPrevented", "alcAfterShow", "hideEvent", "alcHide", "alcAfterHide", "renderChevron", "iconName", "h", "name", "label", "class", "render", "_a", "logger", "report", "element", "tagName", "toLowerCase", "labelContent", "key", "summaryClasses", "Host", "id", "onClick", "alcMenuItemThemeCss", "AlcMenuItemTheme", "checked", "DARK_THEME", "LIGHT_THEME", "handleClick", "toggleTheme", "theme", "setAppliedTheme", "saveUserPreference", "userPreference", "loadUserPreference", "getAppliedTheme", "type", "icon", "slot"]
}
