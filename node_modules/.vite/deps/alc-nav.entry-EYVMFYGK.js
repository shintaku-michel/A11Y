import {
  logger
} from "./chunk-F2BFVVNU.js";
import {
  getUniqueId
} from "./chunk-6E7TTPYM.js";
import {
  Host,
  getElement,
  h,
  registerInstance
} from "./chunk-S4YNXM4D.js";
import "./chunk-7D4SUZUM.js";

// node_modules/alcance/dist/esm-es5/alc-nav.entry.js
var __awaiter = function(a, e, t, n) {
  function r(a2) {
    return a2 instanceof t ? a2 : new t(function(e2) {
      e2(a2);
    });
  }
  return new (t || (t = Promise))(function(t2, l) {
    function i(a2) {
      try {
        o(n.next(a2));
      } catch (a3) {
        l(a3);
      }
    }
    function c(a2) {
      try {
        o(n["throw"](a2));
      } catch (a3) {
        l(a3);
      }
    }
    function o(a2) {
      a2.done ? t2(a2.value) : r(a2.value).then(i, c);
    }
    o((n = n.apply(a, e || [])).next());
  });
};
var __generator = function(a, e) {
  var t = { label: 0, sent: function() {
    if (l[0] & 1) throw l[1];
    return l[1];
  }, trys: [], ops: [] }, n, r, l, i;
  return i = { next: c(0), throw: c(1), return: c(2) }, typeof Symbol === "function" && (i[Symbol.iterator] = function() {
    return this;
  }), i;
  function c(a2) {
    return function(e2) {
      return o([a2, e2]);
    };
  }
  function o(c2) {
    if (n) throw new TypeError("Generator is already executing.");
    while (i && (i = 0, c2[0] && (t = 0)), t) try {
      if (n = 1, r && (l = c2[0] & 2 ? r["return"] : c2[0] ? r["throw"] || ((l = r["return"]) && l.call(r), 0) : r.next) && !(l = l.call(r, c2[1])).done) return l;
      if (r = 0, l) c2 = [c2[0] & 2, l.value];
      switch (c2[0]) {
        case 0:
        case 1:
          l = c2;
          break;
        case 4:
          t.label++;
          return { value: c2[1], done: false };
        case 5:
          t.label++;
          r = c2[1];
          c2 = [0];
          continue;
        case 7:
          c2 = t.ops.pop();
          t.trys.pop();
          continue;
        default:
          if (!(l = t.trys, l = l.length > 0 && l[l.length - 1]) && (c2[0] === 6 || c2[0] === 2)) {
            t = 0;
            continue;
          }
          if (c2[0] === 3 && (!l || c2[1] > l[0] && c2[1] < l[3])) {
            t.label = c2[1];
            break;
          }
          if (c2[0] === 6 && t.label < l[1]) {
            t.label = l[1];
            l = c2;
            break;
          }
          if (l && t.label < l[2]) {
            t.label = l[2];
            t.ops.push(c2);
            break;
          }
          if (l[2]) t.ops.pop();
          t.trys.pop();
          continue;
      }
      c2 = e.call(a, t);
    } catch (a2) {
      c2 = [6, a2];
      r = 0;
    } finally {
      n = l = 0;
    }
    if (c2[0] & 5) throw c2[1];
    return { value: c2[0] ? c2[1] : void 0, done: true };
  }
};
function childText(a) {
  return a ? [].slice.call(a.childNodes).filter(function(a2) {
    return a2.nodeType === Node.TEXT_NODE;
  }).map(function(a2) {
    return a2.nodeValue.trim();
  }).join(" ") : "";
}
function createIcon(a, e) {
  var t = document.createElement("alc-icon");
  t.setAttribute("name", a);
  t.setAttribute("label", e ? e : "");
  return t;
}
var alcNavCss = 'alc-nav{display:block;--spacing-x:var(--alc-spacing-06);--border-width-selected:var(--alc-spacing-03);--border-color-selected:var(--alc-color-neutral-50);--padding-left-selected:calc(var(--spacing-x) - var(--border-width-selected))}[data-alc-theme="light"] alc-nav{--icon-color:var(--alc-color-neutral-50);--bg-color-selected:var(--alc-color-neutral-10)}[data-alc-theme="dark"] alc-nav{--icon-color:var(--alc-color-neutral-40);--bg-color-selected:var(--alc-color-neutral-90)}.alc-nav__panel{display:none}.alc-nav__panel--subpanel{padding-top:1rem;padding-bottom:1rem}.alc-nav__panel.is-open{display:block}.alc-nav__header{padding-top:1rem;padding-bottom:1rem;border-bottom-width:1px;border-color:var(--alc-color-neutral-40)}.alc-nav__main{padding-top:1rem;padding-bottom:1rem}.alc-nav__footer{padding-top:1rem;padding-bottom:1rem;border-top-width:1px;border-color:var(--alc-color-neutral-40)}.alc-nav__label-wrapper{margin-top:1.5rem;padding-left:var(--spacing-x);padding-right:var(--spacing-x)}.alc-nav__label{font-size:0.75rem;line-height:1rem;font-weight:700;text-transform:uppercase;letter-spacing:0.15rem;color:var(--alc-color-text-3)}.alc-nav__label:is([data-alc-theme="dark"] *){color:var(--alc-color-text-2)}.alc-nav__listview{margin-top:0.5rem}.alc-nav__listview--labelled{margin-top:1rem}.alc-nav__listitem{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;gap:0.5rem}.alc-nav__text{width:100%;padding-left:var(--spacing-x);padding-right:var(--spacing-x);padding-top:1rem;padding-bottom:1rem;color:var(--alc-color-link-text)}.alc-nav__text:hover{color:var(--alc-color-text-2)}.alc-nav__text:hover:is([data-alc-theme="dark"] *){color:var(--alc-color-text-0)}.alc-nav__text:hover{background-color:var(--alc-color-neutral-5)}.alc-nav__text:hover:is([data-alc-theme="dark"] *){background-color:var(--alc-color-neutral-80)}.alc-nav__listitem.is-selected .alc-nav__text{border-left-color:var(--border-color-selected);background-color:var(--bg-color-selected);padding-left:var(--padding-left-selected);border-left-width:var(--border-width-selected)}.alc-nav__listitem.is-selected .alc-nav__text:hover{background-color:var(--alc-color-neutral-5)}.alc-nav__listitem.is-selected .alc-nav__text:hover:is([data-alc-theme="dark"] *){background-color:var(--alc-color-neutral-80)}.alc-nav__navbar{margin-left:var(--spacing-x);margin-right:var(--spacing-x);display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}.alc-nav__navbar-title{-ms-flex-positive:1;flex-grow:1;text-align:center;font-weight:500;text-transform:uppercase;color:var(--alc-color-text-3)}.alc-nav__navbar-title:is([data-alc-theme="dark"] *){color:var(--alc-color-text-0)}.alc-nav__button--next{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:justify;justify-content:space-between;gap:0.5rem}.alc-nav__icon--next{color:var(--icon-color)}.alc-nav__icon--prev{font-size:2rem;line-height:2.5rem;color:var(--alc-color-link-text)}';
var AlcNav = function() {
  function a(a2) {
    registerInstance(this, a2);
  }
  a.prototype.openPanel = function(a2) {
    if (!a2) {
      return;
    }
    logger.debug("open", { panel: a2 });
    a2 = a2.closest(".alc-nav__panel");
    var e = Array.from(this.panels.children).filter(function(a3) {
      return a3.matches(".is-open");
    })[0];
    if (a2.matches(".alc-nav__panel--parent") && e) {
      e.classList.add("alc-nav__panel--highest");
    }
    var t = ["is-open", "mm-panel--parent"];
    var n = [];
    Array.from(this.panels.children).filter(function(a3) {
      return a3.matches(".alc-nav__panel");
    }).forEach(function(r2) {
      var l2, i;
      (l2 = r2.classList).add.apply(l2, n);
      (i = r2.classList).remove.apply(i, t);
      if (r2 !== e) {
        r2.classList.remove("alc-nav__panel--highest");
      }
      if (r2 === a2) {
        r2.removeAttribute("inert");
      } else {
        r2.setAttribute("inert", "true");
      }
    });
    a2.classList.add("is-open");
    var r = this.panels.querySelector("#".concat(a2.dataset.alcParent));
    while (r) {
      r = r.closest(".alc-nav__panel");
      r.classList.add("alc-nav__panel--parent");
      r = this.panels.querySelector("#".concat(r.dataset.alcParent));
    }
    this.focusableItems = Array.from(this.el.querySelectorAll(".alc-nav__panel.is-open .alc-nav__listview a"));
    this.focusableItems[0].focus();
    var l = Array.from(this.el.querySelectorAll(".alc-nav__panel.is-open .alc-nav__listitem"));
    l.forEach(function(a3) {
      if (a3.id === (e === null || e === void 0 ? void 0 : e.dataset.alcParent)) {
        logger.debug("focus on", a3, a3.id);
        a3.querySelector("a").focus();
      }
    });
  };
  a.prototype.closePanel = function(a2) {
    logger.debug("close", { panel: a2 });
  };
  a.prototype.togglePanel = function(a2) {
    return __awaiter(this, void 0, void 0, function() {
      var e;
      return __generator(this, function(t) {
        e = a2.parentElement;
        if (e.classList.contains("is-open")) {
          logger.debug("will close", a2);
          this.closePanel(a2);
        } else {
          logger.debug("will open", a2);
          this.openPanel(a2);
        }
        return [2];
      });
    });
  };
  a.prototype.setSelectedItem = function(a2) {
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(e) {
        this.el.querySelectorAll(".alc-nav__listitem.is-selected").forEach(function(a3) {
          a3.classList.remove("is-selected");
          a3.removeAttribute("data-alc-selected");
        });
        if (a2) {
          a2.classList.add("is-selected");
          a2.setAttribute("data-alc-selected", "true");
        }
        return [2];
      });
    });
  };
  a.prototype.setSelected = function(a2) {
    this.menu.querySelectorAll(".alc-nav__listitem--selected").forEach(function(a3) {
      a3.classList.remove("alc-nav__listitem--selected");
    });
    a2.classList.add("alc-nav__listitem--selected");
  };
  a.prototype.initMenu = function() {
    var a2 = this;
    this.menu.id = this.menu.id || getUniqueId();
    var e = Array.from(this.menu.children).filter(function(a3) {
      return a3.matches("[data-alc-panel]");
    });
    logger.debug({ panels: e });
    this.panels = document.createElement("div");
    this.panels.classList.add("alc-nav__panels");
    this.menu.append(this.panels);
    e.forEach(function(e2) {
      a2.initPanel(e2);
    });
  };
  a.prototype.initPanels = function() {
    var a2 = this;
    this.menu.addEventListener("click", function(e) {
      var t, n;
      var r = ((n = (t = e.target) === null || t === void 0 ? void 0 : t.closest("a[href]")) === null || n === void 0 ? void 0 : n.getAttribute("href")) || "";
      if (r.slice(0, 1) === "#") {
        try {
          var l = a2.el.querySelector(r);
          if (l) {
            e.preventDefault();
            a2.togglePanel(l);
          }
        } catch (a3) {
        }
      }
    }, { capture: true });
  };
  a.prototype.initPanel = function(a2) {
    var e = this;
    var t, n;
    if (a2.matches(".alc-nav__panel")) {
      return;
    }
    logger.debug({ panel: a2 });
    a2.id = a2.id || getUniqueId();
    a2.classList.add("alc-nav__panel");
    this.panels.append(a2);
    this.initNavbar(a2);
    Array.from(a2.children).filter(function(a3) {
      return a3.matches("ol, ul");
    }).forEach(function(a3) {
      e.initListview(a3);
    });
    Array.from(this.main.children).filter(function(a3) {
      return a3.matches("ol, ul");
    }).forEach(function(a3) {
      e.initListview(a3);
    });
    if ((t = this.header) === null || t === void 0 ? void 0 : t.children) {
      Array.from(this.header.children).filter(function(a3) {
        return a3.matches("ol, ul");
      }).forEach(function(a3) {
        e.initListview(a3);
      });
    }
    if ((n = this.footer) === null || n === void 0 ? void 0 : n.children) {
      Array.from(this.footer.children).filter(function(a3) {
        return a3.matches("ol, ul");
      }).forEach(function(a3) {
        e.initListview(a3);
      });
    }
    return a2;
  };
  a.prototype.initNavbar = function(a2) {
    if (Array.from(a2.children).some(function(a3) {
      return a3.matches(".alc-nav__navbar");
    })) {
      return;
    }
    var e = null;
    var t = null;
    if (a2.dataset.alcParent) {
      e = this.panels.querySelector("#".concat(a2.dataset.alcParent));
      t = e.closest(".alc-nav__panel");
      while (t.closest(".alc-nav__listitem")) {
        t = t.parentElement.closest(".alc-nav__panel");
      }
    }
    var n = document.createElement("div");
    n.classList.add("alc-nav__navbar");
    if (t) {
      var r = document.createElement("a");
      r.classList.add("alc-nav__button", "alc-nav__button--prev");
      var l = childText(t.querySelector(".alc-nav__navbar-title"));
      var i = l ? "Voltar para ".concat(l) : "Voltar para navegação principal";
      var c = createIcon("arrow-left-short", i);
      c.classList.add("alc-nav__icon--prev");
      r.href = "#".concat(t.id);
      r.append(c);
      n.append(r);
    } else {
      return;
    }
    var o = null;
    if (e) {
      o = Array.from(e.children).filter(function(a3) {
        return a3.matches(".alc-nav__text");
      })[0];
    } else if (t) {
      o = t.querySelector("a[href=#".concat(a2.id, "]"));
    }
    var s = document.createElement("span");
    s.classList.add("alc-nav__navbar-title");
    s.innerHTML = childText(o) || "";
    a2.prepend(n);
    n.append(s);
  };
  a.prototype.initListview = function(a2) {
    var e = this;
    if (a2.matches(".alc-nav__listview")) {
      return;
    }
    a2.classList.add("alc-nav__listview");
    var t = a2.previousElementSibling;
    var n = t ? "alcLabel" in t.dataset : false;
    if (n) {
      a2.classList.add("alc-nav__listview--labelled");
      var r = document.createElement("div");
      r.classList.add("alc-nav__label-wrapper");
      a2.parentElement.insertBefore(r, t);
      r.insertBefore(t, null);
      t.classList.add("alc-nav__label");
      t.id = t.id || getUniqueId();
      a2.setAttribute("aria-labelledby", t.id);
    }
    Array.from(a2.children).forEach(function(a3) {
      e.initListitem(a3);
    });
  };
  a.prototype.initListitem = function(a2) {
    var e = this;
    if (a2.matches(".alc-nav__listitem")) {
      return;
    }
    a2.classList.add("alc-nav__listitem");
    if (a2.hasAttribute("data-alc-selected")) {
      a2.classList.add("is-selected");
    }
    Array.from(a2.children).filter(function(a3) {
      return a3.matches("a, span");
    }).forEach(function(a3) {
      return a3.classList.add("alc-nav__text");
    });
    Array.from(a2.children).filter(function(a3) {
      return a3.matches("[data-alc-panel]");
    }).forEach(function(a3) {
      return e.initSubPanel(a3);
    });
  };
  a.prototype.initSubPanel = function(a2) {
    if (a2.matches(".alc-nav__panel")) {
      return;
    }
    var e = a2.parentElement;
    e.id = e.id || getUniqueId();
    a2.id = a2.id || getUniqueId();
    e.dataset.alcChild = a2.id;
    a2.dataset.alcParent = e.id;
    a2.role = "dialog";
    a2.setAttribute("aria-labelledby", e.id);
    a2.classList.add("alc-nav__panel--subpanel");
    var t = Array.from(e.children).filter(function(a3) {
      return a3.matches(".alc-nav__button");
    })[0];
    if (!t) {
      t = document.createElement("a");
      t.classList.add("alc-nav__button", "alc-nav__button--next");
      t.setAttribute("aria-expanded", "false");
    }
    var n = createIcon("chevron-right");
    n.setAttribute("aria-hidden", "true");
    n.classList.add("alc-nav__icon--next");
    Array.from(e.children).filter(function(a3) {
      return a3.matches("a, span");
    }).forEach(function(a3) {
      if (a3.matches("span")) {
        t.classList.add("alc-nav__text");
        t.innerHTML = a3.innerHTML;
        e.insertBefore(t, a3.nextElementSibling);
        a3.remove();
      } else {
        e.insertBefore(t, a3.nextElementSibling);
      }
    });
    t.href = "#".concat(a2.id);
    t.append(n);
    this.initPanel(a2);
  };
  a.prototype.initOpened = function() {
    var a2 = this.panels.querySelector(".alc-nav__listitem--selected");
    var e = this.panels.querySelector(".alc-nav__panel");
    if (a2) {
      this.setSelected(a2);
      e = a2.closest(".alc-nav__panel");
    }
    var t = this.el.querySelector(".alc-nav__listitem[data-alc-selected]");
    if (t) {
      this.setSelectedItem(t);
    }
    this.openPanel(e);
  };
  a.prototype.observeNavLinks = function() {
    var a2 = Array.from(this.el.querySelectorAll(".alc-nav__listview a, .alc-nav__listview router-link"));
    a2.forEach(function(a3) {
      var e = new MutationObserver(function(e2) {
        e2.forEach(function(e3) {
          if (e3.attributeName === "class") {
            if (!a3.classList.contains("alc-nav__text")) {
              a3.classList.add("alc-nav__text");
            }
          }
        });
      });
      e.observe(a3, { attributes: true, attributeFilter: ["class"] });
    });
  };
  a.prototype.componentDidLoad = function() {
    this.isMobile = window.innerWidth < 768;
    this.emitNavContent(this.isMobile);
  };
  a.prototype.componentDidRender = function() {
    this.initMenu();
    this.initPanels();
    this.initOpened();
    this.focusableItems = Array.from(this.el.querySelectorAll(".alc-nav__panel.is-open .alc-nav__listview a"));
    this.observeNavLinks();
  };
  a.prototype.componentWillLoad = function() {
    this.header = this.el.querySelector("[slot='header']");
    this.footer = this.el.querySelector("[slot='footer']");
  };
  a.prototype.handleWindowResize = function() {
    var a2 = window.innerWidth < 768;
    if (a2 !== this.isMobile) {
      this.isMobile = a2;
      this.emitNavContent(this.isMobile);
    }
  };
  a.prototype.emitNavContent = function(a2) {
    this.el.dispatchEvent(new CustomEvent("alc-nav-content", { detail: { navEl: this.el, isMobile: a2 }, bubbles: true, composed: true }));
  };
  a.prototype.handleKeyDown = function(a2) {
    var e = Array.from(this.panels.children).filter(function(a3) {
      return a3.matches(".is-open");
    })[0];
    var t = e === null || e === void 0 ? void 0 : e.hasAttribute("data-alc-parent");
    if (a2.key === "Escape" && t) {
      var n = e.querySelector(".alc-nav__button--prev");
      if (n) {
        n.click();
      }
      a2.preventDefault();
    }
  };
  a.prototype.render = function() {
    var a2 = this;
    return h(Host, { key: "4869774167e9dd1f9b2b7e21a8c164c331086398", class: { "alc-nav": true, "alc-nav__wrapper": true } }, h("nav", { key: "66fdea76c8704b5630205260fdf370f3c3d47ad0", ref: function(e) {
      return a2.menu = e;
    }, class: "alc-nav__menu" }, h("div", { key: "ea80376803eb2b26bea0d0f827892146be384b4d", "data-alc-panel": true }, this.header ? h("div", { class: "alc-nav__header" }, h("slot", { name: "header" })) : null, h("div", { key: "dced630d3b584b25efb5f69b78d60baad2ccc21c", class: "alc-nav__main", ref: function(e) {
      return a2.main = e;
    } }, h("slot", { key: "1be8b67e85921d8315102090094416ab9d333ce8" })), this.footer ? h("div", { class: "alc-nav__footer" }, h("slot", { name: "footer" })) : null)));
  };
  Object.defineProperty(a.prototype, "el", { get: function() {
    return getElement(this);
  }, enumerable: false, configurable: true });
  return a;
}();
AlcNav.style = alcNavCss;
export {
  AlcNav as alc_nav
};
