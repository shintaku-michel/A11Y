{
  "version": 3,
  "sources": ["../../alcance/dist/esm-es5/src/components/functional/table.tsx"],
  "sourcesContent": ["import { FunctionalComponent } from '@stencil/core';\n\nfunction setCssClasses(table: HTMLTableElement) {\n  let headerRows = table.querySelectorAll('thead tr');\n  let headerCells = table.querySelectorAll('thead th');\n  let rows = table.querySelectorAll('tbody tr');\n  let bodyCells = table.querySelectorAll('table tbody td');\n  table.classList.add('alc-table');\n  headerRows.forEach(row => {\n    row.classList.add('alc-table__header-row');\n  });\n  headerCells.forEach(cell => {\n    cell.classList.add('alc-table__header-cell');\n  });\n  rows.forEach(row => {\n    row.classList.add('alc-table__row');\n  });\n  bodyCells.forEach(cell => {\n    cell.classList.add('alc-table__cell');\n  });\n}\n\nfunction inlineHeaders(table: HTMLTableElement): Array<HTMLDivElement> {\n  let headers = table.querySelectorAll('thead th');\n  let headerClones: Array<HTMLDivElement> = [];\n\n  headers.forEach((header) => {\n    let attrs:NamedNodeMap = header.attributes;\n    let clone = document.createElement('div');\n\n    Array.from(attrs).forEach(attr => {\n      clone.setAttribute(attr.name, attr.value);\n    });\n    clone.classList.add('alc-table__inline-header');\n\n    // clone.setAttribute('aria-hidden', 'true');\n    header.childNodes.forEach(childNode => {\n      clone.appendChild(childNode.cloneNode(true));\n    });\n    headerClones.push(clone);\n  });\n\n  return headerClones;\n}\n\nfunction wrapAll (target, wrapper = document.createElement('div')) {\n  [ ...target.childNodes ].forEach(child => wrapper.appendChild(child));\n  target.appendChild(wrapper);\n  return wrapper;\n}\n\nfunction setInlineHeaders(table: HTMLTableElement) {\n  let headers = inlineHeaders(table);\n  let rows = table.querySelectorAll('tbody tr');\n\n  rows.forEach(row => {\n    let cells = row.querySelectorAll('td');\n    cells.forEach((cell, index) => {\n\n      // Evita que seja feito o mesmo processo duas vezes na c√©lula\n      if (cell.dataset.alcInlineHeader === 'true') {\n        return;\n      }\n      const contentWrapper = document.createElement('div');\n      contentWrapper.classList.add('alc-table__cell-content');\n      wrapAll(cell, contentWrapper);\n\n      let inlineHeader = headers[index].cloneNode(true);\n      cell.insertBefore(inlineHeader, cell.firstChild);\n\n      cell.dataset.alcInlineHeader = 'true';\n    });\n  });\n}\n\ninterface TableProps {\n  target: HTMLTableElement\n}\n\nconst Table: FunctionalComponent<TableProps> = ({target}) => {\n  setCssClasses(target);\n  setInlineHeaders(target);\n\n  return null;\n}\n\nexport default Table;\nexport { setInlineHeaders, setCssClasses };"],
  "mappings": ";AAEA,IAAA,gBAA8C,SAAA,GAAA,GAAA,GAAA;AAAA,MAAA,KAAA,UAAA,WAAA,EAAA,UAAA,IAAA,GAAA,IAAA,EAAA,QAAA,GAAA,IAAA,GAAA,KAAA;AAAA,QAAA,KAAA,EAAA,KAAA,IAAA;AAAA,UAAA,CAAA,EAAA,KAAA,MAAA,UAAA,MAAA,KAAA,GAAA,GAAA,CAAA;AAAA,QAAA,CAAA,IAAA,EAAA,CAAA;IAAA;EAAA;AAAA,SAAA,EAAA,OAAA,KAAA,MAAA,UAAA,MAAA,KAAA,CAAA,CAAA;AAAA;AAAA,SAAA,cAAA,GAAA;AAAA,MAAA,IAAA,EAAA,iBAAA,UAAA;AAAA,MAAA,IAAA,EAAA,iBAAA,UAAA;AAAA,MAAA,IAAA,EAAA,iBAAA,UAAA;AAAA,MAAA,IAAA,EAAA,iBAAA,gBAAA;AAAA,IAAA,UAAA,IAAA,WAAA;AAAA,IAAA,QAAA,SAAAA,IAAA;AAAA,IAAAA,GAAA,UAAA,IAAA,uBAAA;EAAA,CAAA;AAAA,IAAA,QAAA,SAAAA,IAAA;AAAA,IAAAA,GAAA,UAAA,IAAA,wBAAA;EAAA,CAAA;AAAA,IAAA,QAAA,SAAAA,IAAA;AAAA,IAAAA,GAAA,UAAA,IAAA,gBAAA;EAAA,CAAA;AAAA,IAAA,QAAA,SAAAA,IAAA;AAAA,IAAAA,GAAA,UAAA,IAAA,iBAAA;EAAA,CAAA;AAAA;AAAA,SAAA,cAAA,GAAA;AAAA,MAAA,IAAA,EAAA,iBAAA,UAAA;AAAA,MAAA,IAAA,CAAA;AAAA,IAAA,QAAA,SAAAA,IAAA;AAAA,QAAAC,KAAAD,GAAA;AAAA,QAAA,IAAA,SAAA,cAAA,KAAA;AAAA,UAAA,KAAAC,EAAA,EAAA,QAAA,SAAAD,IAAA;AAAA,QAAA,aAAAA,GAAA,MAAAA,GAAA,KAAA;IAAA,CAAA;AAAA,MAAA,UAAA,IAAA,0BAAA;AAAA,IAAAA,GAAA,WAAA,QAAA,SAAAA,IAAA;AAAA,QAAA,YAAAA,GAAA,UAAA,IAAA,CAAA;IAAA,CAAA;AAAA,MAAA,KAAA,CAAA;EAAA,CAAA;AAAA,SAAA;AAAA;AAAA,SAAA,QAAA,GAAA,GAAA;AAAA,MAAA,MAAA,QAAA;AAAA,QAAA,SAAA,cAAA,KAAA;EAAA;AAAA,gBAAA,CAAA,GAAA,EAAA,YAAA,IAAA,EAAA,QAAA,SAAAA,IAAA;AAAA,WAAA,EAAA,YAAAA,EAAA;EAAA,CAAA;AAAA,IAAA,YAAA,CAAA;AAAA,SAAA;AAAA;AAAA,SAAA,iBAAA,GAAA;AAAA,MAAA,IAAA,cAAA,CAAA;AAAA,MAAA,IAAA,EAAA,iBAAA,UAAA;AAAA,IAAA,QAAA,SAAAA,IAAA;AAAA,QAAAE,KAAAF,GAAA,iBAAA,IAAA;AAAA,IAAAE,GAAA,QAAA,SAAAF,IAAAE,IAAA;AAAA,UAAAF,GAAA,QAAA,oBAAA,QAAA;AAAA;MAAA;AAAA,UAAA,IAAA,SAAA,cAAA,KAAA;AAAA,QAAA,UAAA,IAAA,yBAAA;AAAA,cAAAA,IAAA,CAAA;AAAA,UAAA,IAAA,EAAAE,EAAA,EAAA,UAAA,IAAA;AAAA,MAAAF,GAAA,aAAA,GAAAA,GAAA,UAAA;AAAA,MAAAA,GAAA,QAAA,kBAAA;IAAA,CAAA;EAAA,CAAA;AAAA;AAAA,IAAA,QAAA,SAAA,GAAA;AAAA,MAAA,IAAA,EAAA;AAAA,gBAAA,CAAA;AAAA,mBAAA,CAAA;AAAA,SAAA;AAAA;",
  "names": ["r", "e", "t"]
}
