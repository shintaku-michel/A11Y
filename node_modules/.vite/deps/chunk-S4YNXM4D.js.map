{
  "version": 3,
  "sources": ["../../alcance/dist/esm-es5/@stencil/core/internal/app-data", "../../alcance/dist/esm-es5/node_modules/@stencil/core/internal/client/index.js"],
  "sourcesContent": ["export const NAMESPACE = 'alcance';\nexport const BUILD = /* alcance */ { allRenderFn: true, appendChildSlotFix: false, asyncLoading: true, asyncQueue: false, attachStyles: true, cloneNodeFix: false, constructableCSS: true, cssAnnotations: true, devTools: false, element: false, event: true, experimentalScopedSlotChanges: false, experimentalSlotFixes: false, formAssociated: false, hasRenderFn: true, hostListener: true, hostListenerTarget: true, hostListenerTargetBody: true, hostListenerTargetDocument: true, hostListenerTargetParent: false, hostListenerTargetWindow: true, hotModuleReplacement: false, hydrateClientSide: false, hydrateServerSide: false, hydratedAttribute: false, hydratedClass: true, hydratedSelectorName: \"hydrated\", initializeNextTick: false, invisiblePrehydration: true, isDebug: false, isDev: false, isTesting: false, lazyLoad: true, lifecycle: true, lifecycleDOMEvents: false, member: true, method: true, mode: true, modernPropertyDecls: false, observeAttribute: true, profile: false, prop: true, propBoolean: true, propMutable: true, propNumber: true, propString: true, reflect: true, scoped: false, scopedSlotTextContentFix: false, scriptDataOpts: false, shadowDelegatesFocus: false, shadowDom: false, slot: true, slotChildNodesFix: false, slotRelocation: true, state: true, style: true, svg: true, taskQueue: true, transformTagName: false, updatable: true, vdomAttribute: true, vdomClass: true, vdomFunctional: true, vdomKey: true, vdomListener: true, vdomPropOrAttr: true, vdomRef: true, vdomRender: true, vdomStyle: true, vdomText: true, vdomXlink: true, watchCallback: true };\nexport const Env = /* alcance */ {};\n", "/*\n Stencil Client Platform v4.28.2 | MIT Licensed | https://stenciljs.com\n */\nvar __defProp = Object.defineProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\n\n// src/client/client-build.ts\nimport { BUILD } from \"@stencil/core/internal/app-data\";\nvar Build = {\n  isDev: BUILD.isDev ? true : false,\n  isBrowser: true,\n  isServer: false,\n  isTesting: BUILD.isTesting ? true : false\n};\n\n// src/client/client-host-ref.ts\nimport { BUILD as BUILD3 } from \"@stencil/core/internal/app-data\";\n\n// src/utils/es2022-rewire-class-members.ts\nimport { BUILD as BUILD2 } from \"@stencil/core/internal/app-data\";\n\n// src/utils/constants.ts\nvar SVG_NS = \"http://www.w3.org/2000/svg\";\nvar HTML_NS = \"http://www.w3.org/1999/xhtml\";\n\n// src/utils/es2022-rewire-class-members.ts\nvar reWireGetterSetter = (instance, hostRef) => {\n  var _a;\n  const cmpMeta = hostRef.$cmpMeta$;\n  const members = Object.entries((_a = cmpMeta.$members$) != null ? _a : {});\n  members.map(([memberName, [memberFlags]]) => {\n    if ((BUILD2.state || BUILD2.prop) && (memberFlags & 31 /* Prop */ || memberFlags & 32 /* State */)) {\n      const ogValue = instance[memberName];\n      const ogDescriptor = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(instance), memberName);\n      Object.defineProperty(instance, memberName, {\n        get() {\n          return ogDescriptor.get.call(this);\n        },\n        set(newValue) {\n          ogDescriptor.set.call(this, newValue);\n        },\n        configurable: true,\n        enumerable: true\n      });\n      instance[memberName] = hostRef.$instanceValues$.has(memberName) ? hostRef.$instanceValues$.get(memberName) : ogValue;\n    }\n  });\n};\n\n// src/client/client-host-ref.ts\nvar getHostRef = (ref) => {\n  if (ref.__stencil__getHostRef) {\n    return ref.__stencil__getHostRef();\n  }\n  return void 0;\n};\nvar registerInstance = (lazyInstance, hostRef) => {\n  lazyInstance.__stencil__getHostRef = () => hostRef;\n  hostRef.$lazyInstance$ = lazyInstance;\n  if (BUILD3.modernPropertyDecls && (BUILD3.state || BUILD3.prop)) {\n    reWireGetterSetter(lazyInstance, hostRef);\n  }\n};\nvar registerHost = (hostElement, cmpMeta) => {\n  const hostRef = {\n    $flags$: 0,\n    $hostElement$: hostElement,\n    $cmpMeta$: cmpMeta,\n    $instanceValues$: /* @__PURE__ */ new Map()\n  };\n  if (BUILD3.isDev) {\n    hostRef.$renderCount$ = 0;\n  }\n  if (BUILD3.method && BUILD3.lazyLoad) {\n    hostRef.$onInstancePromise$ = new Promise((r) => hostRef.$onInstanceResolve$ = r);\n  }\n  if (BUILD3.asyncLoading) {\n    hostRef.$onReadyPromise$ = new Promise((r) => hostRef.$onReadyResolve$ = r);\n    hostElement[\"s-p\"] = [];\n    hostElement[\"s-rc\"] = [];\n  }\n  const ref = hostRef;\n  hostElement.__stencil__getHostRef = () => ref;\n  if (!BUILD3.lazyLoad && BUILD3.modernPropertyDecls && (BUILD3.state || BUILD3.prop)) {\n    reWireGetterSetter(hostElement, hostRef);\n  }\n  return ref;\n};\nvar isMemberInElement = (elm, memberName) => memberName in elm;\n\n// src/client/client-load-module.ts\nimport { BUILD as BUILD5 } from \"@stencil/core/internal/app-data\";\n\n// src/client/client-log.ts\nimport { BUILD as BUILD4 } from \"@stencil/core/internal/app-data\";\nvar customError;\nvar consoleError = (e, el) => (customError || console.error)(e, el);\nvar STENCIL_DEV_MODE = BUILD4.isTesting ? [\"STENCIL:\"] : [\n  \"%cstencil\",\n  \"color: white;background:#4c47ff;font-weight: bold; font-size:10px; padding:2px 6px; border-radius: 5px\"\n];\nvar consoleDevError = (...m) => console.error(...STENCIL_DEV_MODE, ...m);\nvar consoleDevWarn = (...m) => console.warn(...STENCIL_DEV_MODE, ...m);\nvar consoleDevInfo = (...m) => console.info(...STENCIL_DEV_MODE, ...m);\nvar setErrorHandler = (handler) => customError = handler;\n\n// src/client/client-load-module.ts\nvar cmpModules = /* @__PURE__ */ new Map();\nvar MODULE_IMPORT_PREFIX = \"./\";\nvar loadModule = (cmpMeta, hostRef, hmrVersionId) => {\n  const exportName = cmpMeta.$tagName$.replace(/-/g, \"_\");\n  const bundleId = cmpMeta.$lazyBundleId$;\n  if (BUILD5.isDev && typeof bundleId !== \"string\") {\n    consoleDevError(\n      `Trying to lazily load component <${cmpMeta.$tagName$}> with style mode \"${hostRef.$modeName$}\", but it does not exist.`\n    );\n    return void 0;\n  } else if (!bundleId) {\n    return void 0;\n  }\n  const module = !BUILD5.hotModuleReplacement ? cmpModules.get(bundleId) : false;\n  if (module) {\n    return module[exportName];\n  }\n  /*!__STENCIL_STATIC_IMPORT_SWITCH__*/\n  return import(\n    /* @vite-ignore */\n    /* webpackInclude: /\\.entry\\.js$/ */\n    /* webpackExclude: /\\.system\\.entry\\.js$/ */\n    /* webpackMode: \"lazy\" */\n    `./${bundleId}.entry.js${BUILD5.hotModuleReplacement && hmrVersionId ? \"?s-hmr=\" + hmrVersionId : \"\"}`\n  ).then(\n    (importedModule) => {\n      if (!BUILD5.hotModuleReplacement) {\n        cmpModules.set(bundleId, importedModule);\n      }\n      return importedModule[exportName];\n    },\n    (e) => {\n      consoleError(e, hostRef.$hostElement$);\n    }\n  );\n};\n\n// src/client/client-style.ts\nvar styles = /* @__PURE__ */ new Map();\nvar modeResolutionChain = [];\n\n// src/client/client-task-queue.ts\nimport { BUILD as BUILD7 } from \"@stencil/core/internal/app-data\";\n\n// src/runtime/runtime-constants.ts\nvar CONTENT_REF_ID = \"r\";\nvar ORG_LOCATION_ID = \"o\";\nvar SLOT_NODE_ID = \"s\";\nvar TEXT_NODE_ID = \"t\";\nvar COMMENT_NODE_ID = \"c\";\nvar HYDRATE_ID = \"s-id\";\nvar HYDRATED_STYLE_ID = \"sty-id\";\nvar HYDRATE_CHILD_ID = \"c-id\";\nvar HYDRATED_CSS = \"{visibility:hidden}.hydrated{visibility:inherit}\";\nvar STENCIL_DOC_DATA = \"_stencilDocData\";\nvar DEFAULT_DOC_DATA = {\n  hostIds: 0,\n  rootLevelIds: 0,\n  staticComponents: /* @__PURE__ */ new Set()\n};\nvar SLOT_FB_CSS = \"slot-fb{display:contents}slot-fb[hidden]{display:none}\";\nvar XLINK_NS = \"http://www.w3.org/1999/xlink\";\nvar FORM_ASSOCIATED_CUSTOM_ELEMENT_CALLBACKS = [\n  \"formAssociatedCallback\",\n  \"formResetCallback\",\n  \"formDisabledCallback\",\n  \"formStateRestoreCallback\"\n];\n\n// src/client/client-window.ts\nimport { BUILD as BUILD6 } from \"@stencil/core/internal/app-data\";\nvar win = typeof window !== \"undefined\" ? window : {};\nvar H = win.HTMLElement || class {\n};\nvar plt = {\n  $flags$: 0,\n  $resourcesUrl$: \"\",\n  jmp: (h2) => h2(),\n  raf: (h2) => requestAnimationFrame(h2),\n  ael: (el, eventName, listener, opts) => el.addEventListener(eventName, listener, opts),\n  rel: (el, eventName, listener, opts) => el.removeEventListener(eventName, listener, opts),\n  ce: (eventName, opts) => new CustomEvent(eventName, opts)\n};\nvar setPlatformHelpers = (helpers) => {\n  Object.assign(plt, helpers);\n};\nvar supportsShadow = BUILD6.shadowDom;\nvar supportsListenerOptions = /* @__PURE__ */ (() => {\n  var _a;\n  let supportsListenerOptions2 = false;\n  try {\n    (_a = win.document) == null ? void 0 : _a.addEventListener(\n      \"e\",\n      null,\n      Object.defineProperty({}, \"passive\", {\n        get() {\n          supportsListenerOptions2 = true;\n        }\n      })\n    );\n  } catch (e) {\n  }\n  return supportsListenerOptions2;\n})();\nvar promiseResolve = (v) => Promise.resolve(v);\nvar supportsConstructableStylesheets = BUILD6.constructableCSS ? /* @__PURE__ */ (() => {\n  try {\n    new CSSStyleSheet();\n    return typeof new CSSStyleSheet().replaceSync === \"function\";\n  } catch (e) {\n  }\n  return false;\n})() : false;\n\n// src/client/client-task-queue.ts\nvar queueCongestion = 0;\nvar queuePending = false;\nvar queueDomReads = [];\nvar queueDomWrites = [];\nvar queueDomWritesLow = [];\nvar queueTask = (queue, write) => (cb) => {\n  queue.push(cb);\n  if (!queuePending) {\n    queuePending = true;\n    if (write && plt.$flags$ & 4 /* queueSync */) {\n      nextTick(flush);\n    } else {\n      plt.raf(flush);\n    }\n  }\n};\nvar consume = (queue) => {\n  for (let i2 = 0; i2 < queue.length; i2++) {\n    try {\n      queue[i2](performance.now());\n    } catch (e) {\n      consoleError(e);\n    }\n  }\n  queue.length = 0;\n};\nvar consumeTimeout = (queue, timeout) => {\n  let i2 = 0;\n  let ts = 0;\n  while (i2 < queue.length && (ts = performance.now()) < timeout) {\n    try {\n      queue[i2++](ts);\n    } catch (e) {\n      consoleError(e);\n    }\n  }\n  if (i2 === queue.length) {\n    queue.length = 0;\n  } else if (i2 !== 0) {\n    queue.splice(0, i2);\n  }\n};\nvar flush = () => {\n  if (BUILD7.asyncQueue) {\n    queueCongestion++;\n  }\n  consume(queueDomReads);\n  if (BUILD7.asyncQueue) {\n    const timeout = (plt.$flags$ & 6 /* queueMask */) === 2 /* appLoaded */ ? performance.now() + 14 * Math.ceil(queueCongestion * (1 / 10)) : Infinity;\n    consumeTimeout(queueDomWrites, timeout);\n    consumeTimeout(queueDomWritesLow, timeout);\n    if (queueDomWrites.length > 0) {\n      queueDomWritesLow.push(...queueDomWrites);\n      queueDomWrites.length = 0;\n    }\n    if (queuePending = queueDomReads.length + queueDomWrites.length + queueDomWritesLow.length > 0) {\n      plt.raf(flush);\n    } else {\n      queueCongestion = 0;\n    }\n  } else {\n    consume(queueDomWrites);\n    if (queuePending = queueDomReads.length > 0) {\n      plt.raf(flush);\n    }\n  }\n};\nvar nextTick = (cb) => promiseResolve().then(cb);\nvar readTask = /* @__PURE__ */ queueTask(queueDomReads, false);\nvar writeTask = /* @__PURE__ */ queueTask(queueDomWrites, true);\n\n// src/client/index.ts\nimport { BUILD as BUILD29, Env, NAMESPACE as NAMESPACE2 } from \"@stencil/core/internal/app-data\";\n\n// src/runtime/asset-path.ts\nvar getAssetPath = (path) => {\n  const assetUrl = new URL(path, plt.$resourcesUrl$);\n  return assetUrl.origin !== win.location.origin ? assetUrl.href : assetUrl.pathname;\n};\nvar setAssetPath = (path) => plt.$resourcesUrl$ = path;\n\n// src/runtime/bootstrap-custom-element.ts\nimport { BUILD as BUILD26 } from \"@stencil/core/internal/app-data\";\n\n// src/utils/helpers.ts\nvar isDef = (v) => v != null && v !== void 0;\nvar isComplexType = (o) => {\n  o = typeof o;\n  return o === \"object\" || o === \"function\";\n};\n\n// src/utils/query-nonce-meta-tag-content.ts\nfunction queryNonceMetaTagContent(doc) {\n  var _a, _b, _c;\n  return (_c = (_b = (_a = doc.head) == null ? void 0 : _a.querySelector('meta[name=\"csp-nonce\"]')) == null ? void 0 : _b.getAttribute(\"content\")) != null ? _c : void 0;\n}\n\n// src/utils/regular-expression.ts\nvar escapeRegExpSpecialCharacters = (text) => {\n  return text.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n};\n\n// src/utils/result.ts\nvar result_exports = {};\n__export(result_exports, {\n  err: () => err,\n  map: () => map,\n  ok: () => ok,\n  unwrap: () => unwrap,\n  unwrapErr: () => unwrapErr\n});\nvar ok = (value) => ({\n  isOk: true,\n  isErr: false,\n  value\n});\nvar err = (value) => ({\n  isOk: false,\n  isErr: true,\n  value\n});\nfunction map(result, fn) {\n  if (result.isOk) {\n    const val = fn(result.value);\n    if (val instanceof Promise) {\n      return val.then((newVal) => ok(newVal));\n    } else {\n      return ok(val);\n    }\n  }\n  if (result.isErr) {\n    const value = result.value;\n    return err(value);\n  }\n  throw \"should never get here\";\n}\nvar unwrap = (result) => {\n  if (result.isOk) {\n    return result.value;\n  } else {\n    throw result.value;\n  }\n};\nvar unwrapErr = (result) => {\n  if (result.isErr) {\n    return result.value;\n  } else {\n    throw result.value;\n  }\n};\n\n// src/utils/util.ts\nvar lowerPathParam = (fn) => (p) => fn(p.toLowerCase());\nvar isDtsFile = lowerPathParam((p) => p.endsWith(\".d.ts\") || p.endsWith(\".d.mts\") || p.endsWith(\".d.cts\"));\nvar isTsFile = lowerPathParam(\n  (p) => !isDtsFile(p) && (p.endsWith(\".ts\") || p.endsWith(\".mts\") || p.endsWith(\".cts\"))\n);\nvar isTsxFile = lowerPathParam(\n  (p) => p.endsWith(\".tsx\") || p.endsWith(\".mtsx\") || p.endsWith(\".ctsx\")\n);\nvar isJsxFile = lowerPathParam(\n  (p) => p.endsWith(\".jsx\") || p.endsWith(\".mjsx\") || p.endsWith(\".cjsx\")\n);\nvar isJsFile = lowerPathParam((p) => p.endsWith(\".js\") || p.endsWith(\".mjs\") || p.endsWith(\".cjs\"));\n\n// src/runtime/connected-callback.ts\nimport { BUILD as BUILD24 } from \"@stencil/core/internal/app-data\";\n\n// src/runtime/client-hydrate.ts\nimport { BUILD as BUILD12 } from \"@stencil/core/internal/app-data\";\n\n// src/runtime/dom-extras.ts\nimport { BUILD as BUILD9 } from \"@stencil/core/internal/app-data\";\n\n// src/runtime/slot-polyfill-utils.ts\nimport { BUILD as BUILD8 } from \"@stencil/core/internal/app-data\";\nvar updateFallbackSlotVisibility = (elm) => {\n  const childNodes = internalCall(elm, \"childNodes\");\n  if (elm.tagName && elm.tagName.includes(\"-\") && elm[\"s-cr\"] && elm.tagName !== \"SLOT-FB\") {\n    getHostSlotNodes(childNodes, elm.tagName).forEach((slotNode) => {\n      if (slotNode.nodeType === 1 /* ElementNode */ && slotNode.tagName === \"SLOT-FB\") {\n        if (getSlotChildSiblings(slotNode, getSlotName(slotNode), false).length) {\n          slotNode.hidden = true;\n        } else {\n          slotNode.hidden = false;\n        }\n      }\n    });\n  }\n  let i2 = 0;\n  for (i2 = 0; i2 < childNodes.length; i2++) {\n    const childNode = childNodes[i2];\n    if (childNode.nodeType === 1 /* ElementNode */ && internalCall(childNode, \"childNodes\").length) {\n      updateFallbackSlotVisibility(childNode);\n    }\n  }\n};\nvar getSlottedChildNodes = (childNodes) => {\n  const result = [];\n  for (let i2 = 0; i2 < childNodes.length; i2++) {\n    const slottedNode = childNodes[i2][\"s-nr\"] || void 0;\n    if (slottedNode && slottedNode.isConnected) {\n      result.push(slottedNode);\n    }\n  }\n  return result;\n};\nfunction getHostSlotNodes(childNodes, hostName, slotName) {\n  let i2 = 0;\n  let slottedNodes = [];\n  let childNode;\n  for (; i2 < childNodes.length; i2++) {\n    childNode = childNodes[i2];\n    if (childNode[\"s-sr\"] && (!hostName || childNode[\"s-hn\"] === hostName) && (slotName === void 0 || getSlotName(childNode) === slotName)) {\n      slottedNodes.push(childNode);\n      if (typeof slotName !== \"undefined\") return slottedNodes;\n    }\n    slottedNodes = [...slottedNodes, ...getHostSlotNodes(childNode.childNodes, hostName, slotName)];\n  }\n  return slottedNodes;\n}\nvar getSlotChildSiblings = (slot, slotName, includeSlot = true) => {\n  const childNodes = [];\n  if (includeSlot && slot[\"s-sr\"] || !slot[\"s-sr\"]) childNodes.push(slot);\n  let node = slot;\n  while (node = node.nextSibling) {\n    if (getSlotName(node) === slotName && (includeSlot || !node[\"s-sr\"])) childNodes.push(node);\n  }\n  return childNodes;\n};\nvar isNodeLocatedInSlot = (nodeToRelocate, slotName) => {\n  if (nodeToRelocate.nodeType === 1 /* ElementNode */) {\n    if (nodeToRelocate.getAttribute(\"slot\") === null && slotName === \"\") {\n      return true;\n    }\n    if (nodeToRelocate.getAttribute(\"slot\") === slotName) {\n      return true;\n    }\n    return false;\n  }\n  if (nodeToRelocate[\"s-sn\"] === slotName) {\n    return true;\n  }\n  return slotName === \"\";\n};\nvar addSlotRelocateNode = (newChild, slotNode, prepend, position) => {\n  if (newChild[\"s-ol\"] && newChild[\"s-ol\"].isConnected) {\n    return;\n  }\n  const slottedNodeLocation = document.createTextNode(\"\");\n  slottedNodeLocation[\"s-nr\"] = newChild;\n  if (!slotNode[\"s-cr\"] || !slotNode[\"s-cr\"].parentNode) return;\n  const parent = slotNode[\"s-cr\"].parentNode;\n  const appendMethod = prepend ? internalCall(parent, \"prepend\") : internalCall(parent, \"appendChild\");\n  if (BUILD8.hydrateClientSide && typeof position !== \"undefined\") {\n    slottedNodeLocation[\"s-oo\"] = position;\n    const childNodes = internalCall(parent, \"childNodes\");\n    const slotRelocateNodes = [slottedNodeLocation];\n    childNodes.forEach((n) => {\n      if (n[\"s-nr\"]) slotRelocateNodes.push(n);\n    });\n    slotRelocateNodes.sort((a, b) => {\n      if (!a[\"s-oo\"] || a[\"s-oo\"] < (b[\"s-oo\"] || 0)) return -1;\n      else if (!b[\"s-oo\"] || b[\"s-oo\"] < a[\"s-oo\"]) return 1;\n      return 0;\n    });\n    slotRelocateNodes.forEach((n) => appendMethod.call(parent, n));\n  } else {\n    appendMethod.call(parent, slottedNodeLocation);\n  }\n  newChild[\"s-ol\"] = slottedNodeLocation;\n  newChild[\"s-sh\"] = slotNode[\"s-hn\"];\n};\nvar getSlotName = (node) => typeof node[\"s-sn\"] === \"string\" ? node[\"s-sn\"] : node.nodeType === 1 && node.getAttribute(\"slot\") || void 0;\nfunction patchSlotNode(node) {\n  if (node.assignedElements || node.assignedNodes || !node[\"s-sr\"]) return;\n  const assignedFactory = (elementsOnly) => (function(opts) {\n    const toReturn = [];\n    const slotName = this[\"s-sn\"];\n    if (opts == null ? void 0 : opts.flatten) {\n      console.error(`\n          Flattening is not supported for Stencil non-shadow slots. \n          You can use \\`.childNodes\\` to nested slot fallback content.\n          If you have a particular use case, please open an issue on the Stencil repo.\n        `);\n    }\n    const parent = this[\"s-cr\"].parentElement;\n    const slottedNodes = parent.__childNodes ? parent.childNodes : getSlottedChildNodes(parent.childNodes);\n    slottedNodes.forEach((n) => {\n      if (slotName === getSlotName(n)) {\n        toReturn.push(n);\n      }\n    });\n    if (elementsOnly) {\n      return toReturn.filter((n) => n.nodeType === 1 /* ElementNode */);\n    }\n    return toReturn;\n  }).bind(node);\n  node.assignedElements = assignedFactory(true);\n  node.assignedNodes = assignedFactory(false);\n}\nfunction dispatchSlotChangeEvent(elm) {\n  elm.dispatchEvent(new CustomEvent(\"slotchange\", { bubbles: false, cancelable: false, composed: false }));\n}\nfunction findSlotFromSlottedNode(slottedNode, parentHost) {\n  var _a;\n  parentHost = parentHost || ((_a = slottedNode[\"s-ol\"]) == null ? void 0 : _a.parentElement);\n  if (!parentHost) return { slotNode: null, slotName: \"\" };\n  const slotName = slottedNode[\"s-sn\"] = getSlotName(slottedNode) || \"\";\n  const childNodes = internalCall(parentHost, \"childNodes\");\n  const slotNode = getHostSlotNodes(childNodes, parentHost.tagName, slotName)[0];\n  return { slotNode, slotName };\n}\n\n// src/runtime/dom-extras.ts\nvar patchPseudoShadowDom = (hostElementPrototype) => {\n  patchCloneNode(hostElementPrototype);\n  patchSlotAppendChild(hostElementPrototype);\n  patchSlotAppend(hostElementPrototype);\n  patchSlotPrepend(hostElementPrototype);\n  patchSlotInsertAdjacentElement(hostElementPrototype);\n  patchSlotInsertAdjacentHTML(hostElementPrototype);\n  patchSlotInsertAdjacentText(hostElementPrototype);\n  patchInsertBefore(hostElementPrototype);\n  patchTextContent(hostElementPrototype);\n  patchChildSlotNodes(hostElementPrototype);\n  patchSlotRemoveChild(hostElementPrototype);\n};\nvar patchCloneNode = (HostElementPrototype) => {\n  const orgCloneNode = HostElementPrototype.cloneNode;\n  HostElementPrototype.cloneNode = function(deep) {\n    const srcNode = this;\n    const isShadowDom = BUILD9.shadowDom ? srcNode.shadowRoot && supportsShadow : false;\n    const clonedNode = orgCloneNode.call(srcNode, isShadowDom ? deep : false);\n    if (BUILD9.slot && !isShadowDom && deep) {\n      let i2 = 0;\n      let slotted, nonStencilNode;\n      const stencilPrivates = [\n        \"s-id\",\n        \"s-cr\",\n        \"s-lr\",\n        \"s-rc\",\n        \"s-sc\",\n        \"s-p\",\n        \"s-cn\",\n        \"s-sr\",\n        \"s-sn\",\n        \"s-hn\",\n        \"s-ol\",\n        \"s-nr\",\n        \"s-si\",\n        \"s-rf\",\n        \"s-scs\"\n      ];\n      const childNodes = this.__childNodes || this.childNodes;\n      for (; i2 < childNodes.length; i2++) {\n        slotted = childNodes[i2][\"s-nr\"];\n        nonStencilNode = stencilPrivates.every((privateField) => !childNodes[i2][privateField]);\n        if (slotted) {\n          if (BUILD9.appendChildSlotFix && clonedNode.__appendChild) {\n            clonedNode.__appendChild(slotted.cloneNode(true));\n          } else {\n            clonedNode.appendChild(slotted.cloneNode(true));\n          }\n        }\n        if (nonStencilNode) {\n          clonedNode.appendChild(childNodes[i2].cloneNode(true));\n        }\n      }\n    }\n    return clonedNode;\n  };\n};\nvar patchSlotAppendChild = (HostElementPrototype) => {\n  HostElementPrototype.__appendChild = HostElementPrototype.appendChild;\n  HostElementPrototype.appendChild = function(newChild) {\n    const { slotName, slotNode } = findSlotFromSlottedNode(newChild, this);\n    if (slotNode) {\n      addSlotRelocateNode(newChild, slotNode);\n      const slotChildNodes = getSlotChildSiblings(slotNode, slotName);\n      const appendAfter = slotChildNodes[slotChildNodes.length - 1];\n      const parent = internalCall(appendAfter, \"parentNode\");\n      const insertedNode = internalCall(parent, \"insertBefore\")(newChild, appendAfter.nextSibling);\n      dispatchSlotChangeEvent(slotNode);\n      updateFallbackSlotVisibility(this);\n      return insertedNode;\n    }\n    return this.__appendChild(newChild);\n  };\n};\nvar patchSlotRemoveChild = (ElementPrototype) => {\n  ElementPrototype.__removeChild = ElementPrototype.removeChild;\n  ElementPrototype.removeChild = function(toRemove) {\n    if (toRemove && typeof toRemove[\"s-sn\"] !== \"undefined\") {\n      const childNodes = this.__childNodes || this.childNodes;\n      const slotNode = getHostSlotNodes(childNodes, this.tagName, toRemove[\"s-sn\"]);\n      if (slotNode && toRemove.isConnected) {\n        toRemove.remove();\n        updateFallbackSlotVisibility(this);\n        return;\n      }\n    }\n    return this.__removeChild(toRemove);\n  };\n};\nvar patchSlotPrepend = (HostElementPrototype) => {\n  HostElementPrototype.__prepend = HostElementPrototype.prepend;\n  HostElementPrototype.prepend = function(...newChildren) {\n    newChildren.forEach((newChild) => {\n      if (typeof newChild === \"string\") {\n        newChild = this.ownerDocument.createTextNode(newChild);\n      }\n      const slotName = (newChild[\"s-sn\"] = getSlotName(newChild)) || \"\";\n      const childNodes = internalCall(this, \"childNodes\");\n      const slotNode = getHostSlotNodes(childNodes, this.tagName, slotName)[0];\n      if (slotNode) {\n        addSlotRelocateNode(newChild, slotNode, true);\n        const slotChildNodes = getSlotChildSiblings(slotNode, slotName);\n        const appendAfter = slotChildNodes[0];\n        const parent = internalCall(appendAfter, \"parentNode\");\n        const toReturn = internalCall(parent, \"insertBefore\")(newChild, internalCall(appendAfter, \"nextSibling\"));\n        dispatchSlotChangeEvent(slotNode);\n        return toReturn;\n      }\n      if (newChild.nodeType === 1 && !!newChild.getAttribute(\"slot\")) {\n        newChild.hidden = true;\n      }\n      return HostElementPrototype.__prepend(newChild);\n    });\n  };\n};\nvar patchSlotAppend = (HostElementPrototype) => {\n  HostElementPrototype.__append = HostElementPrototype.append;\n  HostElementPrototype.append = function(...newChildren) {\n    newChildren.forEach((newChild) => {\n      if (typeof newChild === \"string\") {\n        newChild = this.ownerDocument.createTextNode(newChild);\n      }\n      this.appendChild(newChild);\n    });\n  };\n};\nvar patchSlotInsertAdjacentHTML = (HostElementPrototype) => {\n  const originalInsertAdjacentHtml = HostElementPrototype.insertAdjacentHTML;\n  HostElementPrototype.insertAdjacentHTML = function(position, text) {\n    if (position !== \"afterbegin\" && position !== \"beforeend\") {\n      return originalInsertAdjacentHtml.call(this, position, text);\n    }\n    const container = this.ownerDocument.createElement(\"_\");\n    let node;\n    container.innerHTML = text;\n    if (position === \"afterbegin\") {\n      while (node = container.firstChild) {\n        this.prepend(node);\n      }\n    } else if (position === \"beforeend\") {\n      while (node = container.firstChild) {\n        this.append(node);\n      }\n    }\n  };\n};\nvar patchSlotInsertAdjacentText = (HostElementPrototype) => {\n  HostElementPrototype.insertAdjacentText = function(position, text) {\n    this.insertAdjacentHTML(position, text);\n  };\n};\nvar patchInsertBefore = (HostElementPrototype) => {\n  const eleProto = HostElementPrototype;\n  if (eleProto.__insertBefore) return;\n  eleProto.__insertBefore = HostElementPrototype.insertBefore;\n  HostElementPrototype.insertBefore = function(newChild, currentChild) {\n    const { slotName, slotNode } = findSlotFromSlottedNode(newChild, this);\n    const slottedNodes = this.__childNodes ? this.childNodes : getSlottedChildNodes(this.childNodes);\n    if (slotNode) {\n      let found = false;\n      slottedNodes.forEach((childNode) => {\n        if (childNode === currentChild || currentChild === null) {\n          found = true;\n          if (currentChild === null || slotName !== currentChild[\"s-sn\"]) {\n            this.appendChild(newChild);\n            return;\n          }\n          if (slotName === currentChild[\"s-sn\"]) {\n            addSlotRelocateNode(newChild, slotNode);\n            const parent = internalCall(currentChild, \"parentNode\");\n            internalCall(parent, \"insertBefore\")(newChild, currentChild);\n            dispatchSlotChangeEvent(slotNode);\n          }\n          return;\n        }\n      });\n      if (found) return newChild;\n    }\n    const parentNode = currentChild == null ? void 0 : currentChild.__parentNode;\n    if (parentNode && !this.isSameNode(parentNode)) {\n      return this.appendChild(newChild);\n    }\n    return this.__insertBefore(newChild, currentChild);\n  };\n};\nvar patchSlotInsertAdjacentElement = (HostElementPrototype) => {\n  const originalInsertAdjacentElement = HostElementPrototype.insertAdjacentElement;\n  HostElementPrototype.insertAdjacentElement = function(position, element) {\n    if (position !== \"afterbegin\" && position !== \"beforeend\") {\n      return originalInsertAdjacentElement.call(this, position, element);\n    }\n    if (position === \"afterbegin\") {\n      this.prepend(element);\n      return element;\n    } else if (position === \"beforeend\") {\n      this.append(element);\n      return element;\n    }\n    return element;\n  };\n};\nvar patchTextContent = (hostElementPrototype) => {\n  patchHostOriginalAccessor(\"textContent\", hostElementPrototype);\n  Object.defineProperty(hostElementPrototype, \"textContent\", {\n    get: function() {\n      let text = \"\";\n      const childNodes = this.__childNodes ? this.childNodes : getSlottedChildNodes(this.childNodes);\n      childNodes.forEach((node) => text += node.textContent || \"\");\n      return text;\n    },\n    set: function(value) {\n      const childNodes = this.__childNodes ? this.childNodes : getSlottedChildNodes(this.childNodes);\n      childNodes.forEach((node) => {\n        if (node[\"s-ol\"]) node[\"s-ol\"].remove();\n        node.remove();\n      });\n      this.insertAdjacentHTML(\"beforeend\", value);\n    }\n  });\n};\nvar patchChildSlotNodes = (elm) => {\n  class FakeNodeList extends Array {\n    item(n) {\n      return this[n];\n    }\n  }\n  patchHostOriginalAccessor(\"children\", elm);\n  Object.defineProperty(elm, \"children\", {\n    get() {\n      return this.childNodes.filter((n) => n.nodeType === 1);\n    }\n  });\n  Object.defineProperty(elm, \"childElementCount\", {\n    get() {\n      return this.children.length;\n    }\n  });\n  patchHostOriginalAccessor(\"firstChild\", elm);\n  Object.defineProperty(elm, \"firstChild\", {\n    get() {\n      return this.childNodes[0];\n    }\n  });\n  patchHostOriginalAccessor(\"lastChild\", elm);\n  Object.defineProperty(elm, \"lastChild\", {\n    get() {\n      return this.childNodes[this.childNodes.length - 1];\n    }\n  });\n  patchHostOriginalAccessor(\"childNodes\", elm);\n  Object.defineProperty(elm, \"childNodes\", {\n    get() {\n      const result = new FakeNodeList();\n      result.push(...getSlottedChildNodes(this.__childNodes));\n      return result;\n    }\n  });\n};\nvar patchSlottedNode = (node) => {\n  if (!node || node.__nextSibling !== void 0 || !globalThis.Node) return;\n  patchNextSibling(node);\n  patchPreviousSibling(node);\n  patchParentNode(node);\n  if (node.nodeType === Node.ELEMENT_NODE) {\n    patchNextElementSibling(node);\n    patchPreviousElementSibling(node);\n  }\n};\nvar patchNextSibling = (node) => {\n  if (!node || node.__nextSibling) return;\n  patchHostOriginalAccessor(\"nextSibling\", node);\n  Object.defineProperty(node, \"nextSibling\", {\n    get: function() {\n      var _a;\n      const parentNodes = (_a = this[\"s-ol\"]) == null ? void 0 : _a.parentNode.childNodes;\n      const index = parentNodes == null ? void 0 : parentNodes.indexOf(this);\n      if (parentNodes && index > -1) {\n        return parentNodes[index + 1];\n      }\n      return this.__nextSibling;\n    }\n  });\n};\nvar patchNextElementSibling = (element) => {\n  if (!element || element.__nextElementSibling) return;\n  patchHostOriginalAccessor(\"nextElementSibling\", element);\n  Object.defineProperty(element, \"nextElementSibling\", {\n    get: function() {\n      var _a;\n      const parentEles = (_a = this[\"s-ol\"]) == null ? void 0 : _a.parentNode.children;\n      const index = parentEles == null ? void 0 : parentEles.indexOf(this);\n      if (parentEles && index > -1) {\n        return parentEles[index + 1];\n      }\n      return this.__nextElementSibling;\n    }\n  });\n};\nvar patchPreviousSibling = (node) => {\n  if (!node || node.__previousSibling) return;\n  patchHostOriginalAccessor(\"previousSibling\", node);\n  Object.defineProperty(node, \"previousSibling\", {\n    get: function() {\n      var _a;\n      const parentNodes = (_a = this[\"s-ol\"]) == null ? void 0 : _a.parentNode.childNodes;\n      const index = parentNodes == null ? void 0 : parentNodes.indexOf(this);\n      if (parentNodes && index > -1) {\n        return parentNodes[index - 1];\n      }\n      return this.__previousSibling;\n    }\n  });\n};\nvar patchPreviousElementSibling = (element) => {\n  if (!element || element.__previousElementSibling) return;\n  patchHostOriginalAccessor(\"previousElementSibling\", element);\n  Object.defineProperty(element, \"previousElementSibling\", {\n    get: function() {\n      var _a;\n      const parentNodes = (_a = this[\"s-ol\"]) == null ? void 0 : _a.parentNode.children;\n      const index = parentNodes == null ? void 0 : parentNodes.indexOf(this);\n      if (parentNodes && index > -1) {\n        return parentNodes[index - 1];\n      }\n      return this.__previousElementSibling;\n    }\n  });\n};\nvar patchParentNode = (node) => {\n  if (!node || node.__parentNode) return;\n  patchHostOriginalAccessor(\"parentNode\", node);\n  Object.defineProperty(node, \"parentNode\", {\n    get: function() {\n      var _a;\n      return ((_a = this[\"s-ol\"]) == null ? void 0 : _a.parentNode) || this.__parentNode;\n    },\n    set: function(value) {\n      this.__parentNode = value;\n    }\n  });\n};\nvar validElementPatches = [\"children\", \"nextElementSibling\", \"previousElementSibling\"];\nvar validNodesPatches = [\n  \"childNodes\",\n  \"firstChild\",\n  \"lastChild\",\n  \"nextSibling\",\n  \"previousSibling\",\n  \"textContent\",\n  \"parentNode\"\n];\nfunction patchHostOriginalAccessor(accessorName, node) {\n  let accessor;\n  if (validElementPatches.includes(accessorName)) {\n    accessor = Object.getOwnPropertyDescriptor(Element.prototype, accessorName);\n  } else if (validNodesPatches.includes(accessorName)) {\n    accessor = Object.getOwnPropertyDescriptor(Node.prototype, accessorName);\n  }\n  if (!accessor) {\n    accessor = Object.getOwnPropertyDescriptor(node, accessorName);\n  }\n  if (accessor) Object.defineProperty(node, \"__\" + accessorName, accessor);\n}\nfunction internalCall(node, method) {\n  if (\"__\" + method in node) {\n    const toReturn = node[\"__\" + method];\n    if (typeof toReturn !== \"function\") return toReturn;\n    return toReturn.bind(node);\n  } else {\n    if (typeof node[method] !== \"function\") return node[method];\n    return node[method].bind(node);\n  }\n}\n\n// src/runtime/profile.ts\nimport { BUILD as BUILD10 } from \"@stencil/core/internal/app-data\";\nvar i = 0;\nvar createTime = (fnName, tagName = \"\") => {\n  if (BUILD10.profile && performance.mark) {\n    const key = `st:${fnName}:${tagName}:${i++}`;\n    performance.mark(key);\n    return () => performance.measure(`[Stencil] ${fnName}() <${tagName}>`, key);\n  } else {\n    return () => {\n      return;\n    };\n  }\n};\nvar uniqueTime = (key, measureText) => {\n  if (BUILD10.profile && performance.mark) {\n    if (performance.getEntriesByName(key, \"mark\").length === 0) {\n      performance.mark(key);\n    }\n    return () => {\n      if (performance.getEntriesByName(measureText, \"measure\").length === 0) {\n        performance.measure(measureText, key);\n      }\n    };\n  } else {\n    return () => {\n      return;\n    };\n  }\n};\nvar inspect = (ref) => {\n  const hostRef = getHostRef(ref);\n  if (!hostRef) {\n    return void 0;\n  }\n  const flags = hostRef.$flags$;\n  const hostElement = hostRef.$hostElement$;\n  return {\n    renderCount: hostRef.$renderCount$,\n    flags: {\n      hasRendered: !!(flags & 2 /* hasRendered */),\n      hasConnected: !!(flags & 1 /* hasConnected */),\n      isWaitingForChildren: !!(flags & 4 /* isWaitingForChildren */),\n      isConstructingInstance: !!(flags & 8 /* isConstructingInstance */),\n      isQueuedForUpdate: !!(flags & 16 /* isQueuedForUpdate */),\n      hasInitializedComponent: !!(flags & 32 /* hasInitializedComponent */),\n      hasLoadedComponent: !!(flags & 64 /* hasLoadedComponent */),\n      isWatchReady: !!(flags & 128 /* isWatchReady */),\n      isListenReady: !!(flags & 256 /* isListenReady */),\n      needsRerender: !!(flags & 512 /* needsRerender */)\n    },\n    instanceValues: hostRef.$instanceValues$,\n    ancestorComponent: hostRef.$ancestorComponent$,\n    hostElement,\n    lazyInstance: hostRef.$lazyInstance$,\n    vnode: hostRef.$vnode$,\n    modeName: hostRef.$modeName$,\n    onReadyPromise: hostRef.$onReadyPromise$,\n    onReadyResolve: hostRef.$onReadyResolve$,\n    onInstancePromise: hostRef.$onInstancePromise$,\n    onInstanceResolve: hostRef.$onInstanceResolve$,\n    onRenderResolve: hostRef.$onRenderResolve$,\n    queuedListeners: hostRef.$queuedListeners$,\n    rmListeners: hostRef.$rmListeners$,\n    [\"s-id\"]: hostElement[\"s-id\"],\n    [\"s-cr\"]: hostElement[\"s-cr\"],\n    [\"s-lr\"]: hostElement[\"s-lr\"],\n    [\"s-p\"]: hostElement[\"s-p\"],\n    [\"s-rc\"]: hostElement[\"s-rc\"],\n    [\"s-sc\"]: hostElement[\"s-sc\"]\n  };\n};\nvar installDevTools = () => {\n  if (BUILD10.devTools) {\n    const stencil = win.stencil = win.stencil || {};\n    const originalInspect = stencil.inspect;\n    stencil.inspect = (ref) => {\n      let result = inspect(ref);\n      if (!result && typeof originalInspect === \"function\") {\n        result = originalInspect(ref);\n      }\n      return result;\n    };\n  }\n};\n\n// src/runtime/vdom/h.ts\nimport { BUILD as BUILD11 } from \"@stencil/core/internal/app-data\";\nvar h = (nodeName, vnodeData, ...children) => {\n  let child = null;\n  let key = null;\n  let slotName = null;\n  let simple = false;\n  let lastSimple = false;\n  const vNodeChildren = [];\n  const walk = (c) => {\n    for (let i2 = 0; i2 < c.length; i2++) {\n      child = c[i2];\n      if (Array.isArray(child)) {\n        walk(child);\n      } else if (child != null && typeof child !== \"boolean\") {\n        if (simple = typeof nodeName !== \"function\" && !isComplexType(child)) {\n          child = String(child);\n        } else if (BUILD11.isDev && typeof nodeName !== \"function\" && child.$flags$ === void 0) {\n          consoleDevError(`vNode passed as children has unexpected type.\nMake sure it's using the correct h() function.\nEmpty objects can also be the cause, look for JSX comments that became objects.`);\n        }\n        if (simple && lastSimple) {\n          vNodeChildren[vNodeChildren.length - 1].$text$ += child;\n        } else {\n          vNodeChildren.push(simple ? newVNode(null, child) : child);\n        }\n        lastSimple = simple;\n      }\n    }\n  };\n  walk(children);\n  if (vnodeData) {\n    if (BUILD11.isDev && nodeName === \"input\") {\n      validateInputProperties(vnodeData);\n    }\n    if (BUILD11.vdomKey && vnodeData.key) {\n      key = vnodeData.key;\n    }\n    if (BUILD11.slotRelocation && vnodeData.name) {\n      slotName = vnodeData.name;\n    }\n    if (BUILD11.vdomClass) {\n      const classData = vnodeData.className || vnodeData.class;\n      if (classData) {\n        vnodeData.class = typeof classData !== \"object\" ? classData : Object.keys(classData).filter((k) => classData[k]).join(\" \");\n      }\n    }\n  }\n  if (BUILD11.isDev && vNodeChildren.some(isHost)) {\n    consoleDevError(`The <Host> must be the single root component. Make sure:\n- You are NOT using hostData() and <Host> in the same component.\n- <Host> is used once, and it's the single root component of the render() function.`);\n  }\n  if (BUILD11.vdomFunctional && typeof nodeName === \"function\") {\n    return nodeName(\n      vnodeData === null ? {} : vnodeData,\n      vNodeChildren,\n      vdomFnUtils\n    );\n  }\n  const vnode = newVNode(nodeName, null);\n  vnode.$attrs$ = vnodeData;\n  if (vNodeChildren.length > 0) {\n    vnode.$children$ = vNodeChildren;\n  }\n  if (BUILD11.vdomKey) {\n    vnode.$key$ = key;\n  }\n  if (BUILD11.slotRelocation) {\n    vnode.$name$ = slotName;\n  }\n  return vnode;\n};\nvar newVNode = (tag, text) => {\n  const vnode = {\n    $flags$: 0,\n    $tag$: tag,\n    $text$: text,\n    $elm$: null,\n    $children$: null\n  };\n  if (BUILD11.vdomAttribute) {\n    vnode.$attrs$ = null;\n  }\n  if (BUILD11.vdomKey) {\n    vnode.$key$ = null;\n  }\n  if (BUILD11.slotRelocation) {\n    vnode.$name$ = null;\n  }\n  return vnode;\n};\nvar Host = {};\nvar isHost = (node) => node && node.$tag$ === Host;\nvar vdomFnUtils = {\n  forEach: (children, cb) => children.map(convertToPublic).forEach(cb),\n  map: (children, cb) => children.map(convertToPublic).map(cb).map(convertToPrivate)\n};\nvar convertToPublic = (node) => ({\n  vattrs: node.$attrs$,\n  vchildren: node.$children$,\n  vkey: node.$key$,\n  vname: node.$name$,\n  vtag: node.$tag$,\n  vtext: node.$text$\n});\nvar convertToPrivate = (node) => {\n  if (typeof node.vtag === \"function\") {\n    const vnodeData = { ...node.vattrs };\n    if (node.vkey) {\n      vnodeData.key = node.vkey;\n    }\n    if (node.vname) {\n      vnodeData.name = node.vname;\n    }\n    return h(node.vtag, vnodeData, ...node.vchildren || []);\n  }\n  const vnode = newVNode(node.vtag, node.vtext);\n  vnode.$attrs$ = node.vattrs;\n  vnode.$children$ = node.vchildren;\n  vnode.$key$ = node.vkey;\n  vnode.$name$ = node.vname;\n  return vnode;\n};\nvar validateInputProperties = (inputElm) => {\n  const props = Object.keys(inputElm);\n  const value = props.indexOf(\"value\");\n  if (value === -1) {\n    return;\n  }\n  const typeIndex = props.indexOf(\"type\");\n  const minIndex = props.indexOf(\"min\");\n  const maxIndex = props.indexOf(\"max\");\n  const stepIndex = props.indexOf(\"step\");\n  if (value < typeIndex || value < minIndex || value < maxIndex || value < stepIndex) {\n    consoleDevWarn(`The \"value\" prop of <input> should be set after \"min\", \"max\", \"type\" and \"step\"`);\n  }\n};\n\n// src/runtime/client-hydrate.ts\nvar initializeClientHydrate = (hostElm, tagName, hostId, hostRef) => {\n  const endHydrate = createTime(\"hydrateClient\", tagName);\n  const shadowRoot = hostElm.shadowRoot;\n  const childRenderNodes = [];\n  const slotNodes = [];\n  const slottedNodes = [];\n  const shadowRootNodes = BUILD12.shadowDom && shadowRoot ? [] : null;\n  const vnode = newVNode(tagName, null);\n  vnode.$elm$ = hostElm;\n  let scopeId2;\n  if (BUILD12.scoped) {\n    const cmpMeta = hostRef.$cmpMeta$;\n    if (cmpMeta && cmpMeta.$flags$ & 10 /* needsScopedEncapsulation */ && hostElm[\"s-sc\"]) {\n      scopeId2 = hostElm[\"s-sc\"];\n      hostElm.classList.add(scopeId2 + \"-h\");\n    } else if (hostElm[\"s-sc\"]) {\n      delete hostElm[\"s-sc\"];\n    }\n  }\n  if (win.document && (!plt.$orgLocNodes$ || !plt.$orgLocNodes$.size)) {\n    initializeDocumentHydrate(win.document.body, plt.$orgLocNodes$ = /* @__PURE__ */ new Map());\n  }\n  hostElm[HYDRATE_ID] = hostId;\n  hostElm.removeAttribute(HYDRATE_ID);\n  hostRef.$vnode$ = clientHydrate(\n    vnode,\n    childRenderNodes,\n    slotNodes,\n    shadowRootNodes,\n    hostElm,\n    hostElm,\n    hostId,\n    slottedNodes\n  );\n  let crIndex = 0;\n  const crLength = childRenderNodes.length;\n  let childRenderNode;\n  for (crIndex; crIndex < crLength; crIndex++) {\n    childRenderNode = childRenderNodes[crIndex];\n    const orgLocationId = childRenderNode.$hostId$ + \".\" + childRenderNode.$nodeId$;\n    const orgLocationNode = plt.$orgLocNodes$.get(orgLocationId);\n    const node = childRenderNode.$elm$;\n    if (!shadowRoot) {\n      node[\"s-hn\"] = tagName.toUpperCase();\n      if (childRenderNode.$tag$ === \"slot\") {\n        node[\"s-cr\"] = hostElm[\"s-cr\"];\n      }\n    }\n    if (childRenderNode.$tag$ === \"slot\") {\n      childRenderNode.$name$ = childRenderNode.$elm$[\"s-sn\"] || childRenderNode.$elm$[\"name\"] || null;\n      if (childRenderNode.$children$) {\n        childRenderNode.$flags$ |= 2 /* isSlotFallback */;\n        if (!childRenderNode.$elm$.childNodes.length) {\n          childRenderNode.$children$.forEach((c) => {\n            childRenderNode.$elm$.appendChild(c.$elm$);\n          });\n        }\n      } else {\n        childRenderNode.$flags$ |= 1 /* isSlotReference */;\n      }\n    }\n    if (orgLocationNode && orgLocationNode.isConnected) {\n      if (shadowRoot && orgLocationNode[\"s-en\"] === \"\") {\n        orgLocationNode.parentNode.insertBefore(node, orgLocationNode.nextSibling);\n      }\n      orgLocationNode.parentNode.removeChild(orgLocationNode);\n      if (!shadowRoot) {\n        node[\"s-oo\"] = parseInt(childRenderNode.$nodeId$);\n      }\n    }\n    plt.$orgLocNodes$.delete(orgLocationId);\n  }\n  const hosts = [];\n  const snLen = slottedNodes.length;\n  let snIndex = 0;\n  let slotGroup;\n  let snGroupIdx;\n  let snGroupLen;\n  let slottedItem;\n  for (snIndex; snIndex < snLen; snIndex++) {\n    slotGroup = slottedNodes[snIndex];\n    if (!slotGroup || !slotGroup.length) continue;\n    snGroupLen = slotGroup.length;\n    snGroupIdx = 0;\n    for (snGroupIdx; snGroupIdx < snGroupLen; snGroupIdx++) {\n      slottedItem = slotGroup[snGroupIdx];\n      if (!hosts[slottedItem.hostId]) {\n        hosts[slottedItem.hostId] = plt.$orgLocNodes$.get(slottedItem.hostId);\n      }\n      if (!hosts[slottedItem.hostId]) continue;\n      const hostEle = hosts[slottedItem.hostId];\n      if (!hostEle.shadowRoot || !shadowRoot) {\n        slottedItem.slot[\"s-cr\"] = hostEle[\"s-cr\"];\n        if (!slottedItem.slot[\"s-cr\"] && hostEle.shadowRoot) {\n          slottedItem.slot[\"s-cr\"] = hostEle;\n        } else {\n          slottedItem.slot[\"s-cr\"] = (hostEle.__childNodes || hostEle.childNodes)[0];\n        }\n        addSlotRelocateNode(slottedItem.node, slottedItem.slot, false, slottedItem.node[\"s-oo\"]);\n        if (BUILD12.experimentalSlotFixes) {\n          patchSlottedNode(slottedItem.node);\n        }\n      }\n      if (hostEle.shadowRoot && slottedItem.node.parentElement !== hostEle) {\n        hostEle.appendChild(slottedItem.node);\n      }\n    }\n  }\n  if (BUILD12.scoped && scopeId2 && slotNodes.length) {\n    slotNodes.forEach((slot) => {\n      slot.$elm$.parentElement.classList.add(scopeId2 + \"-s\");\n    });\n  }\n  if (BUILD12.shadowDom && shadowRoot && !shadowRoot.childNodes.length) {\n    let rnIdex = 0;\n    const rnLen = shadowRootNodes.length;\n    if (rnLen) {\n      for (rnIdex; rnIdex < rnLen; rnIdex++) {\n        shadowRoot.appendChild(shadowRootNodes[rnIdex]);\n      }\n      Array.from(hostElm.childNodes).forEach((node) => {\n        if (typeof node[\"s-sn\"] !== \"string\") {\n          if (node.nodeType === 1 /* ElementNode */ && node.slot && node.hidden) {\n            node.removeAttribute(\"hidden\");\n          } else if (node.nodeType === 8 /* CommentNode */ || node.nodeType === 3 /* TextNode */ && !node.wholeText.trim()) {\n            node.parentNode.removeChild(node);\n          }\n        }\n      });\n    }\n  }\n  plt.$orgLocNodes$.delete(hostElm[\"s-id\"]);\n  hostRef.$hostElement$ = hostElm;\n  endHydrate();\n};\nvar clientHydrate = (parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node, hostId, slottedNodes = []) => {\n  let childNodeType;\n  let childIdSplt;\n  let childVNode;\n  let i2;\n  const scopeId2 = hostElm[\"s-sc\"];\n  if (node.nodeType === 1 /* ElementNode */) {\n    childNodeType = node.getAttribute(HYDRATE_CHILD_ID);\n    if (childNodeType) {\n      childIdSplt = childNodeType.split(\".\");\n      if (childIdSplt[0] === hostId || childIdSplt[0] === \"0\") {\n        childVNode = createSimpleVNode({\n          $flags$: 0,\n          $hostId$: childIdSplt[0],\n          $nodeId$: childIdSplt[1],\n          $depth$: childIdSplt[2],\n          $index$: childIdSplt[3],\n          $tag$: node.tagName.toLowerCase(),\n          $elm$: node,\n          // If we don't add the initial classes to the VNode, the first `vdom-render.ts` patch\n          // won't try to reconcile them. Classes set on the node will be blown away.\n          $attrs$: { class: node.className || \"\" }\n        });\n        childRenderNodes.push(childVNode);\n        node.removeAttribute(HYDRATE_CHILD_ID);\n        if (!parentVNode.$children$) {\n          parentVNode.$children$ = [];\n        }\n        if (BUILD12.scoped && scopeId2) {\n          node[\"s-si\"] = scopeId2;\n          childVNode.$attrs$.class += \" \" + scopeId2;\n        }\n        const slotName = childVNode.$elm$.getAttribute(\"s-sn\");\n        if (typeof slotName === \"string\") {\n          if (childVNode.$tag$ === \"slot-fb\") {\n            addSlot(\n              slotName,\n              childIdSplt[2],\n              childVNode,\n              node,\n              parentVNode,\n              childRenderNodes,\n              slotNodes,\n              shadowRootNodes,\n              slottedNodes\n            );\n            if (BUILD12.scoped && scopeId2) {\n              node.classList.add(scopeId2);\n            }\n          }\n          childVNode.$elm$[\"s-sn\"] = slotName;\n          childVNode.$elm$.removeAttribute(\"s-sn\");\n        }\n        if (childVNode.$index$ !== void 0) {\n          parentVNode.$children$[childVNode.$index$] = childVNode;\n        }\n        parentVNode = childVNode;\n        if (shadowRootNodes && childVNode.$depth$ === \"0\") {\n          shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n        }\n      }\n    }\n    if (node.shadowRoot) {\n      for (i2 = node.shadowRoot.childNodes.length - 1; i2 >= 0; i2--) {\n        clientHydrate(\n          parentVNode,\n          childRenderNodes,\n          slotNodes,\n          shadowRootNodes,\n          hostElm,\n          node.shadowRoot.childNodes[i2],\n          hostId,\n          slottedNodes\n        );\n      }\n    }\n    const nonShadowNodes = node.__childNodes || node.childNodes;\n    for (i2 = nonShadowNodes.length - 1; i2 >= 0; i2--) {\n      clientHydrate(\n        parentVNode,\n        childRenderNodes,\n        slotNodes,\n        shadowRootNodes,\n        hostElm,\n        nonShadowNodes[i2],\n        hostId,\n        slottedNodes\n      );\n    }\n  } else if (node.nodeType === 8 /* CommentNode */) {\n    childIdSplt = node.nodeValue.split(\".\");\n    if (childIdSplt[1] === hostId || childIdSplt[1] === \"0\") {\n      childNodeType = childIdSplt[0];\n      childVNode = createSimpleVNode({\n        $hostId$: childIdSplt[1],\n        $nodeId$: childIdSplt[2],\n        $depth$: childIdSplt[3],\n        $index$: childIdSplt[4] || \"0\",\n        $elm$: node,\n        $attrs$: null,\n        $children$: null,\n        $key$: null,\n        $name$: null,\n        $tag$: null,\n        $text$: null\n      });\n      if (childNodeType === TEXT_NODE_ID) {\n        childVNode.$elm$ = findCorrespondingNode(node, 3 /* TextNode */);\n        if (childVNode.$elm$ && childVNode.$elm$.nodeType === 3 /* TextNode */) {\n          childVNode.$text$ = childVNode.$elm$.textContent;\n          childRenderNodes.push(childVNode);\n          node.remove();\n          if (hostId === childVNode.$hostId$) {\n            if (!parentVNode.$children$) {\n              parentVNode.$children$ = [];\n            }\n            parentVNode.$children$[childVNode.$index$] = childVNode;\n          }\n          if (shadowRootNodes && childVNode.$depth$ === \"0\") {\n            shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n          }\n        }\n      } else if (childNodeType === COMMENT_NODE_ID) {\n        childVNode.$elm$ = findCorrespondingNode(node, 8 /* CommentNode */);\n        if (childVNode.$elm$ && childVNode.$elm$.nodeType === 8 /* CommentNode */) {\n          childRenderNodes.push(childVNode);\n          node.remove();\n        }\n      } else if (childVNode.$hostId$ === hostId) {\n        if (childNodeType === SLOT_NODE_ID) {\n          const slotName = node[\"s-sn\"] = childIdSplt[5] || \"\";\n          addSlot(\n            slotName,\n            childIdSplt[2],\n            childVNode,\n            node,\n            parentVNode,\n            childRenderNodes,\n            slotNodes,\n            shadowRootNodes,\n            slottedNodes\n          );\n        } else if (childNodeType === CONTENT_REF_ID) {\n          if (BUILD12.shadowDom && shadowRootNodes) {\n            node.remove();\n          } else if (BUILD12.slotRelocation) {\n            hostElm[\"s-cr\"] = node;\n            node[\"s-cn\"] = true;\n          }\n        }\n      }\n    }\n  } else if (parentVNode && parentVNode.$tag$ === \"style\") {\n    const vnode = newVNode(null, node.textContent);\n    vnode.$elm$ = node;\n    vnode.$index$ = \"0\";\n    parentVNode.$children$ = [vnode];\n  } else {\n    if (node.nodeType === 3 /* TextNode */ && !node.wholeText.trim()) {\n      node.remove();\n    }\n  }\n  return parentVNode;\n};\nvar initializeDocumentHydrate = (node, orgLocNodes) => {\n  if (node.nodeType === 1 /* ElementNode */) {\n    const componentId = node[HYDRATE_ID] || node.getAttribute(HYDRATE_ID);\n    if (componentId) {\n      orgLocNodes.set(componentId, node);\n    }\n    let i2 = 0;\n    if (node.shadowRoot) {\n      for (; i2 < node.shadowRoot.childNodes.length; i2++) {\n        initializeDocumentHydrate(node.shadowRoot.childNodes[i2], orgLocNodes);\n      }\n    }\n    const nonShadowNodes = node.__childNodes || node.childNodes;\n    for (i2 = 0; i2 < nonShadowNodes.length; i2++) {\n      initializeDocumentHydrate(nonShadowNodes[i2], orgLocNodes);\n    }\n  } else if (node.nodeType === 8 /* CommentNode */) {\n    const childIdSplt = node.nodeValue.split(\".\");\n    if (childIdSplt[0] === ORG_LOCATION_ID) {\n      orgLocNodes.set(childIdSplt[1] + \".\" + childIdSplt[2], node);\n      node.nodeValue = \"\";\n      node[\"s-en\"] = childIdSplt[3];\n    }\n  }\n};\nvar createSimpleVNode = (vnode) => {\n  const defaultVNode = {\n    $flags$: 0,\n    $hostId$: null,\n    $nodeId$: null,\n    $depth$: null,\n    $index$: \"0\",\n    $elm$: null,\n    $attrs$: null,\n    $children$: null,\n    $key$: null,\n    $name$: null,\n    $tag$: null,\n    $text$: null\n  };\n  return { ...defaultVNode, ...vnode };\n};\nfunction addSlot(slotName, slotId, childVNode, node, parentVNode, childRenderNodes, slotNodes, shadowRootNodes, slottedNodes) {\n  node[\"s-sr\"] = true;\n  childVNode.$name$ = slotName || null;\n  childVNode.$tag$ = \"slot\";\n  const parentNodeId = (parentVNode == null ? void 0 : parentVNode.$elm$) ? parentVNode.$elm$[\"s-id\"] || parentVNode.$elm$.getAttribute(\"s-id\") : \"\";\n  if (BUILD12.shadowDom && shadowRootNodes && win.document) {\n    const slot = childVNode.$elm$ = win.document.createElement(childVNode.$tag$);\n    if (childVNode.$name$) {\n      childVNode.$elm$.setAttribute(\"name\", slotName);\n    }\n    if (parentNodeId && parentNodeId !== childVNode.$hostId$) {\n      parentVNode.$elm$.insertBefore(slot, parentVNode.$elm$.children[0]);\n    } else {\n      node.parentNode.insertBefore(childVNode.$elm$, node);\n    }\n    addSlottedNodes(slottedNodes, slotId, slotName, node, childVNode.$hostId$);\n    node.remove();\n    if (childVNode.$depth$ === \"0\") {\n      shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n    }\n  } else {\n    const slot = childVNode.$elm$;\n    const shouldMove = parentNodeId && parentNodeId !== childVNode.$hostId$ && parentVNode.$elm$.shadowRoot;\n    addSlottedNodes(slottedNodes, slotId, slotName, node, shouldMove ? parentNodeId : childVNode.$hostId$);\n    patchSlotNode(node);\n    if (shouldMove) {\n      parentVNode.$elm$.insertBefore(slot, parentVNode.$elm$.children[0]);\n    }\n    childRenderNodes.push(childVNode);\n  }\n  slotNodes.push(childVNode);\n  if (!parentVNode.$children$) {\n    parentVNode.$children$ = [];\n  }\n  parentVNode.$children$[childVNode.$index$] = childVNode;\n}\nvar addSlottedNodes = (slottedNodes, slotNodeId, slotName, slotNode, hostId) => {\n  let slottedNode = slotNode.nextSibling;\n  slottedNodes[slotNodeId] = slottedNodes[slotNodeId] || [];\n  while (slottedNode && ((slottedNode[\"getAttribute\"] && slottedNode.getAttribute(\"slot\") || slottedNode[\"s-sn\"]) === slotName || slotName === \"\" && !slottedNode[\"s-sn\"] && (slottedNode.nodeType === 8 /* CommentNode */ && slottedNode.nodeValue.indexOf(\".\") !== 1 || slottedNode.nodeType === 3 /* TextNode */))) {\n    slottedNode[\"s-sn\"] = slotName;\n    slottedNodes[slotNodeId].push({ slot: slotNode, node: slottedNode, hostId });\n    slottedNode = slottedNode.nextSibling;\n  }\n};\nvar findCorrespondingNode = (node, type) => {\n  let sibling = node;\n  do {\n    sibling = sibling.nextSibling;\n  } while (sibling && (sibling.nodeType !== type || !sibling.nodeValue));\n  return sibling;\n};\n\n// src/runtime/initialize-component.ts\nimport { BUILD as BUILD23 } from \"@stencil/core/internal/app-data\";\n\n// src/utils/shadow-css.ts\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n *\n * This file is a port of shadowCSS from `webcomponents.js` to TypeScript.\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\n */\nvar safeSelector = (selector) => {\n  const placeholders = [];\n  let index = 0;\n  selector = selector.replace(/(\\[[^\\]]*\\])/g, (_, keep) => {\n    const replaceBy = `__ph-${index}__`;\n    placeholders.push(keep);\n    index++;\n    return replaceBy;\n  });\n  const content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, (_, pseudo, exp) => {\n    const replaceBy = `__ph-${index}__`;\n    placeholders.push(exp);\n    index++;\n    return pseudo + replaceBy;\n  });\n  const ss = {\n    content,\n    placeholders\n  };\n  return ss;\n};\nvar restoreSafeSelector = (placeholders, content) => {\n  return content.replace(/__ph-(\\d+)__/g, (_, index) => placeholders[+index]);\n};\nvar _polyfillHost = \"-shadowcsshost\";\nvar _polyfillSlotted = \"-shadowcssslotted\";\nvar _polyfillHostContext = \"-shadowcsscontext\";\nvar _parenSuffix = \")(?:\\\\(((?:\\\\([^)(]*\\\\)|[^)(]*)+?)\\\\))?([^,{]*)\";\nvar _cssColonHostRe = new RegExp(\"(\" + _polyfillHost + _parenSuffix, \"gim\");\nvar _cssColonHostContextRe = new RegExp(\"(\" + _polyfillHostContext + _parenSuffix, \"gim\");\nvar _cssColonSlottedRe = new RegExp(\"(\" + _polyfillSlotted + _parenSuffix, \"gim\");\nvar _polyfillHostNoCombinator = _polyfillHost + \"-no-combinator\";\nvar _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nvar _shadowDOMSelectorsRe = [/::shadow/g, /::content/g];\nvar _selectorReSuffix = \"([>\\\\s~+[.,{:][\\\\s\\\\S]*)?$\";\nvar _polyfillHostRe = /-shadowcsshost/gim;\nvar createSupportsRuleRe = (selector) => new RegExp(`((?<!(^@supports(.*)))|(?<={.*))(${selector}\\\\b)`, \"gim\");\nvar _colonSlottedRe = createSupportsRuleRe(\"::slotted\");\nvar _colonHostRe = createSupportsRuleRe(\":host\");\nvar _colonHostContextRe = createSupportsRuleRe(\":host-context\");\nvar _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\nvar stripComments = (input) => {\n  return input.replace(_commentRe, \"\");\n};\nvar _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\nvar extractCommentsWithHash = (input) => {\n  return input.match(_commentWithHashRe) || [];\n};\nvar _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nvar _curlyRe = /([{}])/g;\nvar _selectorPartsRe = /(^.*?[^\\\\])??((:+)(.*)|$)/;\nvar OPEN_CURLY = \"{\";\nvar CLOSE_CURLY = \"}\";\nvar BLOCK_PLACEHOLDER = \"%BLOCK%\";\nvar processRules = (input, ruleCallback) => {\n  const inputWithEscapedBlocks = escapeBlocks(input);\n  let nextBlockIndex = 0;\n  return inputWithEscapedBlocks.escapedString.replace(_ruleRe, (...m) => {\n    const selector = m[2];\n    let content = \"\";\n    let suffix = m[4];\n    let contentPrefix = \"\";\n    if (suffix && suffix.startsWith(\"{\" + BLOCK_PLACEHOLDER)) {\n      content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n      suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n      contentPrefix = \"{\";\n    }\n    const cssRule = {\n      selector,\n      content\n    };\n    const rule = ruleCallback(cssRule);\n    return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;\n  });\n};\nvar escapeBlocks = (input) => {\n  const inputParts = input.split(_curlyRe);\n  const resultParts = [];\n  const escapedBlocks = [];\n  let bracketCount = 0;\n  let currentBlockParts = [];\n  for (let partIndex = 0; partIndex < inputParts.length; partIndex++) {\n    const part = inputParts[partIndex];\n    if (part === CLOSE_CURLY) {\n      bracketCount--;\n    }\n    if (bracketCount > 0) {\n      currentBlockParts.push(part);\n    } else {\n      if (currentBlockParts.length > 0) {\n        escapedBlocks.push(currentBlockParts.join(\"\"));\n        resultParts.push(BLOCK_PLACEHOLDER);\n        currentBlockParts = [];\n      }\n      resultParts.push(part);\n    }\n    if (part === OPEN_CURLY) {\n      bracketCount++;\n    }\n  }\n  if (currentBlockParts.length > 0) {\n    escapedBlocks.push(currentBlockParts.join(\"\"));\n    resultParts.push(BLOCK_PLACEHOLDER);\n  }\n  const strEscapedBlocks = {\n    escapedString: resultParts.join(\"\"),\n    blocks: escapedBlocks\n  };\n  return strEscapedBlocks;\n};\nvar insertPolyfillHostInCssText = (cssText) => {\n  cssText = cssText.replace(_colonHostContextRe, `$1${_polyfillHostContext}`).replace(_colonHostRe, `$1${_polyfillHost}`).replace(_colonSlottedRe, `$1${_polyfillSlotted}`);\n  return cssText;\n};\nvar convertColonRule = (cssText, regExp, partReplacer) => {\n  return cssText.replace(regExp, (...m) => {\n    if (m[2]) {\n      const parts = m[2].split(\",\");\n      const r = [];\n      for (let i2 = 0; i2 < parts.length; i2++) {\n        const p = parts[i2].trim();\n        if (!p) break;\n        r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n      }\n      return r.join(\",\");\n    } else {\n      return _polyfillHostNoCombinator + m[3];\n    }\n  });\n};\nvar colonHostPartReplacer = (host, part, suffix) => {\n  return host + part.replace(_polyfillHost, \"\") + suffix;\n};\nvar convertColonHost = (cssText) => {\n  return convertColonRule(cssText, _cssColonHostRe, colonHostPartReplacer);\n};\nvar colonHostContextPartReplacer = (host, part, suffix) => {\n  if (part.indexOf(_polyfillHost) > -1) {\n    return colonHostPartReplacer(host, part, suffix);\n  } else {\n    return host + part + suffix + \", \" + part + \" \" + host + suffix;\n  }\n};\nvar convertColonSlotted = (cssText, slotScopeId) => {\n  const slotClass = \".\" + slotScopeId + \" > \";\n  const selectors = [];\n  cssText = cssText.replace(_cssColonSlottedRe, (...m) => {\n    if (m[2]) {\n      const compound = m[2].trim();\n      const suffix = m[3];\n      const slottedSelector = slotClass + compound + suffix;\n      let prefixSelector = \"\";\n      for (let i2 = m[4] - 1; i2 >= 0; i2--) {\n        const char = m[5][i2];\n        if (char === \"}\" || char === \",\") {\n          break;\n        }\n        prefixSelector = char + prefixSelector;\n      }\n      const orgSelector = (prefixSelector + slottedSelector).trim();\n      const addedSelector = `${prefixSelector.trimEnd()}${slottedSelector.trim()}`.trim();\n      if (orgSelector !== addedSelector) {\n        const updatedSelector = `${addedSelector}, ${orgSelector}`;\n        selectors.push({\n          orgSelector,\n          updatedSelector\n        });\n      }\n      return slottedSelector;\n    } else {\n      return _polyfillHostNoCombinator + m[3];\n    }\n  });\n  return {\n    selectors,\n    cssText\n  };\n};\nvar convertColonHostContext = (cssText) => {\n  return convertColonRule(cssText, _cssColonHostContextRe, colonHostContextPartReplacer);\n};\nvar convertShadowDOMSelectors = (cssText) => {\n  return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, \" \"), cssText);\n};\nvar makeScopeMatcher = (scopeSelector2) => {\n  const lre = /\\[/g;\n  const rre = /\\]/g;\n  scopeSelector2 = scopeSelector2.replace(lre, \"\\\\[\").replace(rre, \"\\\\]\");\n  return new RegExp(\"^(\" + scopeSelector2 + \")\" + _selectorReSuffix, \"m\");\n};\nvar selectorNeedsScoping = (selector, scopeSelector2) => {\n  const re = makeScopeMatcher(scopeSelector2);\n  return !re.test(selector);\n};\nvar injectScopingSelector = (selector, scopingSelector) => {\n  return selector.replace(_selectorPartsRe, (_, before = \"\", _colonGroup, colon = \"\", after = \"\") => {\n    return before + scopingSelector + colon + after;\n  });\n};\nvar applySimpleSelectorScope = (selector, scopeSelector2, hostSelector) => {\n  _polyfillHostRe.lastIndex = 0;\n  if (_polyfillHostRe.test(selector)) {\n    const replaceBy = `.${hostSelector}`;\n    return selector.replace(_polyfillHostNoCombinatorRe, (_, selector2) => injectScopingSelector(selector2, replaceBy)).replace(_polyfillHostRe, replaceBy + \" \");\n  }\n  return scopeSelector2 + \" \" + selector;\n};\nvar applyStrictSelectorScope = (selector, scopeSelector2, hostSelector) => {\n  const isRe = /\\[is=([^\\]]*)\\]/g;\n  scopeSelector2 = scopeSelector2.replace(isRe, (_, ...parts) => parts[0]);\n  const className = \".\" + scopeSelector2;\n  const _scopeSelectorPart = (p) => {\n    let scopedP = p.trim();\n    if (!scopedP) {\n      return \"\";\n    }\n    if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n      scopedP = applySimpleSelectorScope(p, scopeSelector2, hostSelector);\n    } else {\n      const t = p.replace(_polyfillHostRe, \"\");\n      if (t.length > 0) {\n        scopedP = injectScopingSelector(t, className);\n      }\n    }\n    return scopedP;\n  };\n  const safeContent = safeSelector(selector);\n  selector = safeContent.content;\n  let scopedSelector = \"\";\n  let startIndex = 0;\n  let res;\n  const sep = /( |>|\\+|~(?!=))\\s*/g;\n  const hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\n  let shouldScope = !hasHost;\n  while ((res = sep.exec(selector)) !== null) {\n    const separator = res[1];\n    const part2 = selector.slice(startIndex, res.index).trim();\n    shouldScope = shouldScope || part2.indexOf(_polyfillHostNoCombinator) > -1;\n    const scopedPart = shouldScope ? _scopeSelectorPart(part2) : part2;\n    scopedSelector += `${scopedPart} ${separator} `;\n    startIndex = sep.lastIndex;\n  }\n  const part = selector.substring(startIndex);\n  shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n  scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\n  return restoreSafeSelector(safeContent.placeholders, scopedSelector);\n};\nvar scopeSelector = (selector, scopeSelectorText, hostSelector, slotSelector) => {\n  return selector.split(\",\").map((shallowPart) => {\n    if (slotSelector && shallowPart.indexOf(\".\" + slotSelector) > -1) {\n      return shallowPart.trim();\n    }\n    if (selectorNeedsScoping(shallowPart, scopeSelectorText)) {\n      return applyStrictSelectorScope(shallowPart, scopeSelectorText, hostSelector).trim();\n    } else {\n      return shallowPart.trim();\n    }\n  }).join(\", \");\n};\nvar scopeSelectors = (cssText, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector) => {\n  return processRules(cssText, (rule) => {\n    let selector = rule.selector;\n    let content = rule.content;\n    if (rule.selector[0] !== \"@\") {\n      selector = scopeSelector(rule.selector, scopeSelectorText, hostSelector, slotSelector);\n    } else if (rule.selector.startsWith(\"@media\") || rule.selector.startsWith(\"@supports\") || rule.selector.startsWith(\"@page\") || rule.selector.startsWith(\"@document\")) {\n      content = scopeSelectors(rule.content, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector);\n    }\n    const cssRule = {\n      selector: selector.replace(/\\s{2,}/g, \" \").trim(),\n      content\n    };\n    return cssRule;\n  });\n};\nvar scopeCssText = (cssText, scopeId2, hostScopeId, slotScopeId, commentOriginalSelector) => {\n  cssText = insertPolyfillHostInCssText(cssText);\n  cssText = convertColonHost(cssText);\n  cssText = convertColonHostContext(cssText);\n  const slotted = convertColonSlotted(cssText, slotScopeId);\n  cssText = slotted.cssText;\n  cssText = convertShadowDOMSelectors(cssText);\n  if (scopeId2) {\n    cssText = scopeSelectors(cssText, scopeId2, hostScopeId, slotScopeId, commentOriginalSelector);\n  }\n  cssText = replaceShadowCssHost(cssText, hostScopeId);\n  cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, \" $1 \");\n  return {\n    cssText: cssText.trim(),\n    // We need to replace the shadow CSS host string in each of these selectors since we created\n    // them prior to the replacement happening in the components CSS text.\n    slottedSelectors: slotted.selectors.map((ref) => ({\n      orgSelector: replaceShadowCssHost(ref.orgSelector, hostScopeId),\n      updatedSelector: replaceShadowCssHost(ref.updatedSelector, hostScopeId)\n    }))\n  };\n};\nvar replaceShadowCssHost = (cssText, hostScopeId) => {\n  return cssText.replace(/-shadowcsshost-no-combinator/g, `.${hostScopeId}`);\n};\nvar scopeCss = (cssText, scopeId2, commentOriginalSelector) => {\n  const hostScopeId = scopeId2 + \"-h\";\n  const slotScopeId = scopeId2 + \"-s\";\n  const commentsWithHash = extractCommentsWithHash(cssText);\n  cssText = stripComments(cssText);\n  const orgSelectors = [];\n  if (commentOriginalSelector) {\n    const processCommentedSelector = (rule) => {\n      const placeholder = `/*!@___${orgSelectors.length}___*/`;\n      const comment = `/*!@${rule.selector}*/`;\n      orgSelectors.push({ placeholder, comment });\n      rule.selector = placeholder + rule.selector;\n      return rule;\n    };\n    cssText = processRules(cssText, (rule) => {\n      if (rule.selector[0] !== \"@\") {\n        return processCommentedSelector(rule);\n      } else if (rule.selector.startsWith(\"@media\") || rule.selector.startsWith(\"@supports\") || rule.selector.startsWith(\"@page\") || rule.selector.startsWith(\"@document\")) {\n        rule.content = processRules(rule.content, processCommentedSelector);\n        return rule;\n      }\n      return rule;\n    });\n  }\n  const scoped = scopeCssText(cssText, scopeId2, hostScopeId, slotScopeId, commentOriginalSelector);\n  cssText = [scoped.cssText, ...commentsWithHash].join(\"\\n\");\n  if (commentOriginalSelector) {\n    orgSelectors.forEach(({ placeholder, comment }) => {\n      cssText = cssText.replace(placeholder, comment);\n    });\n  }\n  scoped.slottedSelectors.forEach((slottedSelector) => {\n    const regex = new RegExp(escapeRegExpSpecialCharacters(slottedSelector.orgSelector), \"g\");\n    cssText = cssText.replace(regex, slottedSelector.updatedSelector);\n  });\n  return cssText;\n};\n\n// src/runtime/mode.ts\nvar computeMode = (elm) => modeResolutionChain.map((h2) => h2(elm)).find((m) => !!m);\nvar setMode = (handler) => modeResolutionChain.push(handler);\nvar getMode = (ref) => getHostRef(ref).$modeName$;\n\n// src/runtime/proxy-component.ts\nimport { BUILD as BUILD22 } from \"@stencil/core/internal/app-data\";\n\n// src/runtime/set-value.ts\nimport { BUILD as BUILD21 } from \"@stencil/core/internal/app-data\";\n\n// src/runtime/parse-property-value.ts\nimport { BUILD as BUILD13 } from \"@stencil/core/internal/app-data\";\nvar parsePropertyValue = (propValue, propType) => {\n  if (propValue != null && !isComplexType(propValue)) {\n    if (BUILD13.propBoolean && propType & 4 /* Boolean */) {\n      return propValue === \"false\" ? false : propValue === \"\" || !!propValue;\n    }\n    if (BUILD13.propNumber && propType & 2 /* Number */) {\n      return parseFloat(propValue);\n    }\n    if (BUILD13.propString && propType & 1 /* String */) {\n      return String(propValue);\n    }\n    return propValue;\n  }\n  return propValue;\n};\n\n// src/runtime/update-component.ts\nimport { BUILD as BUILD20, NAMESPACE } from \"@stencil/core/internal/app-data\";\n\n// src/runtime/event-emitter.ts\nimport { BUILD as BUILD15 } from \"@stencil/core/internal/app-data\";\n\n// src/runtime/element.ts\nimport { BUILD as BUILD14 } from \"@stencil/core/internal/app-data\";\nvar getElement = (ref) => BUILD14.lazyLoad ? getHostRef(ref).$hostElement$ : ref;\n\n// src/runtime/event-emitter.ts\nvar createEvent = (ref, name, flags) => {\n  const elm = getElement(ref);\n  return {\n    emit: (detail) => {\n      if (BUILD15.isDev && !elm.isConnected) {\n        consoleDevWarn(`The \"${name}\" event was emitted, but the dispatcher node is no longer connected to the dom.`);\n      }\n      return emitEvent(elm, name, {\n        bubbles: !!(flags & 4 /* Bubbles */),\n        composed: !!(flags & 2 /* Composed */),\n        cancelable: !!(flags & 1 /* Cancellable */),\n        detail\n      });\n    }\n  };\n};\nvar emitEvent = (elm, name, opts) => {\n  const ev = plt.ce(name, opts);\n  elm.dispatchEvent(ev);\n  return ev;\n};\n\n// src/runtime/styles.ts\nimport { BUILD as BUILD16 } from \"@stencil/core/internal/app-data\";\nvar rootAppliedStyles = /* @__PURE__ */ new WeakMap();\nvar registerStyle = (scopeId2, cssText, allowCS) => {\n  let style = styles.get(scopeId2);\n  if (supportsConstructableStylesheets && allowCS) {\n    style = style || new CSSStyleSheet();\n    if (typeof style === \"string\") {\n      style = cssText;\n    } else {\n      style.replaceSync(cssText);\n    }\n  } else {\n    style = cssText;\n  }\n  styles.set(scopeId2, style);\n};\nvar addStyle = (styleContainerNode, cmpMeta, mode) => {\n  var _a;\n  const scopeId2 = getScopeId(cmpMeta, mode);\n  const style = styles.get(scopeId2);\n  if (!BUILD16.attachStyles || !win.document) {\n    return scopeId2;\n  }\n  styleContainerNode = styleContainerNode.nodeType === 11 /* DocumentFragment */ ? styleContainerNode : win.document;\n  if (style) {\n    if (typeof style === \"string\") {\n      styleContainerNode = styleContainerNode.head || styleContainerNode;\n      let appliedStyles = rootAppliedStyles.get(styleContainerNode);\n      let styleElm;\n      if (!appliedStyles) {\n        rootAppliedStyles.set(styleContainerNode, appliedStyles = /* @__PURE__ */ new Set());\n      }\n      if (!appliedStyles.has(scopeId2)) {\n        if (BUILD16.hydrateClientSide && styleContainerNode.host && (styleElm = styleContainerNode.querySelector(`[${HYDRATED_STYLE_ID}=\"${scopeId2}\"]`))) {\n          styleElm.innerHTML = style;\n        } else {\n          styleElm = document.querySelector(`[${HYDRATED_STYLE_ID}=\"${scopeId2}\"]`) || win.document.createElement(\"style\");\n          styleElm.innerHTML = style;\n          const nonce = (_a = plt.$nonce$) != null ? _a : queryNonceMetaTagContent(win.document);\n          if (nonce != null) {\n            styleElm.setAttribute(\"nonce\", nonce);\n          }\n          if ((BUILD16.hydrateServerSide || BUILD16.hotModuleReplacement) && (cmpMeta.$flags$ & 2 /* scopedCssEncapsulation */ || cmpMeta.$flags$ & 128 /* shadowNeedsScopedCss */)) {\n            styleElm.setAttribute(HYDRATED_STYLE_ID, scopeId2);\n          }\n          if (!(cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */)) {\n            if (styleContainerNode.nodeName === \"HEAD\") {\n              const preconnectLinks = styleContainerNode.querySelectorAll(\"link[rel=preconnect]\");\n              const referenceNode2 = preconnectLinks.length > 0 ? preconnectLinks[preconnectLinks.length - 1].nextSibling : styleContainerNode.querySelector(\"style\");\n              styleContainerNode.insertBefore(\n                styleElm,\n                (referenceNode2 == null ? void 0 : referenceNode2.parentNode) === styleContainerNode ? referenceNode2 : null\n              );\n            } else if (\"host\" in styleContainerNode) {\n              if (supportsConstructableStylesheets) {\n                const stylesheet = new CSSStyleSheet();\n                stylesheet.replaceSync(style);\n                styleContainerNode.adoptedStyleSheets = [stylesheet, ...styleContainerNode.adoptedStyleSheets];\n              } else {\n                const existingStyleContainer = styleContainerNode.querySelector(\"style\");\n                if (existingStyleContainer) {\n                  existingStyleContainer.innerHTML = style + existingStyleContainer.innerHTML;\n                } else {\n                  styleContainerNode.prepend(styleElm);\n                }\n              }\n            } else {\n              styleContainerNode.append(styleElm);\n            }\n          }\n          if (cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) {\n            styleContainerNode.insertBefore(styleElm, null);\n          }\n        }\n        if (cmpMeta.$flags$ & 4 /* hasSlotRelocation */) {\n          styleElm.innerHTML += SLOT_FB_CSS;\n        }\n        if (appliedStyles) {\n          appliedStyles.add(scopeId2);\n        }\n      }\n    } else if (BUILD16.constructableCSS && !styleContainerNode.adoptedStyleSheets.includes(style)) {\n      styleContainerNode.adoptedStyleSheets = [...styleContainerNode.adoptedStyleSheets, style];\n    }\n  }\n  return scopeId2;\n};\nvar attachStyles = (hostRef) => {\n  const cmpMeta = hostRef.$cmpMeta$;\n  const elm = hostRef.$hostElement$;\n  const flags = cmpMeta.$flags$;\n  const endAttachStyles = createTime(\"attachStyles\", cmpMeta.$tagName$);\n  const scopeId2 = addStyle(\n    BUILD16.shadowDom && supportsShadow && elm.shadowRoot ? elm.shadowRoot : elm.getRootNode(),\n    cmpMeta,\n    hostRef.$modeName$\n  );\n  if ((BUILD16.shadowDom || BUILD16.scoped) && BUILD16.cssAnnotations && (flags & 10 /* needsScopedEncapsulation */ && flags & 2 /* scopedCssEncapsulation */ || flags & 128 /* shadowNeedsScopedCss */)) {\n    elm[\"s-sc\"] = scopeId2;\n    elm.classList.add(scopeId2 + \"-h\");\n  }\n  endAttachStyles();\n};\nvar getScopeId = (cmp, mode) => \"sc-\" + (BUILD16.mode && mode && cmp.$flags$ & 32 /* hasMode */ ? cmp.$tagName$ + \"-\" + mode : cmp.$tagName$);\nvar convertScopedToShadow = (css) => css.replace(/\\/\\*!@([^\\/]+)\\*\\/[^\\{]+\\{/g, \"$1{\");\nvar hydrateScopedToShadow = () => {\n  if (!win.document) {\n    return;\n  }\n  const styles2 = win.document.querySelectorAll(`[${HYDRATED_STYLE_ID}]`);\n  let i2 = 0;\n  for (; i2 < styles2.length; i2++) {\n    registerStyle(styles2[i2].getAttribute(HYDRATED_STYLE_ID), convertScopedToShadow(styles2[i2].innerHTML), true);\n  }\n};\n\n// src/runtime/vdom/vdom-render.ts\nimport { BUILD as BUILD19 } from \"@stencil/core/internal/app-data\";\n\n// src/runtime/vdom/update-element.ts\nimport { BUILD as BUILD18 } from \"@stencil/core/internal/app-data\";\n\n// src/runtime/vdom/set-accessor.ts\nimport { BUILD as BUILD17 } from \"@stencil/core/internal/app-data\";\nvar setAccessor = (elm, memberName, oldValue, newValue, isSvg, flags, initialRender) => {\n  if (oldValue === newValue) {\n    return;\n  }\n  let isProp = isMemberInElement(elm, memberName);\n  let ln = memberName.toLowerCase();\n  if (BUILD17.vdomClass && memberName === \"class\") {\n    const classList = elm.classList;\n    const oldClasses = parseClassList(oldValue);\n    let newClasses = parseClassList(newValue);\n    if (BUILD17.hydrateClientSide && elm[\"s-si\"] && initialRender) {\n      newClasses.push(elm[\"s-si\"]);\n      oldClasses.forEach((c) => {\n        if (c.startsWith(elm[\"s-si\"])) newClasses.push(c);\n      });\n      newClasses = [...new Set(newClasses)];\n      classList.add(...newClasses);\n    } else {\n      classList.remove(...oldClasses.filter((c) => c && !newClasses.includes(c)));\n      classList.add(...newClasses.filter((c) => c && !oldClasses.includes(c)));\n    }\n  } else if (BUILD17.vdomStyle && memberName === \"style\") {\n    if (BUILD17.updatable) {\n      for (const prop in oldValue) {\n        if (!newValue || newValue[prop] == null) {\n          if (!BUILD17.hydrateServerSide && prop.includes(\"-\")) {\n            elm.style.removeProperty(prop);\n          } else {\n            elm.style[prop] = \"\";\n          }\n        }\n      }\n    }\n    for (const prop in newValue) {\n      if (!oldValue || newValue[prop] !== oldValue[prop]) {\n        if (!BUILD17.hydrateServerSide && prop.includes(\"-\")) {\n          elm.style.setProperty(prop, newValue[prop]);\n        } else {\n          elm.style[prop] = newValue[prop];\n        }\n      }\n    }\n  } else if (BUILD17.vdomKey && memberName === \"key\") {\n  } else if (BUILD17.vdomRef && memberName === \"ref\") {\n    if (newValue) {\n      newValue(elm);\n    }\n  } else if (BUILD17.vdomListener && (BUILD17.lazyLoad ? !isProp : !elm.__lookupSetter__(memberName)) && memberName[0] === \"o\" && memberName[1] === \"n\") {\n    if (memberName[2] === \"-\") {\n      memberName = memberName.slice(3);\n    } else if (isMemberInElement(win, ln)) {\n      memberName = ln.slice(2);\n    } else {\n      memberName = ln[2] + memberName.slice(3);\n    }\n    if (oldValue || newValue) {\n      const capture = memberName.endsWith(CAPTURE_EVENT_SUFFIX);\n      memberName = memberName.replace(CAPTURE_EVENT_REGEX, \"\");\n      if (oldValue) {\n        plt.rel(elm, memberName, oldValue, capture);\n      }\n      if (newValue) {\n        plt.ael(elm, memberName, newValue, capture);\n      }\n    }\n  } else if (BUILD17.vdomPropOrAttr) {\n    const isComplex = isComplexType(newValue);\n    if ((isProp || isComplex && newValue !== null) && !isSvg) {\n      try {\n        if (!elm.tagName.includes(\"-\")) {\n          const n = newValue == null ? \"\" : newValue;\n          if (memberName === \"list\") {\n            isProp = false;\n          } else if (oldValue == null || elm[memberName] != n) {\n            if (typeof elm.__lookupSetter__(memberName) === \"function\") {\n              elm[memberName] = n;\n            } else {\n              elm.setAttribute(memberName, n);\n            }\n          }\n        } else if (elm[memberName] !== newValue) {\n          elm[memberName] = newValue;\n        }\n      } catch (e) {\n      }\n    }\n    let xlink = false;\n    if (BUILD17.vdomXlink) {\n      if (ln !== (ln = ln.replace(/^xlink\\:?/, \"\"))) {\n        memberName = ln;\n        xlink = true;\n      }\n    }\n    if (newValue == null || newValue === false) {\n      if (newValue !== false || elm.getAttribute(memberName) === \"\") {\n        if (BUILD17.vdomXlink && xlink) {\n          elm.removeAttributeNS(XLINK_NS, memberName);\n        } else {\n          elm.removeAttribute(memberName);\n        }\n      }\n    } else if ((!isProp || flags & 4 /* isHost */ || isSvg) && !isComplex && elm.nodeType === 1 /* ElementNode */) {\n      newValue = newValue === true ? \"\" : newValue;\n      if (BUILD17.vdomXlink && xlink) {\n        elm.setAttributeNS(XLINK_NS, memberName, newValue);\n      } else {\n        elm.setAttribute(memberName, newValue);\n      }\n    }\n  }\n};\nvar parseClassListRegex = /\\s/;\nvar parseClassList = (value) => {\n  if (typeof value === \"object\" && value && \"baseVal\" in value) {\n    value = value.baseVal;\n  }\n  if (!value || typeof value !== \"string\") {\n    return [];\n  }\n  return value.split(parseClassListRegex);\n};\nvar CAPTURE_EVENT_SUFFIX = \"Capture\";\nvar CAPTURE_EVENT_REGEX = new RegExp(CAPTURE_EVENT_SUFFIX + \"$\");\n\n// src/runtime/vdom/update-element.ts\nvar updateElement = (oldVnode, newVnode, isSvgMode2, isInitialRender) => {\n  const elm = newVnode.$elm$.nodeType === 11 /* DocumentFragment */ && newVnode.$elm$.host ? newVnode.$elm$.host : newVnode.$elm$;\n  const oldVnodeAttrs = oldVnode && oldVnode.$attrs$ || {};\n  const newVnodeAttrs = newVnode.$attrs$ || {};\n  if (BUILD18.updatable) {\n    for (const memberName of sortedAttrNames(Object.keys(oldVnodeAttrs))) {\n      if (!(memberName in newVnodeAttrs)) {\n        setAccessor(\n          elm,\n          memberName,\n          oldVnodeAttrs[memberName],\n          void 0,\n          isSvgMode2,\n          newVnode.$flags$,\n          isInitialRender\n        );\n      }\n    }\n  }\n  for (const memberName of sortedAttrNames(Object.keys(newVnodeAttrs))) {\n    setAccessor(\n      elm,\n      memberName,\n      oldVnodeAttrs[memberName],\n      newVnodeAttrs[memberName],\n      isSvgMode2,\n      newVnode.$flags$,\n      isInitialRender\n    );\n  }\n};\nfunction sortedAttrNames(attrNames) {\n  return attrNames.includes(\"ref\") ? (\n    // we need to sort these to ensure that `'ref'` is the last attr\n    [...attrNames.filter((attr) => attr !== \"ref\"), \"ref\"]\n  ) : (\n    // no need to sort, return the original array\n    attrNames\n  );\n}\n\n// src/runtime/vdom/vdom-render.ts\nvar scopeId;\nvar contentRef;\nvar hostTagName;\nvar useNativeShadowDom = false;\nvar checkSlotFallbackVisibility = false;\nvar checkSlotRelocate = false;\nvar isSvgMode = false;\nvar createElm = (oldParentVNode, newParentVNode, childIndex) => {\n  var _a;\n  const newVNode2 = newParentVNode.$children$[childIndex];\n  let i2 = 0;\n  let elm;\n  let childNode;\n  let oldVNode;\n  if (BUILD19.slotRelocation && !useNativeShadowDom) {\n    checkSlotRelocate = true;\n    if (newVNode2.$tag$ === \"slot\") {\n      newVNode2.$flags$ |= newVNode2.$children$ ? (\n        // slot element has fallback content\n        // still create an element that \"mocks\" the slot element\n        2 /* isSlotFallback */\n      ) : (\n        // slot element does not have fallback content\n        // create an html comment we'll use to always reference\n        // where actual slot content should sit next to\n        1 /* isSlotReference */\n      );\n    }\n  }\n  if (BUILD19.isDev && newVNode2.$elm$) {\n    consoleDevError(\n      `The JSX ${newVNode2.$text$ !== null ? `\"${newVNode2.$text$}\" text` : `\"${newVNode2.$tag$}\" element`} node should not be shared within the same renderer. The renderer caches element lookups in order to improve performance. However, a side effect from this is that the exact same JSX node should not be reused. For more information please see https://stenciljs.com/docs/templating-jsx#avoid-shared-jsx-nodes`\n    );\n  }\n  if (BUILD19.vdomText && newVNode2.$text$ !== null) {\n    elm = newVNode2.$elm$ = win.document.createTextNode(newVNode2.$text$);\n  } else if (BUILD19.slotRelocation && newVNode2.$flags$ & 1 /* isSlotReference */) {\n    elm = newVNode2.$elm$ = BUILD19.isDebug || BUILD19.hydrateServerSide ? slotReferenceDebugNode(newVNode2) : win.document.createTextNode(\"\");\n    if (BUILD19.vdomAttribute) {\n      updateElement(null, newVNode2, isSvgMode);\n    }\n  } else {\n    if (BUILD19.svg && !isSvgMode) {\n      isSvgMode = newVNode2.$tag$ === \"svg\";\n    }\n    if (!win.document) {\n      throw new Error(\n        \"You are trying to render a Stencil component in an environment that doesn't support the DOM. Make sure to populate the [`window`](https://developer.mozilla.org/en-US/docs/Web/API/Window/window) object before rendering a component.\"\n      );\n    }\n    elm = newVNode2.$elm$ = BUILD19.svg ? win.document.createElementNS(\n      isSvgMode ? SVG_NS : HTML_NS,\n      !useNativeShadowDom && BUILD19.slotRelocation && newVNode2.$flags$ & 2 /* isSlotFallback */ ? \"slot-fb\" : newVNode2.$tag$\n    ) : win.document.createElement(\n      !useNativeShadowDom && BUILD19.slotRelocation && newVNode2.$flags$ & 2 /* isSlotFallback */ ? \"slot-fb\" : newVNode2.$tag$\n    );\n    if (BUILD19.svg && isSvgMode && newVNode2.$tag$ === \"foreignObject\") {\n      isSvgMode = false;\n    }\n    if (BUILD19.vdomAttribute) {\n      updateElement(null, newVNode2, isSvgMode);\n    }\n    if (BUILD19.scoped && isDef(scopeId) && elm[\"s-si\"] !== scopeId) {\n      elm.classList.add(elm[\"s-si\"] = scopeId);\n    }\n    if (newVNode2.$children$) {\n      for (i2 = 0; i2 < newVNode2.$children$.length; ++i2) {\n        childNode = createElm(oldParentVNode, newVNode2, i2);\n        if (childNode) {\n          elm.appendChild(childNode);\n        }\n      }\n    }\n    if (BUILD19.svg) {\n      if (newVNode2.$tag$ === \"svg\") {\n        isSvgMode = false;\n      } else if (elm.tagName === \"foreignObject\") {\n        isSvgMode = true;\n      }\n    }\n  }\n  elm[\"s-hn\"] = hostTagName;\n  if (BUILD19.slotRelocation) {\n    if (newVNode2.$flags$ & (2 /* isSlotFallback */ | 1 /* isSlotReference */)) {\n      elm[\"s-sr\"] = true;\n      elm[\"s-cr\"] = contentRef;\n      elm[\"s-sn\"] = newVNode2.$name$ || \"\";\n      elm[\"s-rf\"] = (_a = newVNode2.$attrs$) == null ? void 0 : _a.ref;\n      patchSlotNode(elm);\n      oldVNode = oldParentVNode && oldParentVNode.$children$ && oldParentVNode.$children$[childIndex];\n      if (oldVNode && oldVNode.$tag$ === newVNode2.$tag$ && oldParentVNode.$elm$) {\n        if (BUILD19.experimentalSlotFixes) {\n          relocateToHostRoot(oldParentVNode.$elm$);\n        } else {\n          putBackInOriginalLocation(oldParentVNode.$elm$, false);\n        }\n      }\n      if (BUILD19.scoped) {\n        addRemoveSlotScopedClass(contentRef, elm, newParentVNode.$elm$, oldParentVNode == null ? void 0 : oldParentVNode.$elm$);\n      }\n    }\n  }\n  return elm;\n};\nvar relocateToHostRoot = (parentElm) => {\n  plt.$flags$ |= 1 /* isTmpDisconnected */;\n  const host = parentElm.closest(hostTagName.toLowerCase());\n  if (host != null) {\n    const contentRefNode = Array.from(host.__childNodes || host.childNodes).find(\n      (ref) => ref[\"s-cr\"]\n    );\n    const childNodeArray = Array.from(\n      parentElm.__childNodes || parentElm.childNodes\n    );\n    for (const childNode of contentRefNode ? childNodeArray.reverse() : childNodeArray) {\n      if (childNode[\"s-sh\"] != null) {\n        insertBefore(host, childNode, contentRefNode != null ? contentRefNode : null);\n        childNode[\"s-sh\"] = void 0;\n        checkSlotRelocate = true;\n      }\n    }\n  }\n  plt.$flags$ &= ~1 /* isTmpDisconnected */;\n};\nvar putBackInOriginalLocation = (parentElm, recursive) => {\n  plt.$flags$ |= 1 /* isTmpDisconnected */;\n  const oldSlotChildNodes = Array.from(parentElm.__childNodes || parentElm.childNodes);\n  if (parentElm[\"s-sr\"] && BUILD19.experimentalSlotFixes) {\n    let node = parentElm;\n    while (node = node.nextSibling) {\n      if (node && node[\"s-sn\"] === parentElm[\"s-sn\"] && node[\"s-sh\"] === hostTagName) {\n        oldSlotChildNodes.push(node);\n      }\n    }\n  }\n  for (let i2 = oldSlotChildNodes.length - 1; i2 >= 0; i2--) {\n    const childNode = oldSlotChildNodes[i2];\n    if (childNode[\"s-hn\"] !== hostTagName && childNode[\"s-ol\"]) {\n      insertBefore(referenceNode(childNode).parentNode, childNode, referenceNode(childNode));\n      childNode[\"s-ol\"].remove();\n      childNode[\"s-ol\"] = void 0;\n      childNode[\"s-sh\"] = void 0;\n      checkSlotRelocate = true;\n    }\n    if (recursive) {\n      putBackInOriginalLocation(childNode, recursive);\n    }\n  }\n  plt.$flags$ &= ~1 /* isTmpDisconnected */;\n};\nvar addVnodes = (parentElm, before, parentVNode, vnodes, startIdx, endIdx) => {\n  let containerElm = BUILD19.slotRelocation && parentElm[\"s-cr\"] && parentElm[\"s-cr\"].parentNode || parentElm;\n  let childNode;\n  if (BUILD19.shadowDom && containerElm.shadowRoot && containerElm.tagName === hostTagName) {\n    containerElm = containerElm.shadowRoot;\n  }\n  for (; startIdx <= endIdx; ++startIdx) {\n    if (vnodes[startIdx]) {\n      childNode = createElm(null, parentVNode, startIdx);\n      if (childNode) {\n        vnodes[startIdx].$elm$ = childNode;\n        insertBefore(containerElm, childNode, BUILD19.slotRelocation ? referenceNode(before) : before);\n      }\n    }\n  }\n};\nvar removeVnodes = (vnodes, startIdx, endIdx) => {\n  for (let index = startIdx; index <= endIdx; ++index) {\n    const vnode = vnodes[index];\n    if (vnode) {\n      const elm = vnode.$elm$;\n      nullifyVNodeRefs(vnode);\n      if (elm) {\n        if (BUILD19.slotRelocation) {\n          checkSlotFallbackVisibility = true;\n          if (elm[\"s-ol\"]) {\n            elm[\"s-ol\"].remove();\n          } else {\n            putBackInOriginalLocation(elm, true);\n          }\n        }\n        elm.remove();\n      }\n    }\n  }\n};\nvar updateChildren = (parentElm, oldCh, newVNode2, newCh, isInitialRender = false) => {\n  let oldStartIdx = 0;\n  let newStartIdx = 0;\n  let idxInOld = 0;\n  let i2 = 0;\n  let oldEndIdx = oldCh.length - 1;\n  let oldStartVnode = oldCh[0];\n  let oldEndVnode = oldCh[oldEndIdx];\n  let newEndIdx = newCh.length - 1;\n  let newStartVnode = newCh[0];\n  let newEndVnode = newCh[newEndIdx];\n  let node;\n  let elmToMove;\n  while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n    if (oldStartVnode == null) {\n      oldStartVnode = oldCh[++oldStartIdx];\n    } else if (oldEndVnode == null) {\n      oldEndVnode = oldCh[--oldEndIdx];\n    } else if (newStartVnode == null) {\n      newStartVnode = newCh[++newStartIdx];\n    } else if (newEndVnode == null) {\n      newEndVnode = newCh[--newEndIdx];\n    } else if (isSameVnode(oldStartVnode, newStartVnode, isInitialRender)) {\n      patch(oldStartVnode, newStartVnode, isInitialRender);\n      oldStartVnode = oldCh[++oldStartIdx];\n      newStartVnode = newCh[++newStartIdx];\n    } else if (isSameVnode(oldEndVnode, newEndVnode, isInitialRender)) {\n      patch(oldEndVnode, newEndVnode, isInitialRender);\n      oldEndVnode = oldCh[--oldEndIdx];\n      newEndVnode = newCh[--newEndIdx];\n    } else if (isSameVnode(oldStartVnode, newEndVnode, isInitialRender)) {\n      if (BUILD19.slotRelocation && (oldStartVnode.$tag$ === \"slot\" || newEndVnode.$tag$ === \"slot\")) {\n        putBackInOriginalLocation(oldStartVnode.$elm$.parentNode, false);\n      }\n      patch(oldStartVnode, newEndVnode, isInitialRender);\n      insertBefore(parentElm, oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\n      oldStartVnode = oldCh[++oldStartIdx];\n      newEndVnode = newCh[--newEndIdx];\n    } else if (isSameVnode(oldEndVnode, newStartVnode, isInitialRender)) {\n      if (BUILD19.slotRelocation && (oldStartVnode.$tag$ === \"slot\" || newEndVnode.$tag$ === \"slot\")) {\n        putBackInOriginalLocation(oldEndVnode.$elm$.parentNode, false);\n      }\n      patch(oldEndVnode, newStartVnode, isInitialRender);\n      insertBefore(parentElm, oldEndVnode.$elm$, oldStartVnode.$elm$);\n      oldEndVnode = oldCh[--oldEndIdx];\n      newStartVnode = newCh[++newStartIdx];\n    } else {\n      idxInOld = -1;\n      if (BUILD19.vdomKey) {\n        for (i2 = oldStartIdx; i2 <= oldEndIdx; ++i2) {\n          if (oldCh[i2] && oldCh[i2].$key$ !== null && oldCh[i2].$key$ === newStartVnode.$key$) {\n            idxInOld = i2;\n            break;\n          }\n        }\n      }\n      if (BUILD19.vdomKey && idxInOld >= 0) {\n        elmToMove = oldCh[idxInOld];\n        if (elmToMove.$tag$ !== newStartVnode.$tag$) {\n          node = createElm(oldCh && oldCh[newStartIdx], newVNode2, idxInOld);\n        } else {\n          patch(elmToMove, newStartVnode, isInitialRender);\n          oldCh[idxInOld] = void 0;\n          node = elmToMove.$elm$;\n        }\n        newStartVnode = newCh[++newStartIdx];\n      } else {\n        node = createElm(oldCh && oldCh[newStartIdx], newVNode2, newStartIdx);\n        newStartVnode = newCh[++newStartIdx];\n      }\n      if (node) {\n        if (BUILD19.slotRelocation) {\n          insertBefore(\n            referenceNode(oldStartVnode.$elm$).parentNode,\n            node,\n            referenceNode(oldStartVnode.$elm$)\n          );\n        } else {\n          insertBefore(oldStartVnode.$elm$.parentNode, node, oldStartVnode.$elm$);\n        }\n      }\n    }\n  }\n  if (oldStartIdx > oldEndIdx) {\n    addVnodes(\n      parentElm,\n      newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$,\n      newVNode2,\n      newCh,\n      newStartIdx,\n      newEndIdx\n    );\n  } else if (BUILD19.updatable && newStartIdx > newEndIdx) {\n    removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n  }\n};\nvar isSameVnode = (leftVNode, rightVNode, isInitialRender = false) => {\n  if (leftVNode.$tag$ === rightVNode.$tag$) {\n    if (BUILD19.slotRelocation && leftVNode.$tag$ === \"slot\") {\n      return leftVNode.$name$ === rightVNode.$name$;\n    }\n    if (BUILD19.vdomKey && !isInitialRender) {\n      return leftVNode.$key$ === rightVNode.$key$;\n    }\n    if (isInitialRender && !leftVNode.$key$ && rightVNode.$key$) {\n      leftVNode.$key$ = rightVNode.$key$;\n    }\n    return true;\n  }\n  return false;\n};\nvar referenceNode = (node) => node && node[\"s-ol\"] || node;\nvar patch = (oldVNode, newVNode2, isInitialRender = false) => {\n  const elm = newVNode2.$elm$ = oldVNode.$elm$;\n  const oldChildren = oldVNode.$children$;\n  const newChildren = newVNode2.$children$;\n  const tag = newVNode2.$tag$;\n  const text = newVNode2.$text$;\n  let defaultHolder;\n  if (!BUILD19.vdomText || text === null) {\n    if (BUILD19.svg) {\n      isSvgMode = tag === \"svg\" ? true : tag === \"foreignObject\" ? false : isSvgMode;\n    }\n    if (BUILD19.vdomAttribute || BUILD19.reflect) {\n      if (BUILD19.slot && tag === \"slot\" && !useNativeShadowDom) {\n        if (BUILD19.experimentalSlotFixes && oldVNode.$name$ !== newVNode2.$name$) {\n          newVNode2.$elm$[\"s-sn\"] = newVNode2.$name$ || \"\";\n          relocateToHostRoot(newVNode2.$elm$.parentElement);\n        }\n      }\n      updateElement(oldVNode, newVNode2, isSvgMode, isInitialRender);\n    }\n    if (BUILD19.updatable && oldChildren !== null && newChildren !== null) {\n      updateChildren(elm, oldChildren, newVNode2, newChildren, isInitialRender);\n    } else if (newChildren !== null) {\n      if (BUILD19.updatable && BUILD19.vdomText && oldVNode.$text$ !== null) {\n        elm.textContent = \"\";\n      }\n      addVnodes(elm, null, newVNode2, newChildren, 0, newChildren.length - 1);\n    } else if (\n      // don't do this on initial render as it can cause non-hydrated content to be removed\n      !isInitialRender && BUILD19.updatable && oldChildren !== null\n    ) {\n      removeVnodes(oldChildren, 0, oldChildren.length - 1);\n    }\n    if (BUILD19.svg && isSvgMode && tag === \"svg\") {\n      isSvgMode = false;\n    }\n  } else if (BUILD19.vdomText && BUILD19.slotRelocation && (defaultHolder = elm[\"s-cr\"])) {\n    defaultHolder.parentNode.textContent = text;\n  } else if (BUILD19.vdomText && oldVNode.$text$ !== text) {\n    elm.data = text;\n  }\n};\nvar relocateNodes = [];\nvar markSlotContentForRelocation = (elm) => {\n  let node;\n  let hostContentNodes;\n  let j;\n  const children = elm.__childNodes || elm.childNodes;\n  for (const childNode of children) {\n    if (childNode[\"s-sr\"] && (node = childNode[\"s-cr\"]) && node.parentNode) {\n      hostContentNodes = node.parentNode.__childNodes || node.parentNode.childNodes;\n      const slotName = childNode[\"s-sn\"];\n      for (j = hostContentNodes.length - 1; j >= 0; j--) {\n        node = hostContentNodes[j];\n        if (!node[\"s-cn\"] && !node[\"s-nr\"] && node[\"s-hn\"] !== childNode[\"s-hn\"] && (!BUILD19.experimentalSlotFixes || !node[\"s-sh\"] || node[\"s-sh\"] !== childNode[\"s-hn\"])) {\n          if (isNodeLocatedInSlot(node, slotName)) {\n            let relocateNodeData = relocateNodes.find((r) => r.$nodeToRelocate$ === node);\n            checkSlotFallbackVisibility = true;\n            node[\"s-sn\"] = node[\"s-sn\"] || slotName;\n            if (relocateNodeData) {\n              relocateNodeData.$nodeToRelocate$[\"s-sh\"] = childNode[\"s-hn\"];\n              relocateNodeData.$slotRefNode$ = childNode;\n            } else {\n              node[\"s-sh\"] = childNode[\"s-hn\"];\n              relocateNodes.push({\n                $slotRefNode$: childNode,\n                $nodeToRelocate$: node\n              });\n            }\n            if (node[\"s-sr\"]) {\n              relocateNodes.map((relocateNode) => {\n                if (isNodeLocatedInSlot(relocateNode.$nodeToRelocate$, node[\"s-sn\"])) {\n                  relocateNodeData = relocateNodes.find((r) => r.$nodeToRelocate$ === node);\n                  if (relocateNodeData && !relocateNode.$slotRefNode$) {\n                    relocateNode.$slotRefNode$ = relocateNodeData.$slotRefNode$;\n                  }\n                }\n              });\n            }\n          } else if (!relocateNodes.some((r) => r.$nodeToRelocate$ === node)) {\n            relocateNodes.push({\n              $nodeToRelocate$: node\n            });\n          }\n        }\n      }\n    }\n    if (childNode.nodeType === 1 /* ElementNode */) {\n      markSlotContentForRelocation(childNode);\n    }\n  }\n};\nvar nullifyVNodeRefs = (vNode) => {\n  if (BUILD19.vdomRef) {\n    vNode.$attrs$ && vNode.$attrs$.ref && vNode.$attrs$.ref(null);\n    vNode.$children$ && vNode.$children$.map(nullifyVNodeRefs);\n  }\n};\nvar insertBefore = (parent, newNode, reference) => {\n  if (BUILD19.scoped && typeof newNode[\"s-sn\"] === \"string\" && !!newNode[\"s-sr\"] && !!newNode[\"s-cr\"]) {\n    addRemoveSlotScopedClass(newNode[\"s-cr\"], newNode, parent, newNode.parentElement);\n  } else if (BUILD19.experimentalSlotFixes && typeof newNode[\"s-sn\"] === \"string\") {\n    if (parent.getRootNode().nodeType !== 11 /* DOCUMENT_FRAGMENT_NODE */) {\n      patchParentNode(newNode);\n    }\n    parent.insertBefore(newNode, reference);\n    const { slotNode } = findSlotFromSlottedNode(newNode);\n    if (slotNode) dispatchSlotChangeEvent(slotNode);\n    return newNode;\n  }\n  if (BUILD19.experimentalSlotFixes && parent.__insertBefore) {\n    return parent.__insertBefore(newNode, reference);\n  } else {\n    return parent == null ? void 0 : parent.insertBefore(newNode, reference);\n  }\n};\nfunction addRemoveSlotScopedClass(reference, slotNode, newParent, oldParent) {\n  var _a, _b;\n  let scopeId2;\n  if (reference && typeof slotNode[\"s-sn\"] === \"string\" && !!slotNode[\"s-sr\"] && reference.parentNode && reference.parentNode[\"s-sc\"] && (scopeId2 = slotNode[\"s-si\"] || reference.parentNode[\"s-sc\"])) {\n    const scopeName = slotNode[\"s-sn\"];\n    const hostName = slotNode[\"s-hn\"];\n    (_a = newParent.classList) == null ? void 0 : _a.add(scopeId2 + \"-s\");\n    if (oldParent && ((_b = oldParent.classList) == null ? void 0 : _b.contains(scopeId2 + \"-s\"))) {\n      let child = (oldParent.__childNodes || oldParent.childNodes)[0];\n      let found = false;\n      while (child) {\n        if (child[\"s-sn\"] !== scopeName && child[\"s-hn\"] === hostName && !!child[\"s-sr\"]) {\n          found = true;\n          break;\n        }\n        child = child.nextSibling;\n      }\n      if (!found) oldParent.classList.remove(scopeId2 + \"-s\");\n    }\n  }\n}\nvar renderVdom = (hostRef, renderFnResults, isInitialLoad = false) => {\n  var _a, _b, _c, _d, _e;\n  const hostElm = hostRef.$hostElement$;\n  const cmpMeta = hostRef.$cmpMeta$;\n  const oldVNode = hostRef.$vnode$ || newVNode(null, null);\n  const rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);\n  hostTagName = hostElm.tagName;\n  if (BUILD19.isDev && Array.isArray(renderFnResults) && renderFnResults.some(isHost)) {\n    throw new Error(`The <Host> must be the single root component.\nLooks like the render() function of \"${hostTagName.toLowerCase()}\" is returning an array that contains the <Host>.\n\nThe render() function should look like this instead:\n\nrender() {\n  // Do not return an array\n  return (\n    <Host>{content}</Host>\n  );\n}\n  `);\n  }\n  if (BUILD19.reflect && cmpMeta.$attrsToReflect$) {\n    rootVnode.$attrs$ = rootVnode.$attrs$ || {};\n    cmpMeta.$attrsToReflect$.map(\n      ([propName, attribute]) => rootVnode.$attrs$[attribute] = hostElm[propName]\n    );\n  }\n  if (isInitialLoad && rootVnode.$attrs$) {\n    for (const key of Object.keys(rootVnode.$attrs$)) {\n      if (hostElm.hasAttribute(key) && ![\"key\", \"ref\", \"style\", \"class\"].includes(key)) {\n        rootVnode.$attrs$[key] = hostElm[key];\n      }\n    }\n  }\n  rootVnode.$tag$ = null;\n  rootVnode.$flags$ |= 4 /* isHost */;\n  hostRef.$vnode$ = rootVnode;\n  rootVnode.$elm$ = oldVNode.$elm$ = BUILD19.shadowDom ? hostElm.shadowRoot || hostElm : hostElm;\n  if (BUILD19.scoped || BUILD19.shadowDom) {\n    scopeId = hostElm[\"s-sc\"];\n  }\n  useNativeShadowDom = supportsShadow && !!(cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) && !(cmpMeta.$flags$ & 128 /* shadowNeedsScopedCss */);\n  if (BUILD19.slotRelocation) {\n    contentRef = hostElm[\"s-cr\"];\n    checkSlotFallbackVisibility = false;\n  }\n  patch(oldVNode, rootVnode, isInitialLoad);\n  if (BUILD19.slotRelocation) {\n    plt.$flags$ |= 1 /* isTmpDisconnected */;\n    if (checkSlotRelocate) {\n      markSlotContentForRelocation(rootVnode.$elm$);\n      for (const relocateData of relocateNodes) {\n        const nodeToRelocate = relocateData.$nodeToRelocate$;\n        if (!nodeToRelocate[\"s-ol\"] && win.document) {\n          const orgLocationNode = BUILD19.isDebug || BUILD19.hydrateServerSide ? originalLocationDebugNode(nodeToRelocate) : win.document.createTextNode(\"\");\n          orgLocationNode[\"s-nr\"] = nodeToRelocate;\n          insertBefore(nodeToRelocate.parentNode, nodeToRelocate[\"s-ol\"] = orgLocationNode, nodeToRelocate);\n        }\n      }\n      for (const relocateData of relocateNodes) {\n        const nodeToRelocate = relocateData.$nodeToRelocate$;\n        const slotRefNode = relocateData.$slotRefNode$;\n        if (slotRefNode) {\n          const parentNodeRef = slotRefNode.parentNode;\n          let insertBeforeNode = slotRefNode.nextSibling;\n          if (!BUILD19.hydrateServerSide && (!BUILD19.experimentalSlotFixes || insertBeforeNode && insertBeforeNode.nodeType === 1 /* ElementNode */)) {\n            let orgLocationNode = (_a = nodeToRelocate[\"s-ol\"]) == null ? void 0 : _a.previousSibling;\n            while (orgLocationNode) {\n              let refNode = (_b = orgLocationNode[\"s-nr\"]) != null ? _b : null;\n              if (refNode && refNode[\"s-sn\"] === nodeToRelocate[\"s-sn\"] && parentNodeRef === (refNode.__parentNode || refNode.parentNode)) {\n                refNode = refNode.nextSibling;\n                while (refNode === nodeToRelocate || (refNode == null ? void 0 : refNode[\"s-sr\"])) {\n                  refNode = refNode == null ? void 0 : refNode.nextSibling;\n                }\n                if (!refNode || !refNode[\"s-nr\"]) {\n                  insertBeforeNode = refNode;\n                  break;\n                }\n              }\n              orgLocationNode = orgLocationNode.previousSibling;\n            }\n          }\n          const parent = nodeToRelocate.__parentNode || nodeToRelocate.parentNode;\n          const nextSibling = nodeToRelocate.__nextSibling || nodeToRelocate.nextSibling;\n          if (!insertBeforeNode && parentNodeRef !== parent || nextSibling !== insertBeforeNode) {\n            if (nodeToRelocate !== insertBeforeNode) {\n              if (!BUILD19.experimentalSlotFixes && !nodeToRelocate[\"s-hn\"] && nodeToRelocate[\"s-ol\"]) {\n                nodeToRelocate[\"s-hn\"] = nodeToRelocate[\"s-ol\"].parentNode.nodeName;\n              }\n              insertBefore(parentNodeRef, nodeToRelocate, insertBeforeNode);\n              if (nodeToRelocate.nodeType === 1 /* ElementNode */ && nodeToRelocate.tagName !== \"SLOT-FB\") {\n                nodeToRelocate.hidden = (_c = nodeToRelocate[\"s-ih\"]) != null ? _c : false;\n              }\n            }\n          }\n          nodeToRelocate && typeof slotRefNode[\"s-rf\"] === \"function\" && slotRefNode[\"s-rf\"](slotRefNode);\n        } else {\n          if (nodeToRelocate.nodeType === 1 /* ElementNode */) {\n            if (isInitialLoad) {\n              nodeToRelocate[\"s-ih\"] = (_d = nodeToRelocate.hidden) != null ? _d : false;\n            }\n            nodeToRelocate.hidden = true;\n          }\n        }\n      }\n    }\n    if (checkSlotFallbackVisibility) {\n      updateFallbackSlotVisibility(rootVnode.$elm$);\n    }\n    plt.$flags$ &= ~1 /* isTmpDisconnected */;\n    relocateNodes.length = 0;\n  }\n  if (BUILD19.experimentalScopedSlotChanges && cmpMeta.$flags$ & 2 /* scopedCssEncapsulation */) {\n    const children = rootVnode.$elm$.__childNodes || rootVnode.$elm$.childNodes;\n    for (const childNode of children) {\n      if (childNode[\"s-hn\"] !== hostTagName && !childNode[\"s-sh\"]) {\n        if (isInitialLoad && childNode[\"s-ih\"] == null) {\n          childNode[\"s-ih\"] = (_e = childNode.hidden) != null ? _e : false;\n        }\n        childNode.hidden = true;\n      }\n    }\n  }\n  contentRef = void 0;\n};\nvar slotReferenceDebugNode = (slotVNode) => {\n  var _a;\n  return (_a = win.document) == null ? void 0 : _a.createComment(\n    `<slot${slotVNode.$name$ ? ' name=\"' + slotVNode.$name$ + '\"' : \"\"}> (host=${hostTagName.toLowerCase()})`\n  );\n};\nvar originalLocationDebugNode = (nodeToRelocate) => {\n  var _a;\n  return (_a = win.document) == null ? void 0 : _a.createComment(\n    `org-location for ` + (nodeToRelocate.localName ? `<${nodeToRelocate.localName}> (host=${nodeToRelocate[\"s-hn\"]})` : `[${nodeToRelocate.textContent}]`)\n  );\n};\n\n// src/runtime/update-component.ts\nvar attachToAncestor = (hostRef, ancestorComponent) => {\n  if (BUILD20.asyncLoading && ancestorComponent && !hostRef.$onRenderResolve$ && ancestorComponent[\"s-p\"]) {\n    const index = ancestorComponent[\"s-p\"].push(\n      new Promise(\n        (r) => hostRef.$onRenderResolve$ = () => {\n          ancestorComponent[\"s-p\"].splice(index - 1, 1);\n          r();\n        }\n      )\n    );\n  }\n};\nvar scheduleUpdate = (hostRef, isInitialLoad) => {\n  if (BUILD20.taskQueue && BUILD20.updatable) {\n    hostRef.$flags$ |= 16 /* isQueuedForUpdate */;\n  }\n  if (BUILD20.asyncLoading && hostRef.$flags$ & 4 /* isWaitingForChildren */) {\n    hostRef.$flags$ |= 512 /* needsRerender */;\n    return;\n  }\n  attachToAncestor(hostRef, hostRef.$ancestorComponent$);\n  const dispatch = () => dispatchHooks(hostRef, isInitialLoad);\n  return BUILD20.taskQueue ? writeTask(dispatch) : dispatch();\n};\nvar dispatchHooks = (hostRef, isInitialLoad) => {\n  const elm = hostRef.$hostElement$;\n  const endSchedule = createTime(\"scheduleUpdate\", hostRef.$cmpMeta$.$tagName$);\n  const instance = BUILD20.lazyLoad ? hostRef.$lazyInstance$ : elm;\n  if (!instance) {\n    throw new Error(\n      `Can't render component <${elm.tagName.toLowerCase()} /> with invalid Stencil runtime! Make sure this imported component is compiled with a \\`externalRuntime: true\\` flag. For more information, please refer to https://stenciljs.com/docs/custom-elements#externalruntime`\n    );\n  }\n  let maybePromise;\n  if (isInitialLoad) {\n    if (BUILD20.lazyLoad && BUILD20.hostListener) {\n      hostRef.$flags$ |= 256 /* isListenReady */;\n      if (hostRef.$queuedListeners$) {\n        hostRef.$queuedListeners$.map(([methodName, event]) => safeCall(instance, methodName, event, elm));\n        hostRef.$queuedListeners$ = void 0;\n      }\n    }\n    emitLifecycleEvent(elm, \"componentWillLoad\");\n    maybePromise = safeCall(instance, \"componentWillLoad\", void 0, elm);\n  } else {\n    emitLifecycleEvent(elm, \"componentWillUpdate\");\n    maybePromise = safeCall(instance, \"componentWillUpdate\", void 0, elm);\n  }\n  emitLifecycleEvent(elm, \"componentWillRender\");\n  maybePromise = enqueue(maybePromise, () => safeCall(instance, \"componentWillRender\", void 0, elm));\n  endSchedule();\n  return enqueue(maybePromise, () => updateComponent(hostRef, instance, isInitialLoad));\n};\nvar enqueue = (maybePromise, fn) => isPromisey(maybePromise) ? maybePromise.then(fn).catch((err2) => {\n  console.error(err2);\n  fn();\n}) : fn();\nvar isPromisey = (maybePromise) => maybePromise instanceof Promise || maybePromise && maybePromise.then && typeof maybePromise.then === \"function\";\nvar updateComponent = async (hostRef, instance, isInitialLoad) => {\n  var _a;\n  const elm = hostRef.$hostElement$;\n  const endUpdate = createTime(\"update\", hostRef.$cmpMeta$.$tagName$);\n  const rc = elm[\"s-rc\"];\n  if (BUILD20.style && isInitialLoad) {\n    attachStyles(hostRef);\n  }\n  const endRender = createTime(\"render\", hostRef.$cmpMeta$.$tagName$);\n  if (BUILD20.isDev) {\n    hostRef.$flags$ |= 1024 /* devOnRender */;\n  }\n  if (BUILD20.hydrateServerSide) {\n    await callRender(hostRef, instance, elm, isInitialLoad);\n  } else {\n    callRender(hostRef, instance, elm, isInitialLoad);\n  }\n  if (BUILD20.isDev) {\n    hostRef.$renderCount$ = hostRef.$renderCount$ === void 0 ? 1 : hostRef.$renderCount$ + 1;\n    hostRef.$flags$ &= ~1024 /* devOnRender */;\n  }\n  if (BUILD20.hydrateServerSide) {\n    try {\n      serverSideConnected(elm);\n      if (isInitialLoad) {\n        if (hostRef.$cmpMeta$.$flags$ & 1 /* shadowDomEncapsulation */) {\n          elm[\"s-en\"] = \"\";\n        } else if (hostRef.$cmpMeta$.$flags$ & 2 /* scopedCssEncapsulation */) {\n          elm[\"s-en\"] = \"c\";\n        }\n      }\n    } catch (e) {\n      consoleError(e, elm);\n    }\n  }\n  if (BUILD20.asyncLoading && rc) {\n    rc.map((cb) => cb());\n    elm[\"s-rc\"] = void 0;\n  }\n  endRender();\n  endUpdate();\n  if (BUILD20.asyncLoading) {\n    const childrenPromises = (_a = elm[\"s-p\"]) != null ? _a : [];\n    const postUpdate = () => postUpdateComponent(hostRef);\n    if (childrenPromises.length === 0) {\n      postUpdate();\n    } else {\n      Promise.all(childrenPromises).then(postUpdate);\n      hostRef.$flags$ |= 4 /* isWaitingForChildren */;\n      childrenPromises.length = 0;\n    }\n  } else {\n    postUpdateComponent(hostRef);\n  }\n};\nvar renderingRef = null;\nvar callRender = (hostRef, instance, elm, isInitialLoad) => {\n  const allRenderFn = BUILD20.allRenderFn ? true : false;\n  const lazyLoad = BUILD20.lazyLoad ? true : false;\n  const taskQueue = BUILD20.taskQueue ? true : false;\n  const updatable = BUILD20.updatable ? true : false;\n  try {\n    renderingRef = instance;\n    instance = allRenderFn ? instance.render() : instance.render && instance.render();\n    if (updatable && taskQueue) {\n      hostRef.$flags$ &= ~16 /* isQueuedForUpdate */;\n    }\n    if (updatable || lazyLoad) {\n      hostRef.$flags$ |= 2 /* hasRendered */;\n    }\n    if (BUILD20.hasRenderFn || BUILD20.reflect) {\n      if (BUILD20.vdomRender || BUILD20.reflect) {\n        if (BUILD20.hydrateServerSide) {\n          return Promise.resolve(instance).then((value) => renderVdom(hostRef, value, isInitialLoad));\n        } else {\n          renderVdom(hostRef, instance, isInitialLoad);\n        }\n      } else {\n        const shadowRoot = elm.shadowRoot;\n        if (hostRef.$cmpMeta$.$flags$ & 1 /* shadowDomEncapsulation */) {\n          shadowRoot.textContent = instance;\n        } else {\n          elm.textContent = instance;\n        }\n      }\n    }\n  } catch (e) {\n    consoleError(e, hostRef.$hostElement$);\n  }\n  renderingRef = null;\n  return null;\n};\nvar getRenderingRef = () => renderingRef;\nvar postUpdateComponent = (hostRef) => {\n  const tagName = hostRef.$cmpMeta$.$tagName$;\n  const elm = hostRef.$hostElement$;\n  const endPostUpdate = createTime(\"postUpdate\", tagName);\n  const instance = BUILD20.lazyLoad ? hostRef.$lazyInstance$ : elm;\n  const ancestorComponent = hostRef.$ancestorComponent$;\n  if (BUILD20.isDev) {\n    hostRef.$flags$ |= 1024 /* devOnRender */;\n  }\n  safeCall(instance, \"componentDidRender\", void 0, elm);\n  if (BUILD20.isDev) {\n    hostRef.$flags$ &= ~1024 /* devOnRender */;\n  }\n  emitLifecycleEvent(elm, \"componentDidRender\");\n  if (!(hostRef.$flags$ & 64 /* hasLoadedComponent */)) {\n    hostRef.$flags$ |= 64 /* hasLoadedComponent */;\n    if (BUILD20.asyncLoading && BUILD20.cssAnnotations) {\n      addHydratedFlag(elm);\n    }\n    if (BUILD20.isDev) {\n      hostRef.$flags$ |= 2048 /* devOnDidLoad */;\n    }\n    safeCall(instance, \"componentDidLoad\", void 0, elm);\n    if (BUILD20.isDev) {\n      hostRef.$flags$ &= ~2048 /* devOnDidLoad */;\n    }\n    emitLifecycleEvent(elm, \"componentDidLoad\");\n    endPostUpdate();\n    if (BUILD20.asyncLoading) {\n      hostRef.$onReadyResolve$(elm);\n      if (!ancestorComponent) {\n        appDidLoad(tagName);\n      }\n    }\n  } else {\n    if (BUILD20.isDev) {\n      hostRef.$flags$ |= 1024 /* devOnRender */;\n    }\n    safeCall(instance, \"componentDidUpdate\", void 0, elm);\n    if (BUILD20.isDev) {\n      hostRef.$flags$ &= ~1024 /* devOnRender */;\n    }\n    emitLifecycleEvent(elm, \"componentDidUpdate\");\n    endPostUpdate();\n  }\n  if (BUILD20.method && BUILD20.lazyLoad) {\n    hostRef.$onInstanceResolve$(elm);\n  }\n  if (BUILD20.asyncLoading) {\n    if (hostRef.$onRenderResolve$) {\n      hostRef.$onRenderResolve$();\n      hostRef.$onRenderResolve$ = void 0;\n    }\n    if (hostRef.$flags$ & 512 /* needsRerender */) {\n      nextTick(() => scheduleUpdate(hostRef, false));\n    }\n    hostRef.$flags$ &= ~(4 /* isWaitingForChildren */ | 512 /* needsRerender */);\n  }\n};\nvar forceUpdate = (ref) => {\n  if (BUILD20.updatable && (Build.isBrowser || Build.isTesting)) {\n    const hostRef = getHostRef(ref);\n    const isConnected = hostRef.$hostElement$.isConnected;\n    if (isConnected && (hostRef.$flags$ & (2 /* hasRendered */ | 16 /* isQueuedForUpdate */)) === 2 /* hasRendered */) {\n      scheduleUpdate(hostRef, false);\n    }\n    return isConnected;\n  }\n  return false;\n};\nvar appDidLoad = (who) => {\n  if (BUILD20.asyncQueue) {\n    plt.$flags$ |= 2 /* appLoaded */;\n  }\n  nextTick(() => emitEvent(win, \"appload\", { detail: { namespace: NAMESPACE } }));\n  if (BUILD20.profile && performance.measure) {\n    performance.measure(`[Stencil] ${NAMESPACE} initial load (by ${who})`, \"st:app:start\");\n  }\n};\nvar safeCall = (instance, method, arg, elm) => {\n  if (instance && instance[method]) {\n    try {\n      return instance[method](arg);\n    } catch (e) {\n      consoleError(e, elm);\n    }\n  }\n  return void 0;\n};\nvar emitLifecycleEvent = (elm, lifecycleName) => {\n  if (BUILD20.lifecycleDOMEvents) {\n    emitEvent(elm, \"stencil_\" + lifecycleName, {\n      bubbles: true,\n      composed: true,\n      detail: {\n        namespace: NAMESPACE\n      }\n    });\n  }\n};\nvar addHydratedFlag = (elm) => {\n  var _a, _b;\n  return BUILD20.hydratedClass ? elm.classList.add((_a = BUILD20.hydratedSelectorName) != null ? _a : \"hydrated\") : BUILD20.hydratedAttribute ? elm.setAttribute((_b = BUILD20.hydratedSelectorName) != null ? _b : \"hydrated\", \"\") : void 0;\n};\nvar serverSideConnected = (elm) => {\n  const children = elm.children;\n  if (children != null) {\n    for (let i2 = 0, ii = children.length; i2 < ii; i2++) {\n      const childElm = children[i2];\n      if (typeof childElm.connectedCallback === \"function\") {\n        childElm.connectedCallback();\n      }\n      serverSideConnected(childElm);\n    }\n  }\n};\n\n// src/runtime/set-value.ts\nvar getValue = (ref, propName) => getHostRef(ref).$instanceValues$.get(propName);\nvar setValue = (ref, propName, newVal, cmpMeta) => {\n  const hostRef = getHostRef(ref);\n  if (BUILD21.lazyLoad && !hostRef) {\n    throw new Error(\n      `Couldn't find host element for \"${cmpMeta.$tagName$}\" as it is unknown to this Stencil runtime. This usually happens when integrating a 3rd party Stencil component with another Stencil component or application. Please reach out to the maintainers of the 3rd party Stencil component or report this on the Stencil Discord server (https://chat.stenciljs.com) or comment on this similar [GitHub issue](https://github.com/stenciljs/core/issues/5457).`\n    );\n  }\n  const elm = BUILD21.lazyLoad ? hostRef.$hostElement$ : ref;\n  const oldVal = hostRef.$instanceValues$.get(propName);\n  const flags = hostRef.$flags$;\n  const instance = BUILD21.lazyLoad ? hostRef.$lazyInstance$ : elm;\n  newVal = parsePropertyValue(newVal, cmpMeta.$members$[propName][0]);\n  const areBothNaN = Number.isNaN(oldVal) && Number.isNaN(newVal);\n  const didValueChange = newVal !== oldVal && !areBothNaN;\n  if ((!BUILD21.lazyLoad || !(flags & 8 /* isConstructingInstance */) || oldVal === void 0) && didValueChange) {\n    hostRef.$instanceValues$.set(propName, newVal);\n    if (BUILD21.isDev) {\n      if (hostRef.$flags$ & 1024 /* devOnRender */) {\n        consoleDevWarn(\n          `The state/prop \"${propName}\" changed during rendering. This can potentially lead to infinite-loops and other bugs.`,\n          \"\\nElement\",\n          elm,\n          \"\\nNew value\",\n          newVal,\n          \"\\nOld value\",\n          oldVal\n        );\n      } else if (hostRef.$flags$ & 2048 /* devOnDidLoad */) {\n        consoleDevWarn(\n          `The state/prop \"${propName}\" changed during \"componentDidLoad()\", this triggers extra re-renders, try to setup on \"componentWillLoad()\"`,\n          \"\\nElement\",\n          elm,\n          \"\\nNew value\",\n          newVal,\n          \"\\nOld value\",\n          oldVal\n        );\n      }\n    }\n    if (!BUILD21.lazyLoad || instance) {\n      if (BUILD21.watchCallback && cmpMeta.$watchers$ && flags & 128 /* isWatchReady */) {\n        const watchMethods = cmpMeta.$watchers$[propName];\n        if (watchMethods) {\n          watchMethods.map((watchMethodName) => {\n            try {\n              instance[watchMethodName](newVal, oldVal, propName);\n            } catch (e) {\n              consoleError(e, elm);\n            }\n          });\n        }\n      }\n      if (BUILD21.updatable && (flags & (2 /* hasRendered */ | 16 /* isQueuedForUpdate */)) === 2 /* hasRendered */) {\n        if (instance.componentShouldUpdate) {\n          if (instance.componentShouldUpdate(newVal, oldVal, propName) === false) {\n            return;\n          }\n        }\n        scheduleUpdate(hostRef, false);\n      }\n    }\n  }\n};\n\n// src/runtime/proxy-component.ts\nvar proxyComponent = (Cstr, cmpMeta, flags) => {\n  var _a, _b;\n  const prototype = Cstr.prototype;\n  if (BUILD22.isTesting) {\n    if (prototype.__stencilAugmented) {\n      return;\n    }\n    prototype.__stencilAugmented = true;\n  }\n  if (BUILD22.formAssociated && cmpMeta.$flags$ & 64 /* formAssociated */ && flags & 1 /* isElementConstructor */) {\n    FORM_ASSOCIATED_CUSTOM_ELEMENT_CALLBACKS.forEach((cbName) => {\n      const originalFormAssociatedCallback = prototype[cbName];\n      Object.defineProperty(prototype, cbName, {\n        value(...args) {\n          const hostRef = getHostRef(this);\n          const instance = BUILD22.lazyLoad ? hostRef.$lazyInstance$ : this;\n          if (!instance) {\n            hostRef.$onReadyPromise$.then((asyncInstance) => {\n              const cb = asyncInstance[cbName];\n              typeof cb === \"function\" && cb.call(asyncInstance, ...args);\n            });\n          } else {\n            const cb = BUILD22.lazyLoad ? instance[cbName] : originalFormAssociatedCallback;\n            typeof cb === \"function\" && cb.call(instance, ...args);\n          }\n        }\n      });\n    });\n  }\n  if (BUILD22.member && cmpMeta.$members$ || BUILD22.watchCallback && (cmpMeta.$watchers$ || Cstr.watchers)) {\n    if (BUILD22.watchCallback && Cstr.watchers && !cmpMeta.$watchers$) {\n      cmpMeta.$watchers$ = Cstr.watchers;\n    }\n    const members = Object.entries((_a = cmpMeta.$members$) != null ? _a : {});\n    members.map(([memberName, [memberFlags]]) => {\n      if ((BUILD22.prop || BUILD22.state) && (memberFlags & 31 /* Prop */ || (!BUILD22.lazyLoad || flags & 2 /* proxyState */) && memberFlags & 32 /* State */)) {\n        const { get: origGetter, set: origSetter } = Object.getOwnPropertyDescriptor(prototype, memberName) || {};\n        if (origGetter) cmpMeta.$members$[memberName][0] |= 2048 /* Getter */;\n        if (origSetter) cmpMeta.$members$[memberName][0] |= 4096 /* Setter */;\n        if (flags & 1 /* isElementConstructor */ || !origGetter) {\n          Object.defineProperty(prototype, memberName, {\n            get() {\n              if (BUILD22.lazyLoad) {\n                if ((cmpMeta.$members$[memberName][0] & 2048 /* Getter */) === 0) {\n                  return getValue(this, memberName);\n                }\n                const ref = getHostRef(this);\n                const instance = ref ? ref.$lazyInstance$ : prototype;\n                if (!instance) return;\n                return instance[memberName];\n              }\n              if (!BUILD22.lazyLoad) {\n                return origGetter ? origGetter.apply(this) : getValue(this, memberName);\n              }\n            },\n            configurable: true,\n            enumerable: true\n          });\n        }\n        Object.defineProperty(prototype, memberName, {\n          set(newValue) {\n            const ref = getHostRef(this);\n            if (BUILD22.isDev) {\n              if (\n                // we are proxying the instance (not element)\n                (flags & 1 /* isElementConstructor */) === 0 && // if the class has a setter, then the Element can update instance values, so ignore\n                (cmpMeta.$members$[memberName][0] & 4096 /* Setter */) === 0 && // the element is not constructing\n                (ref && ref.$flags$ & 8 /* isConstructingInstance */) === 0 && // the member is a prop\n                (memberFlags & 31 /* Prop */) !== 0 && // the member is not mutable\n                (memberFlags & 1024 /* Mutable */) === 0\n              ) {\n                consoleDevWarn(\n                  `@Prop() \"${memberName}\" on <${cmpMeta.$tagName$}> is immutable but was modified from within the component.\nMore information: https://stenciljs.com/docs/properties#prop-mutability`\n                );\n              }\n            }\n            if (origSetter) {\n              const currentValue = memberFlags & 32 /* State */ ? this[memberName] : ref.$hostElement$[memberName];\n              if (typeof currentValue === \"undefined\" && ref.$instanceValues$.get(memberName)) {\n                newValue = ref.$instanceValues$.get(memberName);\n              } else if (!ref.$instanceValues$.get(memberName) && currentValue) {\n                ref.$instanceValues$.set(memberName, currentValue);\n              }\n              origSetter.apply(this, [parsePropertyValue(newValue, memberFlags)]);\n              newValue = memberFlags & 32 /* State */ ? this[memberName] : ref.$hostElement$[memberName];\n              setValue(this, memberName, newValue, cmpMeta);\n              return;\n            }\n            if (!BUILD22.lazyLoad) {\n              setValue(this, memberName, newValue, cmpMeta);\n              return;\n            }\n            if (BUILD22.lazyLoad) {\n              if ((flags & 1 /* isElementConstructor */) === 0 || (cmpMeta.$members$[memberName][0] & 4096 /* Setter */) === 0) {\n                setValue(this, memberName, newValue, cmpMeta);\n                if (flags & 1 /* isElementConstructor */ && !ref.$lazyInstance$) {\n                  ref.$onReadyPromise$.then(() => {\n                    if (cmpMeta.$members$[memberName][0] & 4096 /* Setter */ && ref.$lazyInstance$[memberName] !== ref.$instanceValues$.get(memberName)) {\n                      ref.$lazyInstance$[memberName] = newValue;\n                    }\n                  });\n                }\n                return;\n              }\n              const setterSetVal = () => {\n                const currentValue = ref.$lazyInstance$[memberName];\n                if (!ref.$instanceValues$.get(memberName) && currentValue) {\n                  ref.$instanceValues$.set(memberName, currentValue);\n                }\n                ref.$lazyInstance$[memberName] = parsePropertyValue(newValue, memberFlags);\n                setValue(this, memberName, ref.$lazyInstance$[memberName], cmpMeta);\n              };\n              if (ref.$lazyInstance$) {\n                setterSetVal();\n              } else {\n                ref.$onReadyPromise$.then(() => setterSetVal());\n              }\n            }\n          }\n        });\n      } else if (BUILD22.lazyLoad && BUILD22.method && flags & 1 /* isElementConstructor */ && memberFlags & 64 /* Method */) {\n        Object.defineProperty(prototype, memberName, {\n          value(...args) {\n            var _a2;\n            const ref = getHostRef(this);\n            return (_a2 = ref == null ? void 0 : ref.$onInstancePromise$) == null ? void 0 : _a2.then(() => {\n              var _a3;\n              return (_a3 = ref.$lazyInstance$) == null ? void 0 : _a3[memberName](...args);\n            });\n          }\n        });\n      }\n    });\n    if (BUILD22.observeAttribute && (!BUILD22.lazyLoad || flags & 1 /* isElementConstructor */)) {\n      const attrNameToPropName = /* @__PURE__ */ new Map();\n      prototype.attributeChangedCallback = function(attrName, oldValue, newValue) {\n        plt.jmp(() => {\n          var _a2;\n          const propName = attrNameToPropName.get(attrName);\n          if (this.hasOwnProperty(propName) && BUILD22.lazyLoad) {\n            newValue = this[propName];\n            delete this[propName];\n          } else if (prototype.hasOwnProperty(propName) && typeof this[propName] === \"number\" && // cast type to number to avoid TS compiler issues\n          this[propName] == newValue) {\n            return;\n          } else if (propName == null) {\n            const hostRef = getHostRef(this);\n            const flags2 = hostRef == null ? void 0 : hostRef.$flags$;\n            if (flags2 && !(flags2 & 8 /* isConstructingInstance */) && flags2 & 128 /* isWatchReady */ && newValue !== oldValue) {\n              const elm = BUILD22.lazyLoad ? hostRef.$hostElement$ : this;\n              const instance = BUILD22.lazyLoad ? hostRef.$lazyInstance$ : elm;\n              const entry = (_a2 = cmpMeta.$watchers$) == null ? void 0 : _a2[attrName];\n              entry == null ? void 0 : entry.forEach((callbackName) => {\n                if (instance[callbackName] != null) {\n                  instance[callbackName].call(instance, newValue, oldValue, attrName);\n                }\n              });\n            }\n            return;\n          }\n          const propDesc = Object.getOwnPropertyDescriptor(prototype, propName);\n          newValue = newValue === null && typeof this[propName] === \"boolean\" ? false : newValue;\n          if (newValue !== this[propName] && (!propDesc.get || !!propDesc.set)) {\n            this[propName] = newValue;\n          }\n        });\n      };\n      Cstr.observedAttributes = Array.from(\n        /* @__PURE__ */ new Set([\n          ...Object.keys((_b = cmpMeta.$watchers$) != null ? _b : {}),\n          ...members.filter(([_, m]) => m[0] & 15 /* HasAttribute */).map(([propName, m]) => {\n            var _a2;\n            const attrName = m[1] || propName;\n            attrNameToPropName.set(attrName, propName);\n            if (BUILD22.reflect && m[0] & 512 /* ReflectAttr */) {\n              (_a2 = cmpMeta.$attrsToReflect$) == null ? void 0 : _a2.push([propName, attrName]);\n            }\n            return attrName;\n          })\n        ])\n      );\n    }\n  }\n  return Cstr;\n};\n\n// src/runtime/initialize-component.ts\nvar initializeComponent = async (elm, hostRef, cmpMeta, hmrVersionId) => {\n  let Cstr;\n  if ((hostRef.$flags$ & 32 /* hasInitializedComponent */) === 0) {\n    hostRef.$flags$ |= 32 /* hasInitializedComponent */;\n    const bundleId = cmpMeta.$lazyBundleId$;\n    if (BUILD23.lazyLoad && bundleId) {\n      const CstrImport = loadModule(cmpMeta, hostRef, hmrVersionId);\n      if (CstrImport && \"then\" in CstrImport) {\n        const endLoad = uniqueTime(\n          `st:load:${cmpMeta.$tagName$}:${hostRef.$modeName$}`,\n          `[Stencil] Load module for <${cmpMeta.$tagName$}>`\n        );\n        Cstr = await CstrImport;\n        endLoad();\n      } else {\n        Cstr = CstrImport;\n      }\n      if (!Cstr) {\n        throw new Error(`Constructor for \"${cmpMeta.$tagName$}#${hostRef.$modeName$}\" was not found`);\n      }\n      if (BUILD23.member && !Cstr.isProxied) {\n        if (BUILD23.watchCallback) {\n          cmpMeta.$watchers$ = Cstr.watchers;\n        }\n        proxyComponent(Cstr, cmpMeta, 2 /* proxyState */);\n        Cstr.isProxied = true;\n      }\n      const endNewInstance = createTime(\"createInstance\", cmpMeta.$tagName$);\n      if (BUILD23.member) {\n        hostRef.$flags$ |= 8 /* isConstructingInstance */;\n      }\n      try {\n        new Cstr(hostRef);\n      } catch (e) {\n        consoleError(e, elm);\n      }\n      if (BUILD23.member) {\n        hostRef.$flags$ &= ~8 /* isConstructingInstance */;\n      }\n      if (BUILD23.watchCallback) {\n        hostRef.$flags$ |= 128 /* isWatchReady */;\n      }\n      endNewInstance();\n      fireConnectedCallback(hostRef.$lazyInstance$, elm);\n    } else {\n      Cstr = elm.constructor;\n      const cmpTag = elm.localName;\n      customElements.whenDefined(cmpTag).then(() => hostRef.$flags$ |= 128 /* isWatchReady */);\n    }\n    if (BUILD23.style && Cstr && Cstr.style) {\n      let style;\n      if (typeof Cstr.style === \"string\") {\n        style = Cstr.style;\n      } else if (BUILD23.mode && typeof Cstr.style !== \"string\") {\n        hostRef.$modeName$ = computeMode(elm);\n        if (hostRef.$modeName$) {\n          style = Cstr.style[hostRef.$modeName$];\n        }\n        if (BUILD23.hydrateServerSide && hostRef.$modeName$) {\n          elm.setAttribute(\"s-mode\", hostRef.$modeName$);\n        }\n      }\n      const scopeId2 = getScopeId(cmpMeta, hostRef.$modeName$);\n      if (!styles.has(scopeId2)) {\n        const endRegisterStyles = createTime(\"registerStyles\", cmpMeta.$tagName$);\n        if (BUILD23.hydrateServerSide && BUILD23.shadowDom && cmpMeta.$flags$ & 128 /* shadowNeedsScopedCss */) {\n          style = scopeCss(style, scopeId2, true);\n        }\n        registerStyle(scopeId2, style, !!(cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */));\n        endRegisterStyles();\n      }\n    }\n  }\n  const ancestorComponent = hostRef.$ancestorComponent$;\n  const schedule = () => scheduleUpdate(hostRef, true);\n  if (BUILD23.asyncLoading && ancestorComponent && ancestorComponent[\"s-rc\"]) {\n    ancestorComponent[\"s-rc\"].push(schedule);\n  } else {\n    schedule();\n  }\n};\nvar fireConnectedCallback = (instance, elm) => {\n  if (BUILD23.lazyLoad) {\n    safeCall(instance, \"connectedCallback\", void 0, elm);\n  }\n};\n\n// src/runtime/connected-callback.ts\nvar connectedCallback = (elm) => {\n  if ((plt.$flags$ & 1 /* isTmpDisconnected */) === 0) {\n    const hostRef = getHostRef(elm);\n    const cmpMeta = hostRef.$cmpMeta$;\n    const endConnected = createTime(\"connectedCallback\", cmpMeta.$tagName$);\n    if (BUILD24.hostListenerTargetParent) {\n      addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, true);\n    }\n    if (!(hostRef.$flags$ & 1 /* hasConnected */)) {\n      hostRef.$flags$ |= 1 /* hasConnected */;\n      let hostId;\n      if (BUILD24.hydrateClientSide) {\n        hostId = elm.getAttribute(HYDRATE_ID);\n        if (hostId) {\n          if (BUILD24.shadowDom && supportsShadow && cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) {\n            const scopeId2 = BUILD24.mode ? addStyle(elm.shadowRoot, cmpMeta, elm.getAttribute(\"s-mode\")) : addStyle(elm.shadowRoot, cmpMeta);\n            elm.classList.remove(scopeId2 + \"-h\", scopeId2 + \"-s\");\n          } else if (BUILD24.scoped && cmpMeta.$flags$ & 2 /* scopedCssEncapsulation */) {\n            const scopeId2 = getScopeId(cmpMeta, BUILD24.mode ? elm.getAttribute(\"s-mode\") : void 0);\n            elm[\"s-sc\"] = scopeId2;\n          }\n          initializeClientHydrate(elm, cmpMeta.$tagName$, hostId, hostRef);\n        }\n      }\n      if (BUILD24.slotRelocation && !hostId) {\n        if (BUILD24.hydrateServerSide || (BUILD24.slot || BUILD24.shadowDom) && // TODO(STENCIL-854): Remove code related to legacy shadowDomShim field\n        cmpMeta.$flags$ & (4 /* hasSlotRelocation */ | 8 /* needsShadowDomShim */)) {\n          setContentReference(elm);\n        }\n      }\n      if (BUILD24.asyncLoading) {\n        let ancestorComponent = elm;\n        while (ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host) {\n          if (BUILD24.hydrateClientSide && ancestorComponent.nodeType === 1 /* ElementNode */ && ancestorComponent.hasAttribute(\"s-id\") && ancestorComponent[\"s-p\"] || ancestorComponent[\"s-p\"]) {\n            attachToAncestor(hostRef, hostRef.$ancestorComponent$ = ancestorComponent);\n            break;\n          }\n        }\n      }\n      if (BUILD24.prop && !BUILD24.hydrateServerSide && cmpMeta.$members$) {\n        Object.entries(cmpMeta.$members$).map(([memberName, [memberFlags]]) => {\n          if (memberFlags & 31 /* Prop */ && elm.hasOwnProperty(memberName)) {\n            const value = elm[memberName];\n            delete elm[memberName];\n            elm[memberName] = value;\n          }\n        });\n      }\n      if (BUILD24.initializeNextTick) {\n        nextTick(() => initializeComponent(elm, hostRef, cmpMeta));\n      } else {\n        initializeComponent(elm, hostRef, cmpMeta);\n      }\n    } else {\n      addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, false);\n      if (hostRef == null ? void 0 : hostRef.$lazyInstance$) {\n        fireConnectedCallback(hostRef.$lazyInstance$, elm);\n      } else if (hostRef == null ? void 0 : hostRef.$onReadyPromise$) {\n        hostRef.$onReadyPromise$.then(() => fireConnectedCallback(hostRef.$lazyInstance$, elm));\n      }\n    }\n    endConnected();\n  }\n};\nvar setContentReference = (elm) => {\n  if (!win.document) {\n    return;\n  }\n  const contentRefElm = elm[\"s-cr\"] = win.document.createComment(\n    BUILD24.isDebug ? `content-ref (host=${elm.localName})` : \"\"\n  );\n  contentRefElm[\"s-cn\"] = true;\n  insertBefore(elm, contentRefElm, elm.firstChild);\n};\n\n// src/runtime/disconnected-callback.ts\nimport { BUILD as BUILD25 } from \"@stencil/core/internal/app-data\";\nvar disconnectInstance = (instance, elm) => {\n  if (BUILD25.lazyLoad) {\n    safeCall(instance, \"disconnectedCallback\", void 0, elm || instance);\n  }\n};\nvar disconnectedCallback = async (elm) => {\n  if ((plt.$flags$ & 1 /* isTmpDisconnected */) === 0) {\n    const hostRef = getHostRef(elm);\n    if (BUILD25.hostListener) {\n      if (hostRef.$rmListeners$) {\n        hostRef.$rmListeners$.map((rmListener) => rmListener());\n        hostRef.$rmListeners$ = void 0;\n      }\n    }\n    if (!BUILD25.lazyLoad) {\n      disconnectInstance(elm);\n    } else if (hostRef == null ? void 0 : hostRef.$lazyInstance$) {\n      disconnectInstance(hostRef.$lazyInstance$, elm);\n    } else if (hostRef == null ? void 0 : hostRef.$onReadyPromise$) {\n      hostRef.$onReadyPromise$.then(() => disconnectInstance(hostRef.$lazyInstance$, elm));\n    }\n  }\n  if (rootAppliedStyles.has(elm)) {\n    rootAppliedStyles.delete(elm);\n  }\n  if (elm.shadowRoot && rootAppliedStyles.has(elm.shadowRoot)) {\n    rootAppliedStyles.delete(elm.shadowRoot);\n  }\n};\n\n// src/runtime/bootstrap-custom-element.ts\nvar defineCustomElement = (Cstr, compactMeta) => {\n  customElements.define(compactMeta[1], proxyCustomElement(Cstr, compactMeta));\n};\nvar proxyCustomElement = (Cstr, compactMeta) => {\n  const cmpMeta = {\n    $flags$: compactMeta[0],\n    $tagName$: compactMeta[1]\n  };\n  if (BUILD26.member) {\n    cmpMeta.$members$ = compactMeta[2];\n  }\n  if (BUILD26.hostListener) {\n    cmpMeta.$listeners$ = compactMeta[3];\n  }\n  if (BUILD26.watchCallback) {\n    cmpMeta.$watchers$ = Cstr.$watchers$;\n  }\n  if (BUILD26.reflect) {\n    cmpMeta.$attrsToReflect$ = [];\n  }\n  if (BUILD26.shadowDom && !supportsShadow && cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) {\n    cmpMeta.$flags$ |= 8 /* needsShadowDomShim */;\n  }\n  if (BUILD26.experimentalSlotFixes) {\n    if (BUILD26.scoped && cmpMeta.$flags$ & 2 /* scopedCssEncapsulation */) {\n      patchPseudoShadowDom(Cstr.prototype);\n    }\n  } else {\n    if (BUILD26.slotChildNodesFix) {\n      patchChildSlotNodes(Cstr.prototype);\n    }\n    if (BUILD26.cloneNodeFix) {\n      patchCloneNode(Cstr.prototype);\n    }\n    if (BUILD26.appendChildSlotFix) {\n      patchSlotAppendChild(Cstr.prototype);\n    }\n    if (BUILD26.scopedSlotTextContentFix && cmpMeta.$flags$ & 2 /* scopedCssEncapsulation */) {\n      patchTextContent(Cstr.prototype);\n    }\n  }\n  if (BUILD26.hydrateClientSide && BUILD26.shadowDom) {\n    hydrateScopedToShadow();\n  }\n  const originalConnectedCallback = Cstr.prototype.connectedCallback;\n  const originalDisconnectedCallback = Cstr.prototype.disconnectedCallback;\n  Object.assign(Cstr.prototype, {\n    __hasHostListenerAttached: false,\n    __registerHost() {\n      registerHost(this, cmpMeta);\n    },\n    connectedCallback() {\n      if (!this.__hasHostListenerAttached) {\n        const hostRef = getHostRef(this);\n        addHostEventListeners(this, hostRef, cmpMeta.$listeners$, false);\n        this.__hasHostListenerAttached = true;\n      }\n      connectedCallback(this);\n      if (originalConnectedCallback) {\n        originalConnectedCallback.call(this);\n      }\n    },\n    disconnectedCallback() {\n      disconnectedCallback(this);\n      if (originalDisconnectedCallback) {\n        originalDisconnectedCallback.call(this);\n      }\n    },\n    __attachShadow() {\n      if (supportsShadow) {\n        if (!this.shadowRoot) {\n          if (BUILD26.shadowDelegatesFocus) {\n            this.attachShadow({\n              mode: \"open\",\n              delegatesFocus: !!(cmpMeta.$flags$ & 16 /* shadowDelegatesFocus */)\n            });\n          } else {\n            this.attachShadow({ mode: \"open\" });\n          }\n        } else {\n          if (this.shadowRoot.mode !== \"open\") {\n            throw new Error(\n              `Unable to re-use existing shadow root for ${cmpMeta.$tagName$}! Mode is set to ${this.shadowRoot.mode} but Stencil only supports open shadow roots.`\n            );\n          }\n        }\n      } else {\n        this.shadowRoot = this;\n      }\n    }\n  });\n  Cstr.is = cmpMeta.$tagName$;\n  return proxyComponent(Cstr, cmpMeta, 1 /* isElementConstructor */ | 2 /* proxyState */);\n};\nvar forceModeUpdate = (elm) => {\n  if (BUILD26.style && BUILD26.mode && !BUILD26.lazyLoad) {\n    const mode = computeMode(elm);\n    const hostRef = getHostRef(elm);\n    if (hostRef.$modeName$ !== mode) {\n      const cmpMeta = hostRef.$cmpMeta$;\n      const oldScopeId = elm[\"s-sc\"];\n      const scopeId2 = getScopeId(cmpMeta, mode);\n      const style = elm.constructor.style[mode];\n      const flags = cmpMeta.$flags$;\n      if (style) {\n        if (!styles.has(scopeId2)) {\n          registerStyle(scopeId2, style, !!(flags & 1 /* shadowDomEncapsulation */));\n        }\n        hostRef.$modeName$ = mode;\n        elm.classList.remove(oldScopeId + \"-h\", oldScopeId + \"-s\");\n        attachStyles(hostRef);\n        forceUpdate(elm);\n      }\n    }\n  }\n};\n\n// src/runtime/bootstrap-lazy.ts\nimport { BUILD as BUILD27 } from \"@stencil/core/internal/app-data\";\n\n// src/runtime/hmr-component.ts\nvar hmrStart = (hostElement, cmpMeta, hmrVersionId) => {\n  const hostRef = getHostRef(hostElement);\n  hostRef.$flags$ = 1 /* hasConnected */;\n  initializeComponent(hostElement, hostRef, cmpMeta, hmrVersionId);\n};\n\n// src/runtime/bootstrap-lazy.ts\nvar bootstrapLazy = (lazyBundles, options = {}) => {\n  var _a;\n  if (BUILD27.profile && performance.mark) {\n    performance.mark(\"st:app:start\");\n  }\n  installDevTools();\n  if (!win.document) {\n    console.warn(\"Stencil: No document found. Skipping bootstrapping lazy components.\");\n    return;\n  }\n  const endBootstrap = createTime(\"bootstrapLazy\");\n  const cmpTags = [];\n  const exclude = options.exclude || [];\n  const customElements2 = win.customElements;\n  const head = win.document.head;\n  const metaCharset = /* @__PURE__ */ head.querySelector(\"meta[charset]\");\n  const dataStyles = /* @__PURE__ */ win.document.createElement(\"style\");\n  const deferredConnectedCallbacks = [];\n  let appLoadFallback;\n  let isBootstrapping = true;\n  Object.assign(plt, options);\n  plt.$resourcesUrl$ = new URL(options.resourcesUrl || \"./\", win.document.baseURI).href;\n  if (BUILD27.asyncQueue) {\n    if (options.syncQueue) {\n      plt.$flags$ |= 4 /* queueSync */;\n    }\n  }\n  if (BUILD27.hydrateClientSide) {\n    plt.$flags$ |= 2 /* appLoaded */;\n  }\n  if (BUILD27.hydrateClientSide && BUILD27.shadowDom) {\n    hydrateScopedToShadow();\n  }\n  let hasSlotRelocation = false;\n  lazyBundles.map((lazyBundle) => {\n    lazyBundle[1].map((compactMeta) => {\n      var _a2;\n      const cmpMeta = {\n        $flags$: compactMeta[0],\n        $tagName$: compactMeta[1],\n        $members$: compactMeta[2],\n        $listeners$: compactMeta[3]\n      };\n      if (cmpMeta.$flags$ & 4 /* hasSlotRelocation */) {\n        hasSlotRelocation = true;\n      }\n      if (BUILD27.member) {\n        cmpMeta.$members$ = compactMeta[2];\n      }\n      if (BUILD27.hostListener) {\n        cmpMeta.$listeners$ = compactMeta[3];\n      }\n      if (BUILD27.reflect) {\n        cmpMeta.$attrsToReflect$ = [];\n      }\n      if (BUILD27.watchCallback) {\n        cmpMeta.$watchers$ = (_a2 = compactMeta[4]) != null ? _a2 : {};\n      }\n      if (BUILD27.shadowDom && !supportsShadow && cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) {\n        cmpMeta.$flags$ |= 8 /* needsShadowDomShim */;\n      }\n      const tagName = BUILD27.transformTagName && options.transformTagName ? options.transformTagName(cmpMeta.$tagName$) : cmpMeta.$tagName$;\n      const HostElement = class extends HTMLElement {\n        // StencilLazyHost\n        constructor(self) {\n          super(self);\n          this.hasRegisteredEventListeners = false;\n          self = this;\n          registerHost(self, cmpMeta);\n          if (BUILD27.shadowDom && cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) {\n            if (supportsShadow) {\n              if (!self.shadowRoot) {\n                if (BUILD27.shadowDelegatesFocus) {\n                  self.attachShadow({\n                    mode: \"open\",\n                    delegatesFocus: !!(cmpMeta.$flags$ & 16 /* shadowDelegatesFocus */)\n                  });\n                } else {\n                  self.attachShadow({ mode: \"open\" });\n                }\n              } else {\n                if (self.shadowRoot.mode !== \"open\") {\n                  throw new Error(\n                    `Unable to re-use existing shadow root for ${cmpMeta.$tagName$}! Mode is set to ${self.shadowRoot.mode} but Stencil only supports open shadow roots.`\n                  );\n                }\n              }\n            } else if (!BUILD27.hydrateServerSide && !(\"shadowRoot\" in self)) {\n              self.shadowRoot = self;\n            }\n          }\n        }\n        connectedCallback() {\n          const hostRef = getHostRef(this);\n          if (!this.hasRegisteredEventListeners) {\n            this.hasRegisteredEventListeners = true;\n            addHostEventListeners(this, hostRef, cmpMeta.$listeners$, false);\n          }\n          if (appLoadFallback) {\n            clearTimeout(appLoadFallback);\n            appLoadFallback = null;\n          }\n          if (isBootstrapping) {\n            deferredConnectedCallbacks.push(this);\n          } else {\n            plt.jmp(() => connectedCallback(this));\n          }\n        }\n        disconnectedCallback() {\n          plt.jmp(() => disconnectedCallback(this));\n          plt.raf(() => {\n            var _a3;\n            const hostRef = getHostRef(this);\n            const i2 = deferredConnectedCallbacks.findIndex((host) => host === this);\n            if (i2 > -1) {\n              deferredConnectedCallbacks.splice(i2, 1);\n            }\n            if (((_a3 = hostRef == null ? void 0 : hostRef.$vnode$) == null ? void 0 : _a3.$elm$) instanceof Node && !hostRef.$vnode$.$elm$.isConnected) {\n              delete hostRef.$vnode$.$elm$;\n            }\n          });\n        }\n        componentOnReady() {\n          return getHostRef(this).$onReadyPromise$;\n        }\n      };\n      if (BUILD27.experimentalSlotFixes) {\n        if (BUILD27.scoped && cmpMeta.$flags$ & 2 /* scopedCssEncapsulation */) {\n          patchPseudoShadowDom(HostElement.prototype);\n        }\n      } else {\n        if (BUILD27.slotChildNodesFix) {\n          patchChildSlotNodes(HostElement.prototype);\n        }\n        if (BUILD27.cloneNodeFix) {\n          patchCloneNode(HostElement.prototype);\n        }\n        if (BUILD27.appendChildSlotFix) {\n          patchSlotAppendChild(HostElement.prototype);\n        }\n        if (BUILD27.scopedSlotTextContentFix && cmpMeta.$flags$ & 2 /* scopedCssEncapsulation */) {\n          patchTextContent(HostElement.prototype);\n        }\n      }\n      if (BUILD27.formAssociated && cmpMeta.$flags$ & 64 /* formAssociated */) {\n        HostElement.formAssociated = true;\n      }\n      if (BUILD27.hotModuleReplacement) {\n        HostElement.prototype[\"s-hmr\"] = function(hmrVersionId) {\n          hmrStart(this, cmpMeta, hmrVersionId);\n        };\n      }\n      cmpMeta.$lazyBundleId$ = lazyBundle[0];\n      if (!exclude.includes(tagName) && !customElements2.get(tagName)) {\n        cmpTags.push(tagName);\n        customElements2.define(\n          tagName,\n          proxyComponent(HostElement, cmpMeta, 1 /* isElementConstructor */)\n        );\n      }\n    });\n  });\n  if (cmpTags.length > 0) {\n    if (hasSlotRelocation) {\n      dataStyles.textContent += SLOT_FB_CSS;\n    }\n    if (BUILD27.invisiblePrehydration && (BUILD27.hydratedClass || BUILD27.hydratedAttribute)) {\n      dataStyles.textContent += cmpTags.sort() + HYDRATED_CSS;\n    }\n    if (dataStyles.innerHTML.length) {\n      dataStyles.setAttribute(\"data-styles\", \"\");\n      const nonce = (_a = plt.$nonce$) != null ? _a : queryNonceMetaTagContent(win.document);\n      if (nonce != null) {\n        dataStyles.setAttribute(\"nonce\", nonce);\n      }\n      head.insertBefore(dataStyles, metaCharset ? metaCharset.nextSibling : head.firstChild);\n    }\n  }\n  isBootstrapping = false;\n  if (deferredConnectedCallbacks.length) {\n    deferredConnectedCallbacks.map((host) => host.connectedCallback());\n  } else {\n    if (BUILD27.profile) {\n      plt.jmp(() => appLoadFallback = setTimeout(appDidLoad, 30, \"timeout\"));\n    } else {\n      plt.jmp(() => appLoadFallback = setTimeout(appDidLoad, 30));\n    }\n  }\n  endBootstrap();\n};\n\n// src/runtime/fragment.ts\nvar Fragment = (_, children) => children;\n\n// src/runtime/host-listener.ts\nimport { BUILD as BUILD28 } from \"@stencil/core/internal/app-data\";\nvar addHostEventListeners = (elm, hostRef, listeners, attachParentListeners) => {\n  if (BUILD28.hostListener && listeners && win.document) {\n    if (BUILD28.hostListenerTargetParent) {\n      if (attachParentListeners) {\n        listeners = listeners.filter(([flags]) => flags & 32 /* TargetParent */);\n      } else {\n        listeners = listeners.filter(([flags]) => !(flags & 32 /* TargetParent */));\n      }\n    }\n    listeners.map(([flags, name, method]) => {\n      const target = BUILD28.hostListenerTarget ? getHostListenerTarget(win.document, elm, flags) : elm;\n      const handler = hostListenerProxy(hostRef, method);\n      const opts = hostListenerOpts(flags);\n      plt.ael(target, name, handler, opts);\n      (hostRef.$rmListeners$ = hostRef.$rmListeners$ || []).push(() => plt.rel(target, name, handler, opts));\n    });\n  }\n};\nvar hostListenerProxy = (hostRef, methodName) => (ev) => {\n  var _a;\n  try {\n    if (BUILD28.lazyLoad) {\n      if (hostRef.$flags$ & 256 /* isListenReady */) {\n        (_a = hostRef.$lazyInstance$) == null ? void 0 : _a[methodName](ev);\n      } else {\n        (hostRef.$queuedListeners$ = hostRef.$queuedListeners$ || []).push([methodName, ev]);\n      }\n    } else {\n      hostRef.$hostElement$[methodName](ev);\n    }\n  } catch (e) {\n    consoleError(e, hostRef.$hostElement$);\n  }\n};\nvar getHostListenerTarget = (doc, elm, flags) => {\n  if (BUILD28.hostListenerTargetDocument && flags & 4 /* TargetDocument */) {\n    return doc;\n  }\n  if (BUILD28.hostListenerTargetWindow && flags & 8 /* TargetWindow */) {\n    return win;\n  }\n  if (BUILD28.hostListenerTargetBody && flags & 16 /* TargetBody */) {\n    return doc.body;\n  }\n  if (BUILD28.hostListenerTargetParent && flags & 32 /* TargetParent */ && elm.parentElement) {\n    return elm.parentElement;\n  }\n  return elm;\n};\nvar hostListenerOpts = (flags) => supportsListenerOptions ? {\n  passive: (flags & 1 /* Passive */) !== 0,\n  capture: (flags & 2 /* Capture */) !== 0\n} : (flags & 2 /* Capture */) !== 0;\n\n// src/runtime/nonce.ts\nvar setNonce = (nonce) => plt.$nonce$ = nonce;\n\n// src/runtime/platform-options.ts\nvar setPlatformOptions = (opts) => Object.assign(plt, opts);\n\n// src/runtime/vdom/vdom-annotations.ts\nvar insertVdomAnnotations = (doc, staticComponents) => {\n  if (doc != null) {\n    const docData = STENCIL_DOC_DATA in doc ? doc[STENCIL_DOC_DATA] : { ...DEFAULT_DOC_DATA };\n    docData.staticComponents = new Set(staticComponents);\n    const orgLocationNodes = [];\n    parseVNodeAnnotations(doc, doc.body, docData, orgLocationNodes);\n    orgLocationNodes.forEach((orgLocationNode) => {\n      var _a;\n      if (orgLocationNode != null && orgLocationNode[\"s-nr\"]) {\n        const nodeRef = orgLocationNode[\"s-nr\"];\n        let hostId = nodeRef[\"s-host-id\"];\n        let nodeId = nodeRef[\"s-node-id\"];\n        let childId = `${hostId}.${nodeId}`;\n        if (hostId == null) {\n          hostId = 0;\n          docData.rootLevelIds++;\n          nodeId = docData.rootLevelIds;\n          childId = `${hostId}.${nodeId}`;\n          if (nodeRef.nodeType === 1 /* ElementNode */) {\n            nodeRef.setAttribute(HYDRATE_CHILD_ID, childId);\n            if (typeof nodeRef[\"s-sn\"] === \"string\" && !nodeRef.getAttribute(\"slot\")) {\n              nodeRef.setAttribute(\"s-sn\", nodeRef[\"s-sn\"]);\n            }\n          } else if (nodeRef.nodeType === 3 /* TextNode */) {\n            if (hostId === 0) {\n              const textContent = (_a = nodeRef.nodeValue) == null ? void 0 : _a.trim();\n              if (textContent === \"\") {\n                orgLocationNode.remove();\n                return;\n              }\n            }\n            const commentBeforeTextNode = doc.createComment(childId);\n            commentBeforeTextNode.nodeValue = `${TEXT_NODE_ID}.${childId}`;\n            insertBefore(nodeRef.parentNode, commentBeforeTextNode, nodeRef);\n          } else if (nodeRef.nodeType === 8 /* CommentNode */) {\n            const commentBeforeTextNode = doc.createComment(childId);\n            commentBeforeTextNode.nodeValue = `${COMMENT_NODE_ID}.${childId}`;\n            nodeRef.parentNode.insertBefore(commentBeforeTextNode, nodeRef);\n          }\n        }\n        let orgLocationNodeId = `${ORG_LOCATION_ID}.${childId}`;\n        const orgLocationParentNode = orgLocationNode.parentElement;\n        if (orgLocationParentNode) {\n          if (orgLocationParentNode[\"s-en\"] === \"\") {\n            orgLocationNodeId += `.`;\n          } else if (orgLocationParentNode[\"s-en\"] === \"c\") {\n            orgLocationNodeId += `.c`;\n          }\n        }\n        orgLocationNode.nodeValue = orgLocationNodeId;\n      }\n    });\n  }\n};\nvar parseVNodeAnnotations = (doc, node, docData, orgLocationNodes) => {\n  var _a;\n  if (node == null) {\n    return;\n  }\n  if (node[\"s-nr\"] != null) {\n    orgLocationNodes.push(node);\n  }\n  if (node.nodeType === 1 /* ElementNode */) {\n    const childNodes = [...Array.from(node.childNodes), ...Array.from(((_a = node.shadowRoot) == null ? void 0 : _a.childNodes) || [])];\n    childNodes.forEach((childNode) => {\n      const hostRef = getHostRef(childNode);\n      if (hostRef != null && !docData.staticComponents.has(childNode.nodeName.toLowerCase())) {\n        const cmpData = {\n          nodeIds: 0\n        };\n        insertVNodeAnnotations(doc, childNode, hostRef.$vnode$, docData, cmpData);\n      }\n      parseVNodeAnnotations(doc, childNode, docData, orgLocationNodes);\n    });\n  }\n};\nvar insertVNodeAnnotations = (doc, hostElm, vnode, docData, cmpData) => {\n  if (vnode != null) {\n    const hostId = ++docData.hostIds;\n    hostElm.setAttribute(HYDRATE_ID, hostId);\n    if (hostElm[\"s-cr\"] != null) {\n      hostElm[\"s-cr\"].nodeValue = `${CONTENT_REF_ID}.${hostId}`;\n    }\n    if (vnode.$children$ != null) {\n      const depth = 0;\n      vnode.$children$.forEach((vnodeChild, index) => {\n        insertChildVNodeAnnotations(doc, vnodeChild, cmpData, hostId, depth, index);\n      });\n    }\n    if (hostElm && vnode && vnode.$elm$ && !hostElm.hasAttribute(HYDRATE_CHILD_ID)) {\n      const parent = hostElm.parentElement;\n      if (parent && parent.childNodes) {\n        const parentChildNodes = Array.from(parent.childNodes);\n        const comment = parentChildNodes.find(\n          (node) => node.nodeType === 8 /* CommentNode */ && node[\"s-sr\"]\n        );\n        if (comment) {\n          const index = parentChildNodes.indexOf(hostElm) - 1;\n          vnode.$elm$.setAttribute(\n            HYDRATE_CHILD_ID,\n            `${comment[\"s-host-id\"]}.${comment[\"s-node-id\"]}.0.${index}`\n          );\n        }\n      }\n    }\n  }\n};\nvar insertChildVNodeAnnotations = (doc, vnodeChild, cmpData, hostId, depth, index) => {\n  const childElm = vnodeChild.$elm$;\n  if (childElm == null) {\n    return;\n  }\n  const nodeId = cmpData.nodeIds++;\n  const childId = `${hostId}.${nodeId}.${depth}.${index}`;\n  childElm[\"s-host-id\"] = hostId;\n  childElm[\"s-node-id\"] = nodeId;\n  if (childElm.nodeType === 1 /* ElementNode */) {\n    childElm.setAttribute(HYDRATE_CHILD_ID, childId);\n    if (typeof childElm[\"s-sn\"] === \"string\" && !childElm.getAttribute(\"slot\")) {\n      childElm.setAttribute(\"s-sn\", childElm[\"s-sn\"]);\n    }\n  } else if (childElm.nodeType === 3 /* TextNode */) {\n    const parentNode = childElm.parentNode;\n    const nodeName = parentNode == null ? void 0 : parentNode.nodeName;\n    if (nodeName !== \"STYLE\" && nodeName !== \"SCRIPT\") {\n      const textNodeId = `${TEXT_NODE_ID}.${childId}`;\n      const commentBeforeTextNode = doc.createComment(textNodeId);\n      insertBefore(parentNode, commentBeforeTextNode, childElm);\n    }\n  } else if (childElm.nodeType === 8 /* CommentNode */) {\n    if (childElm[\"s-sr\"]) {\n      const slotName = childElm[\"s-sn\"] || \"\";\n      const slotNodeId = `${SLOT_NODE_ID}.${childId}.${slotName}`;\n      childElm.nodeValue = slotNodeId;\n    }\n  }\n  if (vnodeChild.$children$ != null) {\n    const childDepth = depth + 1;\n    vnodeChild.$children$.forEach((vnode, index2) => {\n      insertChildVNodeAnnotations(doc, vnode, cmpData, hostId, childDepth, index2);\n    });\n  }\n};\nexport {\n  BUILD29 as BUILD,\n  Build,\n  Env,\n  Fragment,\n  H,\n  H as HTMLElement,\n  Host,\n  NAMESPACE2 as NAMESPACE,\n  STENCIL_DEV_MODE,\n  addHostEventListeners,\n  bootstrapLazy,\n  cmpModules,\n  connectedCallback,\n  consoleDevError,\n  consoleDevInfo,\n  consoleDevWarn,\n  consoleError,\n  createEvent,\n  defineCustomElement,\n  disconnectedCallback,\n  forceModeUpdate,\n  forceUpdate,\n  getAssetPath,\n  getElement,\n  getHostRef,\n  getMode,\n  getRenderingRef,\n  getValue,\n  h,\n  insertVdomAnnotations,\n  isMemberInElement,\n  loadModule,\n  modeResolutionChain,\n  nextTick,\n  parsePropertyValue,\n  plt,\n  postUpdateComponent,\n  promiseResolve,\n  proxyComponent,\n  proxyCustomElement,\n  readTask,\n  registerHost,\n  registerInstance,\n  renderVdom,\n  setAssetPath,\n  setErrorHandler,\n  setMode,\n  setNonce,\n  setPlatformHelpers,\n  setPlatformOptions,\n  setValue,\n  styles,\n  supportsConstructableStylesheets,\n  supportsListenerOptions,\n  supportsShadow,\n  win,\n  writeTask\n};\n"],
  "mappings": "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",
  "names": ["e", "r", "t", "l", "h", "n", "o", "i", "a", "s"]
}
