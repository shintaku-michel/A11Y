import {
  logger
} from "./chunk-F2BFVVNU.js";
import {
  Host,
  createEvent,
  h,
  registerInstance
} from "./chunk-S4YNXM4D.js";
import "./chunk-7D4SUZUM.js";

// node_modules/alcance/dist/esm-es5/alc-header-notifications.entry.js
var __awaiter = function(t, i, e, a) {
  function n(t2) {
    return t2 instanceof e ? t2 : new e(function(i2) {
      i2(t2);
    });
  }
  return new (e || (e = Promise))(function(e2, r) {
    function o(t2) {
      try {
        s(a.next(t2));
      } catch (t3) {
        r(t3);
      }
    }
    function c(t2) {
      try {
        s(a["throw"](t2));
      } catch (t3) {
        r(t3);
      }
    }
    function s(t2) {
      t2.done ? e2(t2.value) : n(t2.value).then(o, c);
    }
    s((a = a.apply(t, i || [])).next());
  });
};
var __generator = function(t, i) {
  var e = { label: 0, sent: function() {
    if (r[0] & 1) throw r[1];
    return r[1];
  }, trys: [], ops: [] }, a, n, r, o;
  return o = { next: c(0), throw: c(1), return: c(2) }, typeof Symbol === "function" && (o[Symbol.iterator] = function() {
    return this;
  }), o;
  function c(t2) {
    return function(i2) {
      return s([t2, i2]);
    };
  }
  function s(c2) {
    if (a) throw new TypeError("Generator is already executing.");
    while (o && (o = 0, c2[0] && (e = 0)), e) try {
      if (a = 1, n && (r = c2[0] & 2 ? n["return"] : c2[0] ? n["throw"] || ((r = n["return"]) && r.call(n), 0) : n.next) && !(r = r.call(n, c2[1])).done) return r;
      if (n = 0, r) c2 = [c2[0] & 2, r.value];
      switch (c2[0]) {
        case 0:
        case 1:
          r = c2;
          break;
        case 4:
          e.label++;
          return { value: c2[1], done: false };
        case 5:
          e.label++;
          n = c2[1];
          c2 = [0];
          continue;
        case 7:
          c2 = e.ops.pop();
          e.trys.pop();
          continue;
        default:
          if (!(r = e.trys, r = r.length > 0 && r[r.length - 1]) && (c2[0] === 6 || c2[0] === 2)) {
            e = 0;
            continue;
          }
          if (c2[0] === 3 && (!r || c2[1] > r[0] && c2[1] < r[3])) {
            e.label = c2[1];
            break;
          }
          if (c2[0] === 6 && e.label < r[1]) {
            e.label = r[1];
            r = c2;
            break;
          }
          if (r && e.label < r[2]) {
            e.label = r[2];
            e.ops.push(c2);
            break;
          }
          if (r[2]) e.ops.pop();
          e.trys.pop();
          continue;
      }
      c2 = i.call(t, e);
    } catch (t2) {
      c2 = [6, t2];
      n = 0;
    } finally {
      a = r = 0;
    }
    if (c2[0] & 5) throw c2[1];
    return { value: c2[0] ? c2[1] : void 0, done: true };
  }
};
var alcHeaderNotificationsCss = ".alc-header-notifications .alc-badge{border-radius:8px;--tw-bg-opacity:1;background-color:rgb(252 144 109 / var(--tw-bg-opacity));padding-top:0px;padding-bottom:0px;padding-left:2px;padding-right:2px;--tw-text-opacity:1;color:rgb(0 0 0 / var(--tw-text-opacity));line-height:1em}.alc-header-notifications__aria-live{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);white-space:nowrap;border-width:0}";
var BUTTON_LABEL = "Notificações";
var MAX_COUNTER = 99;
var AlcHeaderNotifications = function() {
  function t(t2) {
    registerInstance(this, t2);
    this.alcClick = createEvent(this, "alc-click", 7);
    this.overflow = false;
    this.notificationsLabel = "";
    this.notificationsAudible = "";
    this.notifications = 0;
    this.variant = "button";
    this.url = "";
  }
  t.prototype.watchNotifications = function(t2) {
    if (Number.isNaN(t2)) {
      logger.warn('O valor do atributo "notifications" deve ser numérico. Assumindo o valor padrão 0.');
      t2 = 0;
    }
    if (t2 === 0) {
      this.notificationsLabel = "";
      this.notificationsAudible = "";
      this.overflow = false;
    } else if (t2 > MAX_COUNTER) {
      this.notificationsLabel = "".concat(MAX_COUNTER, "+");
      this.notificationsAudible = "Mais de ".concat(MAX_COUNTER, " ").concat(BUTTON_LABEL);
      this.overflow = true;
    } else {
      this.notificationsLabel = t2.toString();
      this.notificationsAudible = "".concat(t2.toString(), " ").concat(BUTTON_LABEL);
      this.overflow = false;
    }
  };
  t.prototype.handleClick = function(t2) {
    return __awaiter(this, void 0, void 0, function() {
      var i;
      return __generator(this, function(e) {
        i = this.alcClick.emit().defaultPrevented;
        if (i) {
          t2.preventDefault();
        }
        return [2];
      });
    });
  };
  t.prototype.componentWillLoad = function() {
    this.watchNotifications(this.notifications);
  };
  t.prototype.render = function() {
    var t2 = this;
    var i = { class: "alc-header-button", "aria-label": this.overflow ? "".concat(this.notificationsAudible) : null, onClick: function(i2) {
      return t2.handleClick(i2);
    } };
    return h(Host, { key: "759c155108643e394a594a575849491a1e421292" }, h("span", { key: "b7c18e91416ddc03f49fa4f43a1118eeb619a8da", class: "alc-header-notifications" }, this.variant === "button" ? h("button", Object.assign({}, i), this.renderContent()) : h("a", Object.assign({ href: this.url }, i), this.renderContent()), h("span", { key: "8f5d05866bac68b79671c9ba22246aba679e8e10", role: "status", "aria-live": "polite", "aria-atomic": "true", class: "alc-header-notifications__aria-live" }, this.notifications ? "".concat(this.notificationsAudible) : null)));
  };
  t.prototype.renderContent = function() {
    var t2 = h("alc-badge", { color: "warning", count: true, label: this.notificationsLabel }, h("alc-icon", { name: "bell", label: "", class: "alc-header-button__icon" }));
    var i = h("span", { class: "alc-header-button__label" }, BUTTON_LABEL);
    return [t2, i];
  };
  Object.defineProperty(t, "watchers", { get: function() {
    return { notifications: ["watchNotifications"] };
  }, enumerable: false, configurable: true });
  return t;
}();
AlcHeaderNotifications.style = alcHeaderNotificationsCss;
export {
  AlcHeaderNotifications as alc_header_notifications
};
