import {
  testAttributes
} from "./chunk-IGBJBFZL.js";
import {
  getUniqueId
} from "./chunk-6E7TTPYM.js";
import {
  Host,
  createEvent,
  getElement,
  h,
  registerInstance
} from "./chunk-S4YNXM4D.js";
import "./chunk-7D4SUZUM.js";

// node_modules/alcance/dist/esm-es5/alc-autocomplete.entry.js
var __awaiter = function(t, e, i, r) {
  function o(t2) {
    return t2 instanceof i ? t2 : new i(function(e2) {
      e2(t2);
    });
  }
  return new (i || (i = Promise))(function(i2, a) {
    function s(t2) {
      try {
        c(r.next(t2));
      } catch (t3) {
        a(t3);
      }
    }
    function l(t2) {
      try {
        c(r["throw"](t2));
      } catch (t3) {
        a(t3);
      }
    }
    function c(t2) {
      t2.done ? i2(t2.value) : o(t2.value).then(s, l);
    }
    c((r = r.apply(t, e || [])).next());
  });
};
var __generator = function(t, e) {
  var i = { label: 0, sent: function() {
    if (a[0] & 1) throw a[1];
    return a[1];
  }, trys: [], ops: [] }, r, o, a, s;
  return s = { next: l(0), throw: l(1), return: l(2) }, typeof Symbol === "function" && (s[Symbol.iterator] = function() {
    return this;
  }), s;
  function l(t2) {
    return function(e2) {
      return c([t2, e2]);
    };
  }
  function c(l2) {
    if (r) throw new TypeError("Generator is already executing.");
    while (s && (s = 0, l2[0] && (i = 0)), i) try {
      if (r = 1, o && (a = l2[0] & 2 ? o["return"] : l2[0] ? o["throw"] || ((a = o["return"]) && a.call(o), 0) : o.next) && !(a = a.call(o, l2[1])).done) return a;
      if (o = 0, a) l2 = [l2[0] & 2, a.value];
      switch (l2[0]) {
        case 0:
        case 1:
          a = l2;
          break;
        case 4:
          i.label++;
          return { value: l2[1], done: false };
        case 5:
          i.label++;
          o = l2[1];
          l2 = [0];
          continue;
        case 7:
          l2 = i.ops.pop();
          i.trys.pop();
          continue;
        default:
          if (!(a = i.trys, a = a.length > 0 && a[a.length - 1]) && (l2[0] === 6 || l2[0] === 2)) {
            i = 0;
            continue;
          }
          if (l2[0] === 3 && (!a || l2[1] > a[0] && l2[1] < a[3])) {
            i.label = l2[1];
            break;
          }
          if (l2[0] === 6 && i.label < a[1]) {
            i.label = a[1];
            a = l2;
            break;
          }
          if (a && i.label < a[2]) {
            i.label = a[2];
            i.ops.push(l2);
            break;
          }
          if (a[2]) i.ops.pop();
          i.trys.pop();
          continue;
      }
      l2 = e.call(t, i);
    } catch (t2) {
      l2 = [6, t2];
      o = 0;
    } finally {
      r = a = 0;
    }
    if (l2[0] & 5) throw l2[1];
    return { value: l2[0] ? l2[1] : void 0, done: true };
  }
};
var alcAutocompleteCss = '[data-alc-theme="light"] alc-autocomplete{--bg-color:var(--alc-color-surface-primary);--bg-color-footer:var(--alc-color-layer-b);--bg-color-hover:var(--alc-color-layer-b);--border-color:var(--alc-color-neutral-60);--border-color-hover:var(--alc-color-action-60);--border-color-focus:var(--alc-color-action-20);--text-color:var(--alc-color-text-primary)}[data-alc-theme="dark"] alc-autocomplete{--bg-color:var(--alc-color-surface-primary);--bg-color-footer:var(--alc-color-layer-b);--bg-color-hover:var(--alc-color-layer-b);--border-color:var(--alc-color-neutral-60);--border-color-hover:var(--alc-color-action-60);--border-color-focus:var(--alc-color-action-20);--text-color:var(--alc-color-text-primary)}alc-autocomplete{display:block}.alc-autocomplete__grid.is-hidden{display:none}.alc-autocomplete__result-cell{line-height:1.5rem}.alc-autocomplete__grid{z-index:10;width:100%;min-width:16rem;border-width:1px;border-style:solid;border-color:var(--border-color);background-color:var(--bg-color);padding:0px}.alc-autocomplete__message-row-container{width:100%}.alc-autocomplete__result-row{display:-ms-flexbox;display:flex;cursor:default;padding:0.5rem}.alc-autocomplete__result-row:hover{background-color:var(--bg--color-hover);background-color:var(--bg-color-hover)}.alc-autocomplete__result-row.is-focused{border-radius:0.125rem;border-width:2px;border-style:solid;border-color:var(--border-color-hover);color:var(--text-color);-webkit-text-decoration-line:underline;text-decoration-line:underline}.alc-autocomplete__result-cell.is-focused{-webkit-text-decoration-line:underline;text-decoration-line:underline}.alc-autocomplete__result-cell{margin:0px;display:inline-block;cursor:default;padding-left:0.25rem;padding-right:0.25rem;font-size:1rem;line-height:1.5rem}.alc-autocomplete__result-cell:nth-child(n+2){font-size:0.75rem;font-weight:400;line-height:1.5rem;color:var(--text-color)}.alc-autocomplete__icon{pointer-events:none;position:absolute;left:0.5rem;top:0.5rem}.alc-field__input.alc-autocomplete__input{padding-left:2rem}.alc-autocomplete__clear-button{position:absolute;right:0.25rem;cursor:pointer}.alc-autocomplete__message-row{border-left-width:1px;border-right-width:1px;border-bottom-width:1px;border-style:solid;border-color:var(--border-color);background-color:var(--bg-color-footer);padding:0.5rem;font-style:italic;color:var(--text-color)}.alc-autocomplete__field .alc-field__core{position:relative}.alc-field__input.alc-autocomplete__input{text-overflow:ellipsis;padding-left:2rem;padding-right:3rem}.alc-autocomplete__result-row--horizontal{-ms-flex-direction:row;flex-direction:row}.alc-autocomplete__result-row--vertical{-ms-flex-direction:column;flex-direction:column}.alc-autocomplete__grid--vertical{max-height:100%;overflow-y:scroll}.alc-autocomplete__list-container{position:absolute;z-index:10;margin-top:2.75rem;width:100%;min-width:250px}.alc-autocomplete__has-an-error-indicator,.alc-autocomplete__loading-indicator{margin-bottom:-0.25rem;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;border-width:1px;border-style:solid;border-color:var(--border-color);background-color:var(--bg-color-footer);padding:0.5rem;font-family:#000}.alc-autocomplete__loading-icon{margin-right:0.25rem}@-webkit-keyframes spin{to{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes spin{to{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}.alc-autocomplete__loading-icon{-webkit-animation:spin 1s linear infinite;animation:spin 1s linear infinite}.alc-autocomplete__loading-icon .icon-inner{display:block}.alc-autocomplete__loading-icon .alc-icon__image{top:0px;margin-top:0px;height:auto;width:auto}.alc-autocomplete__container-results{height:100%;max-height:inherit}.alc-autocomplete__results{display:-ms-flexbox;display:flex;height:100%;max-height:inherit;-ms-flex-direction:column;flex-direction:column}';
var AlcAutocomplete = function() {
  function t(t2) {
    registerInstance(this, t2);
    this.alcChange = createEvent(this, "alc-change", 7);
    this.items = [];
    this.displayKeys = "";
    this.label = "";
    this.hint = "";
    this.required = false;
    this.listDirection = "vertical";
    this.disabled = false;
    this.loading = false;
    this.error = false;
    this.errorMsg = null;
    this.filteredData = [];
    this.itemSelected = false;
    this.selectedItemValue = null;
    this.emptyResult = false;
    this.activeRowIndex = -1;
    this.activeColIndex = 0;
    this.rowsCount = 0;
    this.colsCount = 0;
    this.gridFocused = false;
    this.shown = false;
    this.selectionCol = 0;
  }
  t.prototype.selectedItemValueChanged = function(t2) {
    this.alcChange.emit(t2);
  };
  t.prototype.handleLoadingChange = function(t2, e) {
    var i = this;
    if (e === true && t2 === false && !this.disabled && this.input) {
      requestAnimationFrame(function() {
        i.input.focus();
      });
    }
  };
  t.prototype.componentWillLoad = function() {
    this.inputId = getUniqueId();
    this.gridId = getUniqueId();
    this.labelId = getUniqueId();
    this.messageRowContainerId = getUniqueId();
  };
  t.prototype.componentDidLoad = function() {
    var t2 = this;
    var e = new MutationObserver(function() {
      if (!t2.input.hasAttribute("disabled")) {
        if (t2.disabled || t2.loading) {
          t2.input.setAttribute("disabled", "true");
        }
      }
    });
    e.observe(this.input, { attributes: true, attributeFilter: ["disabled"] });
    if (this.disabled || this.loading) {
      this.input.setAttribute("disabled", "true");
    }
    this.input.addEventListener("focus", this.handleFocus.bind(this));
  };
  t.prototype.handleBodyClick = function(t2) {
    var e = t2.target;
    if (e === this.input || e instanceof Node && this.grid.contains(e)) {
      return;
    }
    this.hideResults();
  };
  t.prototype.handleInputKeyUp = function(t2) {
    var e = t2.target;
    if (!(e instanceof Node) || !this.input.contains(e)) {
      return;
    }
    var i = t2.key;
    switch (i) {
      case "ArrowUp":
      case "ArrowDown":
      case "Escape":
      case "Enter":
        t2.preventDefault();
        return;
      case "ArrowLeft":
      case "ArrowRight":
        if (this.gridFocused) {
          t2.preventDefault();
          return;
        }
        break;
      default:
        this.updateResults();
    }
  };
  t.prototype.handleInputKeyDown = function(t2) {
    var e = this;
    var i = t2.key;
    var r = this.activeRowIndex;
    var o = this.activeColIndex;
    var a = t2.target;
    if (!(a instanceof Node) || !this.input.contains(a)) {
      return;
    }
    if (i === "Escape") {
      t2.preventDefault();
      if (this.gridFocused) {
        this.gridFocused = false;
        this.removeFocusCell(this.activeRowIndex, this.activeColIndex);
        this.activeRowIndex = -1;
        this.activeColIndex = 0;
        this.input.setAttribute("aria-activedescendant", "");
      } else {
        if (!this.shown) {
          setTimeout(function() {
            e.input.value = "";
          }, 1);
        }
      }
      if (this.shown) {
        this.hideResults();
      }
      this.itemSelected = false;
      this.emptyResult = false;
      this.error = false;
      return;
    }
    if (this.rowsCount < 1) {
      return;
    }
    var s = this.getItemAt(r, this.selectionCol);
    var l;
    switch (i) {
      case "ArrowUp":
        this.gridFocused = true;
        r = this.getRowIndex("ArrowUp");
        t2.preventDefault();
        break;
      case "ArrowDown":
        this.gridFocused = true;
        r = this.getRowIndex("ArrowDown");
        t2.preventDefault();
        break;
      case "ArrowLeft":
        if (o <= 0) {
          o = this.colsCount - 1;
          r = this.getRowIndex("ArrowLeft");
        } else {
          o--;
        }
        if (this.gridFocused) {
          t2.preventDefault();
        }
        break;
      case "ArrowRight":
        if (o === -1 || o >= this.colsCount - 1) {
          o = 0;
          r = this.getRowIndex("ArrowRight");
        } else {
          o++;
        }
        if (this.gridFocused) {
          t2.preventDefault();
        }
        break;
      case "Enter":
        t2.preventDefault();
        if (this.gridFocused) {
          l = this.getItemAt(r, this.selectionCol);
          this.selectItem(l, t2);
          this.gridFocused = false;
        } else {
          this.hideResults();
        }
        return;
      case "Tab":
        this.hideResults();
        return;
      default:
        return;
    }
    if (s) {
      this.removeFocusCell(this.activeRowIndex, this.activeColIndex);
    }
    l = this.getItemAt(r, o);
    this.activeRowIndex = r;
    this.activeColIndex = o;
    if (l) {
      this.input.setAttribute("aria-activedescendant", "result-item-" + r + "x" + o);
      this.focusCell(r, o);
    } else {
      this.input.setAttribute("aria-activedescendant", "");
    }
  };
  t.prototype.handleGridClick = function(t2) {
    var e = t2.target;
    if (!e || !this.grid.contains(e)) {
      return;
    }
    var i = e.closest("li");
    if (!i) {
      return;
    }
    var r = i.querySelector(".alc-autocomplete__result-cell");
    this.selectItem(r, t2);
  };
  t.prototype.isElementInView = function(t2) {
    var e = t2.getBoundingClientRect();
    return e.top >= 0 && e.left >= 0 && e.bottom <= (window.innerHeight || document.documentElement.clientHeight) && e.right <= (window.innerWidth || document.documentElement.clientWidth);
  };
  t.prototype.updateResults = function() {
    var t2 = this.input.value;
    this.emptyResult = false;
    if (t2.length < 2) {
      this.hideResults();
      this.emptyResult = false;
      return;
    }
    this.filteredData = this.searchDataService(t2);
    this.hideResults();
    if (this.filteredData.length > 0) {
      var e = 10;
      var i = this.filteredData.slice(0, e);
      if (i.length) {
        var r = function(t3) {
          var e2 = document.createElement("li");
          e2.className = "alc-autocomplete__result-row alc-autocomplete__result-row--".concat(o.listDirection);
          e2.setAttribute("role", "option");
          e2.setAttribute("id", "result-row-" + t3);
          e2.setAttribute("data-index", t3.toString());
          o.displayKeys.split(",").forEach(function(r2, o2) {
            var a2 = document.createElement("span");
            a2.className = "alc-autocomplete__result-cell";
            a2.setAttribute("role", "presentation");
            a2.setAttribute("id", "result-item-" + t3 + "x" + o2);
            a2.innerText = i[t3][r2.trim()];
            e2.appendChild(a2);
          });
          o.grid.appendChild(e2);
        };
        var o = this;
        for (var a = 0; a < i.length; a++) {
          r(a);
        }
        this.grid.classList.remove("is-hidden");
        this.input.setAttribute("aria-expanded", "true");
        this.rowsCount = i.length;
        this.colsCount = this.displayKeys.split(",").length;
        this.shown = true;
      }
      if (this.filteredData.length > e) {
        this.showMessageRow("Mais de 10 itens encontrados. Refine seus critérios de pesquisa.");
      }
    } else {
      this.emptyResult = true;
    }
  };
  t.prototype.getRowIndex = function(t2) {
    var e = this.activeRowIndex;
    switch (t2) {
      case "ArrowUp":
      case "ArrowLeft":
        if (e <= 0) {
          e = this.rowsCount - 1;
        } else {
          e--;
        }
        break;
      case "ArrowDown":
      case "ArrowRight":
        if (e === -1 || e >= this.rowsCount - 1) {
          e = 0;
        } else {
          e++;
        }
    }
    return e;
  };
  t.prototype.getItemAt = function(t2, e) {
    return document.getElementById("result-item-" + t2 + "x" + e);
  };
  t.prototype.selectItem = function(t2, e) {
    if (e) e.preventDefault();
    if (t2) {
      var i = t2.closest("li");
      var r = i === null || i === void 0 ? void 0 : i.getAttribute("data-index");
      if (r !== null && r !== void 0) {
        var o = this.filteredData[parseInt(r, 10)];
        this.input.value = t2.innerText;
        this.selectedItemValue = o;
        this.hideResults();
        this.input.setAttribute("aria-expanded", "false");
        this.itemSelected = true;
        this.emptyResult = false;
        this.input.focus();
      }
    }
  };
  t.prototype.handleInput = function() {
    var t2;
    this.itemSelected = ((t2 = this.input) === null || t2 === void 0 ? void 0 : t2.value.length) > 0;
  };
  t.prototype.handleFocus = function() {
    var t2 = this.input.value || "";
    if (t2.length >= 2) {
      this.updateResults();
    }
  };
  t.prototype.clearSelection = function(t2) {
    t2.preventDefault();
    this.clearSelected();
    this.input.focus();
  };
  t.prototype.hideResults = function() {
    if (!this.shown) {
      return;
    }
    this.gridFocused = false;
    this.shown = false;
    this.activeRowIndex = -1;
    this.activeColIndex = 0;
    this.grid.innerHTML = "";
    this.grid.classList.add("is-hidden");
    this.input.setAttribute("aria-expanded", "false");
    this.rowsCount = 0;
    this.colsCount = 0;
    this.input.setAttribute("aria-activedescendant", "");
    var t2 = this.el.querySelector("#".concat(this.messageRowContainerId));
    if (t2) {
      t2.innerHTML = "";
    }
    if (!this.isElementInView(this.input)) {
      this.input.scrollIntoView({ behavior: "smooth", block: "nearest" });
    }
  };
  t.prototype.removeFocusCell = function(t2, e) {
    var i = document.getElementById("result-row-" + t2);
    if (i) {
      i.classList.remove("is-focused");
      i.ariaSelected = "false";
    }
    var r = this.getItemAt(t2, e);
    if (r) r.classList.remove("is-focused");
  };
  t.prototype.focusCell = function(t2, e) {
    var i = document.getElementById("result-row-" + t2);
    if (i) {
      i.classList.add("is-focused");
      i.ariaSelected = "true";
    }
    var r = this.getItemAt(t2, e);
    if (r) {
      r.classList.add("is-focused");
      if (this.listDirection === "vertical") {
        this.ensureCellInView(r);
      } else {
        if (!this.isElementInView(r)) {
          r.scrollIntoView({ behavior: "smooth", block: "nearest" });
        }
      }
    }
  };
  t.prototype.ensureCellInView = function(t2) {
    var e = this.grid;
    var i = t2.offsetTop;
    e.scrollTop = i;
  };
  t.prototype.searchDataService = function(t2) {
    var e = function(t3) {
      return t3.normalize("NFD").replace(/[\u0300-\u036f]/g, "").toLowerCase();
    };
    var i = e(t2);
    var r = [];
    for (var o = 0, a = this.items; o < a.length; o++) {
      var s = a[o];
      for (var l = 0, c = this.displayKeys.split(","); l < c.length; l++) {
        var n = c[l];
        var u = e(s[n.trim()] || "");
        if (u.includes(i)) {
          r.push(s);
          break;
        }
      }
    }
    return r;
  };
  t.prototype.showMessageRow = function(t2) {
    var e = this.el.querySelector("#".concat(this.messageRowContainerId, " "));
    var i = e.querySelector(".alc-autocomplete__message-row");
    if (!i) {
      var r = document.createElement("div");
      r.className = "alc-autocomplete__message-row";
      r.innerText = t2;
      if (e) {
        e.appendChild(r);
      }
    }
  };
  t.prototype.getSelected = function() {
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(t2) {
        return [2, this.selectedItemValue || null];
      });
    });
  };
  t.prototype.setSelected = function(t2) {
    return __awaiter(this, void 0, void 0, function() {
      var e, i;
      return __generator(this, function(r) {
        if (t2) {
          this.selectedItemValue = t2;
          e = this.displayKeys.split(",")[0].trim();
          i = t2[e];
          this.input.value = i;
          this.itemSelected = true;
          this.emptyResult = false;
        }
        return [2];
      });
    });
  };
  t.prototype.clearSelected = function() {
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(t2) {
        this.input.value = "";
        this.selectedItemValue = null;
        this.itemSelected = false;
        this.hideResults();
        this.emptyResult = false;
        this.error = false;
        return [2];
      });
    });
  };
  t.prototype.render = function() {
    var t2 = this;
    var e;
    var i = this.listDirection === "vertical" ? "alc-autocomplete__grid alc-autocomplete__grid--vertical is-hidden alc-field__text" : "alc-autocomplete__grid is-hidden alc-field__text";
    var r = this.shown || this.loading || this.error || !this.error && this.emptyResult;
    return h(Host, { key: "d05e40ab10e25b249643fd2a7533183d38a484e2" }, h("alc-field", { key: "afbffba276a97c5e4113615196aa94358af8ddbd", id: this.labelId, label: this.label, hint: this.hint, required: this.required, class: "alc-autocomplete__field" }, h("alc-popup", { key: "501e5c316ac6522c56bc99fcea728af6834074db", shift: true, flip: true, strategy: "fixed", active: r, distance: 2, placement: "bottom-start", sync: "width" }, h("div", { key: "fa18971d71a168c13fe5c5fc71d206b833e86a78", slot: "anchor" }, h("alc-icon", { key: "fcbfbb27da3573b965782b1e6da72015dc9d6e23", name: "search", label: "Pesquisar", class: "alc-autocomplete__icon" }), h("input", Object.assign({ key: "6ef5f5ca522b0c3da2703040410d49a0829c8771", ref: function(e2) {
      return t2.input = e2;
    }, placeholder: this.placeholder, class: "alc-autocomplete__input", type: "text", role: "combobox", "aria-haspopup": "grid", "aria-expanded": "false", "aria-autocomplete": "list", "aria-controls": this.gridId, id: this.inputId, disabled: this.disabled || this.loading, onInput: function() {
      return t2.handleInput();
    } }, testAttributes())), this.itemSelected && ((e = this.input) === null || e === void 0 ? void 0 : e.value) && h("button", Object.assign({ key: "f72623e4729db617f4ae3060146c2d2c8647a5eb", type: "button", class: "alc-button alc-button-rounded alc-autocomplete__clear-button", onClick: function(e2) {
      return t2.clearSelection(e2);
    } }, testAttributes()), h("alc-icon", { key: "07f21c425fafc4a0009718a2109dbefac0b7ae08", name: "x-lg", label: "Limpar" }))), h("div", { key: "459d4e47aa9f6adbc3536e7df97d712cb8bd0ffe", class: "alc-autocomplete__container-results" }, this.loading ? h("div", { class: "alc-autocomplete__loading-indicator" }, h("alc-icon", { name: "arrow-clockwise", label: "Carregando", class: "alc-autocomplete__loading-icon" }), " Carregando...") : null, this.error ? h("div", { class: "alc-autocomplete__has-an-error-indicator" }, h("alc-icon", { name: "exclamation-triangle", label: "Erro", class: "mr-1" }), " Serviço indisponível. Volte mais tarde!") : null, !this.error && this.emptyResult ? h("div", { class: "alc-autocomplete__has-an-error-indicator" }, h("alc-icon", { name: "exclamation-triangle", label: "Erro", class: "mr-1" }), " Nenhum resultado encontrado. Refine seus critérios de pesquisa.") : null, h("div", Object.assign({ key: "0c7746fe2febad6825ab31e0619eeb5bc67365d8", class: "alc-autocomplete__results" }, testAttributes()), h("ul", { key: "863a18714395fc6ee3123dae27e11621f04107d1", "aria-labelledby": this.labelId, role: "listbox", id: this.gridId, class: i, ref: function(e2) {
      return t2.grid = e2;
    } }), h("div", { key: "f9c1fc7eae956f6891382f2f678b447a162dd65e", id: this.messageRowContainerId, class: "alc-autocomplete__message-row-container" }))))));
  };
  Object.defineProperty(t.prototype, "el", { get: function() {
    return getElement(this);
  }, enumerable: false, configurable: true });
  Object.defineProperty(t, "watchers", { get: function() {
    return { selectedItemValue: ["selectedItemValueChanged"], loading: ["handleLoadingChange"] };
  }, enumerable: false, configurable: true });
  return t;
}();
AlcAutocomplete.style = alcAutocompleteCss;
export {
  AlcAutocomplete as alc_autocomplete
};
