{
  "version": 3,
  "sources": ["../../alcance/dist/esm-es5/src/components/utils/keydown.ts"],
  "sourcesContent": ["export const getFocusableElements = (element: HTMLElement) => {\n    const focusableElements = getAllFocusableElements(element);\n    // Retorna somente elementos visíveis\n    // Valida se o elemento possui tabindex de qualquer valor negativo e adiciona à lista de filtrados\n    return focusableElements.filter(element => {\n        const el = element as HTMLElement;\n        return el.offsetParent !== null && !(el.hasAttribute('tabindex') && parseInt(el.getAttribute('tabindex') || '0') < 0);\n    });\n}\n\n// Pega todos os elementos focaveis, inclusive invisíveis e com tabindex negativo \n// Pegar elementos invisíveis são úteis quando estão dentro de componentes que não foram renderizados, como a modal fechada.\n// E tabindex negativo é usado para controlar o foco manualmente e, para isso, queremos pegar esses elementos.\nexport const getAllFocusableElements = (element: HTMLElement) => {\n    const focusableElements = element.querySelectorAll(\n        'button, [href], input, select, textarea, [tabindex], [contenteditable]:not([contenteditable=\"false\"])',\n    );\n\n    // Converte NodeList para Array\n    return Array.from(focusableElements);\n}\n\nexport const focusFirstElement = (focusableElements: Element[]) => {\n    if (focusableElements.length > 0) {\n        const firstElement = focusableElements[0] as HTMLElement;\n        firstElement.focus();\n    }\n}\n\nexport const handleKeyDown = (event: KeyboardEvent, focusableElements: Element[]) => {\n    if (focusableElements.length > 0) {\n        const firstElement = focusableElements[0] as HTMLElement;\n        const lastElement = focusableElements[focusableElements.length - 1] as HTMLElement;\n\n        if (focusableElements.length === 1) {\n            firstElement.focus();\n            return event.preventDefault();\n        }\n\n        if (!event.shiftKey && document.activeElement === lastElement) {\n            firstElement.focus();\n            return event.preventDefault();\n        }\n\n        if (event.shiftKey && document.activeElement === firstElement) {\n            lastElement.focus();\n            return event.preventDefault();\n        }\n\n    }\n}\n"],
  "mappings": ";AAAa,IAAA,uBAAA,SAAwB,GAAA;AAAoB,MAAA,IAAI,wBAAA,CAAA;AAAA,SAAA,EAAA,OAAA,SAAAA,IAAA;AAAA,QAAAC,KAAAD;AAAA,WAAAC,GAAA,iBAAA,QAAA,EAAAA,GAAA,aAAA,UAAA,KAAA,SAAAA,GAAA,aAAA,UAAA,KAAA,GAAA,IAAA;EAAA,CAAA;AAAA;AAAA,IAAA,0BAAA,SAAA,GAAA;AAAA,MAAA,IAAA,EAAA,iBAAA,uGAAA;AAAA,SAAA,MAAA,KAAA,CAAA;AAAA;AAAA,IAAA,oBAAA,SAAA,GAAA;AAAA,MAAA,EAAA,SAAA,GAAA;AAAA,QAAA,IAAA,EAAA,CAAA;AAAA,MAAA,MAAA;EAAA;AAAA;AAAA,IAAA,gBAAA,SAAA,GAAA,GAAA;AAAA,MAAA,EAAA,SAAA,GAAA;AAAA,QAAA,IAAA,EAAA,CAAA;AAAA,QAAA,IAAA,EAAA,EAAA,SAAA,CAAA;AAAA,QAAA,EAAA,WAAA,GAAA;AAAA,QAAA,MAAA;AAAA,aAAA,EAAA,eAAA;IAAA;AAAA,QAAA,CAAA,EAAA,YAAA,SAAA,kBAAA,GAAA;AAAA,QAAA,MAAA;AAAA,aAAA,EAAA,eAAA;IAAA;AAAA,QAAA,EAAA,YAAA,SAAA,kBAAA,GAAA;AAAA,QAAA,MAAA;AAAA,aAAA,EAAA,eAAA;IAAA;EAAA;AAAA;",
  "names": ["e", "t"]
}
