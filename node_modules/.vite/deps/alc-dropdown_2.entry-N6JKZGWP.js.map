{
  "version": 3,
  "sources": ["../../alcance/dist/esm-es5/src/components/alc-dropdown/alc-dropdown.css", "../../alcance/dist/esm-es5/src/components/alc-dropdown/alc-dropdown.tsx", "../../alcance/dist/esm-es5/src/components/alc-menu/alc-menu.css", "../../alcance/dist/esm-es5/src/components/alc-menu/alc-menu.tsx"],
  "sourcesContent": ["[data-alc-theme=\"dark\"] alc-dropdown {\n  --border-color: var(--alc-color-neutral-80);\n}\n\n[data-alc-theme=\"light\"] alc-dropdown {\n  --border-color: var(--alc-color-neutral-10);\n}\n\n\nalc-dropdown {\n  @apply relative inline-block;\n}\n\n.alc-dropdown__content {\n  @apply bg-[color:var(--alc-color-surface-primary)] overflow-auto;\n  @apply drop-shadow-md shadow-black rounded border border-[color:var(--border-color)];\n  /* Vai pegar a altura máxima do pai (popup) permitindo funcionar o overflow */\n  max-height: inherit;\n\n  /* animation: Scale 100ms ease-in-out; */\n}\n\n.alc-dropdown__content--opened {\n  @apply block;\n}\n\n@keyframes Scale {\n  0% {\n    opacity: 0;\n    transform: scale(0.8);\n  }\n\n  100% {\n    opacity: 1;\n    transform: scale(1);\n  }\n}\n", "import { Component, Prop, h, Host, Element, Listen, Watch, Method, Event, EventEmitter } from '@stencil/core';\nimport { getFocusableElements } from '../utils/keydown';\nimport { getUniqueId } from '../utils/getUniqueId';\nimport logger from '../utils/logger';\n\n\n/**\n * @slot - O conteúdo do dropdown.\n * @slot trigger - O disparador do dropdown, usualmente um botão.\n */\n@Component({\n  tag: 'alc-dropdown',\n  styleUrl: 'alc-dropdown.css',\n  shadow: false,\n})\nexport class AlcDropdown {\n  @Element() el: HTMLElement;\n  private trigger: HTMLElement;\n  private content: HTMLElement;\n  private originalTriggerTabindex: number | null;\n  private hideOnEventsMap: Map<string, EventListener> = new Map();\n\n  /**\n   * Indica se o dropdown esta aberto ou não. Pode-se usar essa propriedade em vez dos métodos show/hide.\n   */\n  @Prop({\n    reflect: true,\n    mutable: true\n  }) open: boolean = false;\n\n  @Watch('open')\n  watchOpen() {\n    if (this.trigger) {\n      this.handleTriggerAriaExpanded();\n      this.handleTriggerTabindex();\n    }\n  }\n\n  /**\n   * Nome do evento que, ao ocorrer no conteúdo do dropdown, vai fazer com que ele seja fechado.\n   * Podem ser informados vários eventos, separados por um espaço em branco.\n   */\n  @Prop({\n    reflect: true,\n    mutable: false,\n  }) hideOn: string = '';\n\n  @Watch('hideOn')\n  watchHideOn() {\n    // Remove todos os eventos anteriores\n    this.hideOnEventsMap.forEach((listener, eventName) => {\n      this.content.removeEventListener(eventName, listener);\n      this.hideOnEventsMap.delete(eventName);\n    })\n\n    // Adiciona todos os novos eventos\n    this.addHideOnListeners();\n  }\n\n  @Listen('keydown')\n  async handleKeydown(event: KeyboardEvent) {\n    if (!this.open) return;\n    \n    if (event.key !== 'Escape') return;\n\n    if (event.defaultPrevented) return;\n\n    event.preventDefault();\n    await this.hide();\n    this.handleTriggerFocus();\n  }\n\n  /**\n   * Evento disparado quando o dropdown vai abrir\n   */\n  @Event({\n    eventName: 'alc-show',\n    cancelable: true,\n    bubbles: true,\n  })\n  alcShow: EventEmitter<null>;\n\n  /**\n   * Evento disparado quando o dropdown abriu\n   */\n  @Event({\n    eventName: 'alc-after-show',\n    cancelable: false,\n    bubbles: true,\n  })\n  alcAfterShow: EventEmitter<null>;\n\n  /**\n   * Evento disparado quando o dropdown vai fechar\n   */\n  @Event({\n    eventName: 'alc-hide',\n    cancelable: true,\n    bubbles: true,\n  })\n  alcHide: EventEmitter<null>;\n\n  /**\n   * Evento disparado quando o dropdown fechou\n   */\n  @Event({\n    eventName: 'alc-after-hide',\n    cancelable: false,\n    bubbles: true,\n  })\n  alcAfterHide: EventEmitter<null>;\n\n  /**\n   * Método para abrir o dropdown.\n   * @returns O valor retornado é `true` se o dropdown foi realmente exibido com essa chamada ao método.\n   */\n  @Method()\n  async show(): Promise<boolean> {\n    if (this.open) {\n      return false;\n    }\n\n    const { defaultPrevented } = this.alcShow.emit();\n    if (defaultPrevented) {\n      return false;\n    }\n\n    this.open = true;\n    this.alcAfterShow.emit();\n\n    return true;\n  }\n\n  /**\n   * Método para fechar o dropdown.\n   * @returns O valor retornado é `true` se o dropdown foi realmente oculto com essa chamada ao método.\n   */\n  @Method()\n  async hide(): Promise<boolean> {\n    if (!this.open) {\n      return false;\n    }\n\n    const { defaultPrevented } = this.alcHide.emit();\n    if (defaultPrevented) {\n      return false;\n    }\n\n    this.open = false;\n    this.alcAfterHide.emit();\n\n    return true;\n  }\n\n  private handleAnchorClick = (event: MouseEvent) => {\n    if (!(event.target instanceof Node)) {\n      return;\n    }\n\n    // Se o click foi no trigger (ou dentro dele)\n    if (this.trigger?.contains(event.target)) {\n      this.toggleDropdown();\n    }\n  }\n\n  toggleDropdown = async () => {\n    this.open ? this.hide() : this.show();\n  }\n\n  handleTriggerFocus() {\n    this.trigger?.focus();\n  }\n\n  handleContentFocus() {\n    const contentFirstFocusable = getFocusableElements(this.content)[0];\n\n    if(!contentFirstFocusable) return;\n\n    if(contentFirstFocusable instanceof HTMLElement) {\n      contentFirstFocusable.focus();\n    }\n  }\n\n  private setTriggerAccessibility() {\n    if (this.trigger.getAttribute('role') === null) {\n      this.trigger.setAttribute('role', \"button\");\n    }\n\n    const contentElementChild = this.content.firstElementChild;\n\n    if (this.trigger.getAttribute('aria-haspopup') === null) {\n      const ariaHaspopup = contentElementChild?.role === \"menu\" ? \"menu\" : \"dialog\";\n      this.trigger.setAttribute('aria-haspopup', ariaHaspopup);\n    }\n\n    let id = contentElementChild?.id ? contentElementChild.id : getUniqueId();\n\n    // Se não ter conteudo dentro, o id vai no alc-dropdown__content se não vai no conteudo\n    if(!contentElementChild) {\n      this.content.id = id;\n    } else {\n      contentElementChild.id = id;\n    }\n\n    this.trigger.setAttribute('aria-controls', id);\n  }\n\n  private handleTriggerAriaExpanded() {\n    this.trigger.ariaExpanded = `${this.open}`;\n  }\n\n  private handleTriggerTabindex() {\n    this.trigger.tabIndex = this.open ? -1 : this.originalTriggerTabindex;\n  }\n\n  private async handleFocusOut(e: FocusEvent) {\n    const { relatedTarget } = e;\n    const isNode = relatedTarget instanceof Node;\n\n    /*\n      OBSERVAÇÃO:\n      Para que um clique qualquer dentro de content, mesmo se for um elemento não focalizável,\n      não resulte em relatedTarget null, foi definido tabindex=-1 para o content.\n      Se não fosse assim, um clique em um elemento não focalizável dentro de content\n      resultaria no fechamento indesejado do dropdown.\n    */\n    if (isNode && this.el.contains(relatedTarget)) {\n      return;\n    }\n\n    await this.hide();\n  }\n\n  private handleCloseOn(e: Event) {\n    if (e.defaultPrevented) {\n      return;\n    }\n    this.open = false;\n  }\n\n  private addHideOnListeners() {\n    const hideOn = this.hideOn.trim();\n    // Nada a fazer se for um string vazia.\n    if (!hideOn) {\n      return;\n    }\n\n    const eventNames = hideOn.split(/\\s+/);\n\n    eventNames.forEach(eventName => {\n      const listener = (e: Event) => this.handleCloseOn(e);\n      this.hideOnEventsMap.set(eventName, listener);\n      this.content.addEventListener(eventName, listener);\n    });\n  }\n\n  componentDidUpdate() {\n    if(this.open) {\n      // Quando o trigger for acionado por teclado para abrir o foco deve ir para o primeiro elemento focalizável dentro do conteúdo\n      // Foi adicionado para tratar no componentDidUpdate pois no handleKeydown o dropdown ainda esta fechado, logo o 'elemento.focus()' não funciona\n      // Aqui o componente ja foi renderizado com o novo estado.\n      this.handleContentFocus();\n    }\n  }\n\n  getTrigger(): HTMLElement {\n    let slot: HTMLElement = null;\n    let trigger: HTMLElement = null;\n\n    slot = this.el.querySelector('[slot=\"trigger\"]');\n    if (slot) {\n      if (slot.tagName === 'BUTTON' || slot.getAttribute('role') === 'button') {\n        // Trigger é o próprio slot se ele mesmo for o botão\n        trigger = slot;\n      }\n      else {\n        // Trigger é o primeiro botão encontrado dentro do slot (se existir)\n        trigger = slot.querySelector('button, [role=\"button\"]');\n      }\n    }\n\n    if (trigger === null) {\n      logger.warn(this.el, 'alc-dropdown não localizou um trigger válido. Slot deve ser ou conter um botão. Veja a documentação para mais detalhes.');\n    }\n    return trigger;\n  }\n\n  componentDidLoad() {\n\n    this.trigger = this.getTrigger();\n\n    if (this.trigger) {\n      this.setTriggerAccessibility();\n      this.handleTriggerAriaExpanded();\n      this.originalTriggerTabindex = this.trigger.tabIndex;\n    }\n\n    // Adiciona close-on listeners\n    this.addHideOnListeners();\n  }\n\n  render() {\n    return (\n      <Host>\n        <alc-popup\n          active={this.open}\n          placement=\"bottom-start\"\n          flip\n          shift\n          strategy=\"fixed\"\n          onFocusout={this.handleFocusOut.bind(this)}\n          distance={2}\n        >\n          <div slot=\"anchor\" onClick={this.handleAnchorClick}>\n            <slot name=\"trigger\" />\n          </div>\n\n          <div class=\"alc-dropdown__content\" ref={(el) => this.content = el} tabindex='-1'>\n            <slot></slot>\n          </div>\n        </alc-popup>\n      </Host>\n    );\n  }\n}\n\n", ".alc-menu {\n  @apply block py-2;\n  @apply bg-[color:var(--alc-color-surface-primary)];\n}\n", "import { Component, h, Host, Element, Listen, Method } from '@stencil/core';\n\n@Component({\n  tag: 'alc-menu',\n  styleUrl: 'alc-menu.css',\n  shadow: false,\n})\nexport class AlcMenu {\n  @Element() hostElement: HTMLElement;\n\n  private hasFocus = false;\n\n  private items: Element[];\n\n  @Method()\n  async refresh() {\n    this.items = this.getListItems();\n    this.includeFirstItemInTabNavigation();\n  }\n\n\n  @Listen('keydown')\n  handleKeydown(event: KeyboardEvent) {\n    if ('ArrowDown' === event.key) {\n      event.preventDefault();\n      this.handleFocusedItemIndex();\n      return;\n    }\n\n    if ('ArrowUp' === event.key) {\n      event.preventDefault();\n      this.handleFocusedItemIndex(-1);\n      return;\n    }\n  }\n\n  /**\n   * Focar item recém-selecionado\n   */\n  @Listen('alc-select')\n  handleAlcSelect (e: CustomEvent) {\n    const index = this.items.findIndex(item => item === e.target);\n\n    if(index === null) return;\n\n    this.handleFocusItem(index);\n  }\n\n  @Listen('focusin')\n  handleFocusin ({ target }) {\n    // Se já tem o foco, nada a fazer\n    if (this.hasFocus) {\n      return;\n    }\n    if (this.hostElement.contains(target)) {\n      this.setHasFocus(true);\n    }\n  }\n\n  @Listen('focusout')\n  handleFocusout ({ relatedTarget }) {\n    if (!this.hostElement.contains(relatedTarget)) {\n      this.setHasFocus(false);\n    }\n  }\n\n  handleFocusedItemIndex(direction: -1 | 1 = 1) {\n    const currentIndex = this.items.indexOf(document.activeElement);\n    if (currentIndex === -1) return;\n\n    let nextIndex = currentIndex + direction;\n    const itemsLength = this.items.length - 1;\n\n    if (nextIndex > itemsLength) {\n      nextIndex = 0;\n    }\n\n    if (nextIndex < 0) {\n      nextIndex = itemsLength;\n    }\n\n    this.handleFocusItem(nextIndex);\n  }\n\n  handleFocusItem(index: number) {\n    const item = this.items[index];\n\n    if(item instanceof HTMLElement) {\n      // Seta foco no atual\n      item.focus();\n    }\n\n  }\n\n  getListItems = () => Array.from(this.hostElement.querySelectorAll('[role^=menuitem]'));\n\n  includeFirstItemInTabNavigation = () => {\n    this.items.forEach((item, pos) => {\n      item.setAttribute('tabindex', pos === 0 ? '0' : '-1')\n    });\n  }\n\n  removeAllItemsFromTabNavigation = () => {\n    this.items.forEach(item => item.setAttribute('tabindex', '-1'));\n  }\n\n\n  setHasFocus = (hasFocus = true) => {\n\n    this.hasFocus = hasFocus;\n\n    if (hasFocus) {\n      this.removeAllItemsFromTabNavigation();\n    }\n    else {\n      this.includeFirstItemInTabNavigation();\n    }\n\n  }\n\n\n  componentDidRender() {\n    this.items = this.getListItems();\n  }\n\n  componentDidLoad() {\n    this.includeFirstItemInTabNavigation();\n  }\n\n  render() {\n    return (\n      <Host role=\"menu\" class=\"alc-menu\">\n        <slot />\n      </Host>\n    );\n  }\n}\n"],
  "mappings": "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",
  "names": ["alcDropdownCss", "AlcDropdown", "class_1", "hostRef", "_this", "this", "hideOnEventsMap", "Map", "open", "hideOn", "handleAnchorClick", "event", "target", "Node", "_a", "trigger", "contains", "toggleDropdown", "__awaiter", "t", "hide", "show", "prototype", "watchOpen", "handleTriggerAriaExpanded", "handleTriggerTabindex", "watchHideOn", "forEach", "listener", "eventName", "content", "removeEventListener", "delete", "addHideOnListeners", "handleKeydown", "key", "defaultPrevented", "preventDefault", "_b", "sent", "handleTriggerFocus", "alcShow", "emit", "alcAfterShow", "alcHide", "alcAfterHide", "focus", "handleContentFocus", "contentFirstFocusable", "getFocusableElements", "HTMLElement", "setTriggerAccessibility", "getAttribute", "setAttribute", "contentElementChild", "firstElementChild", "ariaHaspopup", "role", "id", "getUniqueId", "ariaExpanded", "concat", "tabIndex", "originalTriggerTabindex", "handleFocusOut", "e", "relatedTarget", "isNode", "el", "handleCloseOn", "trim", "eventNames", "split", "set", "addEventListener", "componentDidUpdate", "getTrigger", "slot", "querySelector", "tagName", "logger", "warn", "componentDidLoad", "render", "h", "Host", "active", "placement", "flip", "shift", "strategy", "onFocusout", "bind", "distance", "onClick", "name", "class", "ref", "tabindex", "alcMenuCss", "AlcMenu", "class_2", "hasFocus", "getListItems", "Array", "from", "hostElement", "querySelectorAll", "includeFirstItemInTabNavigation", "items", "item", "pos", "removeAllItemsFromTabNavigation", "setHasFocus", "refresh", "handleFocusedItemIndex", "handleAlcSelect", "index", "findIndex", "handleFocusItem", "handleFocusin", "handleFocusout", "direction", "currentIndex", "indexOf", "document", "activeElement", "nextIndex", "itemsLength", "length", "componentDidRender"]
}
