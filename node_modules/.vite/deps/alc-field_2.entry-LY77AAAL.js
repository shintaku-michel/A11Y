import {
  logger
} from "./chunk-F2BFVVNU.js";
import {
  getAppliedTheme,
  loadUserPreference,
  removeUserPreference,
  saveUserPreference,
  setAppliedTheme
} from "./chunk-IGSHYZLV.js";
import {
  testAttributes
} from "./chunk-IGBJBFZL.js";
import {
  getUniqueId
} from "./chunk-6E7TTPYM.js";
import {
  Host,
  getElement,
  h,
  registerInstance
} from "./chunk-S4YNXM4D.js";
import "./chunk-7D4SUZUM.js";

// node_modules/alcance/dist/esm-es5/alc-field_2.entry.js
var __awaiter = function(r, e, o, t) {
  function l(r2) {
    return r2 instanceof o ? r2 : new o(function(e2) {
      e2(r2);
    });
  }
  return new (o || (o = Promise))(function(o2, a) {
    function i(r2) {
      try {
        s(t.next(r2));
      } catch (r3) {
        a(r3);
      }
    }
    function c(r2) {
      try {
        s(t["throw"](r2));
      } catch (r3) {
        a(r3);
      }
    }
    function s(r2) {
      r2.done ? o2(r2.value) : l(r2.value).then(i, c);
    }
    s((t = t.apply(r, e || [])).next());
  });
};
var __generator = function(r, e) {
  var o = { label: 0, sent: function() {
    if (a[0] & 1) throw a[1];
    return a[1];
  }, trys: [], ops: [] }, t, l, a, i;
  return i = { next: c(0), throw: c(1), return: c(2) }, typeof Symbol === "function" && (i[Symbol.iterator] = function() {
    return this;
  }), i;
  function c(r2) {
    return function(e2) {
      return s([r2, e2]);
    };
  }
  function s(c2) {
    if (t) throw new TypeError("Generator is already executing.");
    while (i && (i = 0, c2[0] && (o = 0)), o) try {
      if (t = 1, l && (a = c2[0] & 2 ? l["return"] : c2[0] ? l["throw"] || ((a = l["return"]) && a.call(l), 0) : l.next) && !(a = a.call(l, c2[1])).done) return a;
      if (l = 0, a) c2 = [c2[0] & 2, a.value];
      switch (c2[0]) {
        case 0:
        case 1:
          a = c2;
          break;
        case 4:
          o.label++;
          return { value: c2[1], done: false };
        case 5:
          o.label++;
          l = c2[1];
          c2 = [0];
          continue;
        case 7:
          c2 = o.ops.pop();
          o.trys.pop();
          continue;
        default:
          if (!(a = o.trys, a = a.length > 0 && a[a.length - 1]) && (c2[0] === 6 || c2[0] === 2)) {
            o = 0;
            continue;
          }
          if (c2[0] === 3 && (!a || c2[1] > a[0] && c2[1] < a[3])) {
            o.label = c2[1];
            break;
          }
          if (c2[0] === 6 && o.label < a[1]) {
            o.label = a[1];
            a = c2;
            break;
          }
          if (a && o.label < a[2]) {
            o.label = a[2];
            o.ops.push(c2);
            break;
          }
          if (a[2]) o.ops.pop();
          o.trys.pop();
          continue;
      }
      c2 = e.call(r, o);
    } catch (r2) {
      c2 = [6, r2];
      l = 0;
    } finally {
      t = a = 0;
    }
    if (c2[0] & 5) throw c2[1];
    return { value: c2[0] ? c2[1] : void 0, done: true };
  }
};
var alcFieldCss = '[data-alc-theme="light"] alc-field{--text-color:var(--alc-color-text-4);--text-color-label:var(--alc-color-text-0);--text-color-placeholder:var(--alc-color-text-4);--bg-color:var(--alc-color-surface-primary);--shadow-color:var(--alc-color-neutral-5);--outline-color:var(--alc-color-action-60);--border-color:var(--alc-color-neutral-60);--border-color-hover:var(--alc-color-action-60);--border-color-focus:var(--alc-color-action-20);--bg-color-disabled:var(--alc-color-neutral-10);--border-color-disabled:var(--alc-color-neutral-40);--text-color-disabled:var(--alc-color-text-4);--text-color-error:var(--alc-color-error-50);--border-color-error:var(--alc-color-error-50);--border-color-hover-error:var(--alc-color-error-45);--border-color-focus-error:var(--alc-color-error-20)}[data-alc-theme="dark"] alc-field{--text-color:var(--alc-color-text-4);--text-color-label:var(--alc-color-text-0);--text-color-placeholder:var(--alc-color-text-4);--bg-color:var(--alc-color-neutral-100);--shadow-color:var(--alc-color-neutral-80);--outline-color:var(--alc-color-action-30);--border-color:var(--alc-color-neutral-30);--border-color-hover:var(--alc-color-action-40);--border-color-focus:var(--alc-color-action-70);--bg-color-disabled:var(--alc-color-neutral-80);--border-color-disabled:var(--alc-color-neutral-50);--text-color-disabled:var(--alc-color-text-4);--text-color-error:var(--alc-color-error-45);--border-color-error:var(--alc-color-error-45);--border-color-hover-error:var(--alc-color-error-50);--border-color-focus-error:var(--alc-color-error-70)}.alc-field{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;gap:0.25rem}.alc-field__label{color:var(--text-color-label)}.alc-field__core{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;gap:0.25rem}.alc-field__text{font-size:0.875rem;line-height:1rem;color:var(--text-color)}.alc-field__text--error{color:var(--text-color-error)}.alc-field__input{min-height:2.5rem;width:100%;--tw-shadow:inset 0 2px 4px 0 rgb(0 0 0 / 0.05);--tw-shadow-colored:inset 0 2px 4px 0 var(--tw-shadow-color);-webkit-box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);--tw-shadow-color:var(--shadow-color);--tw-shadow:var(--tw-shadow-colored);transition-property:color, background-color, border-color, fill, stroke, -webkit-text-decoration-color;-webkit-transition-property:color, background-color, border-color, fill, stroke, -webkit-text-decoration-color;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke, -webkit-text-decoration-color;-webkit-transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);-webkit-transition-duration:150ms;transition-duration:150ms;border-width:1px;border-color:var(--border-color);background-color:var(--bg-color)}.alc-field__input::-moz-placeholder{color:var(--text-color-placeholder)}.alc-field__input::-webkit-input-placeholder{color:var(--text-color-placeholder)}.alc-field__input:-ms-input-placeholder{color:var(--text-color-placeholder)}.alc-field__input::-ms-input-placeholder{color:var(--text-color-placeholder)}.alc-field__input::placeholder{color:var(--text-color-placeholder)}.alc-field__input:hover{border-color:var(--border-color-hover)}.alc-field__input:focus{border-color:var(--border-color-hover);outline-style:solid;outline-width:2px;outline-offset:2px;outline-color:var(--outline-color);--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(0px + var(--tw-ring-offset-width)) var(--tw-ring-color);-webkit-box-shadow:var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);box-shadow:var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000)}.alc-field__input:disabled{border-color:var(--border-color-disabled);background-color:var(--bg-color-disabled);--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;-webkit-box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);cursor:not-allowed;color:var(--text-color-disabled)}.alc-field__input:hover:disabled{border-color:var(--border-color-disabled)}.alc-field__input--error{border-color:var(--border-color-error)}.alc-field__input--error:hover{border-color:var(--border-color-hover-error)}.alc-field__input--error:focus{border-color:var(--border-color-hover-error)}';
var AlcField = function() {
  function r(r2) {
    registerInstance(this, r2);
    this.describedBy = /* @__PURE__ */ new Map();
    this.errorId = "";
    this.hintId = "";
    this.hint = "";
    this.required = false;
    this.errorMsg = "";
  }
  r.prototype.watchErrorMsg = function(r2) {
    logger.debug("watchErrorMsg", r2, this.input);
    if (r2) {
      if (this.slottedElement.tagName === "ALC-INPUT-FILE") {
        var e = this.slottedElement.getAttribute("mode");
        if (e === "dropzone") {
          var o = this.slottedElement.querySelector(".alc-input-file__dropzone");
          if (o) {
            o.classList.add("alc-field__input--error");
          }
        } else if (e === "input") {
          var t = this.slottedElement.querySelector(".alc-input-file__text-input");
          if (t) {
            t.classList.add("alc-field__input--error");
          }
        } else if (e === "button") {
          var l = this.slottedElement.querySelector("button.alc-button");
          if (l) {
            l.classList.add("alc-field__input--error");
          }
        }
      } else {
        this.input.classList.add("alc-field__input--error");
      }
    } else {
      if (this.slottedElement.tagName === "ALC-INPUT-FILE") {
        var e = this.slottedElement.getAttribute("mode");
        if (e === "dropzone") {
          var o = this.slottedElement.querySelector(".alc-input-file__dropzone");
          if (o) {
            o.classList.remove("alc-field__input--error");
          }
        } else if (e === "input") {
          var t = this.slottedElement.querySelector(".alc-input-file__text-input");
          if (t) {
            t.classList.remove("alc-field__input--error");
          }
        } else if (e === "button") {
          var l = this.slottedElement.querySelector("button.alc-button");
          if (l) {
            l.classList.remove("alc-field__input--error");
          }
        }
      } else {
        this.input.classList.remove("alc-field__input--error");
      }
    }
  };
  r.prototype.findInputElement = function(r2) {
    if (!r2) return null;
    var e = r2.tagName.toLowerCase();
    if (e === "input" || e === "select" || e === "textarea") {
      return r2;
    }
    for (var o = 0; o < r2.children.length; o++) {
      var t = this.findInputElement(r2.children[o]);
      if (t) {
        return t;
      }
    }
    return null;
  };
  r.prototype.componentDidLoad = function() {
    return __awaiter(this, void 0, void 0, function() {
      var r2, e;
      return __generator(this, function(o) {
        this.errorId = getUniqueId();
        this.hintId = getUniqueId();
        this.slottedElement = this.el.querySelector("input, select, textarea, alc-input-file");
        if (this.slottedElement) {
          this.input = this.findInputElement(this.slottedElement);
          if (this.input) {
            this.input.id = this.input.id || getUniqueId();
            this.input.setAttribute("aria-required", this.required ? "true" : "false");
            this.input.classList.add("alc-field__input");
            this.inputId = this.input.getAttribute("id");
            this.watchErrorMsg(this.errorMsg);
            this.describedBy.set("original", this.input.getAttribute("aria-describedby") || "");
          }
        }
        if (!this.label) {
          r2 = this.el.querySelector('[slot="label"] label');
          r2 === null || r2 === void 0 ? void 0 : r2.classList.add("alc-field__label");
          if (r2 && this.required) {
            e = document.createElement("small");
            e.setAttribute("aria-hidden", "true");
            e.innerText = " (obrigatório)";
            r2.appendChild(e);
          }
        }
        this.updateAriaDescribedBy();
        return [2];
      });
    });
  };
  r.prototype.componentWillRender = function() {
    this.updateAriaDescribedBy();
  };
  r.prototype.updateAriaDescribedBy = function() {
    if (this.errorMsg) {
      this.describedBy.set("error", this.errorId);
    } else {
      this.describedBy.delete("error");
    }
    if (this.hint) {
      this.describedBy.set("hint", this.hintId);
    } else {
      this.describedBy.delete("hint");
    }
    var r2 = "";
    r2 += " ".concat(this.describedBy.get("original") || "");
    r2 += " ".concat(this.describedBy.get("error") || "");
    r2 += " ".concat(this.describedBy.get("hint") || "");
    if (this.input) this.input.setAttribute("aria-describedby", r2.trim());
  };
  r.prototype.render = function() {
    return h(Host, { key: "f2eb4d7cb47f480863125057a87e555253fa8565", class: { "alc-field": true } }, this.label ? h("div", null, " ", h("label", { class: "alc-field__label", htmlFor: this.inputId }, this.label, this.required ? h("small", { "aria-hidden": "true" }, " (obrigatório)") : null)) : h("slot", { name: "label" }), h("div", { key: "d58883931ed0328c2ec0256fc0651681d1e1be4e", class: "alc-field__core" }, h("slot", { key: "598479d10425fc2dfa00d3870b8193d7cf423e84" }), this.errorMsg ? h("small", { class: "alc-field__text alc-field__text--error", id: this.errorId }, this.errorMsg) : null, this.hint ? h("small", { class: "alc-field__text", id: this.hintId }, this.hint) : null));
  };
  Object.defineProperty(r.prototype, "el", { get: function() {
    return getElement(this);
  }, enumerable: false, configurable: true });
  Object.defineProperty(r, "watchers", { get: function() {
    return { errorMsg: ["watchErrorMsg"] };
  }, enumerable: false, configurable: true });
  return r;
}();
AlcField.style = alcFieldCss;
var alcThemeBaseCss = "";
var alcThemeCss = "alc-theme{display:block}.alc-theme__label{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);white-space:nowrap;border-width:0}.alc-field__core .alc-theme__select{width:auto}";
var NO_THEME = 0;
var LIGHT_THEME = 1;
var DARK_THEME = 2;
var AlcTheme = function() {
  function r(r2) {
    registerInstance(this, r2);
  }
  r.prototype.change = function(r2) {
    logger.log("changed to", r2);
    switch (r2) {
      case LIGHT_THEME:
        setAppliedTheme("light");
        saveUserPreference("light");
        break;
      case DARK_THEME:
        setAppliedTheme("dark");
        saveUserPreference("dark");
        break;
      default:
        setAppliedTheme(getAppliedTheme("system"));
        removeUserPreference();
        break;
    }
    this.selectedTheme = r2;
  };
  r.prototype.getSelectedValue = function(r2) {
    return parseInt(r2.selectedOptions[0].value);
  };
  r.prototype.componentWillLoad = function() {
    var r2 = loadUserPreference();
    if (r2 === "light") {
      this.selectedTheme = LIGHT_THEME;
    } else if (r2 === "dark") {
      this.selectedTheme = DARK_THEME;
    } else {
      this.selectedTheme = NO_THEME;
    }
    this.selectId = getUniqueId();
  };
  r.prototype.render = function() {
    var r2 = this;
    return h(Host, { key: "1303b40b7cf8291232126b54294abfeea9907b16" }, h("alc-field", { key: "6091a7a2ad536f854c532ce898fd40b7b4479ca9" }, h("label", Object.assign({ key: "8570c6bf2d41e99c4ef01b14f209613a82117b36", htmlFor: this.selectId, slot: "label", class: "alc-theme__label" }, testAttributes()), "Tema"), h("div", { key: "b3e55038e3df6b4dc75e8b3d1ff71d0960d9a087" }, h("select", Object.assign({ key: "aa73b515c5aa45ec04faaffff8e3948511f756ed", onChange: function(e) {
      return r2.change(r2.getSelectedValue(e.target));
    }, class: "alc-theme__select", id: this.selectId }, testAttributes()), h("option", { key: "c7b043b78f2c693051cb710ce12f51fe17139c16", value: NO_THEME, selected: this.selectedTheme === NO_THEME }, "Do Sistema", this.selectedTheme === NO_THEME ? " ✔" : ""), h("option", { key: "66b49cf0fb421ae680c2b3750fbec2290676a532", value: LIGHT_THEME, selected: this.selectedTheme === LIGHT_THEME }, "Claro", this.selectedTheme === LIGHT_THEME ? " ✔" : ""), h("option", { key: "86181cfa6e6507d83abc9f1cd0cef398a9c403d1", value: DARK_THEME, selected: this.selectedTheme === DARK_THEME }, "Escuro", this.selectedTheme === DARK_THEME ? " ✔" : "")))));
  };
  return r;
}();
AlcTheme.style = { base: alcThemeBaseCss, theme: alcThemeCss };
export {
  AlcField as alc_field,
  AlcTheme as alc_theme
};
//# sourceMappingURL=alc-field_2.entry-LY77AAAL.js.map
