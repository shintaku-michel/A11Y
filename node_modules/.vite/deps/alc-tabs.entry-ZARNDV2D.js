import {
  logger
} from "./chunk-F2BFVVNU.js";
import {
  Host,
  createEvent,
  forceUpdate,
  getElement,
  h,
  registerInstance
} from "./chunk-S4YNXM4D.js";
import "./chunk-7D4SUZUM.js";

// node_modules/alcance/dist/esm-es5/alc-tabs.entry.js
var __awaiter = function(t, r, i, n) {
  function e(t2) {
    return t2 instanceof i ? t2 : new i(function(r2) {
      r2(t2);
    });
  }
  return new (i || (i = Promise))(function(i2, a) {
    function s(t2) {
      try {
        u(n.next(t2));
      } catch (t3) {
        a(t3);
      }
    }
    function o(t2) {
      try {
        u(n["throw"](t2));
      } catch (t3) {
        a(t3);
      }
    }
    function u(t2) {
      t2.done ? i2(t2.value) : e(t2.value).then(s, o);
    }
    u((n = n.apply(t, r || [])).next());
  });
};
var __generator = function(t, r) {
  var i = { label: 0, sent: function() {
    if (a[0] & 1) throw a[1];
    return a[1];
  }, trys: [], ops: [] }, n, e, a, s;
  return s = { next: o(0), throw: o(1), return: o(2) }, typeof Symbol === "function" && (s[Symbol.iterator] = function() {
    return this;
  }), s;
  function o(t2) {
    return function(r2) {
      return u([t2, r2]);
    };
  }
  function u(o2) {
    if (n) throw new TypeError("Generator is already executing.");
    while (s && (s = 0, o2[0] && (i = 0)), i) try {
      if (n = 1, e && (a = o2[0] & 2 ? e["return"] : o2[0] ? e["throw"] || ((a = e["return"]) && a.call(e), 0) : e.next) && !(a = a.call(e, o2[1])).done) return a;
      if (e = 0, a) o2 = [o2[0] & 2, a.value];
      switch (o2[0]) {
        case 0:
        case 1:
          a = o2;
          break;
        case 4:
          i.label++;
          return { value: o2[1], done: false };
        case 5:
          i.label++;
          e = o2[1];
          o2 = [0];
          continue;
        case 7:
          o2 = i.ops.pop();
          i.trys.pop();
          continue;
        default:
          if (!(a = i.trys, a = a.length > 0 && a[a.length - 1]) && (o2[0] === 6 || o2[0] === 2)) {
            i = 0;
            continue;
          }
          if (o2[0] === 3 && (!a || o2[1] > a[0] && o2[1] < a[3])) {
            i.label = o2[1];
            break;
          }
          if (o2[0] === 6 && i.label < a[1]) {
            i.label = a[1];
            a = o2;
            break;
          }
          if (a && i.label < a[2]) {
            i.label = a[2];
            i.ops.push(o2);
            break;
          }
          if (a[2]) i.ops.pop();
          i.trys.pop();
          continue;
      }
      o2 = r.call(t, i);
    } catch (t2) {
      o2 = [6, t2];
      e = 0;
    } finally {
      n = a = 0;
    }
    if (o2[0] & 5) throw o2[1];
    return { value: o2[0] ? o2[1] : void 0, done: true };
  }
};
var alcTabsBaseCss = "alc-tabs{display:block}.alc-tabs{border-width:1px;border-style:solid}.alc-tabs__tab-list{border-width:0px;border-bottom-width:1px;border-style:dotted}";
var themeAlcTabsCss = 'alc-tabs{--bg-color:var(--alc-color-surface);--border-color:var(--alc-color-border);--border-width:var(--alc-border-width)}[data-alc-theme="light"] alc-tabs{--outline-color:var(--alc-color-action-60)}[data-alc-theme="dark"] alc-tabs{--outline-color:var(--alc-color-action-30)}';
var AlcTabs = function() {
  function t(t2) {
    var r = this;
    registerInstance(this, t2);
    this.alcChange = createEvent(this, "alc-change", 7);
    this.selectedTabButton = null;
    this.tabList = null;
    this.selectedTab = null;
    this.hasScroll = false;
    this.onTabClicked = function(t3) {
      r.select(t3.detail.tab);
    };
  }
  t.prototype.selectedChange = function(t2, r) {
    if (t2 !== r) {
      this.select(t2);
    }
  };
  t.prototype.select = function(t2) {
    return __awaiter(this, void 0, void 0, function() {
      var r, i;
      return __generator(this, function(n) {
        r = getTab(this.tabs, t2);
        if (!this.shouldSwitch(r)) {
          return [2, false];
        }
        i = getTabButton(this.tabButtons, r.getAttribute("tab"));
        this.tabSwitch(r, i);
        this.selected = r.getAttribute("tab");
        return [2, true];
      });
    });
  };
  t.prototype.tabSwitch = function(t2, r) {
    var i = this.selectedTab;
    var n = this.selectedTabButton;
    this.selectedTab = t2;
    this.selectedTabButton = r;
    t2.selected = true;
    r.selected = true;
    if (i !== t2) {
      if (i) {
        i.selected = false;
        this.alcChange.emit({ tab: t2.tab });
      }
      if (n) {
        n.selected = false;
      }
    }
  };
  t.prototype.selectedHandler = function(t2) {
    this.select(t2.detail.tab);
  };
  t.prototype.selectedNextButton = function(t2) {
    this.onTabButtonNext(t2);
  };
  t.prototype.selectedPreviousButton = function(t2) {
    this.onTabButtonPrevious(t2);
  };
  t.prototype.selectedFirstButton = function(t2) {
    this.onTabButtonFirst(t2);
  };
  t.prototype.selectedLastButton = function(t2) {
    this.onTabButtonLast(t2);
  };
  t.prototype.shouldSwitch = function(t2) {
    var r = this.selectedTab;
    return t2 !== void 0 && t2 !== r;
  };
  Object.defineProperty(t.prototype, "tabs", { get: function() {
    var t2 = this;
    var r = Array.from(this.el.querySelectorAll("alc-tab"));
    r = r.filter(function(r2) {
      return r2.closest("alc-tabs") === t2.el;
    });
    logger.log("my tabs are", r, this.el);
    return r;
  }, enumerable: false, configurable: true });
  Object.defineProperty(t.prototype, "tabButtons", { get: function() {
    var t2 = this;
    var r = Array.from(this.el.querySelectorAll("alc-tab-button"));
    r = r.filter(function(r2) {
      return r2.closest("alc-tabs") === t2.el;
    });
    return r;
  }, enumerable: false, configurable: true });
  t.prototype.getNextButton = function(t2) {
    var r;
    var i = this.tabButtons.findIndex(function(r2) {
      return r2 === t2;
    });
    if (i === this.tabButtons.length - 1) {
      r = 0;
    } else {
      r = i + 1;
    }
    return this.tabButtons[r];
  };
  t.prototype.getPreviousButton = function(t2) {
    var r;
    var i = this.tabButtons.findIndex(function(r2) {
      return r2 === t2;
    });
    if (i <= 0) {
      r = this.tabButtons.length - 1;
    } else {
      r = i - 1;
    }
    return this.tabButtons[r];
  };
  t.prototype.handleScroll = function() {
    var t2 = 0;
    var r = this.tabList.offsetWidth;
    var i = this.tabList.style.overflowX;
    this.tabList.style.overflowX = "auto";
    t2 = this.tabList.scrollWidth;
    this.tabList.style.overflowX = i;
    logger.log("width", r, t2);
    this.hasScroll = t2 > r;
  };
  t.prototype.themeLoadedHandler = function() {
    this.handleScroll();
  };
  t.prototype.componentDidLoad = function() {
    return __awaiter(this, void 0, void 0, function() {
      var t2, r, i;
      var n = this;
      return __generator(this, function(e) {
        switch (e.label) {
          case 0:
            r = this.selected || ((t2 = this.tabs[0]) === null || t2 === void 0 ? void 0 : t2.tab);
            return [4, this.select(r)];
          case 1:
            e.sent();
            i = Array.from(this.el.querySelectorAll('[slot="button"]'));
            this.hasButtonSlot = i.some(function(t3) {
              return t3.closest("alc-tabs") === n.el;
            });
            return [2];
        }
      });
    });
  };
  t.prototype.onTabButtonNext = function(t2) {
    return __awaiter(this, void 0, void 0, function() {
      var r, i;
      return __generator(this, function(n) {
        if (!this.isValidTabButton(t2)) return [2];
        r = t2.target;
        i = this.getNextButton(r);
        this.handleSelectTabButton(i);
        return [2];
      });
    });
  };
  t.prototype.onTabButtonPrevious = function(t2) {
    return __awaiter(this, void 0, void 0, function() {
      var r, i;
      return __generator(this, function(n) {
        if (!this.isValidTabButton(t2)) return [2];
        r = t2.target;
        i = this.getPreviousButton(r);
        this.handleSelectTabButton(i);
        return [2];
      });
    });
  };
  t.prototype.onTabButtonFirst = function(t2) {
    return __awaiter(this, void 0, void 0, function() {
      var r;
      return __generator(this, function(i) {
        if (!this.isValidTabButton(t2)) return [2];
        r = this.tabButtons[0];
        this.handleSelectTabButton(r);
        return [2];
      });
    });
  };
  t.prototype.onTabButtonLast = function(t2) {
    return __awaiter(this, void 0, void 0, function() {
      var r;
      return __generator(this, function(i) {
        if (!this.isValidTabButton(t2)) return [2];
        r = this.tabButtons[this.tabButtons.length - 1];
        this.handleSelectTabButton(r);
        return [2];
      });
    });
  };
  t.prototype.handleSelectTabButton = function(t2) {
    return __awaiter(this, void 0, void 0, function() {
      var r;
      return __generator(this, function(i) {
        switch (i.label) {
          case 0:
            return [4, this.select(t2.tab)];
          case 1:
            r = i.sent();
            if (r) {
              t2.querySelector("button").focus();
            }
            return [2];
        }
      });
    });
  };
  t.prototype.isValidTabButton = function(t2) {
    var r = t2.target;
    return Array.from(this.tabButtons).includes(r);
  };
  t.prototype.componentDidRender = function() {
    var t2 = this;
    var r;
    (r = this.mo) === null || r === void 0 ? void 0 : r.disconnect();
    this.mo = new MutationObserver(function() {
      forceUpdate(t2.el);
    });
    this.mo.observe(this.el, { childList: true });
    this.mo.observe(this.el.querySelector(".alc-tabs"), { childList: true });
    this.tabs.map(function(r2, i) {
      var n = r2.querySelector('[role="tabpanel"]');
      if (t2.tabButtons.length <= i) {
        return;
      }
      var e = t2.tabButtons[i].querySelector("button");
      if (!n.hasAttribute("id")) {
        n.setAttribute("id", "tab_".concat(i));
      }
      if (!e.hasAttribute("id")) {
        e.setAttribute("id", "button_".concat(i));
      }
      n.setAttribute("aria-labelledby", e.getAttribute("id"));
      e.setAttribute("aria-controls", n.getAttribute("id"));
    });
  };
  t.prototype.disconnectedCallback = function() {
    var t2;
    (t2 = this.mo) === null || t2 === void 0 ? void 0 : t2.disconnect();
  };
  t.prototype.render = function() {
    var t2 = this;
    var r;
    if (!this.hasButtonSlot) {
      r = this.tabs.map(function(t3) {
        return h("alc-tab-button", { tab: t3.tab }, t3.label);
      });
    }
    logger.log("rendering", this.el, r);
    return h(Host, { onAlcTabButtonClick: this.onTabClicked, onAlcTabButtonNext: this.onTabButtonNext.bind(this), onAlcTabButtonPrevious: this.onTabButtonPrevious.bind(this) }, h("div", { class: "alc-tabs" }, h("alc-scroll-panel", { hasFocus: false, scrollToElement: this.selectedTabButton }, h("div", { role: "tablist", ref: function(r2) {
      return t2.tabList = r2;
    }, class: "alc-tabs__tab-list" }, h("slot", { name: "button" }), r)), h("slot", null)));
  };
  Object.defineProperty(t.prototype, "el", { get: function() {
    return getElement(this);
  }, enumerable: false, configurable: true });
  Object.defineProperty(t, "watchers", { get: function() {
    return { selected: ["selectedChange"] };
  }, enumerable: false, configurable: true });
  return t;
}();
var getTab = function(t, r) {
  var i = typeof r === "string" ? t.find(function(t2) {
    return t2.tab === r;
  }) : r;
  if (!i) {
    logger.error('tab with id: "'.concat(i, '" does not exist'));
  }
  return i;
};
var getTabButton = function(t, r) {
  var i = t.find(function(t2) {
    return t2.tab === r;
  });
  if (!i) {
    logger.error('tab button with id: "'.concat(i, '" does not exist'));
  }
  return i;
};
AlcTabs.style = { base: alcTabsBaseCss, theme: themeAlcTabsCss };
export {
  AlcTabs as alc_tabs
};
