import {
  getAppliedTheme,
  getMode,
  loadUserPreference,
  setAppliedTheme
} from "./chunk-IGSHYZLV.js";
import {
  defineComponent,
  getCurrentInstance,
  h,
  inject,
  ref,
  withDirectives
} from "./chunk-UMWL5FHB.js";
import {
  bootstrapLazy,
  setMode
} from "./chunk-S4YNXM4D.js";
import "./chunk-7D4SUZUM.js";

// node_modules/alcance-vue-library/lib/vue-component-lib/utils.js
var UPDATE_VALUE_EVENT = "update:modelValue";
var MODEL_VALUE = "modelValue";
var ROUTER_LINK_VALUE = "routerLink";
var NAV_MANAGER = "navManager";
var ROUTER_PROP_PREFIX = "router";
var ARIA_PROP_PREFIX = "aria";
var EMPTY_PROP = Symbol();
var DEFAULT_EMPTY_PROP = { default: EMPTY_PROP };
var getComponentClasses = (classes) => {
  return (classes === null || classes === void 0 ? void 0 : classes.split(" ")) || [];
};
var getElementClasses = (ref2, componentClasses, defaultClasses = []) => {
  var _a;
  return [...Array.from(((_a = ref2.value) === null || _a === void 0 ? void 0 : _a.classList) || []), ...defaultClasses].filter((c, i, self) => !componentClasses.has(c) && self.indexOf(c) === i);
};
var defineContainer = (name, defineCustomElement, componentProps = [], modelProp, modelUpdateEvent) => {
  if (defineCustomElement !== void 0) {
    defineCustomElement();
  }
  const Container = defineComponent((props, { attrs, slots, emit }) => {
    var _a;
    let modelPropValue = props[modelProp];
    const containerRef = ref();
    const classes = new Set(getComponentClasses(attrs.class));
    const vModelDirective = {
      created: (el) => {
        const eventsNames = Array.isArray(modelUpdateEvent) ? modelUpdateEvent : [modelUpdateEvent];
        eventsNames.forEach((eventName) => {
          el.addEventListener(eventName.toLowerCase(), (e) => {
            if (e.target.tagName === el.tagName) {
              modelPropValue = (e === null || e === void 0 ? void 0 : e.target)[modelProp];
              emit(UPDATE_VALUE_EVENT, modelPropValue);
            }
          });
        });
      }
    };
    const currentInstance = getCurrentInstance();
    const hasRouter = (_a = currentInstance === null || currentInstance === void 0 ? void 0 : currentInstance.appContext) === null || _a === void 0 ? void 0 : _a.provides[NAV_MANAGER];
    const navManager = hasRouter ? inject(NAV_MANAGER) : void 0;
    const handleRouterLink = (ev) => {
      const { routerLink } = props;
      if (routerLink === EMPTY_PROP)
        return;
      if (navManager !== void 0) {
        let navigationPayload = { event: ev };
        for (const key in props) {
          const value = props[key];
          if (props.hasOwnProperty(key) && key.startsWith(ROUTER_PROP_PREFIX) && value !== EMPTY_PROP) {
            navigationPayload[key] = value;
          }
        }
        navManager.navigate(navigationPayload);
      } else {
        console.warn("Tried to navigate, but no router was found. Make sure you have mounted Vue Router.");
      }
    };
    return () => {
      modelPropValue = props[modelProp];
      getComponentClasses(attrs.class).forEach((value) => {
        classes.add(value);
      });
      const oldClick = props.onClick;
      const handleClick = (ev) => {
        if (oldClick !== void 0) {
          oldClick(ev);
        }
        if (!ev.defaultPrevented) {
          handleRouterLink(ev);
        }
      };
      let propsToAdd = {
        ref: containerRef,
        class: getElementClasses(containerRef, classes),
        onClick: handleClick
      };
      for (const key in props) {
        const value = props[key];
        if (props.hasOwnProperty(key) && value !== EMPTY_PROP || key.startsWith(ARIA_PROP_PREFIX)) {
          propsToAdd[key] = value;
        }
      }
      if (modelProp) {
        if (props[MODEL_VALUE] !== EMPTY_PROP) {
          propsToAdd = Object.assign(Object.assign({}, propsToAdd), { [modelProp]: props[MODEL_VALUE] });
        } else if (modelPropValue !== EMPTY_PROP) {
          propsToAdd = Object.assign(Object.assign({}, propsToAdd), { [modelProp]: modelPropValue });
        }
      }
      const node = h(name, propsToAdd, slots.default && slots.default());
      return modelProp === void 0 ? node : withDirectives(node, [[vModelDirective]]);
    };
  });
  if (typeof Container !== "function") {
    Container.name = name;
    Container.props = {
      [ROUTER_LINK_VALUE]: DEFAULT_EMPTY_PROP
    };
    componentProps.forEach((componentProp) => {
      Container.props[componentProp] = DEFAULT_EMPTY_PROP;
    });
    if (modelProp) {
      Container.props[MODEL_VALUE] = DEFAULT_EMPTY_PROP;
      Container.emits = [UPDATE_VALUE_EVENT];
    }
  }
  return Container;
};

// node_modules/alcance-vue-library/lib/components.js
var AlcAlert = defineContainer("alc-alert", void 0, [
  "visible",
  "type",
  "dismissible",
  "alc-hide",
  "alc-after-hide"
]);
var AlcAutocomplete = defineContainer("alc-autocomplete", void 0, [
  "items",
  "displayKeys",
  "label",
  "hint",
  "required",
  "placeholder",
  "listDirection",
  "disabled",
  "loading",
  "error",
  "errorMsg",
  "alc-change"
]);
var AlcBadge = defineContainer("alc-badge", void 0, [
  "label",
  "count",
  "color",
  "dot",
  "hidden",
  "outlined",
  "position",
  "pulsate"
]);
var AlcBreadcrumb = defineContainer("alc-breadcrumb", void 0);
var AlcBreadcrumbItem = defineContainer("alc-breadcrumb-item", void 0, [
  "url",
  "label",
  "iconName"
]);
var AlcCheckbox = defineContainer("alc-checkbox", void 0, [
  "hint",
  "label",
  "errorMsg"
]);
var AlcDatatable = defineContainer("alc-datatable", void 0, [
  "data",
  "options",
  "deferStart",
  "tableId",
  "alc-child-row",
  "alc-column-sizing",
  "alc-column-visibility",
  "alc-destroy",
  "alc-draw",
  "alc-error",
  "alc-init",
  "alc-length",
  "alc-order",
  "alc-page",
  "alc-pre-draw",
  "alc-pre-init",
  "alc-pre-xhr",
  "alc-processing",
  "alc-request-child",
  "alc-search",
  "alc-state-load-params",
  "alc-state-loaded",
  "alc-state-save-params",
  "alc-xhr",
  "alc-deselect",
  "alc-select",
  "alc-select-blur",
  "alc-select-items",
  "alc-select-style",
  "alc-user-select"
]);
var AlcDetails = defineContainer("alc-details", void 0, [
  "summary",
  "disabled",
  "opened",
  "alc-show",
  "alc-close"
]);
var AlcDrawer = defineContainer("alc-drawer", void 0, [
  "elementToFocus",
  "isVisible",
  "alc-show",
  "alc-after-show",
  "alc-hide",
  "alc-after-hide"
]);
var AlcDropdown = defineContainer("alc-dropdown", void 0, [
  "open",
  "hideOn",
  "alc-show",
  "alc-after-show",
  "alc-hide",
  "alc-after-hide"
]);
var AlcEnvironmentLabel = defineContainer("alc-environment-label", void 0, [
  "env"
]);
var AlcEventLab = defineContainer("alc-event-lab", void 0, [
  "alc-change",
  "alc-after-change"
]);
var AlcExpander = defineContainer("alc-expander", void 0, [
  "label",
  "open",
  "hideLabel",
  "alc-show",
  "alc-after-show",
  "alc-hide",
  "alc-after-hide"
]);
var AlcField = defineContainer("alc-field", void 0, [
  "label",
  "hint",
  "required",
  "errorMsg"
]);
var AlcFieldChecker = defineContainer("alc-field-checker", void 0, [
  "checkOnSubmit"
]);
var AlcFieldset = defineContainer("alc-fieldset", void 0, [
  "legend",
  "hint",
  "required",
  "errorMsg"
]);
var AlcHeader = defineContainer("alc-header", void 0, [
  "name",
  "description",
  "homeUrl",
  "alc-home"
]);
var AlcHeaderAction = defineContainer("alc-header-action", void 0, [
  "iconName",
  "variant",
  "url",
  "alc-select"
]);
var AlcHeaderId = defineContainer("alc-header-id", void 0, [
  "name",
  "description",
  "homeUrl",
  "alc-home"
]);
var AlcHeaderNotifications = defineContainer("alc-header-notifications", void 0, [
  "notifications",
  "variant",
  "url",
  "alc-click"
]);
var AlcHeaderV1 = defineContainer("alc-header-v1", void 0, [
  "name",
  "homeUrl",
  "alc-home"
]);
var AlcIcon = defineContainer("alc-icon", void 0, [
  "label",
  "flipRtl",
  "name",
  "src",
  "icon",
  "lazy",
  "sanitize"
]);
var AlcInputFile = defineContainer("alc-input-file", void 0, [
  "multiple",
  "idInput",
  "accept",
  "disabled",
  "required",
  "buttonType",
  "iconName",
  "mode",
  "alc-file-selected"
]);
var AlcLoading = defineContainer("alc-loading", void 0, [
  "active",
  "label",
  "endMsg",
  "variant"
]);
var AlcMenu = defineContainer("alc-menu", void 0);
var AlcMenuItem = defineContainer("alc-menu-item", void 0, [
  "type",
  "checked",
  "disabled",
  "value",
  "alc-select"
]);
var AlcMenuItemTheme = defineContainer("alc-menu-item-theme", void 0);
var AlcMenuLink = defineContainer("alc-menu-link", void 0, [
  "disabled",
  "value",
  "alc-select"
]);
var AlcModal = defineContainer("alc-modal", void 0, [
  "open",
  "headerText",
  "size",
  "preventOverlayClose",
  "alc-after-show",
  "alc-hide",
  "alc-after-hide",
  "alc-focus-after-hide"
]);
var AlcNav = defineContainer("alc-nav", void 0);
var AlcNavPanel = defineContainer("alc-nav-panel", void 0, [
  "open",
  "alc-state-change",
  "alc-state-request"
]);
var AlcPagination = defineContainer("alc-pagination", void 0, [
  "totalPages",
  "currentPage",
  "alc-change"
]);
var AlcPopup = defineContainer("alc-popup", void 0, [
  "active",
  "placement",
  "flip",
  "shift",
  "strategy",
  "distance",
  "sync",
  "arrow"
]);
var AlcRadio = defineContainer("alc-radio", void 0, [
  "hint",
  "label",
  "errorMsg"
]);
var AlcScrollPanel = defineContainer("alc-scroll-panel", void 0, [
  "hasFocus",
  "scrollToElement"
]);
var AlcSidepanel = defineContainer("alc-sidepanel", void 0, [
  "visible",
  "alc-state-change",
  "alc-state-request"
]);
var AlcSkipLink = defineContainer("alc-skip-link", void 0, [
  "anchor"
]);
var AlcSkipToNav = defineContainer("alc-skip-to-nav", void 0);
var AlcSortIndicator = defineContainer("alc-sort-indicator", void 0, [
  "sorting"
]);
var AlcTab = defineContainer("alc-tab", void 0, [
  "label",
  "tab",
  "selected",
  "contentFocus"
]);
var AlcTabButton = defineContainer("alc-tab-button", void 0, [
  "tab",
  "selected",
  "alc-click",
  "alc-next",
  "alc-previous",
  "alc-first",
  "alc-last"
]);
var AlcTable = defineContainer("alc-table", void 0);
var AlcTabs = defineContainer("alc-tabs", void 0, [
  "selected",
  "alc-change"
]);
var AlcTheme = defineContainer("alc-theme", void 0);
var AlcTooltip = defineContainer("alc-tooltip", void 0, [
  "active",
  "content",
  "placement",
  "trigger",
  "strategy",
  "alc-show",
  "alc-after-show",
  "alc-hide",
  "alc-after-hide"
]);
var AlcUser = defineContainer("alc-user", void 0, [
  "name",
  "registrationNumber",
  "logoutUrl",
  "imgSrc",
  "alc-logout"
]);
var AlcUserMenu = defineContainer("alc-user-menu", void 0, [
  "variation",
  "name",
  "registrationNumber",
  "logoutUrl",
  "imgSrc",
  "alc-logout"
]);
var AlcViewMore = defineContainer("alc-view-more", void 0, [
  "toggleTextOpen",
  "toggleTextClose",
  "togglePosition",
  "textClass",
  "minHeight",
  "bgColorVar"
]);

// node_modules/alcance/dist/esm/polyfills/index.js
function applyPolyfills() {
  var promises = [];
  if (typeof window !== "undefined") {
    var win = window;
    if (!win.customElements || win.Element && (!win.Element.prototype.closest || !win.Element.prototype.matches || !win.Element.prototype.remove || !win.Element.prototype.getRootNode)) {
      promises.push(import(
        /* webpackChunkName: "polyfills-dom" */
        "./dom-RCR4EEZH.js"
      ));
    }
    var checkIfURLIsSupported = function() {
      try {
        var u = new URL("b", "http://a");
        u.pathname = "c%20d";
        return u.href === "http://a/c%20d" && u.searchParams;
      } catch (e) {
        return false;
      }
    };
    if ("function" !== typeof Object.assign || !Object.entries || !Array.prototype.find || !Array.prototype.includes || !String.prototype.startsWith || !String.prototype.endsWith || win.NodeList && !win.NodeList.prototype.forEach || !win.fetch || !checkIfURLIsSupported() || typeof WeakMap == "undefined") {
      promises.push(import(
        /* webpackChunkName: "polyfills-core-js" */
        "./core-js-IQ5PWPYU.js"
      ));
    }
  }
  return Promise.all(promises);
}

// node_modules/alcance/dist/esm-es5/app-globals-DksOdqSI.js
var appGlobalScript = function() {
  setMode(function() {
    return getMode();
  });
};
var userPreference = loadUserPreference();
setAppliedTheme(getAppliedTheme(userPreference));
var globalScripts = appGlobalScript;

// node_modules/alcance/dist/esm-es5/loader.js
var __awaiter = function(e, a, l, t) {
  function n(e2) {
    return e2 instanceof l ? e2 : new l(function(a2) {
      a2(e2);
    });
  }
  return new (l || (l = Promise))(function(l2, i) {
    function c(e2) {
      try {
        r(t.next(e2));
      } catch (e3) {
        i(e3);
      }
    }
    function o(e2) {
      try {
        r(t["throw"](e2));
      } catch (e3) {
        i(e3);
      }
    }
    function r(e2) {
      e2.done ? l2(e2.value) : n(e2.value).then(c, o);
    }
    r((t = t.apply(e, a || [])).next());
  });
};
var __generator = function(e, a) {
  var l = { label: 0, sent: function() {
    if (i[0] & 1) throw i[1];
    return i[1];
  }, trys: [], ops: [] }, t, n, i, c;
  return c = { next: o(0), throw: o(1), return: o(2) }, typeof Symbol === "function" && (c[Symbol.iterator] = function() {
    return this;
  }), c;
  function o(e2) {
    return function(a2) {
      return r([e2, a2]);
    };
  }
  function r(o2) {
    if (t) throw new TypeError("Generator is already executing.");
    while (c && (c = 0, o2[0] && (l = 0)), l) try {
      if (t = 1, n && (i = o2[0] & 2 ? n["return"] : o2[0] ? n["throw"] || ((i = n["return"]) && i.call(n), 0) : n.next) && !(i = i.call(n, o2[1])).done) return i;
      if (n = 0, i) o2 = [o2[0] & 2, i.value];
      switch (o2[0]) {
        case 0:
        case 1:
          i = o2;
          break;
        case 4:
          l.label++;
          return { value: o2[1], done: false };
        case 5:
          l.label++;
          n = o2[1];
          o2 = [0];
          continue;
        case 7:
          o2 = l.ops.pop();
          l.trys.pop();
          continue;
        default:
          if (!(i = l.trys, i = i.length > 0 && i[i.length - 1]) && (o2[0] === 6 || o2[0] === 2)) {
            l = 0;
            continue;
          }
          if (o2[0] === 3 && (!i || o2[1] > i[0] && o2[1] < i[3])) {
            l.label = o2[1];
            break;
          }
          if (o2[0] === 6 && l.label < i[1]) {
            l.label = i[1];
            i = o2;
            break;
          }
          if (i && l.label < i[2]) {
            l.label = i[2];
            l.ops.push(o2);
            break;
          }
          if (i[2]) l.ops.pop();
          l.trys.pop();
          continue;
      }
      o2 = a.call(e, l);
    } catch (e2) {
      o2 = [6, e2];
      n = 0;
    } finally {
      t = i = 0;
    }
    if (o2[0] & 5) throw o2[1];
    return { value: o2[0] ? o2[1] : void 0, done: true };
  }
};
var defineCustomElements = function(e, a) {
  return __awaiter(void 0, void 0, void 0, function() {
    return __generator(this, function(e2) {
      switch (e2.label) {
        case 0:
          if (typeof window === "undefined") return [2, void 0];
          return [4, globalScripts()];
        case 1:
          e2.sent();
          return [2, bootstrapLazy([["alc-datatable", [[36, "alc-datatable", { data: [1537], options: [1], deferStart: [516, "defer-start"], tableId: [513, "table-id"], currentPage: [32], initCompleted: [32], searchText: [32], pageLength: [32], isProcessing: [32], isLoadingActive: [32], getDataTable: [64], getApi: [64], start: [64] }, [[9, "resize", "handleResize"]], { isProcessing: ["watchIsProcessing"], data: ["dataWatcher"] }]]], ["alc-user-menu", [[4, "alc-user-menu", { variation: [513], name: [513], registrationNumber: [513, "registration-number"], logoutUrl: [513, "logout-url"], imgSrc: [513, "img-src"], dropdownOpen: [32] }, [[9, "resize", "handleResize"]]]]], ["alc-autocomplete", [[0, "alc-autocomplete", { items: [16], displayKeys: [513, "display-keys"], label: [513], hint: [513], required: [516], placeholder: [513], listDirection: [513, "list-direction"], disabled: [516], loading: [516], error: [1540], errorMsg: [513, "error-msg"], filteredData: [32], itemSelected: [32], selectedItemValue: [32], emptyResult: [32], getSelected: [64], setSelected: [64], clearSelected: [64] }, [[16, "click", "handleBodyClick"], [0, "keyup", "handleInputKeyUp"], [0, "keydown", "handleInputKeyDown"], [0, "click", "handleGridClick"]], { selectedItemValue: ["selectedItemValueChanged"], loading: ["handleLoadingChange"] }]]], ["alc-header", [[4, "alc-header", { name: [513], description: [513], homeUrl: [513, "home-url"], isDrawer: [32], isSupportDropdown: [32], needSeparator: [32], isMenuCreated: [32] }, [[9, "scroll", "handleScroll"], [8, "alc-nav-content", "handleNavContent"], [9, "resize", "handleResize"]]]]], ["alc-header-action", [[4, "alc-header-action", { iconName: [513, "icon-name"], variant: [513], url: [1] }]]], ["alc-tabs", [[36, "alc-tabs", { selected: [1537], selectedTab: [32], hasScroll: [32], select: [64] }, [[0, "alc-click", "selectedHandler"], [0, "alc-next", "selectedNextButton"], [0, "alc-previous", "selectedPreviousButton"], [0, "alc-first", "selectedFirstButton"], [0, "alc-last", "selectedLastButton"], [8, "themeLoaded", "themeLoadedHandler"]], { selected: ["selectedChange"] }]]], ["alc-field-checker", [[4, "alc-field-checker", { checkOnSubmit: [516, "check-on-submit"], errorFields: [32] }]]], ["alc-header-notifications", [[0, "alc-header-notifications", { notifications: [514], variant: [513], url: [513] }, null, { notifications: ["watchNotifications"] }]]], ["alc-sidepanel", [[4, "alc-sidepanel", { visible: [1540], isMobile: [32], show: [64], hide: [64] }, [[9, "resize", "handleResize"]]]]], ["alc-breadcrumb-item", [[4, "alc-breadcrumb-item", { url: [513], label: [513], iconName: [513, "icon-name"], isCurrentPage: [32] }, null, { "aria-current": ["onAriaLabelChange"] }]]], ["alc-details", [[36, "alc-details", { summary: [513], disabled: [516], opened: [1028], maxHeight: [32] }]]], ["alc-input-file", [[4, "alc-input-file", { multiple: [516], idInput: [513, "id-input"], accept: [513], disabled: [516], required: [516], buttonType: [513, "button-type"], iconName: [513, "icon-name"], mode: [513], files: [32], maxInputTextLength: [32], getFiles: [64], clear: [64] }]]], ["alc-modal", [[36, "alc-modal", { open: [1028], headerText: [513, "header-text"], size: [1537], preventOverlayClose: [516, "prevent-overlay-close"], show: [64], hide: [64] }, [[4, "keydown", "handleKeyDown"]], { open: ["watchOpen"] }]]], ["alc-nav", [[4, "alc-nav", { togglePanel: [64], setSelectedItem: [64] }, [[9, "resize", "handleWindowResize"], [0, "keydown", "handleKeyDown"]]]]], ["alc-nav-panel", [[4, "alc-nav-panel", { open: [1540], show: [64], hide: [64] }, [[9, "resize", "handleResize"], [16, "click", "handleClick"], [0, "keydown", "handleKeyDown"]], { open: ["handleOpen"] }]]], ["alc-tooltip", [[4, "alc-tooltip", { active: [1540], content: [513], placement: [513], trigger: [513], strategy: [513], show: [64], hide: [64] }, [[0, "keydown", "handleKeyDown"], [2, "focus", "handleFocus"], [2, "blur", "handleBlur"], [1, "mouseover", "handleMouseOver"], [1, "mouseout", "handleMouseOut"], [0, "click", "handleClick"]], { active: ["watchActive"] }]]], ["alc-user", [[4, "alc-user", { name: [513], registrationNumber: [513, "registration-number"], logoutUrl: [513, "logout-url"], imgSrc: [513, "img-src"] }]]], ["alc-breadcrumb", [[4, "alc-breadcrumb"]]], ["alc-checkbox", [[4, "alc-checkbox", { hint: [513], label: [513], errorMsg: [1537, "error-msg"], inputId: [32] }]]], ["alc-environment-label", [[0, "alc-environment-label", { env: [513] }]]], ["alc-event-lab", [[4, "alc-event-lab", { changePage: [64] }]]], ["alc-fieldset", [[4, "alc-fieldset", { legend: [513], hint: [513], required: [516], errorMsg: [1537, "error-msg"] }, null, { errorMsg: ["watchErrorMsg"] }]]], ["alc-header-v1", [[4, "alc-header-v1", { name: [513], homeUrl: [513, "home-url"] }]]], ["alc-radio", [[4, "alc-radio", { hint: [513], label: [513], errorMsg: [1537, "error-msg"], inputId: [32] }]]], ["alc-skip-link", [[4, "alc-skip-link", { anchor: [513] }]]], ["alc-skip-to-nav", [[0, "alc-skip-to-nav"]]], ["alc-tab", [[36, "alc-tab", { label: [513], tab: [513], selected: [516], contentFocus: [516, "content-focus"] }]]], ["alc-table", [[32, "alc-table"]]], ["alc-view-more", [[4, "alc-view-more", { toggleTextOpen: [513, "toggle-text-open"], toggleTextClose: [513, "toggle-text-close"], togglePosition: [513, "toggle-position"], textClass: [513, "text-class"], minHeight: [513, "min-height"], bgColorVar: [513, "bg-color-var"], contentExpanded: [32] }]]], ["alc-badge", [[4, "alc-badge", { label: [1], count: [4], color: [1], dot: [4], hidden: [4], outlined: [4], position: [1], pulsate: [4] }]]], ["alc-header-id", [[0, "alc-header-id", { name: [513], description: [513], homeUrl: [513, "home-url"] }]]], ["alc-expander_2", [[0, "alc-menu-item-theme", { checked: [32] }, [[0, "alc-select", "handleClick"]]], [4, "alc-expander", { label: [513], open: [1540], hideLabel: [516, "hide-label"], isOpen: [32], show: [64], hide: [64] }, null, { open: ["syncOpen"] }]]], ["alc-scroll-panel_2", [[36, "alc-scroll-panel", { hasFocus: [516, "has-focus"], scrollToElement: [16], hasScroll: [32], canScrollRight: [32], canScrollLeft: [32] }, [[8, "themeLoaded", "themeLoadedHandler"], [9, "resize", "handleResize"]], { scrollToElement: ["handleScrollToElement"] }], [36, "alc-tab-button", { tab: [513], selected: [1540] }, null, { selected: ["selectedChanged"] }]]], ["alc-alert", [[36, "alc-alert", { visible: [1540], type: [513], dismissible: [516], hide: [64], show: [64] }, null, { visible: ["watchPropVisible"], type: ["watchType"], dismissible: ["watchDismissible"] }]]], ["alc-drawer", [[36, "alc-drawer", { elementToFocus: [1, "element-to-focus"], isVisible: [1540, "is-visible"], show: [64], hide: [64] }, [[4, "keydown", "handleKeyDown"]], { isVisible: ["watchIsVisible"] }]]], ["alc-menu-link", [[4, "alc-menu-link", { disabled: [1540], value: [520] }, null, { disabled: ["handleDisabledChange"] }]]], ["alc-loading_3", [[32, "alc-pagination", { totalPages: [1538, "total-pages"], currentPage: [1538, "current-page"], pageList: [32] }, null, { totalPages: ["watchPropTotalPages"] }], [0, "alc-sort-indicator", { sorting: [513] }], [0, "alc-loading", { active: [1540], label: [513], endMsg: [513, "end-msg"], variant: [513], show: [64], hide: [64] }, null, { active: ["onActiveChange"] }]]], ["alc-field_2", [[32, "alc-theme", { selectedTheme: [32] }], [4, "alc-field", { label: [513], hint: [513], required: [516], errorMsg: [1537, "error-msg"], input: [32], inputId: [32], slottedElement: [32] }, null, { errorMsg: ["watchErrorMsg"] }]]], ["alc-popup", [[4, "alc-popup", { active: [1540], placement: [513], flip: [516], shift: [516], strategy: [513], distance: [514], sync: [513], arrow: [516] }, null, { active: ["watchActive"] }]]], ["alc-dropdown_2", [[4, "alc-dropdown", { open: [1540], hideOn: [513, "hide-on"], show: [64], hide: [64] }, [[0, "keydown", "handleKeydown"]], { open: ["watchOpen"], hideOn: ["watchHideOn"] }], [4, "alc-menu", { refresh: [64] }, [[0, "keydown", "handleKeydown"], [0, "alc-select", "handleAlcSelect"], [0, "focusin", "handleFocusin"], [0, "focusout", "handleFocusout"]]]]], ["alc-icon", [[0, "alc-icon", { label: [513], flipRtl: [516, "flip-rtl"], name: [513], src: [513], icon: [513], lazy: [516], sanitize: [516], svgContent: [32], isVisible: [32], ariaLabel: [32] }, null, { label: ["loadIcon"], name: ["loadIcon"], src: ["loadIcon"], icon: ["loadIcon"] }]]], ["alc-menu-item", [[4, "alc-menu-item", { type: [513], checked: [1540], disabled: [516], value: [520] }, [[0, "keydown", "handleKeyDown"], [0, "click", "handleClick"]]]]]], a)];
      }
    });
  });
};

// node_modules/alcance/loader/index.js
(function() {
  if ("undefined" !== typeof window && void 0 !== window.Reflect && void 0 !== window.customElements) {
    var a = HTMLElement;
    window.HTMLElement = function() {
      return Reflect.construct(a, [], this.constructor);
    };
    HTMLElement.prototype = a.prototype;
    HTMLElement.prototype.constructor = HTMLElement;
    Object.setPrototypeOf(HTMLElement, a);
  }
})();

// node_modules/alcance-vue-library/lib/plugin.js
import "/Users/michelshintaku/Documents/PROJETOS_CD_ATIVOS/__A11Y-CD/A11Y/node_modules/alcance/dist/alcance/alcance.css";
var defaultOptions = {
  resourcesUrl: `${window.location.origin}/`
};
var ComponentLibrary = {
  async install(app, userOptions) {
    let options = Object.assign(Object.assign({}, defaultOptions), userOptions);
    applyPolyfills().then(() => {
      defineCustomElements(window, {
        resourcesUrl: options.resourcesUrl
      });
    });
  }
};
export {
  AlcAlert,
  AlcAutocomplete,
  AlcBadge,
  AlcBreadcrumb,
  AlcBreadcrumbItem,
  AlcCheckbox,
  AlcDatatable,
  AlcDetails,
  AlcDrawer,
  AlcDropdown,
  AlcEnvironmentLabel,
  AlcEventLab,
  AlcExpander,
  AlcField,
  AlcFieldChecker,
  AlcFieldset,
  AlcHeader,
  AlcHeaderAction,
  AlcHeaderId,
  AlcHeaderNotifications,
  AlcHeaderV1,
  AlcIcon,
  AlcInputFile,
  AlcLoading,
  AlcMenu,
  AlcMenuItem,
  AlcMenuItemTheme,
  AlcMenuLink,
  AlcModal,
  AlcNav,
  AlcNavPanel,
  AlcPagination,
  AlcPopup,
  AlcRadio,
  AlcScrollPanel,
  AlcSidepanel,
  AlcSkipLink,
  AlcSkipToNav,
  AlcSortIndicator,
  AlcTab,
  AlcTabButton,
  AlcTable,
  AlcTabs,
  AlcTheme,
  AlcTooltip,
  AlcUser,
  AlcUserMenu,
  AlcViewMore,
  ComponentLibrary
};
//# sourceMappingURL=alcance-vue-library.js.map
