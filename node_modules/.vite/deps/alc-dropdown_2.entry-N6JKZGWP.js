import {
  getFocusableElements
} from "./chunk-WGMPJW27.js";
import {
  logger
} from "./chunk-F2BFVVNU.js";
import {
  getUniqueId
} from "./chunk-6E7TTPYM.js";
import {
  Host,
  createEvent,
  getElement,
  h,
  registerInstance
} from "./chunk-S4YNXM4D.js";
import "./chunk-7D4SUZUM.js";

// node_modules/alcance/dist/esm-es5/alc-dropdown_2.entry.js
var __awaiter = function(t, r, e, n) {
  function i(t2) {
    return t2 instanceof e ? t2 : new e(function(r2) {
      r2(t2);
    });
  }
  return new (e || (e = Promise))(function(e2, a) {
    function o(t2) {
      try {
        c(n.next(t2));
      } catch (t3) {
        a(t3);
      }
    }
    function s(t2) {
      try {
        c(n["throw"](t2));
      } catch (t3) {
        a(t3);
      }
    }
    function c(t2) {
      t2.done ? e2(t2.value) : i(t2.value).then(o, s);
    }
    c((n = n.apply(t, r || [])).next());
  });
};
var __generator = function(t, r) {
  var e = { label: 0, sent: function() {
    if (a[0] & 1) throw a[1];
    return a[1];
  }, trys: [], ops: [] }, n, i, a, o;
  return o = { next: s(0), throw: s(1), return: s(2) }, typeof Symbol === "function" && (o[Symbol.iterator] = function() {
    return this;
  }), o;
  function s(t2) {
    return function(r2) {
      return c([t2, r2]);
    };
  }
  function c(s2) {
    if (n) throw new TypeError("Generator is already executing.");
    while (o && (o = 0, s2[0] && (e = 0)), e) try {
      if (n = 1, i && (a = s2[0] & 2 ? i["return"] : s2[0] ? i["throw"] || ((a = i["return"]) && a.call(i), 0) : i.next) && !(a = a.call(i, s2[1])).done) return a;
      if (i = 0, a) s2 = [s2[0] & 2, a.value];
      switch (s2[0]) {
        case 0:
        case 1:
          a = s2;
          break;
        case 4:
          e.label++;
          return { value: s2[1], done: false };
        case 5:
          e.label++;
          i = s2[1];
          s2 = [0];
          continue;
        case 7:
          s2 = e.ops.pop();
          e.trys.pop();
          continue;
        default:
          if (!(a = e.trys, a = a.length > 0 && a[a.length - 1]) && (s2[0] === 6 || s2[0] === 2)) {
            e = 0;
            continue;
          }
          if (s2[0] === 3 && (!a || s2[1] > a[0] && s2[1] < a[3])) {
            e.label = s2[1];
            break;
          }
          if (s2[0] === 6 && e.label < a[1]) {
            e.label = a[1];
            a = s2;
            break;
          }
          if (a && e.label < a[2]) {
            e.label = a[2];
            e.ops.push(s2);
            break;
          }
          if (a[2]) e.ops.pop();
          e.trys.pop();
          continue;
      }
      s2 = r.call(t, e);
    } catch (t2) {
      s2 = [6, t2];
      i = 0;
    } finally {
      n = a = 0;
    }
    if (s2[0] & 5) throw s2[1];
    return { value: s2[0] ? s2[1] : void 0, done: true };
  }
};
var alcDropdownCss = '[data-alc-theme="dark"] alc-dropdown{--border-color:var(--alc-color-neutral-80)}[data-alc-theme="light"] alc-dropdown{--border-color:var(--alc-color-neutral-10)}alc-dropdown{position:relative;display:inline-block}.alc-dropdown__content{overflow:auto;background-color:var(--alc-color-surface-primary);border-radius:0.25rem;border-width:1px;border-color:var(--border-color);--tw-shadow-color:#000000;--tw-shadow:var(--tw-shadow-colored);--tw-drop-shadow:drop-shadow(0 4px 3px rgb(0 0 0 / 0.07)) drop-shadow(0 2px 2px rgb(0 0 0 / 0.06));-webkit-filter:var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);filter:var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);max-height:inherit;}.alc-dropdown__content--opened{display:block}@-webkit-keyframes Scale{0%{opacity:0;-webkit-transform:scale(0.8);transform:scale(0.8)}100%{opacity:1;-webkit-transform:scale(1);transform:scale(1)}}@keyframes Scale{0%{opacity:0;-webkit-transform:scale(0.8);transform:scale(0.8)}100%{opacity:1;-webkit-transform:scale(1);transform:scale(1)}}';
var AlcDropdown = function() {
  function t(t2) {
    var r = this;
    registerInstance(this, t2);
    this.alcShow = createEvent(this, "alc-show", 7);
    this.alcAfterShow = createEvent(this, "alc-after-show", 6);
    this.alcHide = createEvent(this, "alc-hide", 7);
    this.alcAfterHide = createEvent(this, "alc-after-hide", 6);
    this.hideOnEventsMap = /* @__PURE__ */ new Map();
    this.open = false;
    this.hideOn = "";
    this.handleAnchorClick = function(t3) {
      var e;
      if (!(t3.target instanceof Node)) {
        return;
      }
      if ((e = r.trigger) === null || e === void 0 ? void 0 : e.contains(t3.target)) {
        r.toggleDropdown();
      }
    };
    this.toggleDropdown = function() {
      return __awaiter(r, void 0, void 0, function() {
        return __generator(this, function(t3) {
          this.open ? this.hide() : this.show();
          return [2];
        });
      });
    };
  }
  t.prototype.watchOpen = function() {
    if (this.trigger) {
      this.handleTriggerAriaExpanded();
      this.handleTriggerTabindex();
    }
  };
  t.prototype.watchHideOn = function() {
    var t2 = this;
    this.hideOnEventsMap.forEach(function(r, e) {
      t2.content.removeEventListener(e, r);
      t2.hideOnEventsMap.delete(e);
    });
    this.addHideOnListeners();
  };
  t.prototype.handleKeydown = function(t2) {
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(r) {
        switch (r.label) {
          case 0:
            if (!this.open) return [2];
            if (t2.key !== "Escape") return [2];
            if (t2.defaultPrevented) return [2];
            t2.preventDefault();
            return [4, this.hide()];
          case 1:
            r.sent();
            this.handleTriggerFocus();
            return [2];
        }
      });
    });
  };
  t.prototype.show = function() {
    return __awaiter(this, void 0, void 0, function() {
      var t2;
      return __generator(this, function(r) {
        if (this.open) {
          return [2, false];
        }
        t2 = this.alcShow.emit().defaultPrevented;
        if (t2) {
          return [2, false];
        }
        this.open = true;
        this.alcAfterShow.emit();
        return [2, true];
      });
    });
  };
  t.prototype.hide = function() {
    return __awaiter(this, void 0, void 0, function() {
      var t2;
      return __generator(this, function(r) {
        if (!this.open) {
          return [2, false];
        }
        t2 = this.alcHide.emit().defaultPrevented;
        if (t2) {
          return [2, false];
        }
        this.open = false;
        this.alcAfterHide.emit();
        return [2, true];
      });
    });
  };
  t.prototype.handleTriggerFocus = function() {
    var t2;
    (t2 = this.trigger) === null || t2 === void 0 ? void 0 : t2.focus();
  };
  t.prototype.handleContentFocus = function() {
    var t2 = getFocusableElements(this.content)[0];
    if (!t2) return;
    if (t2 instanceof HTMLElement) {
      t2.focus();
    }
  };
  t.prototype.setTriggerAccessibility = function() {
    if (this.trigger.getAttribute("role") === null) {
      this.trigger.setAttribute("role", "button");
    }
    var t2 = this.content.firstElementChild;
    if (this.trigger.getAttribute("aria-haspopup") === null) {
      var r = (t2 === null || t2 === void 0 ? void 0 : t2.role) === "menu" ? "menu" : "dialog";
      this.trigger.setAttribute("aria-haspopup", r);
    }
    var e = (t2 === null || t2 === void 0 ? void 0 : t2.id) ? t2.id : getUniqueId();
    if (!t2) {
      this.content.id = e;
    } else {
      t2.id = e;
    }
    this.trigger.setAttribute("aria-controls", e);
  };
  t.prototype.handleTriggerAriaExpanded = function() {
    this.trigger.ariaExpanded = "".concat(this.open);
  };
  t.prototype.handleTriggerTabindex = function() {
    this.trigger.tabIndex = this.open ? -1 : this.originalTriggerTabindex;
  };
  t.prototype.handleFocusOut = function(t2) {
    return __awaiter(this, void 0, void 0, function() {
      var r, e;
      return __generator(this, function(n) {
        switch (n.label) {
          case 0:
            r = t2.relatedTarget;
            e = r instanceof Node;
            if (e && this.el.contains(r)) {
              return [2];
            }
            return [4, this.hide()];
          case 1:
            n.sent();
            return [2];
        }
      });
    });
  };
  t.prototype.handleCloseOn = function(t2) {
    if (t2.defaultPrevented) {
      return;
    }
    this.open = false;
  };
  t.prototype.addHideOnListeners = function() {
    var t2 = this;
    var r = this.hideOn.trim();
    if (!r) {
      return;
    }
    var e = r.split(/\s+/);
    e.forEach(function(r2) {
      var e2 = function(r3) {
        return t2.handleCloseOn(r3);
      };
      t2.hideOnEventsMap.set(r2, e2);
      t2.content.addEventListener(r2, e2);
    });
  };
  t.prototype.componentDidUpdate = function() {
    if (this.open) {
      this.handleContentFocus();
    }
  };
  t.prototype.getTrigger = function() {
    var t2 = null;
    var r = null;
    t2 = this.el.querySelector('[slot="trigger"]');
    if (t2) {
      if (t2.tagName === "BUTTON" || t2.getAttribute("role") === "button") {
        r = t2;
      } else {
        r = t2.querySelector('button, [role="button"]');
      }
    }
    if (r === null) {
      logger.warn(this.el, "alc-dropdown não localizou um trigger válido. Slot deve ser ou conter um botão. Veja a documentação para mais detalhes.");
    }
    return r;
  };
  t.prototype.componentDidLoad = function() {
    this.trigger = this.getTrigger();
    if (this.trigger) {
      this.setTriggerAccessibility();
      this.handleTriggerAriaExpanded();
      this.originalTriggerTabindex = this.trigger.tabIndex;
    }
    this.addHideOnListeners();
  };
  t.prototype.render = function() {
    var t2 = this;
    return h(Host, { key: "2a3cb9758c23c1f7f895322bffa6893a4680e1e8" }, h("alc-popup", { key: "0c352d9d09c09df64e50c0561633120705875ef1", active: this.open, placement: "bottom-start", flip: true, shift: true, strategy: "fixed", onFocusout: this.handleFocusOut.bind(this), distance: 2 }, h("div", { key: "6b60a206a5a326e53c1f3afed07b0e53b52c9832", slot: "anchor", onClick: this.handleAnchorClick }, h("slot", { key: "528d7a27ebf5bdc884d89796d3aec84ae19e18e5", name: "trigger" })), h("div", { key: "2407874043bb9e9cabfaf9bc13751040f15f0c18", class: "alc-dropdown__content", ref: function(r) {
      return t2.content = r;
    }, tabindex: "-1" }, h("slot", { key: "ecd68a468c536a351baa3c5eb75fad9fbd88c2b4" }))));
  };
  Object.defineProperty(t.prototype, "el", { get: function() {
    return getElement(this);
  }, enumerable: false, configurable: true });
  Object.defineProperty(t, "watchers", { get: function() {
    return { open: ["watchOpen"], hideOn: ["watchHideOn"] };
  }, enumerable: false, configurable: true });
  return t;
}();
AlcDropdown.style = alcDropdownCss;
var alcMenuCss = ".alc-menu{display:block;padding-top:0.5rem;padding-bottom:0.5rem;background-color:var(--alc-color-surface-primary)}";
var AlcMenu = function() {
  function t(t2) {
    var r = this;
    registerInstance(this, t2);
    this.hasFocus = false;
    this.getListItems = function() {
      return Array.from(r.hostElement.querySelectorAll("[role^=menuitem]"));
    };
    this.includeFirstItemInTabNavigation = function() {
      r.items.forEach(function(t3, r2) {
        t3.setAttribute("tabindex", r2 === 0 ? "0" : "-1");
      });
    };
    this.removeAllItemsFromTabNavigation = function() {
      r.items.forEach(function(t3) {
        return t3.setAttribute("tabindex", "-1");
      });
    };
    this.setHasFocus = function(t3) {
      if (t3 === void 0) {
        t3 = true;
      }
      r.hasFocus = t3;
      if (t3) {
        r.removeAllItemsFromTabNavigation();
      } else {
        r.includeFirstItemInTabNavigation();
      }
    };
  }
  t.prototype.refresh = function() {
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(t2) {
        this.items = this.getListItems();
        this.includeFirstItemInTabNavigation();
        return [2];
      });
    });
  };
  t.prototype.handleKeydown = function(t2) {
    if ("ArrowDown" === t2.key) {
      t2.preventDefault();
      this.handleFocusedItemIndex();
      return;
    }
    if ("ArrowUp" === t2.key) {
      t2.preventDefault();
      this.handleFocusedItemIndex(-1);
      return;
    }
  };
  t.prototype.handleAlcSelect = function(t2) {
    var r = this.items.findIndex(function(r2) {
      return r2 === t2.target;
    });
    if (r === null) return;
    this.handleFocusItem(r);
  };
  t.prototype.handleFocusin = function(t2) {
    var r = t2.target;
    if (this.hasFocus) {
      return;
    }
    if (this.hostElement.contains(r)) {
      this.setHasFocus(true);
    }
  };
  t.prototype.handleFocusout = function(t2) {
    var r = t2.relatedTarget;
    if (!this.hostElement.contains(r)) {
      this.setHasFocus(false);
    }
  };
  t.prototype.handleFocusedItemIndex = function(t2) {
    if (t2 === void 0) {
      t2 = 1;
    }
    var r = this.items.indexOf(document.activeElement);
    if (r === -1) return;
    var e = r + t2;
    var n = this.items.length - 1;
    if (e > n) {
      e = 0;
    }
    if (e < 0) {
      e = n;
    }
    this.handleFocusItem(e);
  };
  t.prototype.handleFocusItem = function(t2) {
    var r = this.items[t2];
    if (r instanceof HTMLElement) {
      r.focus();
    }
  };
  t.prototype.componentDidRender = function() {
    this.items = this.getListItems();
  };
  t.prototype.componentDidLoad = function() {
    this.includeFirstItemInTabNavigation();
  };
  t.prototype.render = function() {
    return h(Host, { key: "2aa137629ce5187b9191d9885a0b716d51ef4861", role: "menu", class: "alc-menu" }, h("slot", { key: "6442d2320bb9c5b2f83859688fb464ac5ab903da" }));
  };
  Object.defineProperty(t.prototype, "hostElement", { get: function() {
    return getElement(this);
  }, enumerable: false, configurable: true });
  return t;
}();
AlcMenu.style = alcMenuCss;
export {
  AlcDropdown as alc_dropdown,
  AlcMenu as alc_menu
};
//# sourceMappingURL=alc-dropdown_2.entry-N6JKZGWP.js.map
