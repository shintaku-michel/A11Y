import {
  testAttributes
} from "./chunk-IGBJBFZL.js";
import {
  getUniqueId
} from "./chunk-6E7TTPYM.js";
import {
  Host,
  createEvent,
  h,
  registerInstance
} from "./chunk-S4YNXM4D.js";
import "./chunk-7D4SUZUM.js";

// node_modules/alcance/dist/esm-es5/alc-tooltip.entry.js
var __awaiter = function(t, r, e, i) {
  function n(t2) {
    return t2 instanceof e ? t2 : new e(function(r2) {
      r2(t2);
    });
  }
  return new (e || (e = Promise))(function(e2, o) {
    function a(t2) {
      try {
        s(i.next(t2));
      } catch (t3) {
        o(t3);
      }
    }
    function c(t2) {
      try {
        s(i["throw"](t2));
      } catch (t3) {
        o(t3);
      }
    }
    function s(t2) {
      t2.done ? e2(t2.value) : n(t2.value).then(a, c);
    }
    s((i = i.apply(t, r || [])).next());
  });
};
var __generator = function(t, r) {
  var e = { label: 0, sent: function() {
    if (o[0] & 1) throw o[1];
    return o[1];
  }, trys: [], ops: [] }, i, n, o, a;
  return a = { next: c(0), throw: c(1), return: c(2) }, typeof Symbol === "function" && (a[Symbol.iterator] = function() {
    return this;
  }), a;
  function c(t2) {
    return function(r2) {
      return s([t2, r2]);
    };
  }
  function s(c2) {
    if (i) throw new TypeError("Generator is already executing.");
    while (a && (a = 0, c2[0] && (e = 0)), e) try {
      if (i = 1, n && (o = c2[0] & 2 ? n["return"] : c2[0] ? n["throw"] || ((o = n["return"]) && o.call(n), 0) : n.next) && !(o = o.call(n, c2[1])).done) return o;
      if (n = 0, o) c2 = [c2[0] & 2, o.value];
      switch (c2[0]) {
        case 0:
        case 1:
          o = c2;
          break;
        case 4:
          e.label++;
          return { value: c2[1], done: false };
        case 5:
          e.label++;
          n = c2[1];
          c2 = [0];
          continue;
        case 7:
          c2 = e.ops.pop();
          e.trys.pop();
          continue;
        default:
          if (!(o = e.trys, o = o.length > 0 && o[o.length - 1]) && (c2[0] === 6 || c2[0] === 2)) {
            e = 0;
            continue;
          }
          if (c2[0] === 3 && (!o || c2[1] > o[0] && c2[1] < o[3])) {
            e.label = c2[1];
            break;
          }
          if (c2[0] === 6 && e.label < o[1]) {
            e.label = o[1];
            o = c2;
            break;
          }
          if (o && e.label < o[2]) {
            e.label = o[2];
            e.ops.push(c2);
            break;
          }
          if (o[2]) e.ops.pop();
          e.trys.pop();
          continue;
      }
      c2 = r.call(t, e);
    } catch (t2) {
      c2 = [6, t2];
      n = 0;
    } finally {
      i = o = 0;
    }
    if (c2[0] & 5) throw c2[1];
    return { value: c2[0] ? c2[1] : void 0, done: true };
  }
};
var alcTooltipCss = '[data-alc-theme="dark"] alc-tooltip{--bg-color:var(--alc-color-neutral-90)}[data-alc-theme="light"] alc-tooltip{--bg-color:var(--alc-color-neutral-5)}.alc-tooltip__content{border-radius:0.125rem;border-width:1px;border-color:var(--alc-color-border);background-color:var(--bg-color);padding-left:0.5rem;padding-right:0.5rem;padding-top:0.25rem;padding-bottom:0.25rem;font-size:0.875rem;line-height:1rem;color:var(--alc-color-text-secondary);width:-moz-fit-content;width:-webkit-fit-content;width:fit-content}alc-tooltip .alc-popup__arrow{--arrow-size:var(--alc-spacing-03);height:var(--arrow-size);width:var(--arrow-size);border-color:var(--alc-color-border);background-color:var(--bg-color);border-bottom-width:var(--alc-border-width);border-right-width:var(--alc-border-width)}';
var AlcTooltip = function() {
  function t(t2) {
    registerInstance(this, t2);
    this.alcShow = createEvent(this, "alc-show", 7);
    this.alcAfterShow = createEvent(this, "alc-after-show", 6);
    this.alcHide = createEvent(this, "alc-hide", 7);
    this.alcAfterHide = createEvent(this, "alc-after-hide", 7);
    this.contentId = null;
    this.hasClickedOrFocused = false;
    this.active = false;
    this.content = null;
    this.placement = "top";
    this.trigger = "hover focus";
    this.strategy = "absolute";
  }
  t.prototype.show = function() {
    return __awaiter(this, void 0, void 0, function() {
      var t2;
      return __generator(this, function(r) {
        if (this.active) return [2, false];
        t2 = this.alcShow.emit({ from: "method" }).defaultPrevented;
        if (t2) {
          return [2, false];
        }
        this.active = true;
        return [2, true];
      });
    });
  };
  t.prototype.hide = function() {
    return __awaiter(this, void 0, void 0, function() {
      var t2;
      return __generator(this, function(r) {
        if (!this.active) return [2, false];
        t2 = this.alcHide.emit({ from: "method" }).defaultPrevented;
        if (t2) {
          return [2, false];
        }
        this.active = false;
        return [2, true];
      });
    });
  };
  t.prototype.watchActive = function(t2) {
    if (t2) {
      this.alcAfterShow.emit();
    } else {
      this.alcAfterHide.emit();
    }
  };
  t.prototype.handleKeyDown = function(t2) {
    var r;
    if (t2.key === "Escape") {
      t2.preventDefault();
      (r = this.anchorEl) === null || r === void 0 ? void 0 : r.focus();
      this.handleHide("keyboard");
    }
  };
  t.prototype.handleFocus = function() {
    if (!this.hasTrigger("focus")) return;
    var t2 = this.handleShow("focus");
    if (t2) this.hasClickedOrFocused = true;
  };
  t.prototype.handleBlur = function() {
    if (!this.hasTrigger("focus")) return;
    var t2 = this.handleHide("focus");
    if (t2) this.hasClickedOrFocused = false;
  };
  t.prototype.handleMouseOver = function() {
    if (!this.hasTrigger("hover")) return;
    this.handleShow("hover");
  };
  t.prototype.handleMouseOut = function() {
    if (!this.hasTrigger("hover")) return;
    if (this.hasClickedOrFocused) return;
    this.handleHide("hover");
  };
  t.prototype.handleClick = function() {
    if (!this.hasTrigger("click")) return;
    if (this.active) {
      var t2 = this.handleHide("click");
      if (t2) this.hasClickedOrFocused = false;
    } else {
      var r = this.handleShow("click");
      if (r) this.hasClickedOrFocused = true;
    }
  };
  t.prototype.componentWillLoad = function() {
    this.contentId = getUniqueId();
  };
  t.prototype.componentDidLoad = function() {
    if (this.anchorSlot) {
      var t2 = this.anchorSlot.assignedElements()[0];
      if (t2 instanceof HTMLElement) {
        this.anchorEl = t2;
        this.anchorEl.setAttribute("aria-describedby", this.contentId);
        this.anchorEl.setAttribute("tabindex", "0");
      }
    }
  };
  t.prototype.handleHide = function(t2) {
    return __awaiter(this, void 0, void 0, function() {
      var r, e;
      return __generator(this, function(i) {
        switch (i.label) {
          case 0:
            r = this.alcHide.emit({ from: t2 }).defaultPrevented;
            e = false;
            if (!!r) return [3, 2];
            return [4, this.hide()];
          case 1:
            e = i.sent();
            i.label = 2;
          case 2:
            return [2, e];
        }
      });
    });
  };
  t.prototype.handleShow = function(t2) {
    return __awaiter(this, void 0, void 0, function() {
      var r, e;
      return __generator(this, function(i) {
        switch (i.label) {
          case 0:
            r = this.alcShow.emit({ from: t2 }).defaultPrevented;
            e = false;
            if (!!r) return [3, 2];
            return [4, this.show()];
          case 1:
            e = i.sent();
            i.label = 2;
          case 2:
            return [2, e];
        }
      });
    });
  };
  t.prototype.hasTrigger = function(t2) {
    var r = this.trigger.split(" ");
    return r.includes(t2);
  };
  t.prototype.render = function() {
    var t2 = this;
    return h(Host, { key: "b0c78d43c4d9c151ffb324428231f3d8613f8af9" }, h("alc-popup", { key: "e92d111b22fa9e003a7ac7a8e0312a44c94d5c8b", active: this.active, placement: this.placement, shift: true, flip: true, distance: 8, arrow: true, role: "tooltip", strategy: this.strategy }, h("div", Object.assign({ key: "264958b7e8045ffe845f990a92dcf27307713af6", slot: "anchor" }, testAttributes()), h("slot", { key: "a76cf9f9d1f4f97b4375434ebbc41299892ca376", name: "trigger", ref: function(r) {
      return t2.anchorSlot = r;
    } })), h("div", Object.assign({ key: "0f959b9b6533f7b6ab9ab4fb6448b12b7e560a2b", class: "alc-tooltip__content", id: this.contentId }, testAttributes()), h("slot", { key: "8e034dbfcfe8f5a2f513fb952570ff288c459f10" }, this.content))));
  };
  Object.defineProperty(t, "watchers", { get: function() {
    return { active: ["watchActive"] };
  }, enumerable: false, configurable: true });
  return t;
}();
AlcTooltip.style = alcTooltipCss;
export {
  AlcTooltip as alc_tooltip
};
