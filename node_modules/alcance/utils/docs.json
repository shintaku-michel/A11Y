{
  "timestamp": "2025-06-30T14:56:42",
  "compiler": {
    "name": "@stencil/core",
    "version": "4.28.2",
    "typescriptVersion": "5.5.4"
  },
  "components": [
    {
      "filePath": "src/components/alc-alert/alc-alert.tsx",
      "encapsulation": "none",
      "tag": "alc-alert",
      "docs": "Vamos lá testar.\nVer se isso vai funcionar.\n^^^^^ [1]",
      "docsTags": [
        {
          "name": "slot",
          "text": "- Slot para o conteúdo do alert."
        },
        {
          "name": "slot",
          "text": "summary - Slot para o summary do alert."
        },
        {
          "name": "picWidget",
          "text": "pic-alert"
        }
      ],
      "usage": {
        "Básico": "<alc-alert>\n  O alert mais simples possível, sem alterações nas propriedades.\n</alc-alert>",
        "Usando o sumário": "<alc-alert dismissible=\"false\">\n  <span class='alc-alert__summary'>Prazo encerrado.</span>\n  O prazo para as inscrições foi encerrado no dia 26/01/2022.\n</alc-alert>"
      },
      "props": [
        {
          "name": "dismissible",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "dismissible",
          "reflectToAttr": true,
          "docs": "Define se o alert pode ser dispensado pelo usuário.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "type",
          "type": "\"error\" | \"info\" | \"success\" | \"warning\"",
          "complexType": {
            "original": "Type",
            "resolved": "\"error\" | \"info\" | \"success\" | \"warning\"",
            "references": {
              "Type": {
                "location": "import",
                "path": "./index",
                "id": "src/components/alc-alert/index.d.ts::Type"
              }
            }
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": true,
          "docs": "O tipo do alert, de acordo com a natureza da mensagem nele contido.",
          "docsTags": [],
          "default": "'info'",
          "values": [
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "visible",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "visible",
          "reflectToAttr": true,
          "docs": "Indica se o alert está visível. Pode-se usar essa propriedade em vez dos métodos show/hide.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [
        {
          "name": "hide",
          "returns": {
            "type": "Promise<boolean>",
            "docs": "O valor retornado é `true` se o alert foi realmente dispensado com essa chamada ao método."
          },
          "complexType": {
            "signature": "() => Promise<boolean>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<boolean>"
          },
          "signature": "hide() => Promise<boolean>",
          "parameters": [],
          "docs": "Fecha o alert.",
          "docsTags": [
            {
              "name": "returns",
              "text": "O valor retornado é `true` se o alert foi realmente dispensado com essa chamada ao método."
            }
          ]
        },
        {
          "name": "show",
          "returns": {
            "type": "Promise<boolean>",
            "docs": "O valor retornado é `true` se o alert foi realmente exibido com esa chamada ao método."
          },
          "complexType": {
            "signature": "() => Promise<boolean>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<boolean>"
          },
          "signature": "show() => Promise<boolean>",
          "parameters": [],
          "docs": "Exibe o alert.",
          "docsTags": [
            {
              "name": "returns",
              "text": "O valor retornado é `true` se o alert foi realmente exibido com esa chamada ao método."
            }
          ]
        }
      ],
      "events": [
        {
          "event": "alc-after-hide",
          "detail": "null",
          "bubbles": true,
          "complexType": {
            "original": "null",
            "resolved": "null",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Evento disparado quando o alert é dispensado.",
          "docsTags": []
        },
        {
          "event": "alc-hide",
          "detail": "null",
          "bubbles": true,
          "complexType": {
            "original": "null",
            "resolved": "null",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Evento disparado quando o alert é dispensado.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--bg-color-info",
          "annotation": "prop",
          "docs": "Cor de fundo para info",
          "mode": "theme"
        },
        {
          "name": "--bg-color-warning",
          "annotation": "prop",
          "docs": "Cor de fundo para warning",
          "mode": "theme"
        },
        {
          "name": "--border-color-info",
          "annotation": "prop",
          "docs": "Cor de borda para info",
          "mode": "theme"
        },
        {
          "name": "--border-color-warning",
          "annotation": "prop",
          "docs": "Cor de borda para warning",
          "mode": "theme"
        },
        {
          "name": "--text-color-info",
          "annotation": "prop",
          "docs": "Cor de texto para info",
          "mode": "theme"
        },
        {
          "name": "--text-color-warning",
          "annotation": "prop",
          "docs": "Cor de texto para warning",
          "mode": "theme"
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "Slot para o conteúdo do alert."
        },
        {
          "name": "summary",
          "docs": "Slot para o summary do alert."
        }
      ],
      "parts": [],
      "dependents": [
        "alc-datatable",
        "alc-field-checker"
      ],
      "dependencies": [
        "alc-icon"
      ],
      "dependencyGraph": {
        "alc-alert": [
          "alc-icon"
        ],
        "alc-datatable": [
          "alc-alert"
        ],
        "alc-field-checker": [
          "alc-alert"
        ]
      }
    },
    {
      "filePath": "src/components/alc-autocomplete/alc-autocomplete.tsx",
      "encapsulation": "none",
      "tag": "alc-autocomplete",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Desabilita input",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "displayKeys",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "display-keys",
          "reflectToAttr": true,
          "docs": "Indica os atributos dos dados que serão exibidos na lista",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "error",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "error",
          "reflectToAttr": true,
          "docs": "Indica se houve um erro ao carregar os dados",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "errorMsg",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "error-msg",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "hint",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "hint",
          "reflectToAttr": true,
          "docs": "Mensagem de ajuda",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "items",
          "type": "{ [key: string]: string; }[]",
          "complexType": {
            "original": "Array<{ [key: string]: string }>",
            "resolved": "{ [key: string]: string; }[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Itens que serão listado no componente",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "{ [key: string]: string; }[]"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": true,
          "docs": "Label do input",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "listDirection",
          "type": "\"horizontal\" | \"vertical\"",
          "complexType": {
            "original": "'horizontal' | 'vertical'",
            "resolved": "\"horizontal\" | \"vertical\"",
            "references": {}
          },
          "mutable": false,
          "attr": "list-direction",
          "reflectToAttr": true,
          "docs": "Indica o tipo de visualização da lista",
          "docsTags": [],
          "default": "'vertical'",
          "values": [
            {
              "value": "horizontal",
              "type": "string"
            },
            {
              "value": "vertical",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": true,
          "docs": "Indica se os dados estão sendo carregados",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": true,
          "docs": "Texto dentro do input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": true,
          "docs": "Indica se o input é obrigatório",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [
        {
          "name": "clearSelected",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "clearSelected() => Promise<void>",
          "parameters": [],
          "docs": "Limpa o valor selecionado",
          "docsTags": []
        },
        {
          "name": "getSelected",
          "returns": {
            "type": "Promise<any>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<any>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<any>"
          },
          "signature": "getSelected() => Promise<any>",
          "parameters": [],
          "docs": "Retorna o valor selecionado",
          "docsTags": []
        },
        {
          "name": "setSelected",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(item: any) => Promise<void>",
            "parameters": [
              {
                "name": "item",
                "type": "any",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setSelected(item: any) => Promise<void>",
          "parameters": [
            {
              "name": "item",
              "type": "any",
              "docs": ""
            }
          ],
          "docs": "Define o valor selecionado",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "alc-change",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Evento emitido sempre que o item selecionado for alterado.\nO valor emitido será o mesmo que pode ser obtido pelo método `getSelected()`.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "click",
          "target": "body",
          "capture": false,
          "passive": false
        },
        {
          "event": "keyup",
          "capture": false,
          "passive": false
        },
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        },
        {
          "event": "click",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "alc-field",
        "alc-popup",
        "alc-icon"
      ],
      "dependencyGraph": {
        "alc-autocomplete": [
          "alc-field",
          "alc-popup",
          "alc-icon"
        ]
      }
    },
    {
      "filePath": "src/components/alc-badge/alc-badge.tsx",
      "encapsulation": "none",
      "tag": "alc-badge",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "\"error\" | \"info\" | \"neutral\" | \"primary\" | \"secondary\" | \"success\" | \"warning\"",
          "complexType": {
            "original": "'primary' | 'secondary' | 'success' | 'warning' | 'error' | 'info' | 'neutral'",
            "resolved": "\"error\" | \"info\" | \"neutral\" | \"primary\" | \"secondary\" | \"success\" | \"warning\"",
            "references": {}
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "Define a cor do badge. Pode ser 'primary', 'secondary', 'success', 'warning', 'error', 'info' ou 'neutral'.",
          "docsTags": [],
          "default": "'primary'",
          "values": [
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "neutral",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "count",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "count",
          "reflectToAttr": false,
          "docs": "Define se o badge deve ser exibido como um contador.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "dot",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "dot",
          "reflectToAttr": false,
          "docs": "Define se o badge deve ser exibido como um ponto (dot) sem conteúdo.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "hidden",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hidden",
          "reflectToAttr": false,
          "docs": "Define se o badge deve ser exibido ou não.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "O texto a ser exibido dentro do badge (ex: \"99+\" ou \"Novo\").",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "outlined",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "outlined",
          "reflectToAttr": false,
          "docs": "Define se o badge deve aparecer com um contorno ao invés de ser preenchido.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "position",
          "type": "\"default\" | \"floating\" | \"inline\"",
          "complexType": {
            "original": "'default' | 'floating' | 'inline'",
            "resolved": "\"default\" | \"floating\" | \"inline\"",
            "references": {}
          },
          "mutable": false,
          "attr": "position",
          "reflectToAttr": false,
          "docs": "Define a posição do badge: 'default', 'floating' ou 'inline'.",
          "docsTags": [],
          "default": "'default'",
          "values": [
            {
              "value": "default",
              "type": "string"
            },
            {
              "value": "floating",
              "type": "string"
            },
            {
              "value": "inline",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "pulsate",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "pulsate",
          "reflectToAttr": false,
          "docs": "Define se o badge deve ter animação de pulsação.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--bg-color-info",
          "annotation": "prop",
          "docs": "Cor de fundo para info"
        },
        {
          "name": "--bg-color-warning",
          "annotation": "prop",
          "docs": "Cor de fundo para warning"
        },
        {
          "name": "--border-color-info",
          "annotation": "prop",
          "docs": "Cor de borda para info"
        },
        {
          "name": "--border-color-warning",
          "annotation": "prop",
          "docs": "Cor de borda para warning"
        },
        {
          "name": "--text-color-info",
          "annotation": "prop",
          "docs": "Cor de texto para info"
        },
        {
          "name": "--text-color-warning",
          "annotation": "prop",
          "docs": "Cor de texto para warning"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [
        "alc-header-notifications"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "alc-header-notifications": [
          "alc-badge"
        ]
      }
    },
    {
      "filePath": "src/components/alc-breadcrumb/alc-breadcrumb.tsx",
      "encapsulation": "none",
      "tag": "alc-breadcrumb",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- Slot para adicionar os `alc-breadcrumb-item`"
        }
      ],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "Slot para adicionar os `alc-breadcrumb-item`"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/alc-breadcrumb-item/alc-breadcrumb-item.tsx",
      "encapsulation": "none",
      "tag": "alc-breadcrumb-item",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- Slot para adicionar elemento de navegação. Pode ser tanto a tag `<a>` quanto um `<routerlink>` no caso de uso com Vue. Também pode-se usar a propriedade url."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "iconName",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-name",
          "reflectToAttr": true,
          "docs": "Indica o nome do icone a ser renderizado",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": true,
          "docs": "Indica a label do breadcrumb",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "url",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "url",
          "reflectToAttr": true,
          "docs": "Indica a url do link, pode-se usar o slot default para adicionar o elemento de navegação",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "Slot para adicionar elemento de navegação. Pode ser tanto a tag `<a>` quanto um `<routerlink>` no caso de uso com Vue. Também pode-se usar a propriedade url."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "alc-icon"
      ],
      "dependencyGraph": {
        "alc-breadcrumb-item": [
          "alc-icon"
        ]
      }
    },
    {
      "filePath": "src/components/alc-checkbox/alc-checkbox.tsx",
      "encapsulation": "none",
      "tag": "alc-checkbox",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "DEFAULT - Slot para o elemento input do tipo checkbox."
        },
        {
          "name": "slot",
          "text": "label - Slot para o elemento label do checkbox. Há opção de adicionar apenas o texto por meio da propriedade `label`."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "errorMsg",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "error-msg",
          "reflectToAttr": true,
          "docs": "Texto de mensagem de erro.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "hint",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "hint",
          "reflectToAttr": true,
          "docs": "Texto de ajuda.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": true,
          "docs": "Texto do label do input. Há opção de adicionar o elemento label pelo slot \"label\".",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "DEFAULT",
          "docs": "Slot para o elemento input do tipo checkbox."
        },
        {
          "name": "label",
          "docs": "Slot para o elemento label do checkbox. Há opção de adicionar apenas o texto por meio da propriedade `label`."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/alc-datatable/alc-datatable.tsx",
      "encapsulation": "none",
      "tag": "alc-datatable",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "data",
          "type": "JSON | string",
          "complexType": {
            "original": "string | JSON",
            "resolved": "JSON | string",
            "references": {
              "JSON": {
                "location": "global",
                "id": "global::JSON"
              }
            }
          },
          "mutable": true,
          "attr": "data",
          "reflectToAttr": true,
          "docs": "Os dados da tabela",
          "docsTags": [],
          "values": [
            {
              "type": "JSON"
            },
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "deferStart",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "defer-start",
          "reflectToAttr": true,
          "docs": "Faz com que o componente aguarde a chamada ao método `start()` para iniciar o DataTable.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "options",
          "type": "JSON | string",
          "complexType": {
            "original": "string | JSON",
            "resolved": "JSON | string",
            "references": {
              "JSON": {
                "location": "global",
                "id": "global::JSON"
              }
            }
          },
          "mutable": false,
          "attr": "options",
          "reflectToAttr": false,
          "docs": "As opções da tabela",
          "docsTags": [],
          "values": [
            {
              "type": "JSON"
            },
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "tableId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "table-id",
          "reflectToAttr": true,
          "docs": "Define o atributo `id` para a tabela (tag `table`), quando ela é criada automaticamente pelo componente.\nÉ você não incluir a tag `table` e usar a opção `stateSave`, é necessário definir esse atributo.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [
        {
          "name": "getApi",
          "returns": {
            "type": "Promise<any>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<any>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<any>"
          },
          "signature": "getApi() => Promise<any>",
          "parameters": [],
          "docs": "Retorna a API DataTable.",
          "docsTags": []
        },
        {
          "name": "getDataTable",
          "returns": {
            "type": "Promise<any>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<any>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<any>"
          },
          "signature": "getDataTable() => Promise<any>",
          "parameters": [],
          "docs": "Retorna o objeto DataTable.\nPor meio do objeto retornado é possível configurar extensões do DataTable.",
          "docsTags": []
        },
        {
          "name": "start",
          "returns": {
            "type": "Promise<boolean>",
            "docs": "O valor retornado é `true` se o DataTable foi realmente iniciado com a chamada desse método."
          },
          "complexType": {
            "signature": "() => Promise<boolean>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "HTMLElement": {
                "location": "global",
                "id": "global::HTMLElement"
              }
            },
            "return": "Promise<boolean>"
          },
          "signature": "start() => Promise<boolean>",
          "parameters": [],
          "docs": "Inicia o DataTable.\nSempre que `defer-start` for `true`, esse método deve ser chamado para que o componente inicie seu funcionamento.",
          "docsTags": [
            {
              "name": "returns",
              "text": "O valor retornado é `true` se o DataTable foi realmente iniciado com a chamada desse método."
            }
          ]
        }
      ],
      "events": [
        {
          "event": "alc-child-row",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Ver documentação do DataTables.net",
          "docsTags": []
        },
        {
          "event": "alc-column-sizing",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Ver documentação do DataTables.net",
          "docsTags": []
        },
        {
          "event": "alc-column-visibility",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Ver documentação do DataTables.net",
          "docsTags": []
        },
        {
          "event": "alc-deselect",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Ver documentação do DataTables.net",
          "docsTags": []
        },
        {
          "event": "alc-destroy",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Ver documentação do DataTables.net",
          "docsTags": []
        },
        {
          "event": "alc-draw",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Ver documentação do DataTables.net",
          "docsTags": []
        },
        {
          "event": "alc-error",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Ver documentação do DataTables.net",
          "docsTags": []
        },
        {
          "event": "alc-init",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Ver documentação do DataTables.net",
          "docsTags": []
        },
        {
          "event": "alc-length",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Ver documentação do DataTables.net",
          "docsTags": []
        },
        {
          "event": "alc-order",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Ver documentação do DataTables.net",
          "docsTags": []
        },
        {
          "event": "alc-page",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Ver documentação do DataTables.net",
          "docsTags": []
        },
        {
          "event": "alc-pre-draw",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Ver documentação do DataTables.net",
          "docsTags": []
        },
        {
          "event": "alc-pre-init",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Ver documentação do DataTables.net",
          "docsTags": []
        },
        {
          "event": "alc-pre-xhr",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Ver documentação do DataTables.net",
          "docsTags": []
        },
        {
          "event": "alc-processing",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Ver documentação do DataTables.net",
          "docsTags": []
        },
        {
          "event": "alc-request-child",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Ver documentação do DataTables.net",
          "docsTags": []
        },
        {
          "event": "alc-search",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Ver documentação do DataTables.net",
          "docsTags": []
        },
        {
          "event": "alc-select",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Ver documentação do DataTables.net",
          "docsTags": []
        },
        {
          "event": "alc-select-blur",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Ver documentação do DataTables.net",
          "docsTags": []
        },
        {
          "event": "alc-select-items",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Ver documentação do DataTables.net",
          "docsTags": []
        },
        {
          "event": "alc-select-style",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Ver documentação do DataTables.net",
          "docsTags": []
        },
        {
          "event": "alc-state-load-params",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Ver documentação do DataTables.net",
          "docsTags": []
        },
        {
          "event": "alc-state-loaded",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Ver documentação do DataTables.net",
          "docsTags": []
        },
        {
          "event": "alc-state-save-params",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Ver documentação do DataTables.net",
          "docsTags": []
        },
        {
          "event": "alc-user-select",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Ver documentação do DataTables.net",
          "docsTags": []
        },
        {
          "event": "alc-xhr",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Ver documentação do DataTables.net",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "resize",
          "target": "window",
          "capture": false,
          "passive": true
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "alc-field",
        "alc-pagination",
        "alc-menu-item",
        "alc-sort-indicator",
        "alc-dropdown",
        "alc-icon",
        "alc-menu",
        "alc-loading",
        "alc-alert"
      ],
      "dependencyGraph": {
        "alc-datatable": [
          "alc-field",
          "alc-pagination",
          "alc-menu-item",
          "alc-sort-indicator",
          "alc-dropdown",
          "alc-icon",
          "alc-menu",
          "alc-loading",
          "alc-alert"
        ],
        "alc-pagination": [
          "alc-icon"
        ],
        "alc-menu-item": [
          "alc-icon"
        ],
        "alc-sort-indicator": [
          "alc-icon"
        ],
        "alc-dropdown": [
          "alc-popup"
        ],
        "alc-alert": [
          "alc-icon"
        ]
      }
    },
    {
      "filePath": "src/components/alc-details/alc-details.tsx",
      "encapsulation": "none",
      "tag": "alc-details",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Desativa o componente.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "opened",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "opened",
          "reflectToAttr": false,
          "docs": "Mantém aberto.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "summary",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "summary",
          "reflectToAttr": true,
          "docs": "Insere o summary do details.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "alc-close",
          "detail": "null",
          "bubbles": true,
          "complexType": {
            "original": "null",
            "resolved": "null",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Evento disparado quando a details fechar",
          "docsTags": []
        },
        {
          "event": "alc-show",
          "detail": "null",
          "bubbles": true,
          "complexType": {
            "original": "null",
            "resolved": "null",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Evento disparado quando a details abrir",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--bg-color",
          "annotation": "prop",
          "docs": "Cor de fundo do details.",
          "mode": "theme"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "alc-icon"
      ],
      "dependencyGraph": {
        "alc-details": [
          "alc-icon"
        ]
      }
    },
    {
      "filePath": "src/components/alc-drawer/alc-drawer.tsx",
      "encapsulation": "none",
      "tag": "alc-drawer",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "elementToFocus",
          "type": "HTMLElement | string",
          "complexType": {
            "original": "HTMLElement | string",
            "resolved": "HTMLElement | string",
            "references": {
              "HTMLElement": {
                "location": "global",
                "id": "global::HTMLElement"
              }
            }
          },
          "mutable": false,
          "attr": "element-to-focus",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [
            {
              "name": "type",
              "text": "Element ou ID"
            },
            {
              "name": "description",
              "text": "Elemento ou ID do elemento que será focado quando o drawer fechar."
            }
          ],
          "default": "null",
          "values": [
            {
              "type": "HTMLElement"
            },
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "isVisible",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "is-visible",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [
            {
              "name": "type",
              "text": "boolean"
            },
            {
              "name": "description",
              "text": "Define se o drawer está aberto ou fechado."
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [
        {
          "name": "hide",
          "returns": {
            "type": "Promise<boolean>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<boolean>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<boolean>"
          },
          "signature": "hide() => Promise<boolean>",
          "parameters": [],
          "docs": "Método para fechar o drawer.",
          "docsTags": []
        },
        {
          "name": "show",
          "returns": {
            "type": "Promise<boolean>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<boolean>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<boolean>"
          },
          "signature": "show() => Promise<boolean>",
          "parameters": [],
          "docs": "Método para abrir o drawer.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "alc-after-hide",
          "detail": "null",
          "bubbles": true,
          "complexType": {
            "original": "null",
            "resolved": "null",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Evento disparado quando o drawer fechou",
          "docsTags": []
        },
        {
          "event": "alc-after-show",
          "detail": "null",
          "bubbles": true,
          "complexType": {
            "original": "null",
            "resolved": "null",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Evento disparado quando o drawer abriu",
          "docsTags": []
        },
        {
          "event": "alc-hide",
          "detail": "null",
          "bubbles": true,
          "complexType": {
            "original": "null",
            "resolved": "null",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Evento disparado quando o drawer vai fechar",
          "docsTags": []
        },
        {
          "event": "alc-show",
          "detail": "null",
          "bubbles": true,
          "complexType": {
            "original": "null",
            "resolved": "null",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Evento disparado quando o drawer vai abrir",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "keydown",
          "target": "document",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "alc-header",
        "alc-sidepanel"
      ],
      "dependencies": [
        "alc-icon"
      ],
      "dependencyGraph": {
        "alc-drawer": [
          "alc-icon"
        ],
        "alc-header": [
          "alc-drawer"
        ],
        "alc-sidepanel": [
          "alc-drawer"
        ]
      }
    },
    {
      "filePath": "src/components/alc-dropdown/alc-dropdown.tsx",
      "encapsulation": "none",
      "tag": "alc-dropdown",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- O conteúdo do dropdown."
        },
        {
          "name": "slot",
          "text": "trigger - O disparador do dropdown, usualmente um botão."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "hideOn",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-on",
          "reflectToAttr": true,
          "docs": "Nome do evento que, ao ocorrer no conteúdo do dropdown, vai fazer com que ele seja fechado.\nPodem ser informados vários eventos, separados por um espaço em branco.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "open",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "open",
          "reflectToAttr": true,
          "docs": "Indica se o dropdown esta aberto ou não. Pode-se usar essa propriedade em vez dos métodos show/hide.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [
        {
          "name": "hide",
          "returns": {
            "type": "Promise<boolean>",
            "docs": "O valor retornado é `true` se o dropdown foi realmente oculto com essa chamada ao método."
          },
          "complexType": {
            "signature": "() => Promise<boolean>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<boolean>"
          },
          "signature": "hide() => Promise<boolean>",
          "parameters": [],
          "docs": "Método para fechar o dropdown.",
          "docsTags": [
            {
              "name": "returns",
              "text": "O valor retornado é `true` se o dropdown foi realmente oculto com essa chamada ao método."
            }
          ]
        },
        {
          "name": "show",
          "returns": {
            "type": "Promise<boolean>",
            "docs": "O valor retornado é `true` se o dropdown foi realmente exibido com essa chamada ao método."
          },
          "complexType": {
            "signature": "() => Promise<boolean>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<boolean>"
          },
          "signature": "show() => Promise<boolean>",
          "parameters": [],
          "docs": "Método para abrir o dropdown.",
          "docsTags": [
            {
              "name": "returns",
              "text": "O valor retornado é `true` se o dropdown foi realmente exibido com essa chamada ao método."
            }
          ]
        }
      ],
      "events": [
        {
          "event": "alc-after-hide",
          "detail": "null",
          "bubbles": true,
          "complexType": {
            "original": "null",
            "resolved": "null",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Evento disparado quando o dropdown fechou",
          "docsTags": []
        },
        {
          "event": "alc-after-show",
          "detail": "null",
          "bubbles": true,
          "complexType": {
            "original": "null",
            "resolved": "null",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Evento disparado quando o dropdown abriu",
          "docsTags": []
        },
        {
          "event": "alc-hide",
          "detail": "null",
          "bubbles": true,
          "complexType": {
            "original": "null",
            "resolved": "null",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Evento disparado quando o dropdown vai fechar",
          "docsTags": []
        },
        {
          "event": "alc-show",
          "detail": "null",
          "bubbles": true,
          "complexType": {
            "original": "null",
            "resolved": "null",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Evento disparado quando o dropdown vai abrir",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "O conteúdo do dropdown."
        },
        {
          "name": "trigger",
          "docs": "O disparador do dropdown, usualmente um botão."
        }
      ],
      "parts": [],
      "dependents": [
        "alc-datatable",
        "alc-user-menu"
      ],
      "dependencies": [
        "alc-popup"
      ],
      "dependencyGraph": {
        "alc-dropdown": [
          "alc-popup"
        ],
        "alc-datatable": [
          "alc-dropdown"
        ],
        "alc-user-menu": [
          "alc-dropdown"
        ]
      }
    },
    {
      "filePath": "src/components/alc-environment-label/alc-environment-label.tsx",
      "encapsulation": "none",
      "tag": "alc-environment-label",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "env",
          "type": "\"development\" | \"homologation\" | \"production\" | \"prototype\" | \"testing\"",
          "complexType": {
            "original": "EnvType",
            "resolved": "\"development\" | \"homologation\" | \"production\" | \"prototype\" | \"testing\"",
            "references": {
              "EnvType": {
                "location": "import",
                "path": "./environments",
                "id": "src/components/alc-environment-label/environments.ts::EnvType"
              }
            }
          },
          "mutable": false,
          "attr": "env",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "value": "development",
              "type": "string"
            },
            {
              "value": "homologation",
              "type": "string"
            },
            {
              "value": "production",
              "type": "string"
            },
            {
              "value": "prototype",
              "type": "string"
            },
            {
              "value": "testing",
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/alc-event-lab/alc-event-lab.tsx",
      "encapsulation": "none",
      "tag": "alc-event-lab",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [
        {
          "name": "changePage",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(pageNumber: number) => Promise<void>",
            "parameters": [
              {
                "name": "pageNumber",
                "type": "number",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "changePage(pageNumber: number) => Promise<void>",
          "parameters": [
            {
              "name": "pageNumber",
              "type": "number",
              "docs": ""
            }
          ],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "alc-after-change",
          "detail": "AlcChangeEventTypes",
          "bubbles": true,
          "complexType": {
            "original": "AlcChangeEventTypes",
            "resolved": "AlcChangeEventTypes",
            "references": {
              "AlcChangeEventTypes": {
                "location": "local",
                "path": "/home/jenkins_slave/workspace/alcance-snapshots/packages/alcance/src/components/alc-event-lab/alc-event-lab.tsx",
                "id": "src/components/alc-event-lab/alc-event-lab.tsx::AlcChangeEventTypes"
              }
            }
          },
          "cancelable": false,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "alc-change",
          "detail": "AlcChangeEventTypes",
          "bubbles": true,
          "complexType": {
            "original": "AlcChangeEventTypes",
            "resolved": "AlcChangeEventTypes",
            "references": {
              "AlcChangeEventTypes": {
                "location": "local",
                "path": "/home/jenkins_slave/workspace/alcance-snapshots/packages/alcance/src/components/alc-event-lab/alc-event-lab.tsx",
                "id": "src/components/alc-event-lab/alc-event-lab.tsx::AlcChangeEventTypes"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/alc-expander/alc-expander.tsx",
      "encapsulation": "none",
      "tag": "alc-expander",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "label - Slot para rótulo do controle. Há opção de adicionar apenas texto por meio da propriedade `label`.\nUse esse recurso caso seja necessário alguma personalização no HTML referente ao rótulo.\nNão inclua headings (`h1`, `h2` etc.) nem elementos interativos (`a`, `button`, `input` etc.) nesse slot."
        },
        {
          "name": "slot",
          "text": "DEFAULT  - Slot para o conteúdo do expander."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "hideLabel",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-label",
          "reflectToAttr": true,
          "docs": "Oculta o rótulo do controle, mantendo-o acessível para leitores de tela.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": true,
          "docs": "Rótulo do elemento que controla a abertura e o fechamento do expander.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        },
        {
          "name": "open",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "open",
          "reflectToAttr": true,
          "docs": "Define se o expander está aberto ou fechado.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [
        {
          "name": "hide",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "hide() => Promise<void>",
          "parameters": [],
          "docs": "Fecha o expander programaticamente.",
          "docsTags": []
        },
        {
          "name": "show",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "show() => Promise<void>",
          "parameters": [],
          "docs": "Abre o expander programaticamente.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "alc-after-hide",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Evento disparado após fechar.",
          "docsTags": []
        },
        {
          "event": "alc-after-show",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Evento disparado após abrir.",
          "docsTags": []
        },
        {
          "event": "alc-hide",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Evento disparado antes de fechar. Cancelável.",
          "docsTags": []
        },
        {
          "event": "alc-show",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Evento disparado antes de abrir. Cancelável.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "DEFAULT",
          "docs": "Slot para o conteúdo do expander."
        },
        {
          "name": "label",
          "docs": "Slot para rótulo do controle. Há opção de adicionar apenas texto por meio da propriedade `label`.\nUse esse recurso caso seja necessário alguma personalização no HTML referente ao rótulo.\nNão inclua headings (`h1`, `h2` etc.) nem elementos interativos (`a`, `button`, `input` etc.) nesse slot."
        }
      ],
      "parts": [],
      "dependents": [
        "alc-user-menu"
      ],
      "dependencies": [
        "alc-icon"
      ],
      "dependencyGraph": {
        "alc-expander": [
          "alc-icon"
        ],
        "alc-user-menu": [
          "alc-expander"
        ]
      }
    },
    {
      "filePath": "src/components/alc-field/alc-field.tsx",
      "encapsulation": "none",
      "tag": "alc-field",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- Slot para o controle de formulário.\nPode ser um `input` (text, number, password, email etc.), `select` ou `textarea`."
        },
        {
          "name": "slot",
          "text": "label - Slot para o elemento label do campo. Há opção de adicionar apenas o texto por meio da propriedade `label`.\nUse esse recurso case seja necessário alguma personalização no HTML referente ao label."
        },
        {
          "name": "cssClass",
          "text": "alc-field__label - Aplicada ao elemento `label`."
        },
        {
          "name": "cssClass",
          "text": "alc-field__core - Aplicada ao elemento que agrupa o controle de formulário, mensagem de erro e texto de ajuda."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "errorMsg",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "error-msg",
          "reflectToAttr": true,
          "docs": "Texto de mensagem de erro.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "hint",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "hint",
          "reflectToAttr": true,
          "docs": "Texto de ajuda.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": true,
          "docs": "Texto do label do input.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": true,
          "docs": "Indica se o input é obrigatório.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "Slot para o controle de formulário.\nPode ser um `input` (text, number, password, email etc.), `select` ou `textarea`."
        },
        {
          "name": "label",
          "docs": "Slot para o elemento label do campo. Há opção de adicionar apenas o texto por meio da propriedade `label`.\nUse esse recurso case seja necessário alguma personalização no HTML referente ao label."
        }
      ],
      "parts": [],
      "dependents": [
        "alc-autocomplete",
        "alc-datatable",
        "alc-theme"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "alc-autocomplete": [
          "alc-field"
        ],
        "alc-datatable": [
          "alc-field"
        ],
        "alc-theme": [
          "alc-field"
        ]
      }
    },
    {
      "filePath": "src/components/alc-field-checker/alc-field-checker.tsx",
      "encapsulation": "none",
      "tag": "alc-field-checker",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "checkOnSubmit",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "check-on-submit",
          "reflectToAttr": true,
          "docs": "Verifica o formulário quando houver submissão.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "alc-alert"
      ],
      "dependencyGraph": {
        "alc-field-checker": [
          "alc-alert"
        ],
        "alc-alert": [
          "alc-icon"
        ]
      }
    },
    {
      "filePath": "src/components/alc-fieldset/alc-fieldset.tsx",
      "encapsulation": "none",
      "tag": "alc-fieldset",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "DEFAULT - Slot para o conteúdo do fieldset."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "errorMsg",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "error-msg",
          "reflectToAttr": true,
          "docs": "Texto de mensagem de erro.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "hint",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "hint",
          "reflectToAttr": true,
          "docs": "Texto de ajuda.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "legend",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "legend",
          "reflectToAttr": true,
          "docs": "Texto da legenda do fieldset.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": true,
          "docs": "Indica se o fieldset é obrigatório.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "DEFAULT",
          "docs": "Slot para o conteúdo do fieldset."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/alc-header/alc-header.tsx",
      "encapsulation": "none",
      "tag": "alc-header",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "DEFAULT - Slot para skip-links, identificação do ambiente, etc."
        },
        {
          "name": "slot",
          "text": "support - Slot para o conteúdo de apoio, como links de ajuda, contato etc."
        },
        {
          "name": "slot",
          "text": "fixed - Slot para conteúdo fixo, como botões de ações rápidas."
        },
        {
          "name": "slot",
          "text": "user - Slot para o menu de usuário."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "description",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "description",
          "reflectToAttr": true,
          "docs": "Descrição do sistema. Usualmente, o nome do sistema (se usada a sigla em \"name\"), descrição ou um complemento ao nome do sistema.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "homeUrl",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "home-url",
          "reflectToAttr": true,
          "docs": "URL para a página inicial do sistema.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "O nome do sistema.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "alc-home",
          "detail": "null",
          "bubbles": true,
          "complexType": {
            "original": "null",
            "resolved": "null",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Evento disparado quando o usuário aciona o link para a página inicial.\nExecutar `preventDefault()` evita que a navegação para a página inicial aconteça.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "scroll",
          "target": "window",
          "capture": false,
          "passive": true
        },
        {
          "event": "alc-nav-content",
          "target": "window",
          "capture": false,
          "passive": false
        },
        {
          "event": "resize",
          "target": "window",
          "capture": false,
          "passive": true
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "DEFAULT",
          "docs": "Slot para skip-links, identificação do ambiente, etc."
        },
        {
          "name": "fixed",
          "docs": "Slot para conteúdo fixo, como botões de ações rápidas."
        },
        {
          "name": "support",
          "docs": "Slot para o conteúdo de apoio, como links de ajuda, contato etc."
        },
        {
          "name": "user",
          "docs": "Slot para o menu de usuário."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "alc-header-id",
        "alc-icon",
        "alc-drawer"
      ],
      "dependencyGraph": {
        "alc-header": [
          "alc-header-id",
          "alc-icon",
          "alc-drawer"
        ],
        "alc-drawer": [
          "alc-icon"
        ]
      }
    },
    {
      "filePath": "src/components/alc-header-action/alc-header-action.tsx",
      "encapsulation": "none",
      "tag": "alc-header-action",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "DEFAULT - Slot para o conteúdo do componente."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "iconName",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-name",
          "reflectToAttr": true,
          "docs": "Nome do ícone a ser exibido.",
          "docsTags": [],
          "default": "'square'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "url",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "url",
          "reflectToAttr": false,
          "docs": "URL para a página de suporte. Usado quando a propriedade `variant` é `link` ou `menu-link`.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "variant",
          "type": "\"button\" | \"link\" | \"menu-item\" | \"menu-link\"",
          "complexType": {
            "original": "'button' | 'menu-item' | 'link' | 'menu-link'",
            "resolved": "\"button\" | \"link\" | \"menu-item\" | \"menu-link\"",
            "references": {}
          },
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": true,
          "docs": "Define o tipo de elemento a ser renderizado.",
          "docsTags": [],
          "default": "'button'",
          "values": [
            {
              "value": "button",
              "type": "string"
            },
            {
              "value": "link",
              "type": "string"
            },
            {
              "value": "menu-item",
              "type": "string"
            },
            {
              "value": "menu-link",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "alc-select",
          "detail": "{ originalEvent: KeyboardEvent | MouseEvent; }",
          "bubbles": true,
          "complexType": {
            "original": "{\n    originalEvent: MouseEvent | KeyboardEvent;\n  }",
            "resolved": "{ originalEvent: KeyboardEvent | MouseEvent; }",
            "references": {
              "MouseEvent": {
                "location": "global",
                "id": "global::MouseEvent"
              },
              "KeyboardEvent": {
                "location": "global",
                "id": "global::KeyboardEvent"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Evento disparado quando o usuário aciona o suporte.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "DEFAULT",
          "docs": "Slot para o conteúdo do componente."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "alc-icon",
        "alc-menu-item",
        "alc-menu-link"
      ],
      "dependencyGraph": {
        "alc-header-action": [
          "alc-icon",
          "alc-menu-item",
          "alc-menu-link"
        ],
        "alc-menu-item": [
          "alc-icon"
        ]
      }
    },
    {
      "filePath": "src/components/alc-header-id/alc-header-id.tsx",
      "encapsulation": "none",
      "tag": "alc-header-id",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "description",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "description",
          "reflectToAttr": true,
          "docs": "Descrição do sistema. Usualmente, o nome do sistema (se usada a sigla em \"name\"), o nome de um módulo, ou um complemento ao nome do sistema.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "homeUrl",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "home-url",
          "reflectToAttr": true,
          "docs": "URL para a página inicial do sistema. O nome do sistema será transformado em um link para essa URL.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "O nome do sistema. Será mostrado no cabeçalho, que deve estar presente em todas do sistema.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "alc-home",
          "detail": "null",
          "bubbles": true,
          "complexType": {
            "original": "null",
            "resolved": "null",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Evento disparado quando o usuário aciona o link para a página inicial.\nExecutar `preventDefault()` evita que a navegação para a página inicial aconteça.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "alc-header"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "alc-header": [
          "alc-header-id"
        ]
      }
    },
    {
      "filePath": "src/components/alc-header-notifications/alc-header-notifications.tsx",
      "encapsulation": "none",
      "tag": "alc-header-notifications",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "notifications",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "notifications",
          "reflectToAttr": true,
          "docs": "Número de notificações a serem exibidas no botão.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "url",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "url",
          "reflectToAttr": true,
          "docs": "URL para a página de notificações. Usado quando a propriedade `variant` é `link`.\nSe o `variant` for `button`, esse atributo será ignorado.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "variant",
          "type": "\"button\" | \"link\"",
          "complexType": {
            "original": "'button' | 'link'",
            "resolved": "\"button\" | \"link\"",
            "references": {}
          },
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": true,
          "docs": "Define o tipo de elemento a ser renderizado. Pode ser um button ou um link.",
          "docsTags": [],
          "default": "'button'",
          "values": [
            {
              "value": "button",
              "type": "string"
            },
            {
              "value": "link",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "alc-click",
          "detail": "null",
          "bubbles": true,
          "complexType": {
            "original": "null",
            "resolved": "null",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Evento disparado quando o usuário clica nas notificações. Pode ser cancelado.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "alc-badge",
        "alc-icon"
      ],
      "dependencyGraph": {
        "alc-header-notifications": [
          "alc-badge",
          "alc-icon"
        ]
      }
    },
    {
      "filePath": "src/components/alc-header-v1/alc-header-v1.tsx",
      "encapsulation": "none",
      "tag": "alc-header-v1",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "homeUrl",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "home-url",
          "reflectToAttr": true,
          "docs": "URL para a página inicial do sistema. O nome do sistema será transformado em um link para essa URL.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "O nome do sistema. Será mostrado no cabeçalho, que deve estar presente em todas do sistema.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "alc-home",
          "detail": "null",
          "bubbles": true,
          "complexType": {
            "original": "null",
            "resolved": "null",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Evento disparado quando o usuário aciona o link para a página inicial.\nExecutar `preventDefault()` evita que a navegação para a página inicial aconteça.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/alc-icon/alc-icon.tsx",
      "encapsulation": "none",
      "tag": "alc-icon",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "flipRtl",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "flip-rtl",
          "reflectToAttr": true,
          "docs": "Define se o ícone deve ser espelhado horizontalmente quando `dir` for `\"rtl\"`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "icon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": true,
          "docs": "Uma combinação de `name` e `src`.\nSe o valor for entendido como a URL de um `src`, ele definirá a propriedade `src`.\nCaso contrário, assume-se como o nome de ícone da biblioteca, e define a propriedade `name`.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": true,
          "docs": "Equivalente textual do ícone. Seu uso é semelhante ao atributo `alt` de uma imagem.\nEsse texto será lido por software leitor de tela, e utilizado no lugar do ícone se por qualquer motivo a imagem não puder ser carregada no navegador.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        },
        {
          "name": "lazy",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "lazy",
          "reflectToAttr": true,
          "docs": "Se ativado, a carga do ícone ocorrerá somente quando o componente estiver visível na _viewport_.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "Nome do ícone que será mostrado. Deve ser um dos nomes de ícone da biblioteca.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "sanitize",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "sanitize",
          "reflectToAttr": true,
          "docs": "Quando definido como `true`, o conteúdo SVG obtido via HTTP passará por uma limpeza.\nConteúdo que contenha algum elemento `<script>` ou atributo que comece com `on`, como `onclick`, será descartado.\nSendo descartado, a imagem não será mostrada.",
          "docsTags": [
            {
              "name": "default",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "src",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "src",
          "reflectToAttr": true,
          "docs": "Especifica o `src` de um arquivo SVG a ser usado como ícone.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "alc-alert",
        "alc-autocomplete",
        "alc-breadcrumb-item",
        "alc-datatable",
        "alc-details",
        "alc-drawer",
        "alc-expander",
        "alc-header",
        "alc-header-action",
        "alc-header-notifications",
        "alc-input-file",
        "alc-menu-item",
        "alc-menu-item-theme",
        "alc-modal",
        "alc-nav",
        "alc-nav-panel",
        "alc-pagination",
        "alc-scroll-panel",
        "alc-sidepanel",
        "alc-sort-indicator",
        "alc-user",
        "alc-user-menu"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "alc-alert": [
          "alc-icon"
        ],
        "alc-autocomplete": [
          "alc-icon"
        ],
        "alc-breadcrumb-item": [
          "alc-icon"
        ],
        "alc-datatable": [
          "alc-icon"
        ],
        "alc-details": [
          "alc-icon"
        ],
        "alc-drawer": [
          "alc-icon"
        ],
        "alc-expander": [
          "alc-icon"
        ],
        "alc-header": [
          "alc-icon"
        ],
        "alc-header-action": [
          "alc-icon"
        ],
        "alc-header-notifications": [
          "alc-icon"
        ],
        "alc-input-file": [
          "alc-icon"
        ],
        "alc-menu-item": [
          "alc-icon"
        ],
        "alc-menu-item-theme": [
          "alc-icon"
        ],
        "alc-modal": [
          "alc-icon"
        ],
        "alc-nav": [
          "alc-icon"
        ],
        "alc-nav-panel": [
          "alc-icon"
        ],
        "alc-pagination": [
          "alc-icon"
        ],
        "alc-scroll-panel": [
          "alc-icon"
        ],
        "alc-sidepanel": [
          "alc-icon"
        ],
        "alc-sort-indicator": [
          "alc-icon"
        ],
        "alc-user": [
          "alc-icon"
        ],
        "alc-user-menu": [
          "alc-icon"
        ]
      }
    },
    {
      "filePath": "src/components/alc-input-file/alc-input-file.tsx",
      "encapsulation": "none",
      "tag": "alc-input-file",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "accept",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "accept",
          "reflectToAttr": true,
          "docs": "Define tipos de arquivos específicos para envio. Padrão: Todos.",
          "docsTags": [],
          "default": "'*/*'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "buttonType",
          "type": "\"secondary\"",
          "complexType": {
            "original": "'secondary' | undefined",
            "resolved": "\"secondary\"",
            "references": {}
          },
          "mutable": false,
          "attr": "button-type",
          "reflectToAttr": true,
          "docs": "Define o tipo de botão que vai ser renderizado.",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "value": "secondary",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Desativa o componente.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "iconName",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-name",
          "reflectToAttr": true,
          "docs": "Ícone a ser exibido no início do input.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "idInput",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "id-input",
          "reflectToAttr": true,
          "docs": "Obrigatório. ID do input.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        },
        {
          "name": "mode",
          "type": "\"button\" | \"dropzone\" | \"input\"",
          "complexType": {
            "original": "'button' | 'input' | 'dropzone'",
            "resolved": "\"button\" | \"dropzone\" | \"input\"",
            "references": {}
          },
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": true,
          "docs": "Modo de visualização do componente.\nPode ser 'button', 'input' ou 'dropzone'.",
          "docsTags": [],
          "default": "'button'",
          "values": [
            {
              "value": "button",
              "type": "string"
            },
            {
              "value": "dropzone",
              "type": "string"
            },
            {
              "value": "input",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "multiple",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "multiple",
          "reflectToAttr": true,
          "docs": "Altera o funcionamento para aceitar vários arquivos.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": true,
          "docs": "Indica se é obrigatório.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [
        {
          "name": "clear",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "HTMLInputElement": {
                "location": "global",
                "id": "global::HTMLInputElement"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "clear() => Promise<void>",
          "parameters": [],
          "docs": "Limpa os dados do input e a lista de arquivos.",
          "docsTags": []
        },
        {
          "name": "getFiles",
          "returns": {
            "type": "Promise<AlcFileWithContent[]>",
            "docs": "Lista de arquivos com conteúdo."
          },
          "complexType": {
            "signature": "() => Promise<AlcFileWithContent[]>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "AlcFileWithContent": {
                "location": "local",
                "path": "/home/jenkins_slave/workspace/alcance-snapshots/packages/alcance/src/components/alc-input-file/alc-input-file.tsx",
                "id": "src/components/alc-input-file/alc-input-file.tsx::AlcFileWithContent"
              },
              "HTMLInputElement": {
                "location": "global",
                "id": "global::HTMLInputElement"
              }
            },
            "return": "Promise<AlcFileWithContent[]>"
          },
          "signature": "getFiles() => Promise<AlcFileWithContent[]>",
          "parameters": [],
          "docs": "Retorna array de arquivos selecionados com seus blobs.",
          "docsTags": [
            {
              "name": "returns",
              "text": "Lista de arquivos com conteúdo."
            }
          ]
        }
      ],
      "events": [
        {
          "event": "alc-file-selected",
          "detail": "AlcFileSelectedEvent",
          "bubbles": true,
          "complexType": {
            "original": "AlcFileSelectedEvent",
            "resolved": "AlcFileSelectedEvent",
            "references": {
              "AlcFileSelectedEvent": {
                "location": "local",
                "path": "/home/jenkins_slave/workspace/alcance-snapshots/packages/alcance/src/components/alc-input-file/alc-input-file.tsx",
                "id": "src/components/alc-input-file/alc-input-file.tsx::AlcFileSelectedEvent"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "alc-icon"
      ],
      "dependencyGraph": {
        "alc-input-file": [
          "alc-icon"
        ]
      }
    },
    {
      "filePath": "src/components/alc-loading/alc-loading.tsx",
      "encapsulation": "none",
      "tag": "alc-loading",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "Define se o indicador de carregamento aparece na tela. Quando o valor é `true` mostra o componente e quando o valor é `false` oculta.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "endMsg",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "end-msg",
          "reflectToAttr": true,
          "docs": "Texto anunciado ao leitor de tela quando mudar o estado para `active=false`.",
          "docsTags": [],
          "default": "'Finalizado.'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": true,
          "docs": "Texto mostrado na tela enquanto estiver carregando e também anunciado no leitor de tela quando o estado mudar para `active=true`.",
          "docsTags": [],
          "default": "'Carregando...'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "variant",
          "type": "\"button\" | \"container\" | \"full-screen\" | \"inline\"",
          "complexType": {
            "original": "'full-screen' | 'container' | 'inline' | 'button'",
            "resolved": "\"button\" | \"container\" | \"full-screen\" | \"inline\"",
            "references": {}
          },
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": true,
          "docs": "Define a variação visual do componente:\n- `'full-screen'`: ocupa a tela inteira.\n- `'container'`: ocupa o elemento pai.\n- `'inline'`: utilizado dentro de textos.\n- `'button'`: utilizado dentro de botões.",
          "docsTags": [],
          "default": "'full-screen'",
          "values": [
            {
              "value": "button",
              "type": "string"
            },
            {
              "value": "container",
              "type": "string"
            },
            {
              "value": "full-screen",
              "type": "string"
            },
            {
              "value": "inline",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [
        {
          "name": "hide",
          "returns": {
            "type": "Promise<boolean>",
            "docs": "O valor retornado é `true` se o loading foi realmente oculto com essa chamada ao método."
          },
          "complexType": {
            "signature": "() => Promise<boolean>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<boolean>"
          },
          "signature": "hide() => Promise<boolean>",
          "parameters": [],
          "docs": "Esconde o loading.",
          "docsTags": [
            {
              "name": "returns",
              "text": "O valor retornado é `true` se o loading foi realmente oculto com essa chamada ao método."
            }
          ]
        },
        {
          "name": "show",
          "returns": {
            "type": "Promise<boolean>",
            "docs": "O valor retornado é `true` se o loading foi realmente exibido com essa chamada ao método."
          },
          "complexType": {
            "signature": "() => Promise<boolean>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<boolean>"
          },
          "signature": "show() => Promise<boolean>",
          "parameters": [],
          "docs": "Exibe o loading.",
          "docsTags": [
            {
              "name": "returns",
              "text": "O valor retornado é `true` se o loading foi realmente exibido com essa chamada ao método."
            }
          ]
        }
      ],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "alc-datatable"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "alc-datatable": [
          "alc-loading"
        ]
      }
    },
    {
      "filePath": "src/components/alc-menu/alc-menu.tsx",
      "encapsulation": "none",
      "tag": "alc-menu",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [
        {
          "name": "refresh",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "refresh() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        },
        {
          "event": "alc-select",
          "capture": false,
          "passive": false
        },
        {
          "event": "focusin",
          "capture": false,
          "passive": false
        },
        {
          "event": "focusout",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "alc-datatable",
        "alc-user-menu"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "alc-datatable": [
          "alc-menu"
        ],
        "alc-user-menu": [
          "alc-menu"
        ]
      }
    },
    {
      "filePath": "src/components/alc-menu-item/alc-menu-item.tsx",
      "encapsulation": "none",
      "tag": "alc-menu-item",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- O rótulo do menu-item."
        },
        {
          "name": "slot",
          "text": "prefix - Prefixo do rótulo do menu-item.\nGeralmente, utilizado para um ícone associado à opção de menu."
        },
        {
          "name": "slot",
          "text": "suffix - Sufixo do rótulo do menu-item.\nGeralmente, utilizado para um ícone associado à opção de menu."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "checked",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "checked",
          "reflectToAttr": true,
          "docs": "Indica se o menu-item está ou não marcado. Usado quando `type=checkbox` ou `type=radio`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Indica se o menu-item está desabilitado.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "type",
          "type": "\"checkbox\" | \"normal\" | \"radio\"",
          "complexType": {
            "original": "'normal' | 'checkbox' | 'radio'",
            "resolved": "\"checkbox\" | \"normal\" | \"radio\"",
            "references": {}
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": true,
          "docs": "Tipo do menu-item.",
          "docsTags": [],
          "default": "'normal'",
          "values": [
            {
              "value": "checkbox",
              "type": "string"
            },
            {
              "value": "normal",
              "type": "string"
            },
            {
              "value": "radio",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "value",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "Valor do menu-item, que pode ser utilizado para identificar que item foi selecionado.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "alc-select",
          "detail": "{ originalEvent: KeyboardEvent | MouseEvent; }",
          "bubbles": true,
          "complexType": {
            "original": "{\n    originalEvent: MouseEvent | KeyboardEvent;\n  }",
            "resolved": "{ originalEvent: KeyboardEvent | MouseEvent; }",
            "references": {
              "MouseEvent": {
                "location": "global",
                "id": "global::MouseEvent"
              },
              "KeyboardEvent": {
                "location": "global",
                "id": "global::KeyboardEvent"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Evento disparado quando o menu-item é selecionado.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        },
        {
          "event": "click",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "O rótulo do menu-item."
        },
        {
          "name": "prefix",
          "docs": "Prefixo do rótulo do menu-item.\nGeralmente, utilizado para um ícone associado à opção de menu."
        },
        {
          "name": "suffix",
          "docs": "Sufixo do rótulo do menu-item.\nGeralmente, utilizado para um ícone associado à opção de menu."
        }
      ],
      "parts": [],
      "dependents": [
        "alc-datatable",
        "alc-header-action",
        "alc-menu-item-theme"
      ],
      "dependencies": [
        "alc-icon"
      ],
      "dependencyGraph": {
        "alc-menu-item": [
          "alc-icon"
        ],
        "alc-datatable": [
          "alc-menu-item"
        ],
        "alc-header-action": [
          "alc-menu-item"
        ],
        "alc-menu-item-theme": [
          "alc-menu-item"
        ]
      }
    },
    {
      "filePath": "src/components/alc-menu-item-theme/alc-menu-item-theme.tsx",
      "encapsulation": "none",
      "tag": "alc-menu-item-theme",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "alc-select",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "alc-user-menu"
      ],
      "dependencies": [
        "alc-menu-item",
        "alc-icon"
      ],
      "dependencyGraph": {
        "alc-menu-item-theme": [
          "alc-menu-item",
          "alc-icon"
        ],
        "alc-menu-item": [
          "alc-icon"
        ],
        "alc-user-menu": [
          "alc-menu-item-theme"
        ]
      }
    },
    {
      "filePath": "src/components/alc-menu-link/alc-menu-link.tsx",
      "encapsulation": "none",
      "tag": "alc-menu-link",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- A tag para navegação. Pode ser tanto a tag `<a>` quanto um `<routerlink>` no caso de uso com Vue."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Indica se o menu-link está desabilitado.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "value",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "Valor do menu-link, que pode ser utilizado para identificar que link foi selecionado.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "alc-select",
          "detail": "{ originalEvent: KeyboardEvent | MouseEvent; }",
          "bubbles": true,
          "complexType": {
            "original": "{\n    originalEvent: MouseEvent | KeyboardEvent;\n  }",
            "resolved": "{ originalEvent: KeyboardEvent | MouseEvent; }",
            "references": {
              "MouseEvent": {
                "location": "global",
                "id": "global::MouseEvent"
              },
              "KeyboardEvent": {
                "location": "global",
                "id": "global::KeyboardEvent"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Evento disparado quando o menu-link é selecionado.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A tag para navegação. Pode ser tanto a tag `<a>` quanto um `<routerlink>` no caso de uso com Vue."
        }
      ],
      "parts": [],
      "dependents": [
        "alc-header-action",
        "alc-user-menu"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "alc-header-action": [
          "alc-menu-link"
        ],
        "alc-user-menu": [
          "alc-menu-link"
        ]
      }
    },
    {
      "filePath": "src/components/alc-modal/alc-modal.tsx",
      "encapsulation": "none",
      "tag": "alc-modal",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- O conteúdo da modal."
        },
        {
          "name": "slot",
          "text": "header - O conteúdo do cabeçalho da modal."
        },
        {
          "name": "slot",
          "text": "footer - O conteúdo do rodapé da modal."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "headerText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "header-text",
          "reflectToAttr": true,
          "docs": "Título da modal",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "open",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "open",
          "reflectToAttr": false,
          "docs": "Define se a modal está aberta ou fechada.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "preventOverlayClose",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "prevent-overlay-close",
          "reflectToAttr": true,
          "docs": "Previne a modal de fechar ao clicar no overlay.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "size",
          "type": "\"lg\" | \"md\" | \"sm\" | \"xl\"",
          "complexType": {
            "original": "'sm' | 'md' | 'lg' | 'xl'",
            "resolved": "\"lg\" | \"md\" | \"sm\" | \"xl\"",
            "references": {}
          },
          "mutable": true,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "Tamanho da modal",
          "docsTags": [],
          "default": "'md'",
          "values": [
            {
              "value": "lg",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            },
            {
              "value": "sm",
              "type": "string"
            },
            {
              "value": "xl",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [
        {
          "name": "hide",
          "returns": {
            "type": "Promise<boolean>",
            "docs": "O valor retornado é `true` se a modal foi realmente oculta com essa chamada ao método."
          },
          "complexType": {
            "signature": "() => Promise<boolean>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<boolean>"
          },
          "signature": "hide() => Promise<boolean>",
          "parameters": [],
          "docs": "Método para fechar modal.",
          "docsTags": [
            {
              "name": "returns",
              "text": "O valor retornado é `true` se a modal foi realmente oculta com essa chamada ao método."
            }
          ]
        },
        {
          "name": "show",
          "returns": {
            "type": "Promise<boolean>",
            "docs": "O valor retornado é `true` se a modal foi realmente exibida com essa chamada ao método."
          },
          "complexType": {
            "signature": "() => Promise<boolean>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<boolean>"
          },
          "signature": "show() => Promise<boolean>",
          "parameters": [],
          "docs": "Método para abrir modal.",
          "docsTags": [
            {
              "name": "returns",
              "text": "O valor retornado é `true` se a modal foi realmente exibida com essa chamada ao método."
            }
          ]
        }
      ],
      "events": [
        {
          "event": "alc-after-hide",
          "detail": "null",
          "bubbles": true,
          "complexType": {
            "original": "null",
            "resolved": "null",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Evento disparado quando a modal fechou",
          "docsTags": []
        },
        {
          "event": "alc-after-show",
          "detail": "null",
          "bubbles": true,
          "complexType": {
            "original": "null",
            "resolved": "null",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Evento disparado quando a modal abriu",
          "docsTags": []
        },
        {
          "event": "alc-focus-after-hide",
          "detail": "null",
          "bubbles": true,
          "complexType": {
            "original": "null",
            "resolved": "null",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Evento disparado quando a modal fechou e esta pronto para lidar com foco.",
          "docsTags": []
        },
        {
          "event": "alc-hide",
          "detail": "{ from: \"header-button\" | \"footer-button\" | \"keyboard\" | \"overlay\"; }",
          "bubbles": true,
          "complexType": {
            "original": "{\n    from: 'header-button' | 'footer-button' | 'keyboard' | 'overlay';\n  }",
            "resolved": "{ from: \"header-button\" | \"footer-button\" | \"keyboard\" | \"overlay\"; }",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Evento disparado quando a modal vai fechar",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "keydown",
          "target": "document",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "O conteúdo da modal."
        },
        {
          "name": "footer",
          "docs": "O conteúdo do rodapé da modal."
        },
        {
          "name": "header",
          "docs": "O conteúdo do cabeçalho da modal."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "alc-icon"
      ],
      "dependencyGraph": {
        "alc-modal": [
          "alc-icon"
        ]
      }
    },
    {
      "filePath": "src/components/alc-nav/alc-nav.tsx",
      "encapsulation": "none",
      "tag": "alc-nav",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "DEFAULT - Slot para o conteúdo principal do nav. Tipicamente, os elementos de navegação pelas funcionalidades do sistema."
        },
        {
          "name": "slot",
          "text": "footer - Slot nomeado para adicionar rodapé no nav. Tipicamente, os elementos de navegação acessórios e configurações, incluindo o seletor de tema."
        },
        {
          "name": "slot",
          "text": "header - Slot nomeado para adicionar cabeçalho no nav. Tipicamente, a identificação do usuário logado no sistema."
        }
      ],
      "usage": {},
      "props": [],
      "methods": [
        {
          "name": "setSelectedItem",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(listItem?: HTMLElement) => Promise<void>",
            "parameters": [
              {
                "name": "listItem",
                "type": "HTMLElement",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "HTMLElement": {
                "location": "global",
                "id": "global::HTMLElement"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setSelectedItem(listItem?: HTMLElement) => Promise<void>",
          "parameters": [
            {
              "name": "listItem",
              "type": "HTMLElement",
              "docs": ""
            }
          ],
          "docs": "Seleciona o item passado pelo parâmetro. Se nenhum valor for passado, apenas remove o item atualmente selecionado.",
          "docsTags": []
        },
        {
          "name": "togglePanel",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(panel: HTMLElement) => Promise<void>",
            "parameters": [
              {
                "name": "panel",
                "type": "HTMLElement",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "HTMLElement": {
                "location": "global",
                "id": "global::HTMLElement"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "togglePanel(panel: HTMLElement) => Promise<void>",
          "parameters": [
            {
              "name": "panel",
              "type": "HTMLElement",
              "docs": ""
            }
          ],
          "docs": "Abre ou fecha o painel especificado pelo parâmetro.",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [
        {
          "event": "resize",
          "target": "window",
          "capture": false,
          "passive": true
        },
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "DEFAULT",
          "docs": "Slot para o conteúdo principal do nav. Tipicamente, os elementos de navegação pelas funcionalidades do sistema."
        },
        {
          "name": "footer",
          "docs": "Slot nomeado para adicionar rodapé no nav. Tipicamente, os elementos de navegação acessórios e configurações, incluindo o seletor de tema."
        },
        {
          "name": "header",
          "docs": "Slot nomeado para adicionar cabeçalho no nav. Tipicamente, a identificação do usuário logado no sistema."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "alc-icon"
      ],
      "dependencyGraph": {
        "alc-nav": [
          "alc-icon"
        ]
      }
    },
    {
      "filePath": "src/components/alc-nav-panel/alc-nav-panel.tsx",
      "encapsulation": "none",
      "tag": "alc-nav-panel",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "DEFAULT - Slot para o conteúdo do nav-panel."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "open",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "open",
          "reflectToAttr": true,
          "docs": "Indica se o nav-panel está visível. O valor inicial desse atributo será definido dinamicamente pelo próprio nav-panel.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [
        {
          "name": "hide",
          "returns": {
            "type": "Promise<boolean>",
            "docs": "O valor retornado é `true` se o nav-panel foi fechado com a chamada do método."
          },
          "complexType": {
            "signature": "() => Promise<boolean>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<boolean>"
          },
          "signature": "hide() => Promise<boolean>",
          "parameters": [],
          "docs": "Fecha o nav-panel.",
          "docsTags": [
            {
              "name": "returns",
              "text": "O valor retornado é `true` se o nav-panel foi fechado com a chamada do método."
            }
          ]
        },
        {
          "name": "show",
          "returns": {
            "type": "Promise<boolean>",
            "docs": "O valor retornado é `true` se o nav-panel foi exibido com a chamada do método."
          },
          "complexType": {
            "signature": "() => Promise<boolean>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<boolean>"
          },
          "signature": "show() => Promise<boolean>",
          "parameters": [],
          "docs": "Abre o nav-panel.",
          "docsTags": [
            {
              "name": "returns",
              "text": "O valor retornado é `true` se o nav-panel foi exibido com a chamada do método."
            }
          ]
        }
      ],
      "events": [
        {
          "event": "alc-state-change",
          "detail": "AlcStateEventTypes",
          "bubbles": true,
          "complexType": {
            "original": "AlcStateEventTypes",
            "resolved": "AlcStateEventTypes",
            "references": {
              "AlcStateEventTypes": {
                "location": "local",
                "path": "/home/jenkins_slave/workspace/alcance-snapshots/packages/alcance/src/components/alc-nav-panel/alc-nav-panel.tsx",
                "id": "src/components/alc-nav-panel/alc-nav-panel.tsx::AlcStateEventTypes"
              }
            }
          },
          "cancelable": false,
          "composed": true,
          "docs": "Evento disparado quando o estado do nav-panel é alterado.",
          "docsTags": []
        },
        {
          "event": "alc-state-request",
          "detail": "AlcStateEventTypes",
          "bubbles": true,
          "complexType": {
            "original": "AlcStateEventTypes",
            "resolved": "AlcStateEventTypes",
            "references": {
              "AlcStateEventTypes": {
                "location": "local",
                "path": "/home/jenkins_slave/workspace/alcance-snapshots/packages/alcance/src/components/alc-nav-panel/alc-nav-panel.tsx",
                "id": "src/components/alc-nav-panel/alc-nav-panel.tsx::AlcStateEventTypes"
              }
            }
          },
          "cancelable": false,
          "composed": true,
          "docs": "Evento disparado quando o nav-panel precisa recuperar o estado.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "resize",
          "target": "window",
          "capture": false,
          "passive": true
        },
        {
          "event": "click",
          "target": "body",
          "capture": false,
          "passive": false
        },
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "DEFAULT",
          "docs": "Slot para o conteúdo do nav-panel."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "alc-icon"
      ],
      "dependencyGraph": {
        "alc-nav-panel": [
          "alc-icon"
        ]
      }
    },
    {
      "filePath": "src/components/alc-pagination/alc-pagination.tsx",
      "encapsulation": "none",
      "tag": "alc-pagination",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "currentPage",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": true,
          "attr": "current-page",
          "reflectToAttr": true,
          "docs": "Número da página atual",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "totalPages",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": true,
          "attr": "total-pages",
          "reflectToAttr": true,
          "docs": "Número total de páginas.",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "alc-change",
          "detail": "{ from: number; to: number; using: \"isFirst\" | \"isPrev\" | \"isLast\" | \"isNext\" | \"isSelect\"; }",
          "bubbles": true,
          "complexType": {
            "original": "{\n    from: number;\n    to: number;\n    using: 'isFirst' | 'isPrev' | 'isLast' | 'isNext' | 'isSelect'\n  }",
            "resolved": "{ from: number; to: number; using: \"isFirst\" | \"isPrev\" | \"isLast\" | \"isNext\" | \"isSelect\"; }",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Disparado quando ocorre a mudança de uma página para outra.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "alc-datatable"
      ],
      "dependencies": [
        "alc-icon"
      ],
      "dependencyGraph": {
        "alc-pagination": [
          "alc-icon"
        ],
        "alc-datatable": [
          "alc-pagination"
        ]
      }
    },
    {
      "filePath": "src/components/alc-popup/alc-popup.tsx",
      "encapsulation": "none",
      "tag": "alc-popup",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "DEFAULT - Slot para o elemento principal do popup."
        },
        {
          "name": "slot",
          "text": "anchor - Slot que serve como âncora e aciona a abertura do popup."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "Aciona a abertura do popup.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "arrow",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "arrow",
          "reflectToAttr": true,
          "docs": "Adiciona arrow no popup.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "distance",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "distance",
          "reflectToAttr": true,
          "docs": "Define a distância entre o popup e âncora.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "flip",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "flip",
          "reflectToAttr": true,
          "docs": "Quando definido como `true`, troca o posicionamento (placement) do popup para mantê-lo visível.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "placement",
          "type": "\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"",
          "complexType": {
            "original": "PopupPlacement",
            "resolved": "\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"",
            "references": {
              "PopupPlacement": {
                "location": "local",
                "path": "/home/jenkins_slave/workspace/alcance-snapshots/packages/alcance/src/components/alc-popup/alc-popup.tsx",
                "id": "src/components/alc-popup/alc-popup.tsx::PopupPlacement"
              }
            }
          },
          "mutable": false,
          "attr": "placement",
          "reflectToAttr": true,
          "docs": "Define o posicionamento do popup.",
          "docsTags": [],
          "default": "'bottom'",
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "bottom-end",
              "type": "string"
            },
            {
              "value": "bottom-start",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "left-end",
              "type": "string"
            },
            {
              "value": "left-start",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "right-end",
              "type": "string"
            },
            {
              "value": "right-start",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            },
            {
              "value": "top-end",
              "type": "string"
            },
            {
              "value": "top-start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "shift",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "shift",
          "reflectToAttr": true,
          "docs": "Quando definido como `true`, desloca o popup ao longo do eixo para mantê-lo visível quando cortado.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "strategy",
          "type": "\"absolute\" | \"fixed\"",
          "complexType": {
            "original": "'absolute' | 'fixed'",
            "resolved": "\"absolute\" | \"fixed\"",
            "references": {}
          },
          "mutable": false,
          "attr": "strategy",
          "reflectToAttr": true,
          "docs": "Determina como o pop-up é posicionado. A estratégia `absoluta` funciona bem na maioria dos casos.\nSe o overflow cortar o popup, usar a posição `fixed` muitas vezes pode contornar isso.",
          "docsTags": [],
          "default": "'absolute'",
          "values": [
            {
              "value": "absolute",
              "type": "string"
            },
            {
              "value": "fixed",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "sync",
          "type": "\"both\" | \"height\" | \"width\"",
          "complexType": {
            "original": "'width' | 'height' | 'both'",
            "resolved": "\"both\" | \"height\" | \"width\"",
            "references": {}
          },
          "mutable": false,
          "attr": "sync",
          "reflectToAttr": true,
          "docs": "Syncs the popup's width or height to that of the anchor element.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "value": "both",
              "type": "string"
            },
            {
              "value": "height",
              "type": "string"
            },
            {
              "value": "width",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "DEFAULT",
          "docs": "Slot para o elemento principal do popup."
        },
        {
          "name": "anchor",
          "docs": "Slot que serve como âncora e aciona a abertura do popup."
        }
      ],
      "parts": [],
      "dependents": [
        "alc-autocomplete",
        "alc-dropdown",
        "alc-tooltip"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "alc-autocomplete": [
          "alc-popup"
        ],
        "alc-dropdown": [
          "alc-popup"
        ],
        "alc-tooltip": [
          "alc-popup"
        ]
      }
    },
    {
      "filePath": "src/components/alc-radio/alc-radio.tsx",
      "encapsulation": "none",
      "tag": "alc-radio",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "DEFAULT - Slot para o elemento input do tipo radio."
        },
        {
          "name": "slot",
          "text": "label - Slot para o elemento label do radio. Há opção de adicionar apenas o texto por meio da propriedade `label`."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "errorMsg",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "error-msg",
          "reflectToAttr": true,
          "docs": "Texto de mensagem de erro.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "hint",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "hint",
          "reflectToAttr": true,
          "docs": "Texto de ajuda.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": true,
          "docs": "Texto do label do input. Há opção de adicionar o elemento label pelo slot \"label\".",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "DEFAULT",
          "docs": "Slot para o elemento input do tipo radio."
        },
        {
          "name": "label",
          "docs": "Slot para o elemento label do radio. Há opção de adicionar apenas o texto por meio da propriedade `label`."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/alc-scroll-panel/alc-scroll-panel.tsx",
      "encapsulation": "none",
      "tag": "alc-scroll-panel",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "hasFocus",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "has-focus",
          "reflectToAttr": true,
          "docs": "Define se há foco.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "scrollToElement",
          "type": "HTMLElement",
          "complexType": {
            "original": "HTMLElement",
            "resolved": "HTMLElement",
            "references": {
              "HTMLElement": {
                "location": "global",
                "id": "global::HTMLElement"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Define para qual elemento o scroll vai.",
          "docsTags": [],
          "values": [
            {
              "type": "HTMLElement"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "themeLoaded",
          "target": "window",
          "capture": false,
          "passive": false
        },
        {
          "event": "resize",
          "target": "window",
          "capture": false,
          "passive": true
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "alc-tabs"
      ],
      "dependencies": [
        "alc-icon"
      ],
      "dependencyGraph": {
        "alc-scroll-panel": [
          "alc-icon"
        ],
        "alc-tabs": [
          "alc-scroll-panel"
        ]
      }
    },
    {
      "filePath": "src/components/alc-sidepanel/alc-sidepanel.tsx",
      "encapsulation": "none",
      "tag": "alc-sidepanel",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "DEFAULT - Slot para o conteúdo do sidepanel."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "visible",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "visible",
          "reflectToAttr": true,
          "docs": "Indica se o sidepanel está visível.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [
        {
          "name": "hide",
          "returns": {
            "type": "Promise<boolean>",
            "docs": "O valor retornado é `true` se o painel foi dispensado com a chamada do método."
          },
          "complexType": {
            "signature": "() => Promise<boolean>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<boolean>"
          },
          "signature": "hide() => Promise<boolean>",
          "parameters": [],
          "docs": "Fecha o sidepanel",
          "docsTags": [
            {
              "name": "returns",
              "text": "O valor retornado é `true` se o painel foi dispensado com a chamada do método."
            }
          ]
        },
        {
          "name": "show",
          "returns": {
            "type": "Promise<boolean>",
            "docs": "O valor retornado é `true` se o painel foi exibido com a chamada do método."
          },
          "complexType": {
            "signature": "() => Promise<boolean>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<boolean>"
          },
          "signature": "show() => Promise<boolean>",
          "parameters": [],
          "docs": "Abre o sidepanel.",
          "docsTags": [
            {
              "name": "returns",
              "text": "O valor retornado é `true` se o painel foi exibido com a chamada do método."
            }
          ]
        }
      ],
      "events": [
        {
          "event": "alc-state-change",
          "detail": "{ state: { visible: boolean; }; }",
          "bubbles": true,
          "complexType": {
            "original": "{state: {visible: boolean}}",
            "resolved": "{ state: { visible: boolean; }; }",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Evento disparado quando o estado do sidepanel é alterado.",
          "docsTags": []
        },
        {
          "event": "alc-state-request",
          "detail": "{ state: { visible: boolean; }; }",
          "bubbles": true,
          "complexType": {
            "original": "{state: {visible: boolean}}",
            "resolved": "{ state: { visible: boolean; }; }",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Evento disparado quando o sidepanel precisa recuperar o estado.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "resize",
          "target": "window",
          "capture": false,
          "passive": true
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "DEFAULT",
          "docs": "Slot para o conteúdo do sidepanel."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "alc-icon",
        "alc-drawer"
      ],
      "dependencyGraph": {
        "alc-sidepanel": [
          "alc-icon",
          "alc-drawer"
        ],
        "alc-drawer": [
          "alc-icon"
        ]
      }
    },
    {
      "filePath": "src/components/alc-skip-link/alc-skip-link.tsx",
      "encapsulation": "none",
      "tag": "alc-skip-link",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "DEFAULT - Slot para inserção do texto que indica para onde o usuário vai saltar na página. A parte inicial é fixa: \"Ir para\". O texto no slot é concatenado a ele. Por exemplo: \"Ir para _conteúdo_.\""
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "anchor",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "anchor",
          "reflectToAttr": true,
          "docs": "Valor do `id` do elemento para onde o usuário navegará ao acionar o link.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "DEFAULT",
          "docs": "Slot para inserção do texto que indica para onde o usuário vai saltar na página. A parte inicial é fixa: \"Ir para\". O texto no slot é concatenado a ele. Por exemplo: \"Ir para _conteúdo_.\""
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/alc-skip-to-nav/alc-skip-to-nav.tsx",
      "encapsulation": "none",
      "tag": "alc-skip-to-nav",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/alc-sort-indicator/alc-sort-indicator.tsx",
      "encapsulation": "none",
      "tag": "alc-sort-indicator",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "sorting",
          "type": "\"asc\" | \"desc\" | \"none\"",
          "complexType": {
            "original": "'asc' | 'desc' | 'none'",
            "resolved": "\"asc\" | \"desc\" | \"none\"",
            "references": {}
          },
          "mutable": false,
          "attr": "sorting",
          "reflectToAttr": true,
          "docs": "Define indicação do sort.",
          "docsTags": [],
          "default": "'none'",
          "values": [
            {
              "value": "asc",
              "type": "string"
            },
            {
              "value": "desc",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "alc-datatable"
      ],
      "dependencies": [
        "alc-icon"
      ],
      "dependencyGraph": {
        "alc-sort-indicator": [
          "alc-icon"
        ],
        "alc-datatable": [
          "alc-sort-indicator"
        ]
      }
    },
    {
      "filePath": "src/components/alc-tab/alc-tab.tsx",
      "encapsulation": "none",
      "tag": "alc-tab",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "contentFocus",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "content-focus",
          "reflectToAttr": true,
          "docs": "Se, dentro da tab, o primeiro elemento com conteúdo significativo for focalizável, deve ser definido como `true`.\nCaso contrário, deve ser mantido o valor padrão (`false`).",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": true,
          "docs": "Rótulo da tab.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "selected",
          "reflectToAttr": true,
          "docs": "Indica se a tab está ou não selecionada.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "tab",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "tab",
          "reflectToAttr": true,
          "docs": "Identificador único da tab.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/alc-tab-button/alc-tab-button.tsx",
      "encapsulation": "none",
      "tag": "alc-tab-button",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "selected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "selected",
          "reflectToAttr": true,
          "docs": "Indica que a tab está selecionada.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "tab",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "tab",
          "reflectToAttr": true,
          "docs": "Um identificador da tab deve ser fornecido para cada `alc-tab`.\nIsso é usado internamente para referenciar a tab selecionada.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "alc-click",
          "detail": "{ tab: string; }",
          "bubbles": true,
          "complexType": {
            "original": "{\n    tab: string\n  }",
            "resolved": "{ tab: string; }",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Evento disparado ao clicar em alc-tab-button",
          "docsTags": []
        },
        {
          "event": "alc-first",
          "detail": "null",
          "bubbles": true,
          "complexType": {
            "original": "null",
            "resolved": "null",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Evento disparado para indicar que o primeiro alc-tab-button deve ser selecionado",
          "docsTags": []
        },
        {
          "event": "alc-last",
          "detail": "null",
          "bubbles": true,
          "complexType": {
            "original": "null",
            "resolved": "null",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Evento disparado para indicar que o último alc-tab-button deve ser selecionado",
          "docsTags": []
        },
        {
          "event": "alc-next",
          "detail": "null",
          "bubbles": true,
          "complexType": {
            "original": "null",
            "resolved": "null",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Evento disparado para indicar que o alc-tab-button seguinte deve ser selecionado",
          "docsTags": []
        },
        {
          "event": "alc-previous",
          "detail": "null",
          "bubbles": true,
          "complexType": {
            "original": "null",
            "resolved": "null",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Evento disparado para indicar que o alc-tab-button anterior deve ser selecionado",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "alc-tabs"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "alc-tabs": [
          "alc-tab-button"
        ]
      }
    },
    {
      "filePath": "src/components/alc-table/alc-table.tsx",
      "encapsulation": "none",
      "tag": "alc-table",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/alc-tabs/alc-tabs.tsx",
      "encapsulation": "none",
      "tag": "alc-tabs",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "selected",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "selected",
          "reflectToAttr": true,
          "docs": "O identificador da tab atualmente selecionada",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [
        {
          "name": "select",
          "returns": {
            "type": "Promise<boolean>",
            "docs": ""
          },
          "complexType": {
            "signature": "(tab: string | HTMLAlcTabElement) => Promise<boolean>",
            "parameters": [
              {
                "name": "tab",
                "type": "string | HTMLAlcTabElement",
                "docs": "A tab a ser selecionada. Se passada como string, deve ser o valor da propriedade `tab` da tab."
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "HTMLAlcTabElement": {
                "location": "global",
                "id": "global::HTMLAlcTabElement"
              }
            },
            "return": "Promise<boolean>"
          },
          "signature": "select(tab: string | HTMLAlcTabElement) => Promise<boolean>",
          "parameters": [
            {
              "name": "tab",
              "type": "string | HTMLAlcTabElement",
              "docs": "A tab a ser selecionada. Se passada como string, deve ser o valor da propriedade `tab` da tab."
            }
          ],
          "docs": "Seleciona uma tab pelo valor de sua propriedade `tab` ou pela referência do elemento.",
          "docsTags": [
            {
              "name": "param",
              "text": "tab A tab a ser selecionada. Se passada como string, deve ser o valor da propriedade `tab` da tab."
            }
          ]
        }
      ],
      "events": [
        {
          "event": "alc-change",
          "detail": "{ tab: string; }",
          "bubbles": true,
          "complexType": {
            "original": "{\n    tab: string\n  }",
            "resolved": "{ tab: string; }",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Disparado quando houve uma mudança de tab",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "alc-click",
          "capture": false,
          "passive": false
        },
        {
          "event": "alc-next",
          "capture": false,
          "passive": false
        },
        {
          "event": "alc-previous",
          "capture": false,
          "passive": false
        },
        {
          "event": "alc-first",
          "capture": false,
          "passive": false
        },
        {
          "event": "alc-last",
          "capture": false,
          "passive": false
        },
        {
          "event": "themeLoaded",
          "target": "window",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [
        {
          "name": "--bg-color",
          "annotation": "prop",
          "docs": "Cor de fundo da tab ativa e seu conteúdo.",
          "mode": "theme"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "alc-tab-button",
        "alc-scroll-panel"
      ],
      "dependencyGraph": {
        "alc-tabs": [
          "alc-tab-button",
          "alc-scroll-panel"
        ],
        "alc-scroll-panel": [
          "alc-icon"
        ]
      }
    },
    {
      "filePath": "src/components/alc-theme/alc-theme.tsx",
      "encapsulation": "none",
      "tag": "alc-theme",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "alc-field"
      ],
      "dependencyGraph": {
        "alc-theme": [
          "alc-field"
        ]
      }
    },
    {
      "filePath": "src/components/alc-tooltip/alc-tooltip.tsx",
      "encapsulation": "none",
      "tag": "alc-tooltip",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "Indica se o tooltip esta ativo ou não. Pode-se usar essa propriedade em vez dos métodos show/hide.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "content",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "content",
          "reflectToAttr": true,
          "docs": "Indica o conteudo textual do tooltip. Pode-se usar o slot em vez dessa propriedade.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "placement",
          "type": "\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"",
          "complexType": {
            "original": "PopupPlacement",
            "resolved": "\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"",
            "references": {
              "PopupPlacement": {
                "location": "import",
                "path": "../alc-popup/alc-popup",
                "id": "src/components/alc-popup/alc-popup.tsx::PopupPlacement"
              }
            }
          },
          "mutable": false,
          "attr": "placement",
          "reflectToAttr": true,
          "docs": "Define o posicionamento do tooltip.",
          "docsTags": [],
          "default": "'top'",
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "bottom-end",
              "type": "string"
            },
            {
              "value": "bottom-start",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "left-end",
              "type": "string"
            },
            {
              "value": "left-start",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "right-end",
              "type": "string"
            },
            {
              "value": "right-start",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            },
            {
              "value": "top-end",
              "type": "string"
            },
            {
              "value": "top-start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "strategy",
          "type": "\"absolute\" | \"fixed\"",
          "complexType": {
            "original": "'absolute' | 'fixed'",
            "resolved": "\"absolute\" | \"fixed\"",
            "references": {}
          },
          "mutable": false,
          "attr": "strategy",
          "reflectToAttr": true,
          "docs": "Define o posicionamento do tooltip.",
          "docsTags": [],
          "default": "'absolute'",
          "values": [
            {
              "value": "absolute",
              "type": "string"
            },
            {
              "value": "fixed",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "trigger",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "trigger",
          "reflectToAttr": true,
          "docs": "Define como o tooltip vai ser ativado. Pode ser: `click` , `hover` , `focus` e/ou `manual`. Pode adicionar mais de um, separando por espaço. Ex.: 'hover focus'.",
          "docsTags": [],
          "default": "'hover focus'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [
        {
          "name": "hide",
          "returns": {
            "type": "Promise<boolean>",
            "docs": "O valor retornado é `true` se o tooltip foi realmente dispensado com essa chamada ao método."
          },
          "complexType": {
            "signature": "() => Promise<boolean>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<boolean>"
          },
          "signature": "hide() => Promise<boolean>",
          "parameters": [],
          "docs": "Fecha o tooltip.",
          "docsTags": [
            {
              "name": "returns",
              "text": "O valor retornado é `true` se o tooltip foi realmente dispensado com essa chamada ao método."
            }
          ]
        },
        {
          "name": "show",
          "returns": {
            "type": "Promise<boolean>",
            "docs": "O valor retornado é `true` se o tooltip foi realmente exibido com essa chamada ao método."
          },
          "complexType": {
            "signature": "() => Promise<boolean>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<boolean>"
          },
          "signature": "show() => Promise<boolean>",
          "parameters": [],
          "docs": "Exibe o tooltip.",
          "docsTags": [
            {
              "name": "returns",
              "text": "O valor retornado é `true` se o tooltip foi realmente exibido com essa chamada ao método."
            }
          ]
        }
      ],
      "events": [
        {
          "event": "alc-after-hide",
          "detail": "null",
          "bubbles": true,
          "complexType": {
            "original": "null",
            "resolved": "null",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Evento disparado quando o tooltip fechou.",
          "docsTags": []
        },
        {
          "event": "alc-after-show",
          "detail": "null",
          "bubbles": true,
          "complexType": {
            "original": "null",
            "resolved": "null",
            "references": {}
          },
          "cancelable": false,
          "composed": true,
          "docs": "Evento disparado quando o tooltip abriu",
          "docsTags": []
        },
        {
          "event": "alc-hide",
          "detail": "{ from: \"method\" | \"focus\" | \"click\" | \"keyboard\" | \"hover\"; }",
          "bubbles": true,
          "complexType": {
            "original": "{\n    from: 'click' | 'hover' | 'focus' | 'keyboard' | 'method';\n  }",
            "resolved": "{ from: \"method\" | \"focus\" | \"click\" | \"keyboard\" | \"hover\"; }",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Evento disparado quando o tooltip vai fechar.",
          "docsTags": []
        },
        {
          "event": "alc-show",
          "detail": "{ from: \"method\" | \"focus\" | \"click\" | \"hover\"; }",
          "bubbles": true,
          "complexType": {
            "original": "{\n    from: 'click' | 'hover' | 'focus' | 'method';\n  }",
            "resolved": "{ from: \"method\" | \"focus\" | \"click\" | \"hover\"; }",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Evento disparado quando o tooltip vai abrir",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        },
        {
          "event": "focus",
          "capture": true,
          "passive": false
        },
        {
          "event": "blur",
          "capture": true,
          "passive": false
        },
        {
          "event": "mouseover",
          "capture": false,
          "passive": true
        },
        {
          "event": "mouseout",
          "capture": false,
          "passive": true
        },
        {
          "event": "click",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "alc-popup"
      ],
      "dependencyGraph": {
        "alc-tooltip": [
          "alc-popup"
        ]
      }
    },
    {
      "filePath": "src/components/alc-user/alc-user.tsx",
      "encapsulation": "none",
      "tag": "alc-user",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "DEFAULT - Informação adicional do usuário, não estruturada pelo componente, pode ser colocada aqui. Será exibida imediatamente antes do link \"Sair\"."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "imgSrc",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "img-src",
          "reflectToAttr": true,
          "docs": "Imagem do usuário. Pode ser qualquer valor válido para o atributo `src` da tag `img` do HTML.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "logoutUrl",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "logout-url",
          "reflectToAttr": true,
          "docs": "URL que efetua o logout do usuário.",
          "docsTags": [],
          "default": "'#'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "Nome do usuário.",
          "docsTags": [],
          "default": "'Usuário'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "registrationNumber",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "registration-number",
          "reflectToAttr": true,
          "docs": "Número de matrícula ou ponto do usuário.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "alc-logout",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Evento disparado quando o link \"Sair\" é acionado. Se cancelado, não navegará para a URL de logout.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "DEFAULT",
          "docs": "Informação adicional do usuário, não estruturada pelo componente, pode ser colocada aqui. Será exibida imediatamente antes do link \"Sair\"."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "alc-icon"
      ],
      "dependencyGraph": {
        "alc-user": [
          "alc-icon"
        ]
      }
    },
    {
      "filePath": "src/components/alc-user-menu/alc-user-menu.tsx",
      "encapsulation": "none",
      "tag": "alc-user-menu",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "imgSrc",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "img-src",
          "reflectToAttr": true,
          "docs": "URL da imagem do usuário. Se não for fornecida, será exibido um ícone padrão.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "logoutUrl",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "logout-url",
          "reflectToAttr": true,
          "docs": "URL que efetua o logout do usuário. O link \"Sair\" navegará para essa URL.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "Nome do usuário.",
          "docsTags": [],
          "default": "'Usuário'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "registrationNumber",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "registration-number",
          "reflectToAttr": true,
          "docs": "Número de matrícula ou ponto do usuário.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "variation",
          "type": "\"desktop\" | \"mobile\"",
          "complexType": {
            "original": "'mobile' | 'desktop'",
            "resolved": "\"desktop\" | \"mobile\"",
            "references": {}
          },
          "mutable": false,
          "attr": "variation",
          "reflectToAttr": true,
          "docs": "Define a variação do menu de usuário. Geralmente, não é recomendado alterar esse valor.",
          "docsTags": [],
          "default": "'desktop'",
          "values": [
            {
              "value": "desktop",
              "type": "string"
            },
            {
              "value": "mobile",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "alc-logout",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Evento disparado quando o link \"Sair\" é acionado. Se cancelado, não navegará para a URL de logout.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "resize",
          "target": "window",
          "capture": false,
          "passive": true
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "alc-dropdown",
        "alc-icon",
        "alc-expander",
        "alc-menu",
        "alc-menu-item-theme",
        "alc-menu-link"
      ],
      "dependencyGraph": {
        "alc-user-menu": [
          "alc-dropdown",
          "alc-icon",
          "alc-expander",
          "alc-menu",
          "alc-menu-item-theme",
          "alc-menu-link"
        ],
        "alc-dropdown": [
          "alc-popup"
        ],
        "alc-expander": [
          "alc-icon"
        ],
        "alc-menu-item-theme": [
          "alc-menu-item",
          "alc-icon"
        ],
        "alc-menu-item": [
          "alc-icon"
        ]
      }
    },
    {
      "filePath": "src/components/alc-view-more/alc-view-more.tsx",
      "encapsulation": "none",
      "tag": "alc-view-more",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "bgColorVar",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "bg-color-var",
          "reflectToAttr": true,
          "docs": "Nome da variável CSS correspondente à cor de fundo em que o componente está inserido.\nAplica-se ao degradê do corte do texto.",
          "docsTags": [],
          "default": "'--alc-color-surface-primary'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "minHeight",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "min-height",
          "reflectToAttr": true,
          "docs": "Tamanho mínimo do conteúdo a ser exibido.\nPode ser em px, rem ou em: 200px; 20rem; 10em;",
          "docsTags": [],
          "default": "'8em'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "textClass",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text-class",
          "reflectToAttr": true,
          "docs": "Classes CSS para serem aplicadas ao texto da ação.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "togglePosition",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "toggle-position",
          "reflectToAttr": true,
          "docs": "Alinhamento do botão de ação.",
          "docsTags": [],
          "default": "'center'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "toggleTextClose",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "toggle-text-close",
          "reflectToAttr": true,
          "docs": "Nome da ação para esconder o conteúdo.",
          "docsTags": [],
          "default": "'Fechar'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "toggleTextOpen",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "toggle-text-open",
          "reflectToAttr": true,
          "docs": "Nome da ação para revelar o conteúdo.",
          "docsTags": [],
          "default": "'Veja mais...'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    }
  ],
  "typeLibrary": {
    "src/components/alc-event-lab/alc-event-lab.tsx::AlcChangeEventTypes": {
      "declaration": "export interface AlcChangeEventTypes {\n  from: number;\n  to: number;\n}",
      "docstring": "",
      "path": "src/components/alc-event-lab/alc-event-lab.tsx"
    },
    "src/components/alc-input-file/alc-input-file.tsx::AlcFileSelectedEvent": {
      "declaration": "export interface AlcFileSelectedEvent {\n  files: AlcFileWithContent[];\n}",
      "docstring": "",
      "path": "src/components/alc-input-file/alc-input-file.tsx"
    },
    "src/components/alc-input-file/alc-input-file.tsx::AlcFileWithContent": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/alc-input-file/alc-input-file.tsx"
    },
    "src/components/alc-nav-panel/alc-nav-panel.tsx::AlcStateEventTypes": {
      "declaration": "export interface AlcStateEventTypes {\n  state: {\n    open: boolean;\n  }\n}",
      "docstring": "",
      "path": "src/components/alc-nav-panel/alc-nav-panel.tsx"
    },
    "src/components/alc-popup/alc-popup.tsx::PopupPlacement": {
      "declaration": "export type PopupPlacement =\n  'top'\n  | 'top-start'\n  | 'top-end'\n  | 'bottom'\n  | 'bottom-start'\n  | 'bottom-end'\n  | 'right'\n  | 'right-start'\n  | 'right-end'\n  | 'left'\n  | 'left-start'\n  | 'left-end';",
      "docstring": "",
      "path": "src/components/alc-popup/alc-popup.tsx"
    },
    "src/components/alc-alert/index.d.ts::Type": {
      "declaration": "export declare type Type = 'info' | 'warning' | 'error' | 'success'",
      "docstring": "",
      "path": "src/components/alc-alert/index.d.ts"
    },
    "src/components/alc-environment-label/environments.ts::EnvType": {
      "declaration": "export type EnvType = 'prototype' | 'development' | 'testing' | 'homologation' | 'production' ;",
      "docstring": "",
      "path": "src/components/alc-environment-label/environments.ts"
    }
  }
}