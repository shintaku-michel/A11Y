import { h, Host } from "@stencil/core";
import classNames from "classnames";
/**
 * @slot - A tag para navegação. Pode ser tanto a tag `<a>` quanto um `<routerlink>` no caso de uso com Vue.
 **/
export class AlcMenuLink {
    constructor() {
        /** Indica se o menu-link está desabilitado. */
        this.disabled = false;
        this.originalHref = null;
        this.spaceKeyEvent = null;
    }
    handleDisabledChange(newValue) {
        this.updateLinkState(newValue);
    }
    triggerEvent(detail) {
        if (this.disabled) {
            return;
        }
        this.alcSelect.emit(detail);
    }
    updateLinkState(disabled) {
        const anchor = this.hostElement.querySelector('a');
        if (anchor) {
            if (disabled) {
                this.originalHref = anchor.getAttribute('href');
                anchor.setAttribute('aria-disabled', 'true');
                anchor.classList.add('alc-menu-link--disabled');
                anchor.setAttribute('tabindex', '-1');
                anchor.removeAttribute('href');
                anchor.setAttribute('role', 'menuitem');
            }
            else {
                if (this.originalHref) {
                    anchor.setAttribute('href', this.originalHref);
                }
                anchor.removeAttribute('aria-disabled');
                anchor.classList.remove('alc-menu-link--disabled');
                anchor.setAttribute('tabindex', '0');
                anchor.setAttribute('role', 'menuitem');
            }
        }
    }
    handleKeyDown(event) {
        if (!this.disabled && event.key === ' ') {
            event.preventDefault();
            const anchor = this.hostElement.querySelector('a');
            if (anchor) {
                this.spaceKeyEvent = event;
                anchor.click();
            }
        }
    }
    handleClick(event) {
        var _a;
        const originalEvent = (_a = this.spaceKeyEvent) !== null && _a !== void 0 ? _a : event;
        this.spaceKeyEvent = null; // Despreza esse evento para os próximos disparos.
        if (this.disabled) {
            event.preventDefault();
        }
        else {
            this.triggerEvent({ originalEvent: originalEvent });
        }
    }
    componentWillLoad() {
        this.updateLinkState(this.disabled);
    }
    getCssClassMap() {
        return classNames('alc-menu-link', this.disabled && 'alc-menu-link--disabled');
    }
    render() {
        return (h(Host, { key: 'faa811162db480d42c060a355f35f76ce8f638a1', class: this.getCssClassMap(), "aria-disabled": this.disabled ? 'true' : null, onClick: this.handleClick.bind(this), onKeyDown: this.handleKeyDown.bind(this) }, h("slot", { key: '7d4214a496fb6d9d209f6f6b595c2ee0c08937f5' })));
    }
    static get is() { return "alc-menu-link"; }
    static get originalStyleUrls() {
        return {
            "$": ["alc-menu-link.css"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["alc-menu-link.css"]
        };
    }
    static get properties() {
        return {
            "disabled": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Indica se o menu-link est\u00E1 desabilitado."
                },
                "getter": false,
                "setter": false,
                "attribute": "disabled",
                "reflect": true,
                "defaultValue": "false"
            },
            "value": {
                "type": "any",
                "mutable": false,
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Valor do menu-link, que pode ser utilizado para identificar que link foi selecionado."
                },
                "getter": false,
                "setter": false,
                "attribute": "value",
                "reflect": true
            }
        };
    }
    static get events() {
        return [{
                "method": "alcSelect",
                "name": "alc-select",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Evento disparado quando o menu-link \u00E9 selecionado."
                },
                "complexType": {
                    "original": "{\n    originalEvent: MouseEvent | KeyboardEvent;\n  }",
                    "resolved": "{ originalEvent: KeyboardEvent | MouseEvent; }",
                    "references": {
                        "MouseEvent": {
                            "location": "global",
                            "id": "global::MouseEvent"
                        },
                        "KeyboardEvent": {
                            "location": "global",
                            "id": "global::KeyboardEvent"
                        }
                    }
                }
            }];
    }
    static get elementRef() { return "hostElement"; }
    static get watchers() {
        return [{
                "propName": "disabled",
                "methodName": "handleDisabledChange"
            }];
    }
}
//# sourceMappingURL=alc-menu-link.js.map
