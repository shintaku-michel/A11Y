import { Host, h } from "@stencil/core";
import { getUniqueId } from "../utils/getUniqueId";
import test from "../utils/testAttributes";
export class AlcTooltip {
    constructor() {
        this.contentId = null;
        this.hasClickedOrFocused = false;
        /**
        * Indica se o tooltip esta ativo ou não. Pode-se usar essa propriedade em vez dos métodos show/hide.
        */
        this.active = false;
        /**
        * Indica o conteudo textual do tooltip. Pode-se usar o slot em vez dessa propriedade.
        */
        this.content = null;
        /**
        * Define o posicionamento do tooltip.
        */
        this.placement = 'top';
        /**
        * Define como o tooltip vai ser ativado. Pode ser: `click` , `hover` , `focus` e/ou `manual`. Pode adicionar mais de um, separando por espaço. Ex.: 'hover focus'.
        */
        this.trigger = 'hover focus';
        /**
        * Define o posicionamento do tooltip.
        */
        this.strategy = 'absolute';
    }
    /**
     * Exibe o tooltip.
     * @returns O valor retornado é `true` se o tooltip foi realmente exibido com essa chamada ao método.
     */
    async show() {
        if (this.active)
            return false;
        const { defaultPrevented } = this.alcShow.emit({ from: 'method' });
        if (defaultPrevented) {
            return false;
        }
        this.active = true;
        return true;
    }
    /**
    * Fecha o tooltip.
    * @returns O valor retornado é `true` se o tooltip foi realmente dispensado com essa chamada ao método.
    */
    async hide() {
        if (!this.active)
            return false;
        const { defaultPrevented } = this.alcHide.emit({ from: 'method' });
        if (defaultPrevented) {
            return false;
        }
        this.active = false;
        return true;
    }
    ;
    watchActive(active) {
        if (active) {
            // Show
            this.alcAfterShow.emit();
        }
        else {
            // Hide
            this.alcAfterHide.emit();
        }
    }
    handleKeyDown(event) {
        var _a;
        if (event.key === 'Escape') {
            event.preventDefault();
            (_a = this.anchorEl) === null || _a === void 0 ? void 0 : _a.focus();
            this.handleHide('keyboard');
        }
    }
    handleFocus() {
        if (!this.hasTrigger('focus'))
            return;
        const opened = this.handleShow('focus');
        if (opened)
            this.hasClickedOrFocused = true;
    }
    handleBlur() {
        if (!this.hasTrigger('focus'))
            return;
        const closed = this.handleHide('focus');
        if (closed)
            this.hasClickedOrFocused = false;
    }
    handleMouseOver() {
        if (!this.hasTrigger('hover'))
            return;
        this.handleShow('hover');
    }
    handleMouseOut() {
        if (!this.hasTrigger('hover'))
            return;
        // Verifica se ja foi aberto por click ou foco para não fechar com hover
        if (this.hasClickedOrFocused)
            return;
        this.handleHide('hover');
    }
    handleClick() {
        if (!this.hasTrigger('click'))
            return;
        if (this.active) {
            // Hide
            const closed = this.handleHide('click');
            if (closed)
                this.hasClickedOrFocused = false;
        }
        else {
            // Show
            const opened = this.handleShow('click');
            if (opened)
                this.hasClickedOrFocused = true;
        }
    }
    componentWillLoad() {
        this.contentId = getUniqueId();
    }
    componentDidLoad() {
        if (this.anchorSlot) {
            const el = this.anchorSlot.assignedElements()[0];
            if (el instanceof HTMLElement) {
                this.anchorEl = el;
                this.anchorEl.setAttribute('aria-describedby', this.contentId);
                this.anchorEl.setAttribute('tabindex', '0');
            }
        }
    }
    async handleHide(type) {
        const { defaultPrevented } = this.alcHide.emit({ from: type });
        let closed = false;
        if (!defaultPrevented) {
            closed = await this.hide();
        }
        return closed;
    }
    async handleShow(type) {
        const { defaultPrevented } = this.alcShow.emit({ from: type });
        let opened = false;
        if (!defaultPrevented) {
            opened = await this.show();
        }
        return opened;
    }
    hasTrigger(triggerType) {
        const triggers = this.trigger.split(' ');
        return triggers.includes(triggerType);
    }
    render() {
        return (h(Host, { key: 'b0c78d43c4d9c151ffb324428231f3d8613f8af9' }, h("alc-popup", { key: 'e92d111b22fa9e003a7ac7a8e0312a44c94d5c8b', active: this.active, placement: this.placement, shift: true, flip: true, distance: 8, arrow: true, role: "tooltip", strategy: this.strategy }, h("div", Object.assign({ key: '264958b7e8045ffe845f990a92dcf27307713af6', slot: "anchor" }, test('data-test-trigger')), h("slot", { key: 'a76cf9f9d1f4f97b4375434ebbc41299892ca376', name: "trigger", ref: (el) => this.anchorSlot = el })), h("div", Object.assign({ key: '0f959b9b6533f7b6ab9ab4fb6448b12b7e560a2b', class: "alc-tooltip__content", id: this.contentId }, test('data-test-content')), h("slot", { key: '8e034dbfcfe8f5a2f513fb952570ff288c459f10' }, this.content)))));
    }
    static get is() { return "alc-tooltip"; }
    static get originalStyleUrls() {
        return {
            "$": ["alc-tooltip.css"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["alc-tooltip.css"]
        };
    }
    static get properties() {
        return {
            "active": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Indica se o tooltip esta ativo ou n\u00E3o. Pode-se usar essa propriedade em vez dos m\u00E9todos show/hide."
                },
                "getter": false,
                "setter": false,
                "attribute": "active",
                "reflect": true,
                "defaultValue": "false"
            },
            "content": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Indica o conteudo textual do tooltip. Pode-se usar o slot em vez dessa propriedade."
                },
                "getter": false,
                "setter": false,
                "attribute": "content",
                "reflect": true,
                "defaultValue": "null"
            },
            "placement": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "PopupPlacement",
                    "resolved": "\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"",
                    "references": {
                        "PopupPlacement": {
                            "location": "import",
                            "path": "../alc-popup/alc-popup",
                            "id": "src/components/alc-popup/alc-popup.tsx::PopupPlacement"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Define o posicionamento do tooltip."
                },
                "getter": false,
                "setter": false,
                "attribute": "placement",
                "reflect": true,
                "defaultValue": "'top'"
            },
            "trigger": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Define como o tooltip vai ser ativado. Pode ser: `click` , `hover` , `focus` e/ou `manual`. Pode adicionar mais de um, separando por espa\u00E7o. Ex.: 'hover focus'."
                },
                "getter": false,
                "setter": false,
                "attribute": "trigger",
                "reflect": true,
                "defaultValue": "'hover focus'"
            },
            "strategy": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "'absolute' | 'fixed'",
                    "resolved": "\"absolute\" | \"fixed\"",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Define o posicionamento do tooltip."
                },
                "getter": false,
                "setter": false,
                "attribute": "strategy",
                "reflect": true,
                "defaultValue": "'absolute'"
            }
        };
    }
    static get events() {
        return [{
                "method": "alcShow",
                "name": "alc-show",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Evento disparado quando o tooltip vai abrir"
                },
                "complexType": {
                    "original": "{\n    from: 'click' | 'hover' | 'focus' | 'method';\n  }",
                    "resolved": "{ from: \"method\" | \"focus\" | \"click\" | \"hover\"; }",
                    "references": {}
                }
            }, {
                "method": "alcAfterShow",
                "name": "alc-after-show",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Evento disparado quando o tooltip abriu"
                },
                "complexType": {
                    "original": "null",
                    "resolved": "null",
                    "references": {}
                }
            }, {
                "method": "alcHide",
                "name": "alc-hide",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Evento disparado quando o tooltip vai fechar."
                },
                "complexType": {
                    "original": "{\n    from: 'click' | 'hover' | 'focus' | 'keyboard' | 'method';\n  }",
                    "resolved": "{ from: \"method\" | \"focus\" | \"click\" | \"keyboard\" | \"hover\"; }",
                    "references": {}
                }
            }, {
                "method": "alcAfterHide",
                "name": "alc-after-hide",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Evento disparado quando o tooltip fechou."
                },
                "complexType": {
                    "original": "null",
                    "resolved": "null",
                    "references": {}
                }
            }];
    }
    static get methods() {
        return {
            "show": {
                "complexType": {
                    "signature": "() => Promise<boolean>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<boolean>"
                },
                "docs": {
                    "text": "Exibe o tooltip.",
                    "tags": [{
                            "name": "returns",
                            "text": "O valor retornado \u00E9 `true` se o tooltip foi realmente exibido com essa chamada ao m\u00E9todo."
                        }]
                }
            },
            "hide": {
                "complexType": {
                    "signature": "() => Promise<boolean>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<boolean>"
                },
                "docs": {
                    "text": "Fecha o tooltip.",
                    "tags": [{
                            "name": "returns",
                            "text": "O valor retornado \u00E9 `true` se o tooltip foi realmente dispensado com essa chamada ao m\u00E9todo."
                        }]
                }
            }
        };
    }
    static get watchers() {
        return [{
                "propName": "active",
                "methodName": "watchActive"
            }];
    }
    static get listeners() {
        return [{
                "name": "keydown",
                "method": "handleKeyDown",
                "target": undefined,
                "capture": false,
                "passive": false
            }, {
                "name": "focus",
                "method": "handleFocus",
                "target": undefined,
                "capture": true,
                "passive": false
            }, {
                "name": "blur",
                "method": "handleBlur",
                "target": undefined,
                "capture": true,
                "passive": false
            }, {
                "name": "mouseover",
                "method": "handleMouseOver",
                "target": undefined,
                "capture": false,
                "passive": true
            }, {
                "name": "mouseout",
                "method": "handleMouseOut",
                "target": undefined,
                "capture": false,
                "passive": true
            }, {
                "name": "click",
                "method": "handleClick",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
}
//# sourceMappingURL=alc-tooltip.js.map
