{"version":3,"file":"alc-datatable.stories.js","sourceRoot":"","sources":["../../../../../src/components/alc-datatable/stories/alc-datatable.stories.ts"],"names":[],"mappings":"AAAA,aAAa;AACb,OAAO,EAAE,QAAQ,EAAE,MAAM,sBAAsB,CAAC;AAChD,OAAO,EAAE,MAAM,IAAI,UAAU,EAAE,MAAM,kDAAkD,CAAC;AACxF,OAAO,cAAc,MAAM,mDAAmD,CAAC;AAE/E,eAAe;IACb,KAAK,EAAE,uBAAuB;IAC9B,IAAI,EAAE,WAAW;IACjB,SAAS,EAAE,eAAe;IAC1B,UAAU,EAAE,EAAE;IACd,QAAQ,EAAE,QAAQ;CACnB,CAAC;AAEF,MAAM,WAAW,GAAG,cAAc,CAAC,QAAQ,CAAC,CAAC;AAE7C,MAAM,CAAC,MAAM,MAAM,GAAG;IACpB,IAAI,EAAE,QAAQ;IACd,IAAI,kCACC,WAAW,KACd,SAAS,EAAE,mBAAmB,GAC/B;IACD,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;iBACJ,UAAU,CAAC,QAAQ,EAAE,IAAI,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAgDxC,CAAC;CACH,CAAC;AAEF,MAAM,CAAC,MAAM,MAAM,GAAG;IACpB,IAAI,EAAE,eAAe;IACrB,IAAI,kCACC,WAAW,KACd,SAAS,EAAE,qDAAqD,EAChE,MAAM,EAAE,mHAAmH,GAC5H;IACD,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;iBACJ,UAAU,CAAC,QAAQ,EAAE,IAAI,CAAC;GACxC,CAAC;CACH,CAAC;AAEF,MAAM,CAAC,MAAM,aAAa,GAAG;IAC3B,IAAI,EAAE,qBAAqB;IAC3B,IAAI,kCACC,WAAW,KACd,MAAM,EAAE,2KAA2K,EACnL,SAAS,EAAE,6HAA6H,GACzI;IACD,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;iBACJ,UAAU,CAAC,QAAQ,EAAE,IAAI,CAAC;GACxC,CAAC;CACH,CAAC;AAEF,MAAM,CAAC,MAAM,iBAAiB,GAAG;IAC/B,IAAI,EAAE,6BAA6B;IACnC,IAAI,kCACC,WAAW,KACd,MAAM,EAAE,+MAA+M,EACvN,SAAS,EAAE,oIAAoI,GAChJ;IACD,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;iBACJ,UAAU,CAAC,QAAQ,EAAE,IAAI,CAAC;GACxC,CAAC;CACH,CAAC;AAEF,MAAM,CAAC,MAAM,UAAU,GAAG;IACxB,IAAI,EAAE,2CAA2C;IACjD,IAAI,kCACC,WAAW,KACd,MAAM,EAAE,IAAI,EACZ,SAAS,EAAE,yIAAyI,GACrJ;IACD,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;oCACe,UAAU,CAAC,QAAQ,EAAE,IAAI,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4C3D,CAAC;CACH,CAAC","sourcesContent":["// @ts-ignore\nimport { argTypes } from './alc-datatable.args';\nimport { render as renderArgs } from '../../../stories/functions/components.renderArgs';\nimport getDefaultArgs from '../../../stories/functions/components.defaultArgs';\n\nexport default {\n  title: 'Componentes/Datatable',\n  name: 'Datatable',\n  component: 'alc-datatable',\n  parameters: {},\n  argTypes: argTypes,\n};\n\nconst defaultArgs = getDefaultArgs(argTypes);\n\nexport const Basico = {\n  name: 'Básico',\n  args: {\n    ...defaultArgs,\n    'options': '{\"pageLength\": 3}',\n  },\n  render: (args) => (`\n<alc-datatable ${renderArgs(argTypes, args)}>\n  <table>\n    <thead>\n      <tr>\n        <th>Ordem</th>\n        <th>Nome</th>\n        <th>Descrição</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td>1</td>\n        <td>Lion-O</td>\n        <td>\n          É o líder dos ThunderCats, que moram no terceiro mundo e lutam pela ordem e justiça.\n        </td>\n      </tr>\n      <tr>\n        <td>2</td>\n        <td>Panthro</td>\n        <td>\n          É um integrante dos ThunderCats, representando uma pantera negra na linhagem Thunderiana.\n        </td>\n      </tr>\n      <tr>\n        <td>3</td>\n        <td>Tygra</td>\n        <td>\n          Pertencendo à linhagem dos tigres de Thundera, é um dos mais poderosos e versáteis Thundercats.\n        </td>\n      </tr>\n      <tr>\n        <td>4</td>\n        <td>Cheetara</td>\n        <td>\n          Representando a chita, é uma guerreira destemida. Forte e decidida, não hesita em entrar em ação para combater os vilões.\n        </td>\n      </tr>\n      <tr>\n        <td>5</td>\n        <td>Jaga</td>\n        <td>\n          É o mentor e guerreiro mestre de todos os Thundercats e, como seu nome sugere, é representado pelo jaguar.\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</alc-datatable>\n  `)\n};\n\nexport const Inline = {\n  name: 'Básico inline',\n  args: {\n    ...defaultArgs,\n    'options': '{\"columns\": [{\"title\": \"Nome\"}, {\"title\": \"Arma\"}]}',\n    'data': '[[\"Panthro\", \"Nunchaku\"], [\"Lion-O\", \"Espada Justiceira\"], [\"Cheetara\", \"Bastão\"], [\"Tygra\", \"chicote retrátil\"]]'\n  },\n  render: (args) => (`\n<alc-datatable ${renderArgs(argTypes, args)}></alc-datatable>\n  `)\n};\n\nexport const OrdenacaoData = {\n  name: 'Ordenação por datas',\n  args: {\n    ...defaultArgs,\n    'data': '[[\"Panthro\", \"Nunchaku\", \"12/10/2022\"], [\"Lion-O\", \"Espada Justiceira\", \"16/12/2022\"], [\"Cheetara\", \"Bastão\", \"20/04/2022\"], [\"Tygra\", \"Chicote Retrátil\", \"05/02/2022\"]]',\n    'options': '{\"columns\": [{\"title\": \"Nome\"}, {\"title\": \"Arma\"}, {\"title\": \"Data\"}], \"columnDefs\": [{\"type\": \"br-data\", \"targets\": [2]}]}'\n  },\n  render: (args) => (`\n<alc-datatable ${renderArgs(argTypes, args)}></alc-datatable>\n  `)\n};\n\nexport const OrdenacaoDataHora = {\n  name: 'Ordenação por datas e horas',\n  args: {\n    ...defaultArgs,\n    'data': '[[\"Panthro\", \"Nunchaku\", \"12/10/2022 12:09:23\"], [\"Lion-O\", \"Espada Justiceira\", \"12/10/2022 14:09:23\"], [\"Cheetara\", \"Bastão\", \"12/10/2022 17:09:23\"], [\"Tygra\", \"Chicote Retrátil\", \"12/10/2022 12:09:24\"]]',\n    'options': '{\"columns\": [{\"title\": \"Nome\"}, {\"title\": \"Arma\"}, {\"title\": \"Data & Hora\"}], \"columnDefs\": [{\"type\": \"br-data\", \"targets\": [2]}]}'\n  },\n  render: (args) => (`\n<alc-datatable ${renderArgs(argTypes, args)}></alc-datatable>\n  `)\n};\n\nexport const ApiPublica = {\n  name: 'Usando dados recebidos de uma API pública',\n  args: {\n    ...defaultArgs,\n    'data': '[]',\n    'options': '{\"columns\": [{\"data\": \"nome\",  \"title\": \"Nome\"},{\"data\": \"uf\", \"title\": \"Unidade da Federação\"}, {\"data\": \"email\", \"title\": \"E-mail\"}]}'\n  },\n  render: (args) => (`\n<alc-datatable id=\"api-deputados\" ${renderArgs(argTypes, args)}></alc-datatable>\n<alc-alert id=\"reload-alert\">Recarregue a página para visualizar os dados.</alc-alert>\n\n<script>\n// Buscar 20 deputados das UFs: RJ, DF e SP, ordenados por nome\n  const API_URL = 'https://dadosabertos.camara.leg.br/api/v2/deputados?siglaUf=RJ&siglaUf=DF&siglaUf=SP&itens=20&ordem=ASC&ordenarPor=nome';\n\n  async function getData(url) {\n    return await fetch(url)\n      .then(response => response.json())\n      .then(deputados => {\n\n        const UF = { \"SP\": \"São Paulo\", \"DF\": \"Distrito Federal\", \"RJ\": \"Rio de janeiro\" };\n\n        // Mapeia os dados para mostrar da forma desejada\n        // - nome da UF em vez da sigla\n        // - mantendo apenas as chaves que quero exibir na tabela (nome, uf e email)\n        let mappedData = deputados.dados.map(deputado => {\n          return {\n            nome: deputado.nome,\n            uf: UF[deputado.siglaUf],\n            email: deputado.email\n          };\n        });\n\n        return mappedData;\n      });\n  }\n\n  // Obtém os dados\n  getData(API_URL).then(data => {\n    // Obtém referência ao componente alc-datatable\n    const alcDatatable = document.querySelector('#api-deputados');\n    // Seta o valor do atributo \"data\"\n    alcDatatable.data = data;\n  });\n\n  // Fecha mensagem\n  // Isso não tem relação direta com o exemplo do Datatable.\n  // A recarga é necessária pela forma como o Storybook lida com scripts nos stories.\n  // Futuramente, vamos buscar uma forma de evitar que isso seja necessário.\n  document.querySelector('#reload-alert').hide();\n\n</script>\n  `)\n};\n"]}