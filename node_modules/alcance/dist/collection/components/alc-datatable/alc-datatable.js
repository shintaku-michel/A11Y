var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Host, h, forceUpdate } from "@stencil/core";
// import Table from '../functional/table';
import { setCssClasses } from "../functional/table";
// Forma de importar o DataTable foi inspirada nesse exemplo:
// https://stackoverflow.com/questions/72676143/how-to-use-datatable-without-jquery
import DataTableModule from "datatables.net";
import portugues from "datatables.net-plugins/i18n/pt-BR.mjs";
import Select from "datatables.net-select/js/dataTables.select.js";
import logger from "../utils/logger";
import test from "../utils/testAttributes";
import { getUniqueId } from "../utils/getUniqueId";
import moment from "moment";
import "moment/locale/pt-br";
import { removeDiacritics } from "../utils/removeDiacritics";
const dtEvents = [];
// Decorator @OriginalEvent
// Inclui o evento em dtEvents com os valores informados no decorator
function OriginalEvent(value = {
    name: '',
    cancelable: true,
    detail: []
}) {
    return function (_component, target) {
        dtEvents.push(Object.assign(Object.assign({}, value), { emitterName: target }));
    };
}
export class AlcDatatable {
    constructor() {
        // private ro: ResizeObserver;
        this.columns = Array();
        this.processedOptions = {};
        this.alertVisibility = false;
        this.started = false;
        this.firstLoadingWithProcessing = true;
        this.showProcessing = false;
        this.shouldShowLoader = () => this.firstLoadingWithProcessing || this.showProcessing;
        this.extensionsDefaults = {
            orderIntl: true,
        };
        this.currentPage = 1;
        this.initCompleted = false;
        this.searchText = '';
        this.pageLength = '10';
        this.isProcessing = false;
        this.isLoadingActive = false;
        /**
         * Faz com que o componente aguarde a chamada ao método `start()` para iniciar o DataTable.
         */
        this.deferStart = false;
        this.prepareStack = (tableNode) => {
            setCssClasses(tableNode);
            // const table = this.el.querySelector('table');
            // logger.debug('prepareStack', table);
            // // Para cada coluna da tabela
            // table.querySelectorAll('th').forEach((th, thIndex) => {
            //   // Para cada linha da tabela
            //   table.querySelectorAll('tr').forEach(tr => {
            //     // Seta atributo com texto do cabeçalho da coluna
            //     tr.querySelectorAll('td').item(thIndex)?.setAttribute('data-alc-title', th.innerText);
            //   })
            // });
        };
        this.renderPageLength = () => {
            let options = null;
            const init = this.dataTable.init();
            if (init.lengthChange === false || init.paging === false) {
                return null;
            }
            const lengthMenu = init.lengthMenu;
            // Se pageMenu for um array 3D
            if (Array.isArray(lengthMenu[0])) {
                options = lengthMenu[0].map((option, i) => {
                    return (h("option", { value: option, selected: this.pageLength == option }, lengthMenu[1][i]));
                });
            }
            // Se pageMenu for um array 2D
            else {
                options = lengthMenu.map((option) => {
                    return (h("option", { value: option, selected: this.pageLength == option }, option));
                });
            }
            const menu = (h("alc-field", Object.assign({}, test('data-test-length-field')), h("label", null, "Exibir", h("select", {
                // @ts-ignore Não sei por que o JSX entende que o select não possui o atributo value
                value: this.pageLength, class: "alc-datatable__select-length", onChange: e => {
                    this.dataTable.page.len(e.target.value).draw();
                }
            }, options), "por p\u00E1gina.")));
            return (h("div", null, menu));
        };
        this.renderPagination = () => {
            const info = this.dataTable.page.info();
            logger.debug('renderPagination', info.length, info.recordsTotal, info.recordsDisplay);
            // Não renderiza em qualquer das condições abaixo:
            // - [A] se está mostrando todos os registros
            // - [B] se o total de itens na tabela for menor que a quantidade de itens por página
            // - [C] se não houver registros para mostrar na tabela
            if (info.length === -1 || // A
                info.recordsTotal <= info.length || // B
                info.recordsDisplay === 0 // C
            ) {
                return null;
            }
            return (h("alc-pagination", { ref: el => (this.paginationElement = el), totalPages: info.pages, currentPage: this.currentPage, "onAlc-change": this.changePage }));
        };
        this.renderPageInfo = () => {
            const info = this.dataTable.page.info();
            // Nenhum item mostrado (a informação vai na própria tabela)
            if (info.recordsDisplay === 0) {
                return null;
            }
            // Um único item no total
            if (info.recordsTotal === 1) {
                return (h("div", null, "1 item listado."));
            }
            // Uma única página
            if (info.pages === 1) {
                // Número de itens exibidos é igual ao total de itens
                if (info.recordsDisplay === info.recordsTotal) {
                    return (h("div", null, info.recordsTotal, " itens listados."));
                }
                // Número de itens exibidos é diferente do total de itens
                return (h("div", null, info.recordsDisplay, " itens - de um total de ", info.recordsTotal, " itens."));
            }
            // Várias páginas
            const start = info.start + 1;
            const range = start === info.end ? info.end : `De ${start} até ${info.end}`;
            const total = info.recordsDisplay !== info.recordsTotal ? ` - de um total de ${info.recordsTotal} itens` : '';
            return (h("div", null, range, " de ", info.recordsDisplay, " itens", total, "."));
        };
        /**
         * Testa se uma coluna é ordenável.
         *
         * Essa função parte do pressuposto que, por padrão, todas as colunas são ordenáveis.
         * Ou seja, que para não ser ordenável, deve haver uma configuração que diga isso.
         *
         * @param colIndex Índice a coluna da tabela
         * @returns true se a coluna for ordenável
         */
        this.isColumnOrderable = (header) => {
            return header.classList.contains('sorting');
        };
        this.renderOrderControls = (headers) => {
            logger.debug('renderOrderControls', this.dataTable.order());
            const items = headers.map((header, index) => {
                const asc = [index, 'asc'];
                const desc = [index, 'desc'];
                const headerElement = this.dataTable.columns().header()[index];
                if (this.isColumnOrderable(headerElement)) {
                    logger.log('renderOrderControls', this.dataTable.order()[0].toString());
                    return [
                        h("alc-menu-item", { value: asc, type: "radio", checked: this.dataTable.order()[0].toString() === asc.toString() ? true : null }, header, h("alc-sort-indicator", { sorting: "asc", "aria-label": "ascendente", class: "ml-1" })),
                        h("alc-menu-item", { value: desc, type: "radio", checked: this.dataTable.order()[0].toString() === desc.toString() ? true : null }, header, h("alc-sort-indicator", { sorting: "desc", "aria-label": "descendente", class: "ml-1" })),
                    ];
                }
                return;
            });
            return (h("alc-dropdown", Object.assign({}, test('data-test-dropdown-order')), h("button", { slot: "trigger", class: "alc-button alc-button--secondary" }, h("alc-sort-indicator", { sorting: "none", class: "mr-1" }), "Ordena\u00E7\u00E3o ", h("alc-icon", { name: "chevron-down", label: "" })), h("alc-menu", { "onAlc-select": this.changeOrder }, items)));
        };
        this.renderShowColumnsControls = (headers) => {
            const items = headers.map((header, i) => {
                return (h("alc-menu-item", { value: `${i}`, type: "checkbox", checked: this.dataTable.column(i).visible() ? true : null }, header));
            });
            return (h("alc-dropdown", Object.assign({}, test('data-test-dropdown-columns')), h("button", { slot: "trigger", class: "alc-button alc-button--secondary" }, h("alc-icon", { name: "table", label: "", class: "mr-1 -rotate-90" }), "Colunas ", h("alc-icon", { name: "chevron-down", label: "" })), h("alc-menu", { "onAlc-select": this.changeVisibility }, items)));
        };
        this.renderSearchControl = () => {
            return (h("div", { class: "alc-datatable__controls-search" }, h("alc-field", Object.assign({ label: "Pesquisar por:" }, test('data-test-search-field')), h("input", Object.assign({ type: "search", onInput: this.onSearch, value: this.searchText }, test('data-test-input-search'))))));
        };
        this.renderProcessing = () => {
            // Não muda diretamente a visibilidade de alc-loading, mas sim seu atributo "active",
            // conforme recomendação do próprio componente.
            return (h("div", { class: "alc-datatable__processing" }, h("alc-loading", { active: this.isLoadingActive, variant: "container", label: portugues.processing })));
        };
        this.changePage = (e) => {
            const to = e.detail.to - 1;
            this.currentPage = e.detail.to;
            this.dataTable.page(to).draw(false);
            forceUpdate(this.el);
        };
        this.changeOrder = (e) => {
            logger.debug(e.target.value);
            const order = e.target.value;
            if (this.currentPage > 1) {
                this.alertVisibility = true;
            }
            this.dataTable.order(order).draw();
            logger.debug(this.dataTable.order());
            forceUpdate(this.el);
        };
        this.changeVisibility = (e) => {
            const col = parseInt(e.target.value);
            this.dataTable.column(col).visible(!this.dataTable.column(col).visible());
            // Ao colocar draw(false) a paginação não é alterada
            // https://datatables.net/reference/api/draw()
            this.dataTable.columns.adjust().draw(false);
            forceUpdate(this.el);
            this.handleScrollEvent();
        };
        this.onSearch = (e) => {
            const input = e.target;
            if (this.currentPage > 1) {
                const info = this.dataTable.page.info();
                this.currentPage = 1;
                // Atualiza a paginação
                this.paginationElement.totalPages = info.pages;
                this.paginationElement.currentPage = this.currentPage;
                this.alertVisibility = true;
            }
            this.dataTable.search(input.value).draw();
            forceUpdate(this.el);
        };
    }
    ensureJson(input) {
        return typeof input === 'object' ? input : JSON.parse(input);
    }
    watchIsProcessing() {
        if (this.isProcessing) {
            // Aguarda um tempo para mostrar o loading... para evitar que, quando o servidor responde rapidamente,
            // o loading fique "piscando" na tela a cada interação.
            setTimeout(() => {
                // Depois do timeout, talvez o processamento já tenha terminado (this.isProcessing = false)
                // Neste caso, o loading não vai ser mostrado na tela, por não ser mais necessário.
                this.isLoadingActive = this.isProcessing;
            }, 500);
        }
        else {
            this.isLoadingActive = false;
        }
    }
    dataWatcher(newValue) {
        if (this.currentPage > 1) {
            this.alertVisibility = true;
        }
        this.jsonData = this.ensureJson(newValue);
        this.dataTable.clear();
        this.dataTable.rows.add(this.jsonData);
        this.dataTable.draw();
    }
    DataTableSetup() {
        if (!this.dataTableModule) {
            // @ts-ignore
            this.dataTableModule = DataTableModule();
            Select();
        }
    }
    /**
     * Retorna o objeto DataTable.
     * Por meio do objeto retornado é possível configurar extensões do DataTable.
     */
    async getDataTable() {
        return this.dataTableModule.$.fn.dataTable;
    }
    /**
     * Retorna a API DataTable.
     */
    async getApi() {
        if (this.deferStart && !this.started) {
            logger.warn(`DataTable ainda não foi inicializado. Execute o método "start()" antes de chamar "getApi()".`);
            return;
        }
        await this.start(); // Garante que só avançará quando o start estiver concluído.
        return this.dataTable;
    }
    /**
     * Atualiza a exibição da tabela.
     * Necessário para que o componente capture os novos dados depois de uma alteração, quando
     * os dados são providos pelo DOM.
     */
    // @Method()
    // async refreshData() {
    //   // this.dataTable.rows().invalidate();
    // }
    // componentShouldUpdate(_newValue, _oldValue, propName) {
    //   // if (propName === 'columns') {
    //   //   return false;
    //   // }
    // }
    componentWillLoad() {
        this.DataTableSetup();
        if (!this.deferStart) {
            this.start();
        }
    }
    /**
      Inicia o DataTable.
      Sempre que `defer-start` for `true`, esse método deve ser chamado para que o componente inicie seu funcionamento.
      @returns O valor retornado é `true` se o DataTable foi realmente iniciado com a chamada desse método.
     */
    async start() {
        // Garante que o método só seja executado uma vez.
        if (this.started) {
            return false;
        }
        this.started = true;
        const DataTable = this.dataTableModule;
        moment.locale('pt-br');
        const formats = getAllDateFormats();
        // Plugin de type detect para "br-data"
        DataTable.$.fn.dataTable.ext.type.detect.unshift(function (data) {
            if (data === '') {
                return 'br-data';
            }
            if (moment(data, formats, true).isValid()) {
                return 'br-data';
            }
            return null;
        });
        // Plugin de type order para "br-data"
        DataTable.$.fn.dataTable.ext.type.order['br-data-pre'] = function (data) {
            if (moment(data, formats, true).isValid()) {
                return parseInt(moment(data, formats, true).format('x'), 10);
            }
            return data;
        };
        let domTable = this.el.querySelector('table');
        !domTable && this.reportEmptyTableProps();
        const that = this;
        const options = this.options ? this.ensureJson(this.options) : {};
        const optionsDefaults = {
            ordering: true,
            paging: true,
            select: false,
            columnDefs: [
                {
                    orderable: true,
                    targets: [],
                },
            ],
            searching: true,
            lengthChange: true,
            lengthMenu: [10, 25, 50, 100],
            pageLength: 10,
        };
        this.processedOptions = Object.assign(Object.assign({}, optionsDefaults), options);
        const config = this.processedOptions;
        this.showProcessing = !!config.processing;
        this.pageLength = config.pageLength;
        await this.resolveExtensions();
        return new Promise(resolve => {
            let dataTablesConfig = Object.assign(Object.assign({}, config), { dom: '<"alc-datatable__wrapper"tr>', autoWidth: false, language: portugues, initComplete: function () {
                    logger.debug('initComplete', this.api());
                    const api = this.api();
                    api
                        .columns()
                        .header()
                        .each((header, index) => {
                        that.columns.push({
                            textContent: header.textContent,
                            th: header,
                        });
                        that.renderHeader(header, index, api);
                    });
                    that.prepareStack(this[0]); // DOM table, não jQuery
                    that.configureTableWrapper();
                    that.initCompleted = true;
                    resolve(true);
                } });
            logger.debug(dataTablesConfig);
            // Cria a tabela, se não existir no DOM
            if (!domTable) {
                domTable = document.createElement('table');
                // Adiciona o id caso tenha definido pela propriedade tableId;
                this.tableId && domTable.setAttribute('id', this.tableId);
                this.el.insertAdjacentElement('beforeend', domTable);
            }
            // domTable.classList.add('alc-datatable');
            // Se data for informado, ignora a tabela que eventualmente exista no DOM
            if (this.data) {
                // Transforma atributo data em json.
                this.jsonData = this.ensureJson(this.data);
                dataTablesConfig.data = this.jsonData;
                // Cria "columns" se a tabela não tiver cabeçalho
                // if (domTable.querySelectorAll('thead tr th').length === 0) {
                //   dataTablesConfig.columns = columns;
                // }
            }
            // Cria id caso o domTable não ter.
            if (!domTable.id) {
                domTable.setAttribute('id', getUniqueId());
            }
            // Adiciona eventos no Datatable
            DataTable.$(`#${domTable.id}`)
                .on('draw.dt', e => {
                logger.debug('draw', e.currentTarget);
                this.prepareStack(e.currentTarget);
                // Somente depois da inicialização
                if (this.dataTable) {
                    this.currentPage = this.dataTable.page() + 1;
                }
            })
                .on('select.dt', (e, _dt, _type, indexes) => {
                logger.debug('select', e);
                logger.debug('Linha selecionada', indexes[0]);
            })
                .on('order.dt', function (_e, _settings, ordArr) {
                that.columns.forEach((column, index) => {
                    let header = column.th;
                    const icon = header.querySelector('alc-sort-indicator');
                    if (icon) {
                        const { col, dir } = ordArr[0];
                        const sorting = that.getSorting(col, index, dir);
                        icon.setAttribute('sorting', sorting);
                    }
                });
                // Há um indicador de ordenação em um menu suspenso criado por nós (não do Datatables.net)
                // É preciso forçar uma nova renderização para que o estado da ordenação seja mostrado lá também.
                forceUpdate(that);
            })
                .on('search.dt', () => {
                // Sempre que houver uma busca, searchText tem que estar com o valor correspondente.
                if (this.dataTable) {
                    this.searchText = this.dataTable.search();
                }
            })
                .on('length.dt', (_e, _settings, len) => {
                // Sempre que houver mudança no tamanho da página, pageLength tem que estar com o valor correspondente.
                this.pageLength = len.toString();
            })
                .on('stateLoaded.dt', (_e, _settings, data) => {
                logger.debug('stateLoaded event', data);
                const { search, length, start } = data;
                that.pageLength = length;
                that.searchText = (search === null || search === void 0 ? void 0 : search.search) || '';
                that.currentPage = start / length + 1;
            })
                .on('processing.dt', (e, settings, processing) => {
                logger.debug("Setup ", settings);
                // Porque dois processings? Um é disparado pelo evento e retorna true sempre que o load acontece, mesmo que processing seja false.
                // O outro é o parâmetro de fato (_settings.oInit.processing).
                // É necessário manter os dois para controle dos dois loadings pois são ativados de maneira diferente.
                const realProcessing = settings.oInit.processing;
                // Se nenhuma das duas condições estiver ativa,
                // simplesmente ignora a UI
                if (!this.shouldShowLoader())
                    return;
                // Evita trabalho repetido
                if (this.isProcessing === processing)
                    return;
                this.isProcessing = processing;
                // Previne que a tabela venha sem classes quando processando.
                this.prepareStack(e.currentTarget);
                let processingIndicator = this.el.querySelector('.dataTables_processing');
                if (!processingIndicator) {
                    processingIndicator = document.createElement('div');
                    processingIndicator.className = 'dataTables_processing';
                    // importantíssimo: display none por padrão
                    processingIndicator.style.display = 'none';
                    this.el.appendChild(processingIndicator);
                }
                // Sempre deixar o indicador de processamento com display block
                // para não prejudicar a acessibilidade do loading
                processingIndicator.style.display = 'block';
                processingIndicator.style.textAlign = 'center';
                // Aqui o loading vai funcionar só na carga inicial da tabela,
                // para outras vezes que o evento for chamado, vai ser utilizado o loading do render()
                // Na primeira carga, o loading do render() não é renderizado até finalizar o processing.
                if (this.firstLoadingWithProcessing) {
                    // Para não aparecer barra de rolagem
                    const datatableWrapper = this.el.querySelector('.alc-datatable__wrapper');
                    if (realProcessing) {
                        datatableWrapper.style.height = "6rem";
                    }
                    else {
                        datatableWrapper.style.removeProperty('height');
                    }
                    let loading = processingIndicator.querySelector('alc-loading');
                    if (!loading) {
                        processingIndicator.innerHTML = '';
                        loading = document.createElement('alc-loading');
                        loading.setAttribute('variant', 'inline');
                        loading.setAttribute('label', portugues.processing);
                        processingIndicator.appendChild(loading);
                    }
                    loading.setAttribute('active', String(processing));
                    if (this.firstLoadingWithProcessing && !processing) {
                        this.firstLoadingWithProcessing = false;
                        datatableWrapper.style.removeProperty('height');
                    }
                    logger.debug('isProcessing:', processing);
                }
            });
            this.addOriginalEventsListeners(DataTable, domTable, that);
            // Inicializa DataTable
            this.dataTable = new DataTable(`#${domTable.id}`, dataTablesConfig);
        });
    }
    addOriginalEventsListeners(DataTable, domTable, component) {
        dtEvents.forEach(event => {
            DataTable.$(domTable).on(`${event.name}.dt`, (...args) => {
                var _a;
                const emitterName = event.emitterName;
                // Cria o objeto detail com as chaves definidas em event.detail
                // e os valores definidos em args.
                let detail = {};
                event.detail.forEach((key, index) => {
                    detail[key] = args[index];
                });
                // Emite o evento do Alcance
                const { defaultPrevented } = component[emitterName].emit(detail);
                // Se foi cancelado e pode ser cancelado, cancela o evento original.
                if (defaultPrevented && event.cancelable) {
                    (_a = args[0]) === null || _a === void 0 ? void 0 : _a.preventDefault();
                }
            });
        });
    }
    configureTableWrapper() {
        this.tableWrapper = this.el.querySelector('.alc-datatable__wrapper');
        this.tableWrapper.addEventListener('scroll', () => this.handleScrollEvent());
        this.tableWrapper.classList.toggle('has-scroll-end', this.tableWrapper.scrollWidth > this.tableWrapper.clientWidth);
    }
    disconnectedCallback() {
        this.tableWrapper.removeEventListener('scroll', this.handleScrollEvent);
    }
    handleResize() {
        if (this.tableWrapper.scrollWidth > this.tableWrapper.clientWidth) {
            this.tableWrapper.classList.add('has-scroll-end');
        }
        else {
            this.tableWrapper.classList.remove('has-scroll-start');
            this.tableWrapper.classList.remove('has-scroll-end');
        }
    }
    handleScrollEvent() {
        this.tableWrapper.classList.toggle('has-scroll-start', this.tableWrapper.scrollLeft > 0);
        this.tableWrapper.classList.toggle('has-scroll-end', Math.ceil(this.tableWrapper.offsetWidth + this.tableWrapper.scrollLeft) < this.tableWrapper.scrollWidth);
    }
    getSorting(colIndex, index, dir) {
        let sorting = 'none';
        if (colIndex === index) {
            sorting = dir;
        }
        return sorting;
    }
    async resolveExtensions() {
        const DataTable = await this.getDataTable();
        const extensions = this.extensions ? this.ensureJson(this.extensions) : {};
        const ext = Object.assign(Object.assign({}, this.extensionsDefaults), extensions);
        // Ignorar diacríticos no filtro
        // Essa extensão pega os textos das celulas da tabela que são string e com filtro habilitado
        // Retorna o dado original e sem acento para permitir pesquisar de ambas as formas
        DataTable.ext.type.search.string = function (data) {
            return data + ' ' + removeDiacritics(data);
        };
        if (ext.orderIntl) {
            // Plugin order para ignorar diacríticos na ordenação
            // baseado no https://www.datatables.net/blog/2017-02-28
            // Collator é mais performático do que localeCompare
            DataTable.ext.order.intl = function (locales, options) {
                if (window.Intl) {
                    const collator = new window.Intl.Collator(locales, options);
                    const types = DataTable.ext.type;
                    delete types.order['string-pre'];
                    types.order['string-asc'] = collator.compare;
                    types.order['string-desc'] = function (a, b) {
                        return collator.compare(a, b) * -1;
                    };
                }
            };
            // Chama o plugin com as configurações
            DataTable.ext.order.intl('pt-BR', { sensitivity: 'base' });
        }
    }
    renderHeader(header, index, api) {
        if (!this.isColumnOrderable(header)) {
            return;
        }
        const orderColIndex = api.order()[0][0];
        const orderColDir = api.order()[0][1];
        const icon = document.createElement('alc-sort-indicator');
        icon.classList.add('alc-datatable__sort-icon');
        icon.setAttribute('sorting', this.getSorting(orderColIndex, index, orderColDir));
        header.appendChild(icon);
        return header;
    }
    reportEmptyTableProps() {
        if (!this.data) {
            logger.report('data', this.el.tagName.toLowerCase(), this.el);
        }
        if (!this.options) {
            logger.report('options', this.el.tagName.toLowerCase(), this.el);
        }
    }
    render() {
        if (!this.initCompleted) {
            return;
        }
        return this.renderTable();
    }
    renderTable() {
        logger.debug('alc - renderTable');
        const { ordering, paging, searching } = this.processedOptions;
        return (h(Host, null, h("alc-alert", { type: "warning", visible: this.alertVisibility, "onAlc-hide": () => (this.alertVisibility = false) }, "Tabela reposicionada na primeira p\u00E1gina"), h("div", { class: "alc-datatable__controls" }, h("div", { class: "alc-datatable__controls-order" }, !!ordering ? this.renderOrderControls(this.columns.map(c => c.textContent)) : null, this.renderShowColumnsControls(this.columns.map(c => c.textContent)), this.renderPageLength()), !!searching ? this.renderSearchControl() : null), this.shouldShowLoader() ? this.renderProcessing() : null, h("slot", null), paging ? (h("div", { class: "alc-table__pagination" }, this.renderPageInfo(), this.renderPagination())) : null));
    }
    static get is() { return "alc-datatable"; }
    static get originalStyleUrls() {
        return {
            "base": ["alc-datatable-base.css"],
            "theme": ["alc-datatable.css"]
        };
    }
    static get styleUrls() {
        return {
            "base": ["alc-datatable-base.css"],
            "theme": ["alc-datatable.css"]
        };
    }
    static get properties() {
        return {
            "data": {
                "type": "string",
                "mutable": true,
                "complexType": {
                    "original": "string | JSON",
                    "resolved": "JSON | string",
                    "references": {
                        "JSON": {
                            "location": "global",
                            "id": "global::JSON"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Os dados da tabela"
                },
                "getter": false,
                "setter": false,
                "attribute": "data",
                "reflect": true
            },
            "options": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string | JSON",
                    "resolved": "JSON | string",
                    "references": {
                        "JSON": {
                            "location": "global",
                            "id": "global::JSON"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "As op\u00E7\u00F5es da tabela"
                },
                "getter": false,
                "setter": false,
                "attribute": "options",
                "reflect": false
            },
            "deferStart": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Faz com que o componente aguarde a chamada ao m\u00E9todo `start()` para iniciar o DataTable."
                },
                "getter": false,
                "setter": false,
                "attribute": "defer-start",
                "reflect": true,
                "defaultValue": "false"
            },
            "tableId": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Define o atributo `id` para a tabela (tag `table`), quando ela \u00E9 criada automaticamente pelo componente.\n\u00C9 voc\u00EA n\u00E3o incluir a tag `table` e usar a op\u00E7\u00E3o `stateSave`, \u00E9 necess\u00E1rio definir esse atributo."
                },
                "getter": false,
                "setter": false,
                "attribute": "table-id",
                "reflect": true
            }
        };
    }
    static get states() {
        return {
            "currentPage": {},
            "initCompleted": {},
            "searchText": {},
            "pageLength": {},
            "isProcessing": {},
            "isLoadingActive": {}
        };
    }
    static get events() {
        return [{
                "method": "childRow",
                "name": "alc-child-row",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Ver documenta\u00E7\u00E3o do DataTables.net"
                },
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                }
            }, {
                "method": "columnSizing",
                "name": "alc-column-sizing",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Ver documenta\u00E7\u00E3o do DataTables.net"
                },
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                }
            }, {
                "method": "columnVisibility",
                "name": "alc-column-visibility",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Ver documenta\u00E7\u00E3o do DataTables.net"
                },
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                }
            }, {
                "method": "destroy",
                "name": "alc-destroy",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Ver documenta\u00E7\u00E3o do DataTables.net"
                },
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                }
            }, {
                "method": "draw",
                "name": "alc-draw",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Ver documenta\u00E7\u00E3o do DataTables.net"
                },
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                }
            }, {
                "method": "error",
                "name": "alc-error",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Ver documenta\u00E7\u00E3o do DataTables.net"
                },
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                }
            }, {
                "method": "init",
                "name": "alc-init",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Ver documenta\u00E7\u00E3o do DataTables.net"
                },
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                }
            }, {
                "method": "length",
                "name": "alc-length",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Ver documenta\u00E7\u00E3o do DataTables.net"
                },
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                }
            }, {
                "method": "order",
                "name": "alc-order",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Ver documenta\u00E7\u00E3o do DataTables.net"
                },
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                }
            }, {
                "method": "page",
                "name": "alc-page",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Ver documenta\u00E7\u00E3o do DataTables.net"
                },
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                }
            }, {
                "method": "preDraw",
                "name": "alc-pre-draw",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Ver documenta\u00E7\u00E3o do DataTables.net"
                },
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                }
            }, {
                "method": "preInit",
                "name": "alc-pre-init",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Ver documenta\u00E7\u00E3o do DataTables.net"
                },
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                }
            }, {
                "method": "preXhr",
                "name": "alc-pre-xhr",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Ver documenta\u00E7\u00E3o do DataTables.net"
                },
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                }
            }, {
                "method": "processing",
                "name": "alc-processing",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Ver documenta\u00E7\u00E3o do DataTables.net"
                },
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                }
            }, {
                "method": "requestChild",
                "name": "alc-request-child",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Ver documenta\u00E7\u00E3o do DataTables.net"
                },
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                }
            }, {
                "method": "search",
                "name": "alc-search",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Ver documenta\u00E7\u00E3o do DataTables.net"
                },
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                }
            }, {
                "method": "stateLoadParams",
                "name": "alc-state-load-params",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Ver documenta\u00E7\u00E3o do DataTables.net"
                },
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                }
            }, {
                "method": "stateLoaded",
                "name": "alc-state-loaded",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Ver documenta\u00E7\u00E3o do DataTables.net"
                },
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                }
            }, {
                "method": "stateSaveParams",
                "name": "alc-state-save-params",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Ver documenta\u00E7\u00E3o do DataTables.net"
                },
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                }
            }, {
                "method": "xhr",
                "name": "alc-xhr",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Ver documenta\u00E7\u00E3o do DataTables.net"
                },
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                }
            }, {
                "method": "deselect",
                "name": "alc-deselect",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Ver documenta\u00E7\u00E3o do DataTables.net"
                },
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                }
            }, {
                "method": "select",
                "name": "alc-select",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Ver documenta\u00E7\u00E3o do DataTables.net"
                },
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                }
            }, {
                "method": "selectBlur",
                "name": "alc-select-blur",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Ver documenta\u00E7\u00E3o do DataTables.net"
                },
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                }
            }, {
                "method": "selectItems",
                "name": "alc-select-items",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Ver documenta\u00E7\u00E3o do DataTables.net"
                },
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                }
            }, {
                "method": "selectStyle",
                "name": "alc-select-style",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Ver documenta\u00E7\u00E3o do DataTables.net"
                },
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                }
            }, {
                "method": "userSelect",
                "name": "alc-user-select",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Ver documenta\u00E7\u00E3o do DataTables.net"
                },
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                }
            }];
    }
    static get methods() {
        return {
            "getDataTable": {
                "complexType": {
                    "signature": "() => Promise<any>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<any>"
                },
                "docs": {
                    "text": "Retorna o objeto DataTable.\nPor meio do objeto retornado \u00E9 poss\u00EDvel configurar extens\u00F5es do DataTable.",
                    "tags": []
                }
            },
            "getApi": {
                "complexType": {
                    "signature": "() => Promise<any>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<any>"
                },
                "docs": {
                    "text": "Retorna a API DataTable.",
                    "tags": []
                }
            },
            "start": {
                "complexType": {
                    "signature": "() => Promise<boolean>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        },
                        "HTMLElement": {
                            "location": "global",
                            "id": "global::HTMLElement"
                        }
                    },
                    "return": "Promise<boolean>"
                },
                "docs": {
                    "text": "Inicia o DataTable.\nSempre que `defer-start` for `true`, esse m\u00E9todo deve ser chamado para que o componente inicie seu funcionamento.",
                    "tags": [{
                            "name": "returns",
                            "text": "O valor retornado \u00E9 `true` se o DataTable foi realmente iniciado com a chamada desse m\u00E9todo."
                        }]
                }
            }
        };
    }
    static get elementRef() { return "el"; }
    static get watchers() {
        return [{
                "propName": "isProcessing",
                "methodName": "watchIsProcessing"
            }, {
                "propName": "data",
                "methodName": "dataWatcher"
            }];
    }
    static get listeners() {
        return [{
                "name": "resize",
                "method": "handleResize",
                "target": "window",
                "capture": false,
                "passive": true
            }];
    }
}
__decorate([
    OriginalEvent({
        name: 'childRow',
        cancelable: false,
        detail: ['e', 'show', 'row'],
    })
], AlcDatatable.prototype, "childRow", void 0);
__decorate([
    OriginalEvent({
        name: 'column-sizing',
        cancelable: false,
        detail: ['e', 'settings'],
    })
], AlcDatatable.prototype, "columnSizing", void 0);
__decorate([
    OriginalEvent({
        name: 'column-visibility',
        cancelable: false,
        detail: ['e', 'settings', 'column', 'state', 'recalc'],
    })
], AlcDatatable.prototype, "columnVisibility", void 0);
__decorate([
    OriginalEvent({
        name: 'destroy',
        cancelable: false,
        detail: ['e', 'settings'],
    })
], AlcDatatable.prototype, "destroy", void 0);
__decorate([
    OriginalEvent({
        name: 'draw',
        cancelable: false,
        detail: ['e', 'settings'],
    })
], AlcDatatable.prototype, "draw", void 0);
__decorate([
    OriginalEvent({
        name: 'error',
        cancelable: false,
        detail: ['e', 'settings', 'techNote', 'message'],
    })
], AlcDatatable.prototype, "error", void 0);
__decorate([
    OriginalEvent({
        name: 'init',
        cancelable: false,
        detail: ['e', 'settings', 'json'],
    })
], AlcDatatable.prototype, "init", void 0);
__decorate([
    OriginalEvent({
        name: 'length',
        cancelable: false,
        detail: ['e', 'settings', 'len'],
    })
], AlcDatatable.prototype, "length", void 0);
__decorate([
    OriginalEvent({
        name: 'order',
        cancelable: false,
        detail: ['e', 'settings', 'ordArr'],
    })
], AlcDatatable.prototype, "order", void 0);
__decorate([
    OriginalEvent({
        name: 'page',
        cancelable: false,
        detail: ['e', 'settings'],
    })
], AlcDatatable.prototype, "page", void 0);
__decorate([
    OriginalEvent({
        name: 'preDraw',
        cancelable: true,
        detail: ['e', 'settings'],
    })
], AlcDatatable.prototype, "preDraw", void 0);
__decorate([
    OriginalEvent({
        name: 'preInit',
        cancelable: false,
        detail: ['e', 'settings'],
    })
], AlcDatatable.prototype, "preInit", void 0);
__decorate([
    OriginalEvent({
        name: 'preXhr',
        cancelable: false,
        detail: ['e', 'settings', 'data'],
    })
], AlcDatatable.prototype, "preXhr", void 0);
__decorate([
    OriginalEvent({
        name: 'processing',
        cancelable: false,
        detail: ['e', 'settings', 'processing'],
    })
], AlcDatatable.prototype, "processing", void 0);
__decorate([
    OriginalEvent({
        name: 'requestChild',
        cancelable: false,
        detail: ['e', 'row'],
    })
], AlcDatatable.prototype, "requestChild", void 0);
__decorate([
    OriginalEvent({
        name: 'search',
        cancelable: false,
        detail: ['e', 'settings'],
    })
], AlcDatatable.prototype, "search", void 0);
__decorate([
    OriginalEvent({
        name: 'stateLoadParams',
        cancelable: false,
        detail: ['e', 'settings', 'data'],
    })
], AlcDatatable.prototype, "stateLoadParams", void 0);
__decorate([
    OriginalEvent({
        name: 'stateLoaded',
        cancelable: false,
        detail: ['e', 'settings', 'data'],
    })
], AlcDatatable.prototype, "stateLoaded", void 0);
__decorate([
    OriginalEvent({
        name: 'stateSaveParams',
        cancelable: false,
        detail: ['e', 'settings', 'data'],
    })
], AlcDatatable.prototype, "stateSaveParams", void 0);
__decorate([
    OriginalEvent({
        name: 'xhr',
        cancelable: false,
        detail: ['e', 'settings', 'json', 'xhr'],
    })
], AlcDatatable.prototype, "xhr", void 0);
__decorate([
    OriginalEvent({
        name: 'deselect',
        cancelable: false,
        detail: ['e', 'dt', 'type', 'indexes'],
    })
], AlcDatatable.prototype, "deselect", void 0);
__decorate([
    OriginalEvent({
        name: 'select',
        cancelable: false,
        detail: ['e', 'dt', 'type', 'indexes'],
    })
], AlcDatatable.prototype, "select", void 0);
__decorate([
    OriginalEvent({
        name: 'select-blur',
        cancelable: true,
        detail: ['e', 'dt', 'target', 'originalEvent'],
    })
], AlcDatatable.prototype, "selectBlur", void 0);
__decorate([
    OriginalEvent({
        name: 'selectItems',
        cancelable: false,
        detail: ['e', 'dt', 'items'],
    })
], AlcDatatable.prototype, "selectItems", void 0);
__decorate([
    OriginalEvent({
        name: 'selectStyle',
        cancelable: false,
        detail: ['e', 'dt', 'style'],
    })
], AlcDatatable.prototype, "selectStyle", void 0);
__decorate([
    OriginalEvent({
        name: 'user-select',
        cancelable: true,
        detail: ['e', 'dt', 'type', 'cell', 'originalEvent'],
    })
], AlcDatatable.prototype, "userSelect", void 0);
// Retorna todos os formatos de data considerados válidos.
const getAllDateFormats = () => {
    const dateFormats = ["DD/MM/YYYY", "DD/MM/YY", "D/M/YYYY", "D/M/YY", "DD/M/YYYY", "DD/M/YY", "D/MM/YYYY", "D/MM/YY"];
    const timeFormats = dateFormats.reduce((array, dateFormat) => {
        return [...array, `${dateFormat} HH:mm:ss`, `${dateFormat} HH:mm`, `${dateFormat} HH:mm:ss.S`, `${dateFormat} HH:mm:ss.SS`, `${dateFormat} HH:mm:ss.SSS`];
    }, []);
    return [...dateFormats, ...timeFormats];
};
//# sourceMappingURL=alc-datatable.js.map
