import logger from "../utils/logger";
const noop = () => { };
const setup = (value, domain = [], defaultValue) => {
    if (value === undefined) {
        return defaultValue;
    }
    if (!domain.includes(value)) {
        logger.warn(`"${value}" não é um valor válido; usando o valor padrão "${defaultValue}"`);
        return defaultValue;
    }
    return value;
};
const domains = {
    type: ['info', 'warning', 'error', 'success'],
    dismissible: [true, false],
    visible: [true, false]
};
const defaults = {
    type: 'info',
    dismissible: true,
    visible: true
};
const setupType = value => setup(value, domains.type, defaults.type);
const setupDismissible = value => setup(value, domains.dismissible, defaults.dismissible);
const setupVisible = value => setup(value, domains.visible, defaults.visible);
class AlertCore {
    constructor({ type = defaults.type, dismissible = defaults.dismissible, visible = defaults.visible, dispatchHide = noop, dispatchAfterHide = noop, setVisible = noop }) {
        // Tipo do alert
        this.type = 'info';
        // Indica se o alert pode ou não ser dispensado
        this.dismissible = true;
        // Indica se o alerta está ou não visível
        this.visible = true;
        // Ajusta a visibilidade do alert
        this.setVisible = noop;
        // Dispara o evento alc-hide
        this.dispatchHide = noop;
        // Dispara o evento alc-after-hide
        this.dispatchAfterHide = noop;
        this.hide = () => {
            if (!this.visible) {
                return false;
            }
            const { defaultPrevented } = this.dispatchHide();
            if (defaultPrevented) {
                return false;
            }
            this.setVisible(false);
            this.dispatchAfterHide();
            return true;
        };
        this.show = () => {
            if (!this.visible) {
                this.setVisible(true);
                return true;
            }
            return false;
        };
        this.type = setupType(type);
        this.dismissible = setupDismissible(dismissible);
        this.dispatchAfterHide = dispatchAfterHide;
        this.dispatchHide = dispatchHide;
        this.setVisible = visible => {
            this.visible = visible;
            setVisible(visible);
        };
        this.setVisible(setupVisible(visible));
    }
    ;
}
export { AlertCore, defaults };
//# sourceMappingURL=alc-alert.core.js.map
