import { h, Host } from "@stencil/core";
import { AlertCore } from "./alc-alert.core";
import ALC from "../../core/alc";
import logger from "../utils/logger";
import test from "../utils/testAttributes";
// @TODO Ver se é possível deixar os códigos SVG separados em outros arquivos,
//       mas sem que crie problemas com importação de assets quando for distribuído.
const iconMap = new Map();
iconMap.set('info', {
    label: 'Informação:',
    name: 'info-circle'
});
iconMap.set('error', {
    label: 'Erro:',
    name: 'x-circle'
});
iconMap.set('warning', {
    label: 'Alerta:',
    name: 'exclamation-circle'
});
iconMap.set('success', {
    label: 'Sucesso:',
    name: 'check-circle'
});
// Comentários sobre o comentário (jsdoc-like) abaixo:
//
// 1- O texto livre inicial é colocado na chave `docs` do json.
//
// 2- @slot é uma tag definida pelo StencilJS. É colocado na chave:
//   slots: [
//     {
//       "name": "default",
//       "docs": "Slot para o conteúdo do alert"
//     }
//   ]
//
// 3- @picWidget é um exemplo de tag customizada. É colocado na chave:
//   docsTags: [
//     {
//       "name": "picWidget",
//       "text": "pic-alert"
//     }
//   ]
/**
 * Vamos lá testar.
 * Ver se isso vai funcionar.
 * ^^^^^ [1]
 *
 * @slot - Slot para o conteúdo do alert.
 * @slot summary - Slot para o summary do alert.
 * @picWidget pic-alert
 */
export class Alert {
    constructor() {
        /**
         * Indica se o alert está visível. Pode-se usar essa propriedade em vez dos métodos show/hide.
          */
        this.visible = true;
        /**
         * O tipo do alert, de acordo com a natureza da mensagem nele contido.
         */
        // @TODO O ideal seria buscar o valor default do core, mas não fica legal a documentação
        this.type = 'info';
        /**
         * Define se o alert pode ser dispensado pelo usuário.
         */
        // @TODO O ideal seria buscar o valor default do core, mas não fica legal a documentação
        this.dismissible = true;
        this.setVisible = (visible) => {
            this.visible = visible;
        };
    }
    watchPropVisible(newValue) {
        newValue === true ? this.core.show() : this.core.hide();
    }
    watchType(newValue) {
        this.core.type = newValue;
    }
    watchDismissible(newValue) {
        this.core.dismissible = newValue;
    }
    connectedCallback() {
        this.core = new AlertCore({
            type: this.type,
            dismissible: this.dismissible,
            visible: this.visible,
            dispatchHide: () => this.emitHide(),
            dispatchAfterHide: () => this.emitAfterHide(),
            setVisible: this.setVisible
        });
    }
    /**
     * Fecha o alert.
     * @returns O valor retornado é `true` se o alert foi realmente dispensado com essa chamada ao método.
     */
    async hide() {
        return this.core.hide();
    }
    /**
     * Exibe o alert.
     * @returns O valor retornado é `true` se o alert foi realmente exibido com esa chamada ao método.
     */
    async show() {
        return this.core.show();
    }
    /*
     * Dispara o evento will dismiss
     */
    emitHide() {
        return this.alcHide.emit();
    }
    /*
     * Dispara o evento did dismiss
     */
    emitAfterHide() {
        return this.alcAfterHide.emit();
    }
    /*
     * Renderiza o ícone de acordo com o type
     */
    renderIcon() {
        let icon = iconMap.get(this.core.type);
        return h("alc-icon", { name: icon.name, label: icon.label });
    }
    /*
     * Renderiza o botão "dispensar" se for o caso.
     */
    renderDismissButton() {
        // Will not have a button if !dismissible
        if (!this.core.dismissible) {
            return null;
        }
        return (h("div", Object.assign({ class: "alc-alert__dismiss" }, test('data-test-dismiss')), h("button", { class: `alc-button alc-button-rounded alc-button-rounded--${this.core.type}`, onClick: () => this.hide() }, h("alc-icon", { name: "x-lg", label: "Dispensar" }))));
    }
    componentDidRender() {
        this.el.querySelectorAll('a').forEach(link => {
            link.classList.add('alc-link--color-text');
        });
    }
    /**
     * StencilJS render
     */
    render() {
        logger.debug('render alc-alert', ALC);
        return (h(Host, { key: '659c2cf489d4d1a8da0fc8e6aed725322c9dc38a', style: { display: this.visible ? null : 'none' } }, h("div", { key: 'ce93997657b175b0bebf0fb616f21ecb37738832', class: "alc-alert alc-alert--" + this.core.type }, this.renderIcon(), h("div", { key: '9ad2f7bf6903e63c8e123df01a73f510c6164d3c', class: 'alc-alert__content' }, h("div", { key: '9b3168c210ad5b525c7a34a5273008c06f5d1e73', class: "alc-alert__summary" }, h("slot", { key: '3eebdf45b31d6f86cb5a5d3d6e366e0c062be2ee', name: "summary" })), h("slot", { key: '237e8b7b3dc224f3e37040be1746bfe15190d998' })), this.renderDismissButton())));
    }
    static get is() { return "alc-alert"; }
    static get originalStyleUrls() {
        return {
            "base": ["alc-alert-base.css"],
            "theme": ["alc-alert.css"]
        };
    }
    static get styleUrls() {
        return {
            "base": ["alc-alert-base.css"],
            "theme": ["alc-alert.css"]
        };
    }
    static get properties() {
        return {
            "visible": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Indica se o alert est\u00E1 vis\u00EDvel. Pode-se usar essa propriedade em vez dos m\u00E9todos show/hide."
                },
                "getter": false,
                "setter": false,
                "attribute": "visible",
                "reflect": true,
                "defaultValue": "true"
            },
            "type": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "Type",
                    "resolved": "\"error\" | \"info\" | \"success\" | \"warning\"",
                    "references": {
                        "Type": {
                            "location": "import",
                            "path": "./index",
                            "id": "src/components/alc-alert/index.d.ts::Type"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "O tipo do alert, de acordo com a natureza da mensagem nele contido."
                },
                "getter": false,
                "setter": false,
                "attribute": "type",
                "reflect": true,
                "defaultValue": "'info'"
            },
            "dismissible": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Define se o alert pode ser dispensado pelo usu\u00E1rio."
                },
                "getter": false,
                "setter": false,
                "attribute": "dismissible",
                "reflect": true,
                "defaultValue": "true"
            }
        };
    }
    static get events() {
        return [{
                "method": "alcHide",
                "name": "alc-hide",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Evento disparado quando o alert \u00E9 dispensado."
                },
                "complexType": {
                    "original": "null",
                    "resolved": "null",
                    "references": {}
                }
            }, {
                "method": "alcAfterHide",
                "name": "alc-after-hide",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Evento disparado quando o alert \u00E9 dispensado."
                },
                "complexType": {
                    "original": "null",
                    "resolved": "null",
                    "references": {}
                }
            }];
    }
    static get methods() {
        return {
            "hide": {
                "complexType": {
                    "signature": "() => Promise<boolean>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<boolean>"
                },
                "docs": {
                    "text": "Fecha o alert.",
                    "tags": [{
                            "name": "returns",
                            "text": "O valor retornado \u00E9 `true` se o alert foi realmente dispensado com essa chamada ao m\u00E9todo."
                        }]
                }
            },
            "show": {
                "complexType": {
                    "signature": "() => Promise<boolean>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<boolean>"
                },
                "docs": {
                    "text": "Exibe o alert.",
                    "tags": [{
                            "name": "returns",
                            "text": "O valor retornado \u00E9 `true` se o alert foi realmente exibido com esa chamada ao m\u00E9todo."
                        }]
                }
            }
        };
    }
    static get elementRef() { return "el"; }
    static get watchers() {
        return [{
                "propName": "visible",
                "methodName": "watchPropVisible"
            }, {
                "propName": "type",
                "methodName": "watchType"
            }, {
                "propName": "dismissible",
                "methodName": "watchDismissible"
            }];
    }
}
//# sourceMappingURL=alc-alert.js.map
