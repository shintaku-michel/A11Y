function setCssClasses(table) {
    let headerRows = table.querySelectorAll('thead tr');
    let headerCells = table.querySelectorAll('thead th');
    let rows = table.querySelectorAll('tbody tr');
    let bodyCells = table.querySelectorAll('table tbody td');
    table.classList.add('alc-table');
    headerRows.forEach(row => {
        row.classList.add('alc-table__header-row');
    });
    headerCells.forEach(cell => {
        cell.classList.add('alc-table__header-cell');
    });
    rows.forEach(row => {
        row.classList.add('alc-table__row');
    });
    bodyCells.forEach(cell => {
        cell.classList.add('alc-table__cell');
    });
}
function inlineHeaders(table) {
    let headers = table.querySelectorAll('thead th');
    let headerClones = [];
    headers.forEach((header) => {
        let attrs = header.attributes;
        let clone = document.createElement('div');
        Array.from(attrs).forEach(attr => {
            clone.setAttribute(attr.name, attr.value);
        });
        clone.classList.add('alc-table__inline-header');
        // clone.setAttribute('aria-hidden', 'true');
        header.childNodes.forEach(childNode => {
            clone.appendChild(childNode.cloneNode(true));
        });
        headerClones.push(clone);
    });
    return headerClones;
}
function wrapAll(target, wrapper = document.createElement('div')) {
    [...target.childNodes].forEach(child => wrapper.appendChild(child));
    target.appendChild(wrapper);
    return wrapper;
}
function setInlineHeaders(table) {
    let headers = inlineHeaders(table);
    let rows = table.querySelectorAll('tbody tr');
    rows.forEach(row => {
        let cells = row.querySelectorAll('td');
        cells.forEach((cell, index) => {
            // Evita que seja feito o mesmo processo duas vezes na cÃ©lula
            if (cell.dataset.alcInlineHeader === 'true') {
                return;
            }
            const contentWrapper = document.createElement('div');
            contentWrapper.classList.add('alc-table__cell-content');
            wrapAll(cell, contentWrapper);
            let inlineHeader = headers[index].cloneNode(true);
            cell.insertBefore(inlineHeader, cell.firstChild);
            cell.dataset.alcInlineHeader = 'true';
        });
    });
}
const Table = ({ target }) => {
    setCssClasses(target);
    setInlineHeaders(target);
    return null;
};
export default Table;
export { setInlineHeaders, setCssClasses };
//# sourceMappingURL=table.js.map
