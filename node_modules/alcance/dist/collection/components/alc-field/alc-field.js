import { Host, h } from "@stencil/core";
import { getUniqueId } from "../utils/getUniqueId";
import logger from "../utils/logger";
/**
 * @slot - Slot para o controle de formulário.
 * Pode ser um `input` (text, number, password, email etc.), `select` ou `textarea`.
 *
 * @slot label - Slot para o elemento label do campo. Há opção de adicionar apenas o texto por meio da propriedade `label`.
 * Use esse recurso case seja necessário alguma personalização no HTML referente ao label.
 *
 * @cssClass alc-field__label - Aplicada ao elemento `label`.
 * @cssClass alc-field__core - Aplicada ao elemento que agrupa o controle de formulário, mensagem de erro e texto de ajuda.
*/
export class AlcField {
    constructor() {
        this.describedBy = new Map();
        this.errorId = '';
        this.hintId = '';
        /**
         * Texto de ajuda.
        */
        this.hint = '';
        /**
         * Indica se o input é obrigatório.
        */
        this.required = false;
        /**
         * Texto de mensagem de erro.
        */
        this.errorMsg = '';
    }
    watchErrorMsg(newValue) {
        logger.debug('watchErrorMsg', newValue, this.input);
        if (newValue) {
            if (this.slottedElement.tagName === 'ALC-INPUT-FILE') {
                const mode = this.slottedElement.getAttribute('mode');
                if (mode === 'dropzone') {
                    const dropzoneElement = this.slottedElement.querySelector('.alc-input-file__dropzone');
                    if (dropzoneElement) {
                        dropzoneElement.classList.add('alc-field__input--error');
                    }
                }
                else if (mode === 'input') {
                    const textInputElement = this.slottedElement.querySelector('.alc-input-file__text-input');
                    if (textInputElement) {
                        textInputElement.classList.add('alc-field__input--error');
                    }
                }
                else if (mode === 'button') {
                    const buttonElement = this.slottedElement.querySelector('button.alc-button');
                    if (buttonElement) {
                        buttonElement.classList.add('alc-field__input--error');
                    }
                }
            }
            else {
                // É um elemento nativo
                this.input.classList.add('alc-field__input--error');
            }
        }
        else {
            if (this.slottedElement.tagName === 'ALC-INPUT-FILE') {
                const mode = this.slottedElement.getAttribute('mode');
                if (mode === 'dropzone') {
                    const dropzoneElement = this.slottedElement.querySelector('.alc-input-file__dropzone');
                    if (dropzoneElement) {
                        dropzoneElement.classList.remove('alc-field__input--error');
                    }
                }
                else if (mode === 'input') {
                    const textInputElement = this.slottedElement.querySelector('.alc-input-file__text-input');
                    if (textInputElement) {
                        textInputElement.classList.remove('alc-field__input--error');
                    }
                }
                else if (mode === 'button') {
                    const buttonElement = this.slottedElement.querySelector('button.alc-button');
                    if (buttonElement) {
                        buttonElement.classList.remove('alc-field__input--error');
                    }
                }
            }
            else {
                // É um elemento nativo
                this.input.classList.remove('alc-field__input--error');
            }
        }
    }
    // Função recursiva para encontrar o <input>
    findInputElement(element) {
        if (!element)
            return null;
        const tagName = element.tagName.toLowerCase();
        if (tagName === 'input' || tagName === 'select' || tagName === 'textarea') {
            return element;
        }
        for (let i = 0; i < element.children.length; i++) {
            const found = this.findInputElement(element.children[i]);
            if (found) {
                return found;
            }
        }
        return null;
    }
    async componentDidLoad() {
        // Reserva IDs para os elementos de erro e dica
        this.errorId = getUniqueId();
        this.hintId = getUniqueId();
        // Seleciona o elemento slotted
        this.slottedElement = this.el.querySelector('input, select, textarea, alc-input-file');
        if (this.slottedElement) {
            // Procura o elemento <input> dentro do componente slotted
            this.input = this.findInputElement(this.slottedElement);
            if (this.input) {
                this.input.id = this.input.id || getUniqueId();
                this.input.setAttribute('aria-required', this.required ? 'true' : 'false');
                this.input.classList.add('alc-field__input');
                this.inputId = this.input.getAttribute('id');
                this.watchErrorMsg(this.errorMsg);
                this.describedBy.set('original', this.input.getAttribute('aria-describedby') || '');
            }
        }
        // Configura o label se não estiver usando o slot "label"
        if (!this.label) {
            const labelEl = this.el.querySelector('[slot="label"] label');
            labelEl === null || labelEl === void 0 ? void 0 : labelEl.classList.add('alc-field__label');
            if (labelEl && this.required) {
                const small = document.createElement('small');
                small.setAttribute('aria-hidden', 'true');
                small.innerText = ' (obrigatório)';
                labelEl.appendChild(small);
            }
        }
        // Atualiza os atributos de acessibilidade
        this.updateAriaDescribedBy();
    }
    componentWillRender() {
        this.updateAriaDescribedBy();
    }
    updateAriaDescribedBy() {
        if (this.errorMsg) {
            this.describedBy.set('error', this.errorId);
        }
        else {
            this.describedBy.delete('error');
        }
        if (this.hint) {
            this.describedBy.set('hint', this.hintId);
        }
        else {
            this.describedBy.delete('hint');
        }
        let currentDescribedBy = '';
        currentDescribedBy += ` ${this.describedBy.get('original') || ''}`;
        currentDescribedBy += ` ${this.describedBy.get('error') || ''}`;
        currentDescribedBy += ` ${this.describedBy.get('hint') || ''}`;
        if (this.input)
            this.input.setAttribute('aria-describedby', currentDescribedBy.trim());
    }
    render() {
        return (h(Host, { key: 'f2eb4d7cb47f480863125057a87e555253fa8565', class: {
                'alc-field': true,
            } }, this.label
            ?
                h("div", null, " ", h("label", { class: "alc-field__label", htmlFor: this.inputId }, this.label, this.required
                    ?
                        // aria-hidden porque o "required" do input já é suficiente para informar.
                        h("small", { "aria-hidden": "true" }, " (obrigat\u00F3rio)")
                    :
                        null))
            :
                h("slot", { name: "label" }), h("div", { key: 'd58883931ed0328c2ec0256fc0651681d1e1be4e', class: "alc-field__core" }, h("slot", { key: '598479d10425fc2dfa00d3870b8193d7cf423e84' }), this.errorMsg
            ?
                h("small", { class: "alc-field__text alc-field__text--error", id: this.errorId }, this.errorMsg)
            :
                null, this.hint
            ?
                h("small", { class: "alc-field__text", id: this.hintId }, this.hint)
            :
                null)));
    }
    static get is() { return "alc-field"; }
    static get originalStyleUrls() {
        return {
            "$": ["alc-field.css"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["alc-field.css"]
        };
    }
    static get properties() {
        return {
            "label": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Texto do label do input."
                },
                "getter": false,
                "setter": false,
                "attribute": "label",
                "reflect": true
            },
            "hint": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Texto de ajuda."
                },
                "getter": false,
                "setter": false,
                "attribute": "hint",
                "reflect": true,
                "defaultValue": "''"
            },
            "required": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Indica se o input \u00E9 obrigat\u00F3rio."
                },
                "getter": false,
                "setter": false,
                "attribute": "required",
                "reflect": true,
                "defaultValue": "false"
            },
            "errorMsg": {
                "type": "string",
                "mutable": true,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Texto de mensagem de erro."
                },
                "getter": false,
                "setter": false,
                "attribute": "error-msg",
                "reflect": true,
                "defaultValue": "''"
            }
        };
    }
    static get states() {
        return {
            "input": {},
            "inputId": {},
            "slottedElement": {}
        };
    }
    static get elementRef() { return "el"; }
    static get watchers() {
        return [{
                "propName": "errorMsg",
                "methodName": "watchErrorMsg"
            }];
    }
}
//# sourceMappingURL=alc-field.js.map
