import { h, Host } from "@stencil/core";
export class AlcMenu {
    constructor() {
        this.hasFocus = false;
        this.getListItems = () => Array.from(this.hostElement.querySelectorAll('[role^=menuitem]'));
        this.includeFirstItemInTabNavigation = () => {
            this.items.forEach((item, pos) => {
                item.setAttribute('tabindex', pos === 0 ? '0' : '-1');
            });
        };
        this.removeAllItemsFromTabNavigation = () => {
            this.items.forEach(item => item.setAttribute('tabindex', '-1'));
        };
        this.setHasFocus = (hasFocus = true) => {
            this.hasFocus = hasFocus;
            if (hasFocus) {
                this.removeAllItemsFromTabNavigation();
            }
            else {
                this.includeFirstItemInTabNavigation();
            }
        };
    }
    async refresh() {
        this.items = this.getListItems();
        this.includeFirstItemInTabNavigation();
    }
    handleKeydown(event) {
        if ('ArrowDown' === event.key) {
            event.preventDefault();
            this.handleFocusedItemIndex();
            return;
        }
        if ('ArrowUp' === event.key) {
            event.preventDefault();
            this.handleFocusedItemIndex(-1);
            return;
        }
    }
    /**
     * Focar item recém-selecionado
     */
    handleAlcSelect(e) {
        const index = this.items.findIndex(item => item === e.target);
        if (index === null)
            return;
        this.handleFocusItem(index);
    }
    handleFocusin({ target }) {
        // Se já tem o foco, nada a fazer
        if (this.hasFocus) {
            return;
        }
        if (this.hostElement.contains(target)) {
            this.setHasFocus(true);
        }
    }
    handleFocusout({ relatedTarget }) {
        if (!this.hostElement.contains(relatedTarget)) {
            this.setHasFocus(false);
        }
    }
    handleFocusedItemIndex(direction = 1) {
        const currentIndex = this.items.indexOf(document.activeElement);
        if (currentIndex === -1)
            return;
        let nextIndex = currentIndex + direction;
        const itemsLength = this.items.length - 1;
        if (nextIndex > itemsLength) {
            nextIndex = 0;
        }
        if (nextIndex < 0) {
            nextIndex = itemsLength;
        }
        this.handleFocusItem(nextIndex);
    }
    handleFocusItem(index) {
        const item = this.items[index];
        if (item instanceof HTMLElement) {
            // Seta foco no atual
            item.focus();
        }
    }
    componentDidRender() {
        this.items = this.getListItems();
    }
    componentDidLoad() {
        this.includeFirstItemInTabNavigation();
    }
    render() {
        return (h(Host, { key: '2aa137629ce5187b9191d9885a0b716d51ef4861', role: "menu", class: "alc-menu" }, h("slot", { key: '6442d2320bb9c5b2f83859688fb464ac5ab903da' })));
    }
    static get is() { return "alc-menu"; }
    static get originalStyleUrls() {
        return {
            "$": ["alc-menu.css"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["alc-menu.css"]
        };
    }
    static get methods() {
        return {
            "refresh": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "",
                    "tags": []
                }
            }
        };
    }
    static get elementRef() { return "hostElement"; }
    static get listeners() {
        return [{
                "name": "keydown",
                "method": "handleKeydown",
                "target": undefined,
                "capture": false,
                "passive": false
            }, {
                "name": "alc-select",
                "method": "handleAlcSelect",
                "target": undefined,
                "capture": false,
                "passive": false
            }, {
                "name": "focusin",
                "method": "handleFocusin",
                "target": undefined,
                "capture": false,
                "passive": false
            }, {
                "name": "focusout",
                "method": "handleFocusout",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
}
//# sourceMappingURL=alc-menu.js.map
