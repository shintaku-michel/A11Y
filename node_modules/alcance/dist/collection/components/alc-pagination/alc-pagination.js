import { Host, h } from "@stencil/core";
import { getUniqueId } from "../utils/getUniqueId";
import logger from "../utils/logger";
import test from "../utils/testAttributes";
export class Pagination {
    constructor() {
        this.idSelectPagination = null;
        this.disabledSelect = false;
        /**
         * Número total de páginas.
         */
        this.totalPages = 1;
        /**
         * Número da página atual
         */
        this.currentPage = 1;
        /**
        * @type Array<number>
        * @default []
        *
        * Lista de páginas
        */
        this.pageList = [];
        this.paginationItem = {
            'isFirst': {
                icon: 'chevron-double-left',
                label: 'Ir para primeira página',
            },
            'isLast': {
                icon: 'chevron-double-right',
                label: 'Ir para última página',
            },
            'isPrev': {
                icon: 'chevron-left',
                label: 'Ir para página anterior',
            },
            'isNext': {
                icon: 'chevron-right',
                label: 'Ir para próxima página',
            },
        };
        this.checkPage = (using) => {
            const leftPaginationItems = ['isFirst', 'isPrev'];
            const rightPaginationItems = ['isLast', 'isNext'];
            if (leftPaginationItems.includes(using)) {
                return this.currentPage !== 1;
            }
            if (rightPaginationItems.includes(using)) {
                return this.currentPage !== this.pageList.length;
            }
            return true;
        };
        this.handleSelectedPage = (event) => {
            this.handleChangePage(parseInt(event.target.value), 'isSelect');
        };
        this.renderPaginationItem = (pageNumber, using) => {
            const paginationItemIsDisabled = !this.checkPage(using);
            const paginationItemLabel = (!paginationItemIsDisabled && using !== 'isFirst') ? `, Ir para página ${pageNumber}` : '';
            return (h("li", null, h("button", Object.assign({ onClick: () => this.handleChangePage(pageNumber, using), class: {
                    'alc-button alc-button-rounded': true,
                    'alc-pagination__button--first': using === 'isFirst',
                    'alc-pagination__button--last': using === 'isLast',
                }, "aria-label": this.paginationItem[using].label + paginationItemLabel, "aria-disabled": paginationItemIsDisabled, disabled: paginationItemIsDisabled }, test('data-test-pagination-button')), h("alc-icon", { name: this.paginationItem[using].icon, label: "" }))));
        };
    }
    watchPropTotalPages(newValue, oldValue) {
        if (newValue < this.currentPage) {
            this.totalPages = oldValue;
            logger.warn(`"total-pages" não pode ser menor do que "current-page". Foi mantido o valor ${oldValue}`);
            return;
        }
        this.pageList = [...new Array(newValue)].map((_, index) => index + 1);
    }
    componentWillLoad() {
        this.pageList = [...new Array(this.totalPages)].map((_, index) => index + 1);
        this.idSelectPagination = getUniqueId();
    }
    handleChangePage(pageNumber, using) {
        if (!this.checkPage(using)) {
            return;
        }
        const newChange = this.alcChange.emit({
            from: this.currentPage,
            to: pageNumber,
            using: using,
        });
        this.pageChangeHandler(newChange);
    }
    pageChangeHandler(event) {
        const { using, to } = event.detail;
        switch (using) {
            case 'isFirst':
                this.currentPage = 1;
                break;
            case 'isPrev':
                this.currentPage = this.currentPage - 1;
                break;
            case 'isNext':
                this.currentPage = this.currentPage + 1;
                break;
            case 'isLast':
                this.currentPage = this.totalPages;
                break;
            default:
                this.currentPage = to;
                break;
        }
    }
    render() {
        return (h(Host, { key: 'b9c2cd42db54e71b3c5a51a415954b1c54eb45a1' }, h("nav", { key: '882ca182b295ef0381c3ded7d7a0a0c050b46433', role: "navigation", "aria-label": "Navega\u00E7\u00E3o paginada", class: "alc-pagination" }, h("ul", { key: '477efe3227941828b93bce80c41059df2c5b0a98', class: "alc-pagination__content" }, this.renderPaginationItem(1, 'isFirst'), this.renderPaginationItem(this.currentPage - 1, 'isPrev'), h("li", { key: '9d359535992c6a6774da1d48470179da7eb0f58e', class: "alc-pagination__item" }, h("label", { key: 'fdeecaa87d18f33ba5a1d62cfe5405230ff6d7b9', htmlFor: this.idSelectPagination }, "P\u00E1gina"), h("select", { key: '9b30bfdd417a4dfbc719ef1625debd5ff4b650c4', onChange: this.handleSelectedPage, class: "alc-pagination__select", id: this.idSelectPagination, disabled: this.disabledSelect }, this.pageList.map(page => (h("option", { value: page, selected: page === this.currentPage, "aria-label": `Página ${page}` }, page)))), "de ", this.totalPages), this.renderPaginationItem(this.currentPage + 1, 'isNext'), this.renderPaginationItem(this.pageList.length, 'isLast')))));
    }
    static get is() { return "alc-pagination"; }
    static get originalStyleUrls() {
        return {
            "base": ["alc-pagination-base.css"],
            "theme": ["alc-pagination.css"]
        };
    }
    static get styleUrls() {
        return {
            "base": ["alc-pagination-base.css"],
            "theme": ["alc-pagination.css"]
        };
    }
    static get properties() {
        return {
            "totalPages": {
                "type": "number",
                "mutable": true,
                "complexType": {
                    "original": "number",
                    "resolved": "number",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "N\u00FAmero total de p\u00E1ginas."
                },
                "getter": false,
                "setter": false,
                "attribute": "total-pages",
                "reflect": true,
                "defaultValue": "1"
            },
            "currentPage": {
                "type": "number",
                "mutable": true,
                "complexType": {
                    "original": "number",
                    "resolved": "number",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "N\u00FAmero da p\u00E1gina atual"
                },
                "getter": false,
                "setter": false,
                "attribute": "current-page",
                "reflect": true,
                "defaultValue": "1"
            }
        };
    }
    static get states() {
        return {
            "pageList": {}
        };
    }
    static get events() {
        return [{
                "method": "alcChange",
                "name": "alc-change",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Disparado quando ocorre a mudan\u00E7a de uma p\u00E1gina para outra."
                },
                "complexType": {
                    "original": "{\n    from: number;\n    to: number;\n    using: 'isFirst' | 'isPrev' | 'isLast' | 'isNext' | 'isSelect'\n  }",
                    "resolved": "{ from: number; to: number; using: \"isFirst\" | \"isPrev\" | \"isLast\" | \"isNext\" | \"isSelect\"; }",
                    "references": {}
                }
            }];
    }
    static get watchers() {
        return [{
                "propName": "totalPages",
                "methodName": "watchPropTotalPages"
            }];
    }
}
//# sourceMappingURL=alc-pagination.js.map
