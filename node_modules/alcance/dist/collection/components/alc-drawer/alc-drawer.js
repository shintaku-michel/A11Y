import { Host, h } from "@stencil/core";
import { getFocusableElements, focusFirstElement, handleKeyDown } from "../utils/keydown";
import test from "../utils/testAttributes";
import { lockBodyScroll, unlockBodyScroll } from "../utils/scrollLockManager";
export class AlcDrawer {
    constructor() {
        this.triggerElement = null;
        /**
        * @type Element ou ID
        * @description Elemento ou ID do elemento que será focado quando o drawer fechar.
        */
        this.elementToFocus = null;
        /**
        * @type boolean
        * @description Define se o drawer está aberto ou fechado.
        */
        this.isVisible = false;
        this.getDrawerRef = (element) => this.drawerRef = element;
        this.handleFocusWhenCloseDrawer = () => {
            if (!!this.elementToFocus) {
                let element = this.elementToFocus;
                if (typeof element === 'string') {
                    element = document.getElementById(element);
                }
                return !!element ? element.focus() : null;
            }
            const defaultFocus = ['BODY', 'DOCUMENT'];
            const hasTriggerElement = !!this.triggerElement && document.body.contains(this.triggerElement);
            if (hasTriggerElement && !defaultFocus.includes(this.triggerElement.tagName)) {
                this.triggerElement.focus();
                return;
            }
            return;
        };
    }
    watchIsVisible(isVisible) {
        if (isVisible) {
            lockBodyScroll();
            this.triggerElement = document.activeElement;
            this.show();
            return isVisible;
        }
        unlockBodyScroll();
        this.hide();
        return isVisible;
    }
    /**
    * Método para abrir o drawer.
    */
    async show() {
        if (this.isVisible) {
            return false;
        }
        const { defaultPrevented } = this.alcShow.emit();
        if (defaultPrevented) {
            return false;
        }
        this.isVisible = true;
        this.alcAfterShow.emit();
        return true;
    }
    /**
    * Método para fechar o drawer.
    */
    async hide() {
        if (!this.isVisible) {
            return false;
        }
        const { defaultPrevented } = this.alcHide.emit();
        if (defaultPrevented) {
            return false;
        }
        this.isVisible = false;
        this.alcAfterHide.emit();
        this.handleFocusWhenCloseDrawer();
        return true;
    }
    /**
    * Foco fica dentro do drawer quando aberta.
    */
    handleKeyDown(event) {
        if (!this.isVisible) {
            return;
        }
        ;
        if (event.defaultPrevented) {
            return;
        }
        if (event.key === 'Escape') {
            event.preventDefault();
            this.hide();
            return;
        }
        if (event.key !== 'Tab')
            return;
        const focusableElements = getFocusableElements(this.drawerRef);
        handleKeyDown(event, focusableElements);
    }
    componentDidRender() {
        // Pega os elementos focáveis a cada renderização (Pode haver mudanças no drawer).
        const focusableElements = getFocusableElements(this.drawerRef);
        // Após o componente renderizar e estiver aberto, então ja coloca foco dentro do drawer.
        if (this.isVisible) {
            focusFirstElement(focusableElements);
        }
    }
    connectedCallback() {
        if (this.isVisible) {
            lockBodyScroll();
        }
    }
    disconnectedCallback() {
        if (this.isVisible) {
            unlockBodyScroll();
        }
    }
    render() {
        return (h(Host, { key: 'ca2677c0cd1d14c67bafa67fce53f5b424f4685e', style: { display: this.isVisible ? 'block' : 'none' } }, h("div", { key: '8acd999442e9acf8a2e809cfa7815da89eee94cb', class: "alc-drawer__overlay" }, h("div", { key: 'fb8f0c024488670e1b8d2ecdb127bf3932b12571', class: "alc-drawer__content bg-white dark:bg-black", role: "dialog", "aria-modal": "true", ref: this.getDrawerRef }, h("div", { key: '849e2ea5ff524e1d38e56f9d8927dfccf7f0a4d9', class: "alc-drawer__header" }, h("button", Object.assign({ key: '4c1cb2eeb3873269d1e22c2562aca16194483c0f', class: "alc-button alc-button-rounded", onClick: () => this.hide() }, test('data-test-close-button')), h("alc-icon", Object.assign({ key: '3d49c3ad15ddaa614ff1c247de746248e94c498b', name: "x-lg", label: "Fechar Drawer" }, test('data-test-close-icon'))))), h("div", { key: 'ece60e72f6084d1a481561acb9978f769e4178d3' }, h("slot", { key: '8c460fb7b5dcc59fe786028b1a7557e0308f5b7c' }))))));
    }
    static get is() { return "alc-drawer"; }
    static get originalStyleUrls() {
        return {
            "base": ["alc-drawer-base.css"],
            "theme": ["alc-drawer.css"]
        };
    }
    static get styleUrls() {
        return {
            "base": ["alc-drawer-base.css"],
            "theme": ["alc-drawer.css"]
        };
    }
    static get properties() {
        return {
            "elementToFocus": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "HTMLElement | string",
                    "resolved": "HTMLElement | string",
                    "references": {
                        "HTMLElement": {
                            "location": "global",
                            "id": "global::HTMLElement"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [{
                            "name": "type",
                            "text": "Element ou ID"
                        }, {
                            "name": "description",
                            "text": "Elemento ou ID do elemento que ser\u00E1 focado quando o drawer fechar."
                        }],
                    "text": ""
                },
                "getter": false,
                "setter": false,
                "attribute": "element-to-focus",
                "reflect": false,
                "defaultValue": "null"
            },
            "isVisible": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [{
                            "name": "type",
                            "text": "boolean"
                        }, {
                            "name": "description",
                            "text": "Define se o drawer est\u00E1 aberto ou fechado."
                        }],
                    "text": ""
                },
                "getter": false,
                "setter": false,
                "attribute": "is-visible",
                "reflect": true,
                "defaultValue": "false"
            }
        };
    }
    static get events() {
        return [{
                "method": "alcShow",
                "name": "alc-show",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Evento disparado quando o drawer vai abrir"
                },
                "complexType": {
                    "original": "null",
                    "resolved": "null",
                    "references": {}
                }
            }, {
                "method": "alcAfterShow",
                "name": "alc-after-show",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Evento disparado quando o drawer abriu"
                },
                "complexType": {
                    "original": "null",
                    "resolved": "null",
                    "references": {}
                }
            }, {
                "method": "alcHide",
                "name": "alc-hide",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Evento disparado quando o drawer vai fechar"
                },
                "complexType": {
                    "original": "null",
                    "resolved": "null",
                    "references": {}
                }
            }, {
                "method": "alcAfterHide",
                "name": "alc-after-hide",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Evento disparado quando o drawer fechou"
                },
                "complexType": {
                    "original": "null",
                    "resolved": "null",
                    "references": {}
                }
            }];
    }
    static get methods() {
        return {
            "show": {
                "complexType": {
                    "signature": "() => Promise<boolean>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<boolean>"
                },
                "docs": {
                    "text": "M\u00E9todo para abrir o drawer.",
                    "tags": []
                }
            },
            "hide": {
                "complexType": {
                    "signature": "() => Promise<boolean>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<boolean>"
                },
                "docs": {
                    "text": "M\u00E9todo para fechar o drawer.",
                    "tags": []
                }
            }
        };
    }
    static get watchers() {
        return [{
                "propName": "isVisible",
                "methodName": "watchIsVisible"
            }];
    }
    static get listeners() {
        return [{
                "name": "keydown",
                "method": "handleKeyDown",
                "target": "document",
                "capture": false,
                "passive": false
            }];
    }
}
//# sourceMappingURL=alc-drawer.js.map
