{"version":3,"file":"alc-drawer.js","sourceRoot":"","sources":["../../../../src/components/alc-drawer/alc-drawer.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Host, h, Prop, Method, Listen, Event, EventEmitter, Watch } from '@stencil/core';\nimport { getFocusableElements, focusFirstElement, handleKeyDown } from '../utils/keydown';\nimport test from '../utils/testAttributes';\nimport { lockBodyScroll, unlockBodyScroll } from '../utils/scrollLockManager';\n@Component({\n  tag: 'alc-drawer',\n  styleUrls: {\n    base: 'alc-drawer-base.css',\n    theme: 'alc-drawer.css'\n  },\n  scoped: false,\n})\nexport class AlcDrawer {\n  private drawerRef?: HTMLElement;\n  private triggerElement = null;\n\n  /**\n  * @type Element ou ID\n  * @description Elemento ou ID do elemento que será focado quando o drawer fechar.\n  */\n  @Prop() elementToFocus?: HTMLElement | string = null;\n\n  /**\n  * @type boolean\n  * @description Define se o drawer está aberto ou fechado.\n  */\n  @Prop({ mutable: true, reflect: true }) isVisible?: boolean = false;\n\n  @Watch('isVisible')\n  watchIsVisible(isVisible: boolean) {\n    if (isVisible) {\n      lockBodyScroll();\n      this.triggerElement = document.activeElement as HTMLElement;\n      this.show();\n      return isVisible;\n    }\n\n    unlockBodyScroll();\n    this.hide();\n    return isVisible;\n  }\n\n  /**\n   * Evento disparado quando o drawer vai abrir\n   */\n  @Event({\n    eventName: 'alc-show',\n    cancelable: true,\n    bubbles: true\n  }) alcShow: EventEmitter<null>;\n\n  /**\n   * Evento disparado quando o drawer abriu\n   */\n  @Event({\n    eventName: 'alc-after-show',\n    cancelable: false,\n    bubbles: true\n  }) alcAfterShow: EventEmitter<null>;\n\n  /**\n  * Evento disparado quando o drawer vai fechar\n  */\n  @Event({\n    eventName: 'alc-hide',\n    cancelable: true,\n    bubbles: true\n  }) alcHide: EventEmitter<null>;\n\n  /**\n   * Evento disparado quando o drawer fechou\n   */\n  @Event({\n    eventName: 'alc-after-hide',\n    cancelable: false,\n    bubbles: true\n  }) alcAfterHide: EventEmitter<null>;\n\n  /**\n  * Método para abrir o drawer.\n  */\n  @Method()\n  async show(): Promise<boolean> {\n    if (this.isVisible) {\n      return false;\n    }\n\n    const { defaultPrevented } = this.alcShow.emit();\n    if (defaultPrevented) {\n      return false;\n    }\n\n    this.isVisible = true;\n    this.alcAfterShow.emit();\n\n    return true;\n  }\n\n  /**\n  * Método para fechar o drawer.\n  */\n  @Method()\n  async hide(): Promise<boolean> {\n    if (!this.isVisible) {\n      return false;\n    }\n\n    const { defaultPrevented } = this.alcHide.emit();\n    if (defaultPrevented) {\n      return false;\n    }\n\n    this.isVisible = false;\n    this.alcAfterHide.emit();\n\n    this.handleFocusWhenCloseDrawer();\n\n    return true;\n  }\n\n  /**\n  * Foco fica dentro do drawer quando aberta.\n  */\n  @Listen('keydown', { target: 'document' })\n  handleKeyDown(event: KeyboardEvent) {\n    if (!this.isVisible) {\n      return;\n    };\n\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    if(event.key === 'Escape') {\n      event.preventDefault();\n      this.hide();\n      return;\n    }\n\n    if (event.key !== 'Tab') return;\n    const focusableElements = getFocusableElements(this.drawerRef);\n    handleKeyDown(event, focusableElements);\n  }\n\n  componentDidRender() {\n    // Pega os elementos focáveis a cada renderização (Pode haver mudanças no drawer).\n    const focusableElements = getFocusableElements(this.drawerRef);\n\n    // Após o componente renderizar e estiver aberto, então ja coloca foco dentro do drawer.\n    if (this.isVisible) {\n      focusFirstElement(focusableElements);\n    }\n\n  }\n\n  connectedCallback() {\n    if (this.isVisible) {\n      lockBodyScroll();\n    }\n  }\n\n  disconnectedCallback() {\n    if (this.isVisible) {\n      unlockBodyScroll();\n    }\n  }\n\n  private getDrawerRef = (element) => this.drawerRef = element as HTMLElement;\n\n  private handleFocusWhenCloseDrawer = () => {\n    if(!!this.elementToFocus) {\n      let element = this.elementToFocus;\n      if(typeof element === 'string') {\n        element = document.getElementById(element);\n      }\n      return !!element ? element.focus() : null;\n    }\n\n    const defaultFocus = ['BODY', 'DOCUMENT'];\n    const hasTriggerElement = !!this.triggerElement && document.body.contains(this.triggerElement);\n\n    if(hasTriggerElement && !defaultFocus.includes(this.triggerElement.tagName)){\n      this.triggerElement.focus();\n      return;\n    }\n\n    return;\n  }\n\n  render() {\n    return (\n      <Host style={{ display: this.isVisible ? 'block' : 'none' }}>\n        <div class=\"alc-drawer__overlay\">\n          <div\n            class=\"alc-drawer__content bg-white dark:bg-black\"\n            role=\"dialog\"\n            aria-modal=\"true\"\n            ref={this.getDrawerRef}\n          >\n            <div class=\"alc-drawer__header\">\n              <button\n                class=\"alc-button alc-button-rounded\"\n                onClick={() => this.hide()}\n                {...test('data-test-close-button')}\n              >\n                <alc-icon name=\"x-lg\" label=\"Fechar Drawer\" {...test('data-test-close-icon')} />\n              </button>\n            </div>\n            <div>\n              <slot></slot>\n            </div>\n          </div>\n        </div>\n      </Host>\n    );\n  }\n\n}\n"]}