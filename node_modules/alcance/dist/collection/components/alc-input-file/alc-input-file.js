import { h, Host } from "@stencil/core";
import logger from "../utils/logger";
import { getUniqueId } from "../utils/getUniqueId";
import test from "../utils/testAttributes";
export class AlcInputFile {
    constructor() {
        this.idInputFilePolite = null;
        this.idLabel = null;
        this.idDropzoneText = null;
        /**
         * Altera o funcionamento para aceitar vários arquivos.
         */
        this.multiple = false;
        /**
         * Define tipos de arquivos específicos para envio. Padrão: Todos.
         */
        this.accept = '*/*';
        /**
         * Desativa o componente.
         */
        this.disabled = false;
        /**
         * Indica se é obrigatório.
         */
        this.required = false;
        /**
         * Define o tipo de botão que vai ser renderizado.
         */
        this.buttonType = undefined;
        /**
         * Modo de visualização do componente.
         * Pode ser 'button', 'input' ou 'dropzone'.
         */
        this.mode = 'button';
        this.files = [];
        this.maxInputTextLength = 50; // Valor inicial arbitrário
        this.renderFiles = () => {
            return this.files.map(file => (h("div", Object.assign({ class: "alc-input-file__file" }, test('data-test-file')), h("span", null, file.name, " (", this.formatFileSize(file.size), ")"), h("button", Object.assign({ class: "alc-button alc-button-rounded", onClick: () => this.handleRemove(file), "aria-label": `Remover arquivo ${file.name}` }, test('data-test-delete-file-button')), h("alc-icon", { name: "x", label: "Apagar" })))));
        };
        this.renderFileInfo = () => {
            const totalSize = this.files.reduce((acc, file) => acc + file.size, 0);
            const totalSizeFormatted = this.formatFileSize(totalSize);
            const fileCount = this.files.length;
            const fileText = fileCount === 1 ? 'arquivo' : 'arquivos';
            return (h("span", Object.assign({}, test('data-test-file-info')), `${fileCount} ${fileText} (${totalSizeFormatted} no total)`));
        };
        this.renderPolite = () => {
            let politeText = 'Nenhum arquivo selecionado.';
            if (this.files.length === 1) {
                politeText = 'Arquivo selecionado: ' + this.files[0].name;
            }
            if (this.files.length > 1) {
                const fileNames = this.files.map(file => file.name).join('; ');
                politeText = this.files.length + ' arquivos selecionados: ' + fileNames;
            }
            return (h("span", { "aria-live": "polite", class: "sr-only", id: this.idInputFilePolite, role: "status" }, politeText));
        };
        this.invokeFileInput = () => {
            const inputClick = this.el.querySelector('#' + this.idInput);
            inputClick.click();
        };
        this.handleRemove = (file) => {
            this.files = this.files.filter(currentFile => currentFile !== file);
            // Atualiza os arquivos do input
            const dataTransfer = new DataTransfer();
            this.files.forEach(f => dataTransfer.items.add(f));
            const inputFileElement = this.el.querySelector('#' + this.idInput);
            inputFileElement.files = dataTransfer.files;
            // Ler o conteúdo dos arquivos restantes e emitir o evento
            this.readFilesAndEmitEvent(this.files);
        };
        this.handleRemoveAll = () => {
            this.files = [];
            const inputFileElement = this.el.querySelector('#' + this.idInput);
            inputFileElement.value = '';
            this.alcFileSelected.emit({ files: [] });
        };
        this.handleDrop = (e) => {
            var _a;
            e.preventDefault();
            e.stopPropagation();
            if (this.disabled)
                return;
            const droppedFiles = (_a = e.dataTransfer) === null || _a === void 0 ? void 0 : _a.files;
            if (droppedFiles && droppedFiles.length > 0) {
                const filesArray = Array.from(droppedFiles);
                if (this.multiple) {
                    this.files = [...this.files, ...filesArray];
                }
                else {
                    this.files = [filesArray[0]];
                }
                // Atualiza os arquivos do input
                const dataTransfer = new DataTransfer();
                this.files.forEach(f => dataTransfer.items.add(f));
                const inputFileElement = this.el.querySelector('#' + this.idInput);
                inputFileElement.files = dataTransfer.files;
                // Ler o conteúdo dos arquivos e emitir o evento
                this.readFilesAndEmitEvent(this.files);
            }
        };
        this.handleDragOver = (e) => {
            e.preventDefault();
            e.stopPropagation();
        };
        this.handleDragEnter = (e) => {
            e.preventDefault();
            e.stopPropagation();
            if (this.disabled)
                return;
            const dropzone = e.currentTarget;
            dropzone.classList.add('alc-input-file__dropzone--dragover');
        };
        this.handleDragLeave = (e) => {
            e.preventDefault();
            e.stopPropagation();
            if (this.disabled)
                return;
            const dropzone = e.currentTarget;
            dropzone.classList.remove('alc-input-file__dropzone--dragover');
        };
    }
    /**
     * Retorna array de arquivos selecionados com seus blobs.
     * @returns Lista de arquivos com conteúdo.
     */
    async getFiles() {
        const inputFileElement = this.el.querySelector('#' + this.idInput);
        const files = Array.from(inputFileElement.files || []);
        const filesWithContent = await Promise.all(files.map(async (file) => {
            const content = await file.arrayBuffer();
            return { file, content };
        }));
        return filesWithContent;
    }
    /**
     * Limpa os dados do input e a lista de arquivos.
     */
    async clear() {
        this.files = [];
        const inputFileElement = this.el.querySelector('#' + this.idInput);
        inputFileElement.value = '';
    }
    handleFileChange(e) {
        const input = e.target;
        const files = Array.from(input.files || []);
        this.files = files;
        // Ler o conteúdo dos arquivos e emitir o evento
        this.readFilesAndEmitEvent(files);
    }
    async readFilesAndEmitEvent(files) {
        const filesWithContent = await Promise.all(files.map(async (file) => {
            const content = await file.arrayBuffer();
            return { file, content };
        }));
        this.alcFileSelected.emit({ files: filesWithContent });
    }
    formatFileSize(sizeInBytes) {
        const units = ['B', 'KB', 'MB', 'GB', 'TB'];
        let size = sizeInBytes;
        let unitIndex = 0;
        while (size >= 1024 && unitIndex < units.length - 1) {
            size = size / 1024;
            unitIndex++;
        }
        return `${size.toFixed(2)} ${units[unitIndex]}`;
    }
    componentWillLoad() {
        // Antes do componente carregar, cria um id para o controle de aria-live
        this.idInputFilePolite = getUniqueId();
        this.idLabel = getUniqueId();
        this.idDropzoneText = getUniqueId();
    }
    componentDidLoad() {
        if (this.mode === 'input') {
            this.textInputElement = this.el.querySelector('.alc-input-file__text-input');
            this.updateMaxInputTextLength();
            this.initializeResizeObserver();
            // Observa mudanças no número de arquivos para atualizar o tamanho disponível
            new MutationObserver(() => {
                this.updateMaxInputTextLength();
            }).observe(this.el, { childList: true, subtree: true });
        }
    }
    disconnectedCallback() {
        if (this.resizeObserver) {
            this.resizeObserver.disconnect();
        }
    }
    initializeResizeObserver() {
        this.resizeObserver = new ResizeObserver(() => {
            this.updateMaxInputTextLength();
        });
        this.resizeObserver.observe(this.textInputElement);
    }
    updateMaxInputTextLength() {
        if (!this.textInputElement)
            return;
        // Obtém a largura total do input
        const inputWidth = this.textInputElement.offsetWidth;
        // Largura do botão de remover (close button)
        const closeButtonWidth = this.files.length > 0 ? 28 : 0; // 28px se o botão estiver presente, 0 se não
        // Padding esquerdo
        let paddingLeft = 12; // Padding padrão quando não há ícone (em pixels)
        if (this.iconName) {
            paddingLeft = 40; // Padding maior quando há ícone (corresponde a pl-10)
        }
        // Padding direito (para o botão de remover ou padding padrão)
        const paddingRight = closeButtonWidth > 0 ? 40 : 12; // 40px se o botão estiver presente, 12px se não
        // Espaçamento total (padding esquerdo + padding direito)
        const totalPadding = paddingLeft + paddingRight;
        // Calcula a largura disponível
        const availableWidth = inputWidth - totalPadding;
        // Estima o número de caracteres que cabem no espaço disponível
        const characterWidth = 7.8; // Largura média de um caractere em pixels
        const maxChars = Math.floor(availableWidth / characterWidth);
        // Atualizar o estado
        this.maxInputTextLength = maxChars > 0 ? maxChars : 10; // Define um mínimo de 10 caracteres
    }
    truncateText(text, maxLength) {
        if (text.length <= maxLength) {
            return text;
        }
        return text.substring(0, maxLength - 3) + '...';
    }
    render() {
        var _a;
        (_a = this.idInput) !== null && _a !== void 0 ? _a : logger.report('id-input', this.el.tagName.toLowerCase(), this.el);
        const inputAttributes = {
            type: 'file',
            id: this.idInput,
            class: 'alc-input-file__input',
            multiple: this.multiple,
            accept: this.accept,
            disabled: this.disabled,
            onChange: (e) => this.handleFileChange(e),
            required: this.required // A obrigatoriedade fica no file input real
        };
        const fileInput = h("input", Object.assign({ key: '2035a612a2a06be66cadc9bb9abdbe14b4d3fea9' }, inputAttributes, test('data-test-file-input')));
        // Obtém os nomes dos arquivos
        const fileNames = this.files.map(file => file.name);
        // Junta os nomes dos arquivos e trunca o texto se necessário
        const inputTextValue = this.truncateText(fileNames.join(', '), this.maxInputTextLength);
        // Define o atributo title para mostrar os nomes completos ao passar o mouse
        const inputTitle = fileNames.join(', ');
        return (h(Host, { key: '4014a1d76f8469fff2c900d42e18c3a20d65dc41' }, h("slot", { key: '6fd005ff39bc1c29f968851f1bf9ed18996c0fbe' }), this.renderPolite(), this.mode === 'button' && (h("div", { key: 'c52a0c22d813fa13ead54e4f68f3e0380d5e828d', class: "alc-input-file__field" }, h("button", Object.assign({ key: 'b865bc268007d20fd5c314f8f4a205896085f0f1', class: `alc-button ${this.buttonType === 'secondary' ? 'alc-button--secondary' : ''}`, onClick: this.invokeFileInput, disabled: this.disabled }, test('data-test-button')), h("span", { key: '2a9642c7d0a89f3aee66877527f75216d6110c7b', class: "alc-input-file__text-button" }, this.iconName && h("alc-icon", { key: '19fa2cb81759e3a26d5ef8d9908808d6346ab90f', name: this.iconName, label: "" }), this.multiple ? 'Escolher arquivos' : 'Escolher arquivo')), h("div", Object.assign({ key: '1c8a116685150a992bc2ef5dcb709bfea93f8a9c', class: "alc-input-file__content", "aria-controls": this.idInputFilePolite }, test('data-test-file-content')), this.files.length > 0 ? (this.renderFiles()) : (h("small", { class: "alc-input-file__text" }, "Nenhum arquivo selecionado"))))), this.mode === 'input' && (h("div", { key: '75a462b4ed59c6672ffd6b12352963449425bc93', class: "alc-input-file__field" }, h("div", { key: '5e9ede15d24855a494e4867936b8f352daa009e9', class: "alc-input-file__input-container" }, h("div", { key: '0f60d4544e6c10efa31b810e7c4b4054a8eaec3d', class: `alc-input-file__input-wrapper ${this.iconName ? 'alc-input-file__input-wrapper--with-icon' : ''}` }, this.iconName && (h("alc-icon", { key: '5ac6e47aa8084c06754606436a125e687c803251', class: "alc-input-file__icon", name: this.iconName, label: "" })), h("input", Object.assign({ key: 'f3dd7623af2747930fbe1792dcd660e3e4ec24e2', type: "text", class: "alc-input-file__text-input", readOnly: true, value: inputTextValue, "aria-labelledby": this.idLabel, placeholder: "Selecione um arquivo", onClick: this.invokeFileInput, onKeyDown: (e) => {
                if (e.key === 'Enter' || e.key === ' ') {
                    e.preventDefault();
                    this.invokeFileInput();
                }
            }, "aria-description": inputTitle }, test('data-test-input'))), this.files.length > 0 && (h("button", Object.assign({ key: 'e57be5e726b1dffa4fe673e30ae076c78f118320', class: "alc-input-file__remove-button", onClick: this.handleRemoveAll, "aria-label": "Remover arquivos selecionados" }, test('data-test-delete-file-button')), h("alc-icon", { key: '4ff389c91553e5061225f8a4090e7903de3edf13', name: "x", label: "Apagar" }))))), h("div", { key: '113752296f8b66d3b204b3fcf266d71c4bd5171b', class: "alc-input-file__info" }, this.files.length > 0 ? this.renderFileInfo() : ''))), this.mode === 'dropzone' && (h("div", { key: 'e8b5fe04f1c073c067d81437294a988c99cd1a03', class: "alc-input-file__field" }, h("div", Object.assign({ key: 'a340dfc0aa1387332820220db7052690278c1ac0', class: `alc-input-file__dropzone ${this.disabled ? 'alc-input-file__dropzone--disabled' : ''}`, onDrop: this.handleDrop, onDragOver: this.handleDragOver, onDragEnter: this.handleDragEnter, onDragLeave: this.handleDragLeave, role: "button", tabIndex: 0, "aria-labelledby": this.idLabel, "aria-describedby": this.idDropzoneText, onClick: this.invokeFileInput, onKeyDown: (e) => {
                if (e.key === 'Enter' || e.key === ' ') {
                    e.preventDefault();
                    this.invokeFileInput();
                }
            } }, test('data-test-dropzone')), this.iconName && h("alc-icon", { key: 'e7335363a685a87839caa04eb07a7ec7904b33c3', name: this.iconName, label: "" }), h("span", { key: 'd5299aa97c8d78ca42f0470898ace7e0e313bf8f', class: "alc-input-file__dropzone-text", id: this.idDropzoneText }, "Arraste e solte arquivos aqui ou clique para selecionar")), h("div", { key: '4a31ad607c0bc19d4eb4ba8848053a3f13ac1c2d', class: "alc-input-file__content", "aria-controls": this.idInputFilePolite }, this.files.length > 0 ? (this.renderFiles()) : ('')))), fileInput));
    }
    static get is() { return "alc-input-file"; }
    static get originalStyleUrls() {
        return {
            "$": ["alc-input-file.css"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["alc-input-file.css"]
        };
    }
    static get properties() {
        return {
            "multiple": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Altera o funcionamento para aceitar v\u00E1rios arquivos."
                },
                "getter": false,
                "setter": false,
                "attribute": "multiple",
                "reflect": true,
                "defaultValue": "false"
            },
            "idInput": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": true,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Obrigat\u00F3rio. ID do input."
                },
                "getter": false,
                "setter": false,
                "attribute": "id-input",
                "reflect": true
            },
            "accept": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Define tipos de arquivos espec\u00EDficos para envio. Padr\u00E3o: Todos."
                },
                "getter": false,
                "setter": false,
                "attribute": "accept",
                "reflect": true,
                "defaultValue": "'*/*'"
            },
            "disabled": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Desativa o componente."
                },
                "getter": false,
                "setter": false,
                "attribute": "disabled",
                "reflect": true,
                "defaultValue": "false"
            },
            "required": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Indica se \u00E9 obrigat\u00F3rio."
                },
                "getter": false,
                "setter": false,
                "attribute": "required",
                "reflect": true,
                "defaultValue": "false"
            },
            "buttonType": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "'secondary' | undefined",
                    "resolved": "\"secondary\"",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Define o tipo de bot\u00E3o que vai ser renderizado."
                },
                "getter": false,
                "setter": false,
                "attribute": "button-type",
                "reflect": true,
                "defaultValue": "undefined"
            },
            "iconName": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "\u00CDcone a ser exibido no in\u00EDcio do input."
                },
                "getter": false,
                "setter": false,
                "attribute": "icon-name",
                "reflect": true
            },
            "mode": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "'button' | 'input' | 'dropzone'",
                    "resolved": "\"button\" | \"dropzone\" | \"input\"",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Modo de visualiza\u00E7\u00E3o do componente.\nPode ser 'button', 'input' ou 'dropzone'."
                },
                "getter": false,
                "setter": false,
                "attribute": "mode",
                "reflect": true,
                "defaultValue": "'button'"
            }
        };
    }
    static get states() {
        return {
            "files": {},
            "maxInputTextLength": {}
        };
    }
    static get events() {
        return [{
                "method": "alcFileSelected",
                "name": "alc-file-selected",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "complexType": {
                    "original": "AlcFileSelectedEvent",
                    "resolved": "AlcFileSelectedEvent",
                    "references": {
                        "AlcFileSelectedEvent": {
                            "location": "local",
                            "path": "/home/jenkins_slave/workspace/alcance-snapshots/packages/alcance/src/components/alc-input-file/alc-input-file.tsx",
                            "id": "src/components/alc-input-file/alc-input-file.tsx::AlcFileSelectedEvent"
                        }
                    }
                }
            }];
    }
    static get methods() {
        return {
            "getFiles": {
                "complexType": {
                    "signature": "() => Promise<AlcFileWithContent[]>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        },
                        "AlcFileWithContent": {
                            "location": "local",
                            "path": "/home/jenkins_slave/workspace/alcance-snapshots/packages/alcance/src/components/alc-input-file/alc-input-file.tsx",
                            "id": "src/components/alc-input-file/alc-input-file.tsx::AlcFileWithContent"
                        },
                        "HTMLInputElement": {
                            "location": "global",
                            "id": "global::HTMLInputElement"
                        }
                    },
                    "return": "Promise<AlcFileWithContent[]>"
                },
                "docs": {
                    "text": "Retorna array de arquivos selecionados com seus blobs.",
                    "tags": [{
                            "name": "returns",
                            "text": "Lista de arquivos com conte\u00FAdo."
                        }]
                }
            },
            "clear": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        },
                        "HTMLInputElement": {
                            "location": "global",
                            "id": "global::HTMLInputElement"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Limpa os dados do input e a lista de arquivos.",
                    "tags": []
                }
            }
        };
    }
    static get elementRef() { return "el"; }
}
//# sourceMappingURL=alc-input-file.js.map
