import { Host, h, forceUpdate } from "@stencil/core";
import logger from "../utils/logger";
import { throttle } from "../utils/throttle";
const SCROLL_STEP = 20;
export class AlcScrollPanel {
    constructor() {
        this.hasScroll = false;
        this.canScrollRight = false;
        this.canScrollLeft = false;
        /**
        * Define se há foco.
        */
        this.hasFocus = true;
        this.scrollWidth = 0;
        this.scrolling = 0;
        this.resizeThrottle = throttle(this.resize, 200);
        this.scrollThrottle = throttle(this.handleScroll, 300);
    }
    themeLoadedHandler() {
        this.handleScroll();
    }
    handleResize() {
        this.resizeThrottle();
    }
    handleScrollToElement(element) {
        if (!!element) {
            element.scrollIntoView({ inline: "center", block: 'nearest' });
        }
    }
    resize() {
        this.handleScroll();
        this.handleScrollToElement(this.scrollToElement);
    }
    handleScroll() {
        this.scrollWidth = this.content.scrollWidth;
        this.hasScroll = this.scrollWidth > this.content.offsetWidth;
        this.setCanScroll();
    }
    scrollRight() {
        this.content.scrollLeft += SCROLL_STEP;
        this.setCanScroll();
    }
    scrollLeft() {
        this.content.scrollLeft = this.content.scrollLeft - SCROLL_STEP;
        this.setCanScroll();
    }
    startScrolling(button, scroll) {
        if (this.scrolling)
            return;
        this.scrolling = window.setInterval(() => {
            if (button.disabled) {
                this.stopScrolling();
                return;
            }
            scroll.apply(this);
        }, 200);
    }
    startScrollingRight(e) {
        const button = e.currentTarget;
        if (button instanceof HTMLButtonElement) {
            this.startScrolling(button, this.scrollRight);
        }
    }
    startScrollingLeft(e) {
        const button = e.currentTarget;
        if (button instanceof HTMLButtonElement) {
            this.startScrolling(button, this.scrollLeft);
        }
    }
    stopScrolling() {
        window.clearInterval(this.scrolling);
        this.scrolling = 0;
    }
    setCanScroll() {
        // Math.ceil foi necessário ao verificar funcionamento em um dispositivo móvel real,
        // onde scrollLeft apresenta números fracionários.
        this.canScrollRight = Math.ceil(this.content.offsetWidth + this.content.scrollLeft) < this.scrollWidth;
        this.canScrollLeft = this.content.scrollLeft > 0;
    }
    componentDidRender() {
        var _a;
        /*
         O trecho abaixo permite que o componente seja atualizado
         sempre que houver mudanças no conteúdo (como a inclusão de "fihos").
         Isso foi feito para permitir, por exemplo, que o conteúdo do panel
         seja atualizado dinamicamente com a manipulação do DOM.
         */
        (_a = this.mo) === null || _a === void 0 ? void 0 : _a.disconnect();
        this.mo = new MutationObserver(() => {
            logger.debug('forceUpdate scroll-panel');
            forceUpdate(this.el);
        });
        this.mo.observe(this.el, {
            childList: true,
            subtree: true
        });
        this.handleScroll();
    }
    disconnectedCallback() {
        var _a;
        (_a = this.mo) === null || _a === void 0 ? void 0 : _a.disconnect();
        this.resizeThrottle.cancel();
        this.scrollThrottle.cancel();
    }
    render() {
        return (h(Host, { key: '3c5dee05949d2b073dcb87abd7c4df0826377f4c' }, h("div", { key: '8cb56b2dfa1b2b82f8b3eb7dd52018410e1a9554', class: "alc-scroll-panel" }, this.hasScroll
            ? h("div", { key: "left-button" }, h("button", { onClick: this.scrollLeft.bind(this), onMouseDown: this.startScrollingLeft.bind(this), onMouseUp: this.stopScrolling.bind(this), onTouchStart: this.startScrollingLeft.bind(this), onTouchEnd: this.stopScrolling.bind(this), onTouchCancel: this.stopScrolling.bind(this), class: "alc-scroll-panel__button", disabled: !this.canScrollLeft, "aria-label": "Ir para esquerda", tabindex: this.hasFocus ? '0' : '-1' }, h("alc-icon", { name: "chevron-left", label: '' })))
            : null, h("div", { class: {
                "alc-scroll-panel__wrapper-content": true,
                "alc-scroll-panel__has-scroll-left": this.canScrollLeft,
                "alc-scroll-panel__has-scroll-right": this.canScrollRight
            }, key: "content" }, h("div", { key: '93e54d7ba7f47158fc3fcdfd357a742ed83568cc', class: "alc-scroll-panel__content", ref: el => this.content = el, onScroll: () => this.scrollThrottle() }, h("slot", { key: '49672486ccf36230946da3949ee80fc61f4098c4' }))), this.hasScroll
            ? h("div", { key: "right-button" }, h("button", { onClick: this.scrollRight.bind(this), onMouseDown: this.startScrollingRight.bind(this), onMouseUp: this.stopScrolling.bind(this), onTouchStart: this.startScrollingRight.bind(this), onTouchEnd: this.stopScrolling.bind(this), onTouchCancel: this.stopScrolling.bind(this), class: "alc-scroll-panel__button", disabled: !this.canScrollRight, "aria-label": "Ir para direita", tabindex: this.hasFocus ? '0' : '-1' }, h("alc-icon", { name: "chevron-right", label: '' })))
            : null)));
    }
    static get is() { return "alc-scroll-panel"; }
    static get originalStyleUrls() {
        return {
            "base": ["alc-scroll-panel-base.css"],
            "theme": ["alc-scroll-panel.css"]
        };
    }
    static get styleUrls() {
        return {
            "base": ["alc-scroll-panel-base.css"],
            "theme": ["alc-scroll-panel.css"]
        };
    }
    static get properties() {
        return {
            "hasFocus": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Define se h\u00E1 foco."
                },
                "getter": false,
                "setter": false,
                "attribute": "has-focus",
                "reflect": true,
                "defaultValue": "true"
            },
            "scrollToElement": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "HTMLElement",
                    "resolved": "HTMLElement",
                    "references": {
                        "HTMLElement": {
                            "location": "global",
                            "id": "global::HTMLElement"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Define para qual elemento o scroll vai."
                },
                "getter": false,
                "setter": false
            }
        };
    }
    static get states() {
        return {
            "hasScroll": {},
            "canScrollRight": {},
            "canScrollLeft": {}
        };
    }
    static get elementRef() { return "el"; }
    static get watchers() {
        return [{
                "propName": "scrollToElement",
                "methodName": "handleScrollToElement"
            }];
    }
    static get listeners() {
        return [{
                "name": "themeLoaded",
                "method": "themeLoadedHandler",
                "target": "window",
                "capture": false,
                "passive": false
            }, {
                "name": "resize",
                "method": "handleResize",
                "target": "window",
                "capture": false,
                "passive": true
            }];
    }
}
//# sourceMappingURL=alc-scroll-panel.js.map
