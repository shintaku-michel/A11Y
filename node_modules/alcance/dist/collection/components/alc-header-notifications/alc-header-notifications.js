import { Host, h } from "@stencil/core";
import logger from "../utils/logger";
/*
  TODO: Avaliar possibilidade de "abrir" para modificar rótulo do botão
  Nessa versão, não será possível alterar o rótulo do botão.
  Há uma certa dificuldade para lidar com slot, possível html dentro do slot,
  e a extração do texto correspondente para criar os elementos audíveis.
*/
const BUTTON_LABEL = "Notificações";
const MAX_COUNTER = 99;
export class AlcHeaderNotifications {
    constructor() {
        this.overflow = false;
        this.notificationsLabel = "";
        this.notificationsAudible = "";
        /**
         * Número de notificações a serem exibidas no botão.
         */
        this.notifications = 0;
        /**
         * Define o tipo de elemento a ser renderizado. Pode ser um button ou um link.
         */
        this.variant = 'button';
        /**
         * URL para a página de notificações. Usado quando a propriedade `variant` é `link`.
         * Se o `variant` for `button`, esse atributo será ignorado.
         */
        this.url = '';
    }
    watchNotifications(newValue) {
        if (Number.isNaN(newValue)) {
            logger.warn('O valor do atributo "notifications" deve ser numérico. Assumindo o valor padrão 0.');
            newValue = 0;
        }
        if (newValue === 0) {
            this.notificationsLabel = "";
            this.notificationsAudible = "";
            this.overflow = false;
        }
        else if (newValue > MAX_COUNTER) {
            this.notificationsLabel = `${MAX_COUNTER}+`;
            this.notificationsAudible = `Mais de ${MAX_COUNTER} ${BUTTON_LABEL}`;
            this.overflow = true;
        }
        else {
            this.notificationsLabel = newValue.toString();
            this.notificationsAudible = `${newValue.toString()} ${BUTTON_LABEL}`;
            this.overflow = false;
        }
    }
    async handleClick(event) {
        const { defaultPrevented } = this.alcClick.emit();
        if (defaultPrevented) {
            event.preventDefault();
        }
    }
    componentWillLoad() {
        this.watchNotifications(this.notifications);
    }
    render() {
        const commonProps = {
            class: "alc-header-button",
            "aria-label": this.overflow ? `${this.notificationsAudible}` : null,
            onClick: (event) => this.handleClick(event),
        };
        return (h(Host, { key: '759c155108643e394a594a575849491a1e421292' }, h("span", { key: 'b7c18e91416ddc03f49fa4f43a1118eeb619a8da', class: "alc-header-notifications" }, this.variant === 'button' ? (h("button", Object.assign({}, commonProps), this.renderContent())) : (h("a", Object.assign({ href: this.url }, commonProps), this.renderContent())), h("span", { key: '8f5d05866bac68b79671c9ba22246aba679e8e10', role: "status", "aria-live": "polite", "aria-atomic": "true", class: "alc-header-notifications__aria-live" }, this.notifications
            ?
                `${this.notificationsAudible}`
            :
                null))));
    }
    renderContent() {
        const badge = (h("alc-badge", { color: "warning", count: true, label: this.notificationsLabel }, h("alc-icon", { name: "bell", label: "", class: "alc-header-button__icon" })));
        const label = (h("span", { class: "alc-header-button__label" }, BUTTON_LABEL));
        return [
            badge,
            label
        ];
    }
    static get is() { return "alc-header-notifications"; }
    static get originalStyleUrls() {
        return {
            "$": ["alc-header-notifications.css"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["alc-header-notifications.css"]
        };
    }
    static get properties() {
        return {
            "notifications": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "number",
                    "resolved": "number",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "N\u00FAmero de notifica\u00E7\u00F5es a serem exibidas no bot\u00E3o."
                },
                "getter": false,
                "setter": false,
                "attribute": "notifications",
                "reflect": true,
                "defaultValue": "0"
            },
            "variant": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "'button' | 'link'",
                    "resolved": "\"button\" | \"link\"",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Define o tipo de elemento a ser renderizado. Pode ser um button ou um link."
                },
                "getter": false,
                "setter": false,
                "attribute": "variant",
                "reflect": true,
                "defaultValue": "'button'"
            },
            "url": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "URL para a p\u00E1gina de notifica\u00E7\u00F5es. Usado quando a propriedade `variant` \u00E9 `link`.\nSe o `variant` for `button`, esse atributo ser\u00E1 ignorado."
                },
                "getter": false,
                "setter": false,
                "attribute": "url",
                "reflect": true,
                "defaultValue": "''"
            }
        };
    }
    static get events() {
        return [{
                "method": "alcClick",
                "name": "alc-click",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Evento disparado quando o usu\u00E1rio clica nas notifica\u00E7\u00F5es. Pode ser cancelado."
                },
                "complexType": {
                    "original": "null",
                    "resolved": "null",
                    "references": {}
                }
            }];
    }
    static get watchers() {
        return [{
                "propName": "notifications",
                "methodName": "watchNotifications"
            }];
    }
}
//# sourceMappingURL=alc-header-notifications.js.map
