import { h } from "@stencil/core";
import { getUniqueId } from "../utils/getUniqueId";
export class AlcFieldChecker {
    constructor() {
        this.idAlert = null;
        this.errorFields = [];
        /**
        * Verifica o formulário quando houver submissão.
       */
        this.checkOnSubmit = false;
        this.handleFormSubmit = (e) => {
            this.checkAlcFields();
            if (this.errorFields.length > 0) {
                e.preventDefault();
            }
        };
    }
    componentWillLoad() {
        this.idAlert = getUniqueId();
    }
    componentDidLoad() {
        // Se true, o componente só irá verificar os campos caso haja uma submissão de formulário
        if (!this.checkOnSubmit) {
            this.checkAlcFields();
            this.observer = new MutationObserver(() => this.checkAlcFields());
            const alcFields = this.hostElement.querySelectorAll('alc-field, alc-fieldset, alc-checkbox, alc-radio');
            // Observa apenas os componentes alc-field que estão dentro do alc-field-checker, permitindo o uso de mais de um formulário por página
            alcFields.forEach((field) => this.observer.observe(field, { attributes: true, childList: true, subtree: true }));
        }
        else {
            const formElement = this.hostElement.querySelector('form');
            if (formElement) {
                formElement.addEventListener('submit', this.handleFormSubmit);
            }
        }
    }
    disconnectedCallback() {
        var _a;
        (_a = this.observer) === null || _a === void 0 ? void 0 : _a.disconnect();
    }
    getFieldId(field) {
        // Obtém o ID do element filho (input, select e etc que estão dentro do alc-field) para criar a âncora quando houver erro
        const inputElement = field.querySelector('input, textarea, select');
        return inputElement ? inputElement.getAttribute('id') : '';
    }
    isChildOfFieldset(element) {
        // Verifica se o alc-checkbox e alc-radio são filhos de um alc-fieldset
        return element.closest('alc-fieldset') !== null;
    }
    getLabelText(field) {
        // Obtém o texto dos componentes alc-checkbox e alc-radio, já que não possuem a propriedade label
        const labelElement = field.querySelector('label');
        return labelElement ? labelElement.textContent.trim() : '';
    }
    checkAlcFields() {
        const alcFields = Array.from(this.hostElement.querySelectorAll('alc-field, alc-fieldset, alc-checkbox, alc-radio'))
            .filter((field) => {
            // Se os componentes alc-checkbox e alc-radio forem filhos de um alc-fieldset, o atributo error-msg deles serão ignorados
            if (field.tagName.toLowerCase() === 'alc-checkbox' || field.tagName.toLowerCase() === 'alc-radio') {
                return !this.isChildOfFieldset(field);
            }
            return true;
        });
        this.errorFields = alcFields
            // Apenas os alc-field que possuem a propriedade erro-msg com alguma mensagem, são enviados para o mapa de erros
            .filter((field) => field.hasAttribute('error-msg') && field.getAttribute('error-msg') !== '')
            .map((field) => {
            const isCheckboxOrRadioButton = field.tagName.toLowerCase() === 'alc-checkbox' || field.tagName.toLowerCase() === 'alc-radio';
            const isFieldset = field.tagName.toLowerCase() === 'alc-fieldset';
            return {
                id: this.getFieldId(field),
                label: isCheckboxOrRadioButton ? this.getLabelText(field) : isFieldset ? field.getAttribute('legend') : field.getAttribute('label'),
                errorMsg: field.getAttribute('error-msg'),
            };
        });
    }
    render() {
        return (h("div", { key: '0a9dfd4e96e62c36ef0cc1b9a3a82b943e0bfd9c', class: "alc-field-checker" }, this.errorFields.length > 0 && (h("alc-alert", { key: '65030b9165d9c7909cafc0b22a5a1b456e27c768', id: this.idAlert, type: "warning", dismissible: false }, h("span", { key: '9db85f42ff4ea2ec8103cc501e5a602e1a592e04', class: 'alc-alert__summary' }, "Aten\u00E7\u00E3o: Seu formul\u00E1rio cont\u00E9m ", this.errorFields.length, " ", this.errorFields.length > 1 ? "erros" : "erro"), h("ul", { key: 'c724032a1d6eaa5a0cea7cef9f40d3d8be0069f3' }, this.errorFields.map((field) => (h("li", null, h("a", { href: `#${field.id}`, class: "alc-link alc-link--color-text" }, h("strong", null, field.label, ":"), " ", field.errorMsg))))))), h("slot", { key: '72e09b858f27172b05f0df38c8c6f9dca12a0ae6' })));
    }
    static get is() { return "alc-field-checker"; }
    static get originalStyleUrls() {
        return {
            "$": ["alc-field-checker.css"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["alc-field-checker.css"]
        };
    }
    static get properties() {
        return {
            "checkOnSubmit": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Verifica o formul\u00E1rio quando houver submiss\u00E3o."
                },
                "getter": false,
                "setter": false,
                "attribute": "check-on-submit",
                "reflect": true,
                "defaultValue": "false"
            }
        };
    }
    static get states() {
        return {
            "errorFields": {}
        };
    }
    static get elementRef() { return "hostElement"; }
}
//# sourceMappingURL=alc-field-checker.js.map
