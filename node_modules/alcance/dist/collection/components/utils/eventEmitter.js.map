{"version":3,"file":"eventEmitter.js","sourceRoot":"","sources":["../../../../src/components/utils/eventEmitter.ts"],"names":[],"mappings":"AAEA;;;;;;;;;;GAUG;AACH,MAAM,UAAU,SAAS,CAAC,QAA4B,EAAE,QAAgB,EAAE,MAAY;IACpF,MAAM,SAAS,GAAG,QAAQ,GAAG,QAAQ,CAAC;IACtC,MAAM,OAAO,GAAG,EAAE,CAAC;IACnB,IAAI,OAAO,QAAQ,CAAC,SAAS,CAAC,KAAK,WAAW,EAAE,CAAC;QAC/C,oDAAoD;QACpD,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;IACjD,CAAC;IACD,2DAA2D;IAC3D,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;IAC9C,gBAAgB;IAChB,OAAO,OAAO,CAAC;AACjB,CAAC","sourcesContent":["import { ComponentInterface } from '@stencil/core';\n\n/**\n * Chama `emit` em eventos de componentes duas vezes.\n * Um para o evento legado camel-case e outra para o novo kebab-case.\n * Ex: para o evento `alcChange` irá executar `instance.alcChange.emit()` and `instance.alcChangeLegacy.emit()`.\n * Ele espera que ambas as propriedades decoradas por eventos `alcChange` e `alcChangeLegacy` existam no componente.\n *\n * @param instance {ComponentInterface} - A instância do componente, também conhecida como `this`\n * @param eventKey {string} - A propriedade do evento, por exemplo `alcChange`\n * @param detail {any} - O evento custom `detail`\n * @returns {CustomEvent[]} - O evento emitido\n */\nexport function emitEvent(instance: ComponentInterface, eventKey: string, detail?: any): CustomEvent[] {\n  const legacyKey = eventKey + 'Legacy';\n  const emitted = [];\n  if (typeof instance[legacyKey] !== 'undefined') {\n    // Emite o evento legado camel-case, ex: `alcChange`\n    emitted.push(instance[legacyKey].emit(detail));\n  }\n  // Emite novo padrão de eventos kebab-case, ex: `alc-close`\n  emitted.push(instance[eventKey].emit(detail));\n  // Retorna ambos\n  return emitted;\n}\n"]}