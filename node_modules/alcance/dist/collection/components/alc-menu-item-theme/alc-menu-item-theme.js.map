{"version":3,"file":"alc-menu-item-theme.js","sourceRoot":"","sources":["../../../../src/components/alc-menu-item-theme/alc-menu-item-theme.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AAClE,OAAO,EAAE,eAAe,EAAE,eAAe,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,MAAM,gBAAgB,CAAC;AAO1G,MAAM,OAAO,gBAAgB;IAL7B;QAME,sDAAsD;QAC7C,YAAO,GAAY,KAAK,CAAC;QAElC,2BAA2B;QACV,eAAU,GAAG,MAAM,CAAC;QACpB,gBAAW,GAAG,OAAO,CAAC;KA6CxC;IA3CC,4EAA4E;IAE5E,WAAW;QACT,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAED,uCAAuC;IAC/B,WAAW;QACjB,IAAI,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC;QAC7B,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC;QAChE,eAAe,CAAC,KAAK,CAAC,CAAC;QACvB,kBAAkB,CAAC,KAAK,CAAC,CAAC;IAC5B,CAAC;IAED,4FAA4F;IAC5F,iBAAiB;QACf,MAAM,cAAc,GAAG,kBAAkB,EAAE,CAAC;QAE5C,QAAQ,cAAc,EAAE,CAAC;YACvB,KAAK,IAAI,CAAC,WAAW;gBACnB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;gBACrB,MAAM;YACR,KAAK,IAAI,CAAC,UAAU;gBAClB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;gBACpB,MAAM;YACR;gBACE,sEAAsE;gBACtE,IAAI,CAAC,OAAO,GAAG,eAAe,CAAC,QAAQ,CAAC,KAAK,IAAI,CAAC,UAAU,CAAC;gBAC7D,MAAM;QACV,CAAC;IACH,CAAC;IAGD,MAAM;QACJ,OAAO,CACL,EAAC,IAAI;YACH,sEAAe,IAAI,EAAC,UAAU,EAAC,OAAO,EAAE,IAAI,CAAC,OAAO;gBAClD,iEAAU,IAAI,EAAC,MAAM,EAAC,KAAK,EAAC,EAAE,EAAC,IAAI,EAAC,QAAQ,GAAY;qCAE1C,CACX,CACR,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Host, Listen, State, h } from '@stencil/core';\nimport { getAppliedTheme, setAppliedTheme, loadUserPreference, saveUserPreference } from '../utils/theme';\n\n@Component({\n  tag: 'alc-menu-item-theme',\n  styleUrl: 'alc-menu-item-theme.css',\n  shadow: false,\n})\nexport class AlcMenuItemTheme {\n  // Estado para controlar se o tema escuro está ativado\n  @State() checked: boolean = false;\n\n  // Constantes para os temas\n  private readonly DARK_THEME = 'dark';\n  private readonly LIGHT_THEME = 'light';\n\n  // Listener para o evento 'alc-select', alterna o tema entre claro e escuro.\n  @Listen('alc-select')\n  handleClick(): void {\n    this.toggleTheme();\n  }\n\n  // Alterna o tema entre claro e escuro.\n  private toggleTheme(): void {\n    this.checked = !this.checked;\n    const theme = this.checked ? this.DARK_THEME : this.LIGHT_THEME;\n    setAppliedTheme(theme);\n    saveUserPreference(theme);\n  }\n\n  // Define o estado inicial do tema com base na preferência do usuário ou no tema do sistema.\n  componentWillLoad(): void {\n    const userPreference = loadUserPreference();\n\n    switch (userPreference) {\n      case this.LIGHT_THEME:\n        this.checked = false;\n        break;\n      case this.DARK_THEME:\n        this.checked = true;\n        break;\n      default:\n        // Se o tema do sistema for dark, então checked 'true' se não 'false'.\n        this.checked = getAppliedTheme('system') === this.DARK_THEME;\n        break;\n    }\n  }\n\n\n  render() {\n    return (\n      <Host>\n        <alc-menu-item type=\"checkbox\" checked={this.checked}>\n          <alc-icon icon=\"moon\" label=\"\" slot=\"prefix\"></alc-icon>\n          Ver no tema escuro\n        </alc-menu-item>\n      </Host>\n    );\n  }\n}\n"]}