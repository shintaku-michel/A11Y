import { Host, h } from "@stencil/core";
import logger from "../utils/logger";
import test from "../utils/testAttributes";
export class AlcLoading {
    constructor() {
        /**
         * Define se o indicador de carregamento aparece na tela. Quando o valor é `true` mostra o componente e quando o valor é `false` oculta.
         */
        this.active = false;
        /**
        * Texto mostrado na tela enquanto estiver carregando e também anunciado no leitor de tela quando o estado mudar para `active=true`.
        */
        this.label = 'Carregando...';
        /**
        * Texto anunciado ao leitor de tela quando mudar o estado para `active=false`.
        */
        this.endMsg = 'Finalizado.';
        /**
         * Define a variação visual do componente:
         * - `'full-screen'`: ocupa a tela inteira.
         * - `'container'`: ocupa o elemento pai.
         * - `'inline'`: utilizado dentro de textos.
         * - `'button'`: utilizado dentro de botões.
         */
        this.variant = 'full-screen';
        /**
         * Mensagem interna para a região aria-live.
         */
        this.ariaMessage = '';
        this.parentButton = null;
    }
    /**
     * Exibe o loading.
     * @returns O valor retornado é `true` se o loading foi realmente exibido com essa chamada ao método.
     */
    async show() {
        if (this.active) {
            return false;
        }
        this.active = true;
        return true;
    }
    /**
     * Esconde o loading.
     * @returns O valor retornado é `true` se o loading foi realmente oculto com essa chamada ao método.
     */
    async hide() {
        if (!this.active) {
            return false;
        }
        this.active = false;
        return true;
    }
    onActiveChange(newValue, oldValue) {
        if (newValue !== oldValue) {
            this.updateAriaMessage();
            if (this.variant === 'button') {
                this.updateParentButtonAttributes();
            }
        }
    }
    componentWillLoad() {
        this.updateAriaMessage();
    }
    componentDidLoad() {
        if (this.variant === 'button') {
            this.findParentButton();
            this.updateParentButtonAttributes();
        }
    }
    updateAriaMessage() {
        this.ariaMessage = this.active ? this.label : this.endMsg;
    }
    findParentButton() {
        this.parentButton = this.el.closest('button');
        if (!this.parentButton) {
            logger.warn('alc-loading[variant="button"] deve estar dentro de um elemento <button>.');
        }
    }
    updateParentButtonAttributes() {
        if (this.parentButton) {
            if (this.active) {
                this.parentButton.setAttribute('aria-label', this.label);
            }
            else {
                this.parentButton.removeAttribute('aria-label');
            }
        }
    }
    render() {
        const shouldRenderAriaLive = this.variant !== 'button';
        return (h(Host, { key: '4e4d1315ccbcbd55c2718dd8421845ab217901fa' }, this.renderLoadingVisuals(), shouldRenderAriaLive && (h("div", Object.assign({ key: 'eab510d1080f9a3d1ec98600f86621a4faf99765', class: "sr-only", "aria-live": "polite", role: "status" }, test('data-test-acessibility')), this.ariaMessage))));
    }
    renderLoadingVisuals() {
        switch (this.variant) {
            case 'full-screen':
                return this.renderFullScreen();
            case 'container':
                return this.renderContainer();
            case 'inline':
                return this.renderInline();
            case 'button':
                return this.renderButton();
            default:
                return null;
        }
    }
    renderFullScreen() {
        if (!this.active)
            return null;
        return (h("div", { class: "alc-loading__overlay", "aria-hidden": "true" }, h("div", { class: "alc-loading__card" }, h("p", null, this.label))));
    }
    renderContainer() {
        if (!this.active)
            return null;
        return (h("div", { class: "alc-loading__overlay-container", "aria-hidden": "true" }, h("div", { class: "alc-loading__card-container" }, h("div", { class: "alc-loading__spinner-container" }), h("p", null, this.label))));
    }
    renderInline() {
        if (!this.active)
            return null;
        return (h("div", { class: "alc-loading__inline", "aria-hidden": "true" }, h("div", { class: "alc-loading__spinner-inline" }), h("span", { class: "alc-loading__label" }, this.label)));
    }
    renderButton() {
        if (!this.active)
            return null;
        return (h("div", { class: "alc-loading__button", "aria-hidden": "true" }, h("span", { class: "alc-loading__button-wrapper" }, h("div", { class: "alc-loading__spinner-button" }))));
    }
    static get is() { return "alc-loading"; }
    static get originalStyleUrls() {
        return {
            "$": ["alc-loading.css"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["alc-loading.css"]
        };
    }
    static get properties() {
        return {
            "active": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Define se o indicador de carregamento aparece na tela. Quando o valor \u00E9 `true` mostra o componente e quando o valor \u00E9 `false` oculta."
                },
                "getter": false,
                "setter": false,
                "attribute": "active",
                "reflect": true,
                "defaultValue": "false"
            },
            "label": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Texto mostrado na tela enquanto estiver carregando e tamb\u00E9m anunciado no leitor de tela quando o estado mudar para `active=true`."
                },
                "getter": false,
                "setter": false,
                "attribute": "label",
                "reflect": true,
                "defaultValue": "'Carregando...'"
            },
            "endMsg": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Texto anunciado ao leitor de tela quando mudar o estado para `active=false`."
                },
                "getter": false,
                "setter": false,
                "attribute": "end-msg",
                "reflect": true,
                "defaultValue": "'Finalizado.'"
            },
            "variant": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "'full-screen' | 'container' | 'inline' | 'button'",
                    "resolved": "\"button\" | \"container\" | \"full-screen\" | \"inline\"",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Define a varia\u00E7\u00E3o visual do componente:\n- `'full-screen'`: ocupa a tela inteira.\n- `'container'`: ocupa o elemento pai.\n- `'inline'`: utilizado dentro de textos.\n- `'button'`: utilizado dentro de bot\u00F5es."
                },
                "getter": false,
                "setter": false,
                "attribute": "variant",
                "reflect": true,
                "defaultValue": "'full-screen'"
            }
        };
    }
    static get methods() {
        return {
            "show": {
                "complexType": {
                    "signature": "() => Promise<boolean>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<boolean>"
                },
                "docs": {
                    "text": "Exibe o loading.",
                    "tags": [{
                            "name": "returns",
                            "text": "O valor retornado \u00E9 `true` se o loading foi realmente exibido com essa chamada ao m\u00E9todo."
                        }]
                }
            },
            "hide": {
                "complexType": {
                    "signature": "() => Promise<boolean>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<boolean>"
                },
                "docs": {
                    "text": "Esconde o loading.",
                    "tags": [{
                            "name": "returns",
                            "text": "O valor retornado \u00E9 `true` se o loading foi realmente oculto com essa chamada ao m\u00E9todo."
                        }]
                }
            }
        };
    }
    static get elementRef() { return "el"; }
    static get watchers() {
        return [{
                "propName": "active",
                "methodName": "onActiveChange"
            }];
    }
}
//# sourceMappingURL=alc-loading.js.map
