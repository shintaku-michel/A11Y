import { Host, h } from "@stencil/core";
import logger from "../utils/logger";
import { getAppliedTheme, setAppliedTheme, loadUserPreference, saveUserPreference, removeUserPreference } from "../utils/theme";
import { getUniqueId } from "../utils/getUniqueId";
import testAttributes from "../utils/testAttributes";
const NO_THEME = 0;
const LIGHT_THEME = 1;
const DARK_THEME = 2;
export class AlcTheme {
    change(theme) {
        logger.log('changed to', theme);
        switch (theme) {
            case LIGHT_THEME:
                setAppliedTheme('light');
                saveUserPreference('light');
                break;
            case DARK_THEME:
                setAppliedTheme('dark');
                saveUserPreference('dark');
                break;
            default:
                setAppliedTheme(getAppliedTheme('system'));
                removeUserPreference();
                break;
        }
        this.selectedTheme = theme;
    }
    getSelectedValue(select) {
        return parseInt(select.selectedOptions[0].value);
    }
    componentWillLoad() {
        const userPreference = loadUserPreference();
        if (userPreference === 'light') {
            this.selectedTheme = LIGHT_THEME;
        }
        else if (userPreference === 'dark') {
            this.selectedTheme = DARK_THEME;
        }
        else {
            this.selectedTheme = NO_THEME;
        }
        this.selectId = getUniqueId();
    }
    render() {
        return (h(Host, { key: '1303b40b7cf8291232126b54294abfeea9907b16' }, h("alc-field", { key: '6091a7a2ad536f854c532ce898fd40b7b4479ca9' }, h("label", Object.assign({ key: '8570c6bf2d41e99c4ef01b14f209613a82117b36', htmlFor: this.selectId, slot: "label", class: "alc-theme__label" }, testAttributes('data-test-label')), "Tema"), h("div", { key: 'b3e55038e3df6b4dc75e8b3d1ff71d0960d9a087' }, h("select", Object.assign({ key: 'aa73b515c5aa45ec04faaffff8e3948511f756ed', onChange: (e) => this.change(this.getSelectedValue(e.target)), class: "alc-theme__select", id: this.selectId }, testAttributes('data-test-select')), h("option", { key: 'c7b043b78f2c693051cb710ce12f51fe17139c16', value: NO_THEME, selected: this.selectedTheme === NO_THEME }, "Do Sistema", this.selectedTheme === NO_THEME ? ' ✔' : ''), h("option", { key: '66b49cf0fb421ae680c2b3750fbec2290676a532', value: LIGHT_THEME, selected: this.selectedTheme === LIGHT_THEME }, "Claro", this.selectedTheme === LIGHT_THEME ? ' ✔' : ''), h("option", { key: '86181cfa6e6507d83abc9f1cd0cef398a9c403d1', value: DARK_THEME, selected: this.selectedTheme === DARK_THEME }, "Escuro", this.selectedTheme === DARK_THEME ? ' ✔' : ''))))));
    }
    static get is() { return "alc-theme"; }
    static get originalStyleUrls() {
        return {
            "base": ["alc-theme-base.css"],
            "theme": ["alc-theme.css"]
        };
    }
    static get styleUrls() {
        return {
            "base": ["alc-theme-base.css"],
            "theme": ["alc-theme.css"]
        };
    }
    static get states() {
        return {
            "selectedTheme": {}
        };
    }
}
//# sourceMappingURL=alc-theme.js.map
