{"version":3,"file":"alc-view-more.js","sourceRoot":"","sources":["../../../../src/components/alc-view-more/alc-view-more.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AACzE,OAAO,EAAE,WAAW,EAAE,MAAM,sBAAsB,CAAA;AAKlD,MAAM,OAAO,WAAW;IAJxB;QAME;;WAEG;QACsB,mBAAc,GAAW,cAAc,CAAC;QACjE;;WAEG;QACsB,oBAAe,GAAW,QAAQ,CAAC;QAC5D;;WAEG;QACsB,mBAAc,GAAW,QAAQ,CAAC;QAC3D;;WAEG;QACsB,cAAS,GAAW,EAAE,CAAC;QAChD;;;WAGG;QACsB,cAAS,GAAW,KAAK,CAAC;QAEnD;;;WAGG;QACsB,eAAU,GAAW,6BAA6B,CAAC;QAIpE,cAAS,GAAG,WAAW,EAAE,CAAC;KAwDnC;IAtDC,MAAM,CAAC,CAAQ;QACb,CAAC,CAAC,cAAc,EAAE,CAAC;QACnB,IAAI,CAAC,eAAe,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC;IAC/C,CAAC;IAED,WAAW;QACT,IAAI,IAAI,CAAC,cAAc,KAAK,OAAO,EAAE,CAAC;YACpC,OAAO,aAAa,CAAC;QACvB,CAAC;QACD,IAAI,IAAI,CAAC,cAAc,KAAK,MAAM,EAAE,CAAC;YACnC,OAAO,eAAe,CAAC;QACzB,CAAC;QAED,OAAO,gBAAgB,CAAC;IAC1B,CAAC;IAED,oBAAoB;QAClB,IAAI,OAAO,GAAG,0BAA0B,IAAI,CAAC,SAAS,EAAE,CAAC;QAEzD,IAAI,IAAI,CAAC,eAAe,EAAE,CAAC;YACzB,OAAO,GAAG,GAAG,OAAO,iCAAiC,CAAC;QACxD,CAAC;QACD,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,iBAAiB;QACf,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;IAC/B,CAAC;IAED,kBAAkB;QAChB,IAAI,OAAO,GAAG,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,yBAAyB,CAAgB,CAAC;QAC9E,IAAI,IAAI,GAAG,OAAO,CAAC,YAAY,CAAC;QAChC,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,cAAc,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QAC1D,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,cAAc,EAAE,IAAI,GAAG,IAAI,CAAC,CAAC;QACvD,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,YAAY,EAAE,OAAO,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;IACrE,CAAC;IAED,MAAM;QACJ,OAAO,CACL,EAAC,IAAI;YACH,4DACE,EAAE,EAAE,IAAI,CAAC,SAAS,EAClB,KAAK,EAAE,IAAI,CAAC,oBAAoB,EAAE;gBAElC,8DAAa,CACT;YACN,4DAAK,KAAK,EAAE,wBAAwB,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;gBACzD,0DAAG,IAAI,EAAE,GAAG,GAAC,IAAI,CAAC,SAAS,EAAE,OAAO,EAAE,CAAC,CAAC,EAAE,GAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA,CAAA,CAAC,mBAAiB,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,mBAAiB,IAAI,CAAC,SAAS,EAAE,IAAI,EAAC,QAAQ,IACtJ,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAChE,CACA,CACD,CACR,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Element, Host, Prop, State, h } from '@stencil/core';\nimport { getUniqueId } from '../utils/getUniqueId'\n@Component({\n  tag: 'alc-view-more',\n  styleUrl: 'alc-view-more.css'\n})\nexport class AlcViewMore {\n  @Element() el!: HTMLElement;\n  /**\n   * Nome da ação para revelar o conteúdo.\n   */\n  @Prop({ reflect: true }) toggleTextOpen: string = 'Veja mais...';\n  /**\n   * Nome da ação para esconder o conteúdo.\n   */\n  @Prop({ reflect: true }) toggleTextClose: string = 'Fechar';\n  /**\n   * Alinhamento do botão de ação.\n   */\n  @Prop({ reflect: true }) togglePosition: string = 'center';\n  /**\n   * Classes CSS para serem aplicadas ao texto da ação.\n   */\n  @Prop({ reflect: true }) textClass: string = '';\n  /**\n   * Tamanho mínimo do conteúdo a ser exibido.\n   * Pode ser em px, rem ou em: 200px; 20rem; 10em;\n   */\n  @Prop({ reflect: true }) minHeight: string = '8em';\n\n  /**\n   * Nome da variável CSS correspondente à cor de fundo em que o componente está inserido.\n   * Aplica-se ao degradê do corte do texto.\n   */\n  @Prop({ reflect: true }) bgColorVar: string = '--alc-color-surface-primary';\n\n  @State() contentExpanded: boolean;\n\n  private contentId = getUniqueId();\n\n  toggle(e: Event) {\n    e.preventDefault();\n    this.contentExpanded = !this.contentExpanded;\n  }\n\n  setPosition() {\n    if (this.togglePosition === 'right') {\n      return 'justify-end';\n    }\n    if (this.togglePosition === 'left') {\n      return 'justify-start';\n    }\n\n    return 'justify-center';\n  }\n\n  getContentCssClasses() {\n    let classes = `alc-view-more__content ${this.textClass}`;\n\n    if (this.contentExpanded) {\n      classes = `${classes} alc-view-more__content--opened`;\n    }\n    return classes;\n  }\n\n  componentWillLoad() {\n    this.contentExpanded = false;\n  }\n\n  componentDidRender() {\n    let content = this.el.querySelector('.alc-view-more__content') as HTMLElement;\n    let maxH = content.scrollHeight;\n    content.style.setProperty('--min-height', this.minHeight);\n    content.style.setProperty('--max-height', maxH + 'px');\n    content.style.setProperty('--bg-color', `var(${this.bgColorVar})`);\n  }\n\n  render() {\n    return (\n      <Host>\n        <div\n          id={this.contentId}\n          class={this.getContentCssClasses()}\n        >\n          <slot></slot>\n        </div>\n        <div class={'alc-view-more__toggle ' + (this.setPosition())}>\n          <a href={'#'+this.contentId} onClick={e => {this.toggle(e)}} aria-expanded={this.contentExpanded.toString()} aria-controls={this.contentId} role=\"button\">\n            {this.contentExpanded ? this.toggleTextClose : this.toggleTextOpen}\n          </a>\n        </div>\n      </Host>\n    );\n  }\n}\n"]}