import { Host, h } from "@stencil/core";
import { getUniqueId } from "../utils/getUniqueId";
import test from "../utils/testAttributes";
/**
 * @slot DEFAULT - Slot para o elemento input do tipo radio.
 *
 * @slot label - Slot para o elemento label do radio. Há opção de adicionar apenas o texto por meio da propriedade `label`.
*/
export class AlcRadio {
    constructor() {
        this.describedBy = new Map();
        this.errorId = '';
        this.hintId = '';
        /**
         * Texto de ajuda.
        */
        this.hint = '';
        /**
         * Texto do label do input. Há opção de adicionar o elemento label pelo slot "label".
        */
        this.label = '';
        /**
         * Texto de mensagem de erro.
        */
        this.errorMsg = '';
    }
    componentWillLoad() {
        // Independentemente de qualquer coisa, reserva ids para esses elementos.
        this.errorId = getUniqueId();
        this.hintId = getUniqueId();
        this.input = this.el.querySelector('input[type="radio"]');
        const labelElement = this.el.querySelector('label');
        this.inputId = this.input.id;
        if (!this.inputId) {
            this.inputId = getUniqueId();
            this.input.setAttribute('id', this.inputId);
        }
        if (labelElement && !labelElement.getAttribute('for')) {
            labelElement.setAttribute('for', this.inputId);
        }
        this.describedBy.set('original', this.input.getAttribute('aria-describedby') || '');
    }
    componentWillRender() {
        if (this.errorMsg) {
            this.describedBy.set('error', this.errorId);
        }
        else {
            this.describedBy.delete('error');
        }
        if (this.hint) {
            this.describedBy.set('hint', this.hintId);
        }
        else {
            this.describedBy.delete('hint');
        }
        let currentDescribedBy = '';
        currentDescribedBy += ` ${this.describedBy.get('original') || ''}`;
        currentDescribedBy += ` ${this.describedBy.get('error') || ''}`;
        currentDescribedBy += ` ${this.describedBy.get('hint') || ''}`;
        this.input.setAttribute('aria-describedby', currentDescribedBy.trim());
    }
    render() {
        return (h(Host, { key: '7de3e69e23473c75f75b298af398d03a05f75229' }, h("slot", { key: '94934d27a296bdee39ef63645250f61bce5f7824' }), h("div", { key: '2965ce9a65f9a1912604b47010585142c82dd45f', class: "alc-radio__label" }, h("div", { key: '8a088e0c25d1defce1c2bb95fbffdebb3a8bac01' }, this.label
            ?
                h("label", Object.assign({ htmlFor: this.inputId }, test('data-test-label')), this.label)
            :
                h("slot", { name: "label" })), this.errorMsg
            ?
                h("small", Object.assign({ class: "alc-radio__text alc-radio__text--error", id: this.errorId }, test('data-test-error')), this.errorMsg)
            :
                null, this.hint
            ?
                h("small", Object.assign({ class: "alc-radio__text", id: this.hintId }, test('data-test-hint')), this.hint)
            :
                null)));
    }
    static get is() { return "alc-radio"; }
    static get originalStyleUrls() {
        return {
            "$": ["alc-radio.css"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["alc-radio.css"]
        };
    }
    static get properties() {
        return {
            "hint": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Texto de ajuda."
                },
                "getter": false,
                "setter": false,
                "attribute": "hint",
                "reflect": true,
                "defaultValue": "''"
            },
            "label": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Texto do label do input. H\u00E1 op\u00E7\u00E3o de adicionar o elemento label pelo slot \"label\"."
                },
                "getter": false,
                "setter": false,
                "attribute": "label",
                "reflect": true,
                "defaultValue": "''"
            },
            "errorMsg": {
                "type": "string",
                "mutable": true,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Texto de mensagem de erro."
                },
                "getter": false,
                "setter": false,
                "attribute": "error-msg",
                "reflect": true,
                "defaultValue": "''"
            }
        };
    }
    static get states() {
        return {
            "inputId": {}
        };
    }
    static get elementRef() { return "el"; }
}
//# sourceMappingURL=alc-radio.js.map
