{"version":3,"file":"alc-fieldset.js","sourceRoot":"","sources":["../../../../src/components/alc-fieldset/alc-fieldset.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Element, Host, h, Prop, Watch } from '@stencil/core';\nimport { getUniqueId } from '../utils/getUniqueId';\nimport logger from '../utils/logger';\nimport test from '../utils/testAttributes';\n\n/**\n * @slot DEFAULT - Slot para o conteúdo do fieldset.\n*/\n\n@Component({\n  tag: 'alc-fieldset',\n  styleUrl: 'alc-fieldset.css',\n  shadow: false,\n})\nexport class AlcFieldset {\n\n  describedBy = new Map();\n  errorId = '';\n  hintId = '';\n\n  @Element() el: HTMLAlcFieldsetElement;\n\n  /**\n   * Texto da legenda do fieldset.\n  */\n  @Prop({ reflect: true }) legend!: string;\n\n  /**\n   * Texto de ajuda.\n  */\n  @Prop({ reflect: true }) hint: string = '';\n\n  /**\n   * Indica se o fieldset é obrigatório.\n  */\n  @Prop({ reflect: true }) required: boolean = false;\n\n\n  /**\n   * Texto de mensagem de erro.\n   */\n  @Prop({\n    mutable: true,\n    reflect: true,\n  }) errorMsg: string = '';\n  @Watch('errorMsg')\n  watchErrorMsg(newValue: string) {\n\n    logger.debug('watchErrorMsg', newValue);\n\n    if (newValue) {\n      this.el.classList.add('alc-form__input--error');\n    }\n    else {\n      this.el.classList.remove('alc-form__input--error');\n    }\n  }\n\n  componentWillLoad() {\n\n    // Independentemente de qualquer coisa, reserva ids para esses elementos.\n    this.errorId = getUniqueId();\n    this.hintId = getUniqueId();\n\n    if (this.el) {\n      this.watchErrorMsg(this.errorMsg);\n    }\n\n  }\n\n  componentWillRender() {\n\n    if (this.errorMsg) {\n      this.describedBy.set('error', this.errorId);\n    }\n    else {\n      this.describedBy.delete('error');\n    }\n\n    if (this.hint) {\n      this.describedBy.set('hint', this.hintId);\n    }\n    else {\n      this.describedBy.delete('hint');\n    }\n\n  }\n\n  render() {\n\n\n    return (\n      <Host>\n        <fieldset\n          class=\"alc-fieldset\"\n          aria-describedby={mapToString(this.describedBy)}\n          {...test('data-test-fieldset')}\n        >\n          <legend\n            class=\"alc-fieldset__legend\"\n            {...test('data-test-legend')}\n          >\n            {this.legend}\n            {this.required\n              ?\n              // aria-hidden porque o \"required\" do input já é suficiente para informar.\n              <small aria-hidden=\"true\"> (obrigatório)</small>\n              :\n              null\n            }\n          </legend>\n          <slot></slot>\n          <div class=\"alc-fieldset__text-container\">\n            {this.errorMsg\n              ?\n              <small\n                class=\"alc-fieldset__text alc-fieldset__text--error\"\n                id={this.errorId}\n                {...test('data-test-error')}\n              >\n                {this.errorMsg}\n              </small>\n              :\n              null\n            }\n            {this.hint\n              ?\n              <small\n                class=\"alc-fieldset__text\"\n                id={this.hintId}\n                {...test('data-test-hint')}\n              >\n                {this.hint}\n              </small>\n              :\n              null\n            }\n          </div>\n        </fieldset>\n      </Host>\n    );\n  }\n\n}\n\n// get Map and transform in a string with the values separated by spaces. return null if Map is empty.\nfunction mapToString(map: Map<string, string>) {\n  if (map.size > 0) {\n    return Array.from(map.values()).join(' ');\n  }\n  else {\n    return null;\n  }\n}\n"]}