import { Host, h } from "@stencil/core";
import { getUniqueId } from "../utils/getUniqueId";
import logger from "../utils/logger";
import test from "../utils/testAttributes";
/**
 * @slot DEFAULT - Slot para o conteúdo do fieldset.
*/
export class AlcFieldset {
    constructor() {
        this.describedBy = new Map();
        this.errorId = '';
        this.hintId = '';
        /**
         * Texto de ajuda.
        */
        this.hint = '';
        /**
         * Indica se o fieldset é obrigatório.
        */
        this.required = false;
        /**
         * Texto de mensagem de erro.
         */
        this.errorMsg = '';
    }
    watchErrorMsg(newValue) {
        logger.debug('watchErrorMsg', newValue);
        if (newValue) {
            this.el.classList.add('alc-form__input--error');
        }
        else {
            this.el.classList.remove('alc-form__input--error');
        }
    }
    componentWillLoad() {
        // Independentemente de qualquer coisa, reserva ids para esses elementos.
        this.errorId = getUniqueId();
        this.hintId = getUniqueId();
        if (this.el) {
            this.watchErrorMsg(this.errorMsg);
        }
    }
    componentWillRender() {
        if (this.errorMsg) {
            this.describedBy.set('error', this.errorId);
        }
        else {
            this.describedBy.delete('error');
        }
        if (this.hint) {
            this.describedBy.set('hint', this.hintId);
        }
        else {
            this.describedBy.delete('hint');
        }
    }
    render() {
        return (h(Host, { key: '13da7d1291538854017ab47348c086c484de42e5' }, h("fieldset", Object.assign({ key: '1bf206aaf951c0f43965e8512513e6f67a638dc7', class: "alc-fieldset", "aria-describedby": mapToString(this.describedBy) }, test('data-test-fieldset')), h("legend", Object.assign({ key: '087915de3b2ab15449223a4df975d4d8077c9d49', class: "alc-fieldset__legend" }, test('data-test-legend')), this.legend, this.required
            ?
                // aria-hidden porque o "required" do input já é suficiente para informar.
                h("small", { "aria-hidden": "true" }, " (obrigat\u00F3rio)")
            :
                null), h("slot", { key: '9fbadf05a4719285b0d4e76ed95270f5dbadfcf7' }), h("div", { key: 'b2ffb8687aa486a5d1c45ddecb52d9f30f31753b', class: "alc-fieldset__text-container" }, this.errorMsg
            ?
                h("small", Object.assign({ class: "alc-fieldset__text alc-fieldset__text--error", id: this.errorId }, test('data-test-error')), this.errorMsg)
            :
                null, this.hint
            ?
                h("small", Object.assign({ class: "alc-fieldset__text", id: this.hintId }, test('data-test-hint')), this.hint)
            :
                null))));
    }
    static get is() { return "alc-fieldset"; }
    static get originalStyleUrls() {
        return {
            "$": ["alc-fieldset.css"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["alc-fieldset.css"]
        };
    }
    static get properties() {
        return {
            "legend": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": true,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Texto da legenda do fieldset."
                },
                "getter": false,
                "setter": false,
                "attribute": "legend",
                "reflect": true
            },
            "hint": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Texto de ajuda."
                },
                "getter": false,
                "setter": false,
                "attribute": "hint",
                "reflect": true,
                "defaultValue": "''"
            },
            "required": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Indica se o fieldset \u00E9 obrigat\u00F3rio."
                },
                "getter": false,
                "setter": false,
                "attribute": "required",
                "reflect": true,
                "defaultValue": "false"
            },
            "errorMsg": {
                "type": "string",
                "mutable": true,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Texto de mensagem de erro."
                },
                "getter": false,
                "setter": false,
                "attribute": "error-msg",
                "reflect": true,
                "defaultValue": "''"
            }
        };
    }
    static get elementRef() { return "el"; }
    static get watchers() {
        return [{
                "propName": "errorMsg",
                "methodName": "watchErrorMsg"
            }];
    }
}
// get Map and transform in a string with the values separated by spaces. return null if Map is empty.
function mapToString(map) {
    if (map.size > 0) {
        return Array.from(map.values()).join(' ');
    }
    else {
        return null;
    }
}
//# sourceMappingURL=alc-fieldset.js.map
