import { Host, h } from "@stencil/core";
import { getUniqueId } from "../utils/getUniqueId";
import test from "../utils/testAttributes";
export class AlcAutocomplete {
    constructor() {
        /** Itens que serão listado no componente */
        this.items = [];
        /** Indica os atributos dos dados que serão exibidos na lista */
        this.displayKeys = '';
        /** Label do input */
        this.label = '';
        /** Mensagem de ajuda */
        this.hint = '';
        /** Indica se o input é obrigatório */
        this.required = false;
        /** Indica o tipo de visualização da lista */
        this.listDirection = 'vertical';
        /** Desabilita input */
        this.disabled = false;
        /** Indica se os dados estão sendo carregados */
        this.loading = false;
        /** Indica se houve um erro ao carregar os dados */
        this.error = false;
        // Mensagem de erro do input
        this.errorMsg = null;
        this.filteredData = []; // Armazena os dados filtrados
        this.itemSelected = false; // Indica se um item foi selecionado
        this.selectedItemValue = null; // Armazena o valor selecionado
        this.emptyResult = false; // Indica se não foi encontrado nenhum resultado
        this.activeRowIndex = -1;
        this.activeColIndex = 0;
        this.rowsCount = 0;
        this.colsCount = 0;
        this.gridFocused = false;
        this.shown = false;
        this.selectionCol = 0;
    }
    selectedItemValueChanged(newValue) {
        // Sempre que o valor selecionado for alterado (via seleção na lista ou via setSelected),
        // emitimos o evento alc-change com o novo valor.
        this.alcChange.emit(newValue);
    }
    handleLoadingChange(newVal, oldVal) {
        if (oldVal === true && newVal === false && !this.disabled && this.input) {
            requestAnimationFrame(() => {
                this.input.focus();
            });
        }
    }
    componentWillLoad() {
        this.inputId = getUniqueId();
        this.gridId = getUniqueId();
        this.labelId = getUniqueId();
        this.messageRowContainerId = getUniqueId();
    }
    componentDidLoad() {
        /* Não permite remover o atributo disabled pelo modo desenvolvedor no browser */
        const observer = new MutationObserver(() => {
            if (!this.input.hasAttribute('disabled')) {
                if (this.disabled || this.loading) {
                    this.input.setAttribute('disabled', 'true');
                }
            }
        });
        observer.observe(this.input, { attributes: true, attributeFilter: ['disabled'] });
        if (this.disabled || this.loading) {
            this.input.setAttribute('disabled', 'true');
        }
        this.input.addEventListener('focus', this.handleFocus.bind(this));
    }
    handleBodyClick(evt) {
        const target = evt.target;
        if (target === this.input || (target instanceof Node && this.grid.contains(target))) {
            return;
        }
        this.hideResults();
    }
    handleInputKeyUp(evt) {
        const target = evt.target;
        if (!(target instanceof Node) || !this.input.contains(target)) {
            return;
        }
        const key = evt.key;
        switch (key) {
            case 'ArrowUp':
            case 'ArrowDown':
            case 'Escape':
            case 'Enter':
                evt.preventDefault();
                return;
            case 'ArrowLeft':
            case 'ArrowRight':
                if (this.gridFocused) {
                    evt.preventDefault();
                    return;
                }
                break;
            default:
                this.updateResults(); // Atualiza os resultados de busca
        }
    }
    handleInputKeyDown(evt) {
        const key = evt.key; // Recomenda-se usar evt.key ao invés de keyCode
        let activeRowIndex = this.activeRowIndex;
        let activeColIndex = this.activeColIndex;
        const target = evt.target;
        // Verifique se evt.target é um Node
        if (!(target instanceof Node) || !this.input.contains(target)) {
            return;
        }
        if (key === 'Escape') { // ESC
            evt.preventDefault();
            if (this.gridFocused) {
                this.gridFocused = false;
                this.removeFocusCell(this.activeRowIndex, this.activeColIndex);
                this.activeRowIndex = -1;
                this.activeColIndex = 0;
                this.input.setAttribute('aria-activedescendant', '');
            }
            else {
                if (!this.shown) {
                    setTimeout(() => {
                        this.input.value = '';
                    }, 1);
                }
            }
            if (this.shown) {
                this.hideResults();
            }
            // Remover botão de fechar quando clicar na tecla Esc
            this.itemSelected = false;
            this.emptyResult = false;
            this.error = false;
            return;
        }
        if (this.rowsCount < 1) {
            return;
        }
        const prevActive = this.getItemAt(activeRowIndex, this.selectionCol);
        let activeItem;
        switch (key) {
            case 'ArrowUp':
                this.gridFocused = true;
                activeRowIndex = this.getRowIndex('ArrowUp');
                evt.preventDefault();
                break;
            case 'ArrowDown':
                this.gridFocused = true;
                activeRowIndex = this.getRowIndex('ArrowDown');
                evt.preventDefault();
                break;
            case 'ArrowLeft':
                if (activeColIndex <= 0) {
                    activeColIndex = this.colsCount - 1;
                    activeRowIndex = this.getRowIndex('ArrowLeft');
                }
                else {
                    activeColIndex--;
                }
                if (this.gridFocused) {
                    evt.preventDefault();
                }
                break;
            case 'ArrowRight':
                if (activeColIndex === -1 || activeColIndex >= this.colsCount - 1) {
                    activeColIndex = 0;
                    activeRowIndex = this.getRowIndex('ArrowRight');
                }
                else {
                    activeColIndex++;
                }
                if (this.gridFocused) {
                    evt.preventDefault();
                }
                break;
            case 'Enter': // ENTER
                evt.preventDefault(); // Prevenir submissão do formulário
                if (this.gridFocused) {
                    activeItem = this.getItemAt(activeRowIndex, this.selectionCol);
                    this.selectItem(activeItem, evt);
                    this.gridFocused = false;
                }
                else {
                    // Opcional: ações adicionais quando Enter é pressionado fora da lista
                    this.hideResults();
                }
                return;
            case 'Tab': // TAB
                this.hideResults();
                return;
            default:
                return;
        }
        if (prevActive) {
            this.removeFocusCell(this.activeRowIndex, this.activeColIndex);
        }
        activeItem = this.getItemAt(activeRowIndex, activeColIndex);
        this.activeRowIndex = activeRowIndex;
        this.activeColIndex = activeColIndex;
        if (activeItem) {
            this.input.setAttribute('aria-activedescendant', 'result-item-' + activeRowIndex + 'x' + activeColIndex);
            this.focusCell(activeRowIndex, activeColIndex);
        }
        else {
            this.input.setAttribute('aria-activedescendant', '');
        }
    }
    handleGridClick(evt) {
        const targetElement = evt.target;
        if (!targetElement || !this.grid.contains(targetElement)) {
            return;
        }
        let row = targetElement.closest('li');
        if (!row) {
            return;
        }
        const selectItem = row.querySelector('.alc-autocomplete__result-cell');
        this.selectItem(selectItem, evt);
    }
    isElementInView(element) {
        const bounding = element.getBoundingClientRect();
        return (bounding.top >= 0 &&
            bounding.left >= 0 &&
            bounding.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
            bounding.right <= (window.innerWidth || document.documentElement.clientWidth));
    }
    updateResults() {
        const searchString = this.input.value;
        this.emptyResult = false;
        // Verifique se a string de pesquisa tem pelo menos 2 caracteres
        if (searchString.length < 2) {
            this.hideResults();
            this.emptyResult = false;
            return;
        }
        this.filteredData = this.searchDataService(searchString);
        this.hideResults();
        if (this.filteredData.length > 0) {
            const maxItems = 10;
            const resultsToShow = this.filteredData.slice(0, maxItems);
            if (resultsToShow.length) {
                for (let row = 0; row < resultsToShow.length; row++) {
                    const resultRow = document.createElement('li');
                    resultRow.className = `alc-autocomplete__result-row alc-autocomplete__result-row--${this.listDirection}`;
                    resultRow.setAttribute('role', 'option');
                    resultRow.setAttribute('id', 'result-row-' + row);
                    resultRow.setAttribute('data-index', row.toString());
                    this.displayKeys.split(',').forEach((atributo, col) => {
                        const resultCell = document.createElement('span');
                        resultCell.className = 'alc-autocomplete__result-cell';
                        resultCell.setAttribute('role', 'presentation');
                        resultCell.setAttribute('id', 'result-item-' + row + 'x' + col);
                        resultCell.innerText = resultsToShow[row][atributo.trim()];
                        resultRow.appendChild(resultCell);
                    });
                    this.grid.appendChild(resultRow);
                }
                this.grid.classList.remove('is-hidden');
                this.input.setAttribute('aria-expanded', 'true');
                this.rowsCount = resultsToShow.length;
                this.colsCount = this.displayKeys.split(',').length;
                this.shown = true;
            }
            if (this.filteredData.length > maxItems) {
                this.showMessageRow("Mais de 10 itens encontrados. Refine seus critérios de pesquisa.");
            }
        }
        else {
            this.emptyResult = true;
        }
    }
    getRowIndex(key) {
        let activeRowIndex = this.activeRowIndex;
        switch (key) {
            case 'ArrowUp':
            case 'ArrowLeft':
                if (activeRowIndex <= 0) {
                    activeRowIndex = this.rowsCount - 1;
                }
                else {
                    activeRowIndex--;
                }
                break;
            case 'ArrowDown':
            case 'ArrowRight':
                if (activeRowIndex === -1 || activeRowIndex >= this.rowsCount - 1) {
                    activeRowIndex = 0;
                }
                else {
                    activeRowIndex++;
                }
        }
        return activeRowIndex;
    }
    getItemAt(rowIndex, colIndex) {
        return document.getElementById('result-item-' + rowIndex + 'x' + colIndex);
    }
    selectItem(item, event) {
        if (event)
            event.preventDefault();
        if (item) {
            const row = item.closest('li');
            const index = row === null || row === void 0 ? void 0 : row.getAttribute('data-index');
            if (index !== null && index !== undefined) {
                const selectedData = this.filteredData[parseInt(index, 10)];
                this.input.value = item.innerText;
                this.selectedItemValue = selectedData;
                this.hideResults();
                this.input.setAttribute('aria-expanded', 'false');
                this.itemSelected = true;
                this.emptyResult = false;
                this.input.focus();
            }
        }
    }
    handleInput() {
        var _a;
        this.itemSelected = ((_a = this.input) === null || _a === void 0 ? void 0 : _a.value.length) > 0;
    }
    handleFocus() {
        // Quando o input ganhar foco novamente, se já existir algum valor digitado,
        // e o valor for maior ou igual a 2 caracteres, tentar exibir novamente os resultados.
        const searchString = this.input.value || '';
        if (searchString.length >= 2) {
            this.updateResults();
        }
    }
    clearSelection(event) {
        event.preventDefault(); // Prevenir comportamento padrão de submit
        this.clearSelected();
        this.input.focus();
    }
    hideResults() {
        if (!this.shown) {
            return;
        }
        this.gridFocused = false;
        this.shown = false;
        this.activeRowIndex = -1;
        this.activeColIndex = 0;
        this.grid.innerHTML = '';
        this.grid.classList.add('is-hidden');
        this.input.setAttribute('aria-expanded', 'false');
        this.rowsCount = 0;
        this.colsCount = 0;
        this.input.setAttribute('aria-activedescendant', '');
        const messageRowContainer = this.el.querySelector(`#${this.messageRowContainerId}`);
        if (messageRowContainer) {
            messageRowContainer.innerHTML = '';
        }
        if (!this.isElementInView(this.input)) {
            this.input.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        }
    }
    removeFocusCell(rowIndex, colIndex) {
        const row = document.getElementById('result-row-' + rowIndex);
        if (row) {
            row.classList.remove('is-focused');
            row.ariaSelected = "false";
        }
        const cell = this.getItemAt(rowIndex, colIndex);
        if (cell)
            cell.classList.remove('is-focused');
    }
    focusCell(rowIndex, colIndex) {
        const row = document.getElementById('result-row-' + rowIndex);
        if (row) {
            row.classList.add('is-focused');
            row.ariaSelected = "true";
        }
        const cell = this.getItemAt(rowIndex, colIndex);
        if (cell) {
            cell.classList.add('is-focused');
            if (this.listDirection === 'vertical') {
                this.ensureCellInView(cell);
            }
            else {
                if (!this.isElementInView(cell)) {
                    cell.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
                }
            }
        }
    }
    /* Mantém o elemento focável dentro do scroll */
    ensureCellInView(element) {
        const gridContainer = this.grid;
        const elementTop = element.offsetTop;
        gridContainer.scrollTop = elementTop;
    }
    /* Mostra pesquisa com e sem acentos */
    searchDataService(searchString) {
        const normalizeString = (str) => str.normalize('NFD').replace(/[\u0300-\u036f]/g, '').toLowerCase();
        const normalizedSearchString = normalizeString(searchString);
        const results = [];
        for (const item of this.items) {
            for (const atributo of this.displayKeys.split(',')) {
                const normalizedItem = normalizeString(item[atributo.trim()] || '');
                if (normalizedItem.includes(normalizedSearchString)) {
                    results.push(item);
                    break;
                }
            }
        }
        return results;
    }
    showMessageRow(message) {
        const messageRowContainer = this.el.querySelector(`#${this.messageRowContainerId} `);
        const existingMessageRow = messageRowContainer.querySelector('.alc-autocomplete__message-row');
        if (!existingMessageRow) {
            const messageRow = document.createElement('div');
            messageRow.className = `alc-autocomplete__message-row`;
            messageRow.innerText = message;
            if (messageRowContainer) {
                messageRowContainer.appendChild(messageRow);
            }
        }
    }
    /** Retorna o valor selecionado */
    async getSelected() {
        return this.selectedItemValue || null;
    }
    /** Define o valor selecionado */
    async setSelected(item) {
        if (item) {
            this.selectedItemValue = item;
            const firstKey = this.displayKeys.split(',')[0].trim();
            const displayText = item[firstKey];
            this.input.value = displayText;
            this.itemSelected = true;
            this.emptyResult = false;
        }
    }
    /** Limpa o valor selecionado */
    async clearSelected() {
        this.input.value = '';
        this.selectedItemValue = null;
        this.itemSelected = false;
        this.hideResults();
        this.emptyResult = false;
        this.error = false;
    }
    render() {
        var _a;
        const listClass = this.listDirection === 'vertical'
            ? 'alc-autocomplete__grid alc-autocomplete__grid--vertical is-hidden alc-field__text'
            : 'alc-autocomplete__grid is-hidden alc-field__text';
        const active = this.shown || this.loading || this.error || (!this.error && this.emptyResult);
        return (h(Host, { key: 'd05e40ab10e25b249643fd2a7533183d38a484e2' }, h("alc-field", { key: 'afbffba276a97c5e4113615196aa94358af8ddbd', id: this.labelId, label: this.label, hint: this.hint, required: this.required, class: "alc-autocomplete__field" }, h("alc-popup", { key: '501e5c316ac6522c56bc99fcea728af6834074db', shift: true, flip: true, strategy: "fixed", active: active, distance: 2, placement: "bottom-start", sync: 'width' }, h("div", { key: 'fa18971d71a168c13fe5c5fc71d206b833e86a78', slot: "anchor" }, h("alc-icon", { key: 'fcbfbb27da3573b965782b1e6da72015dc9d6e23', name: "search", label: "Pesquisar", class: "alc-autocomplete__icon" }), h("input", Object.assign({ key: '6ef5f5ca522b0c3da2703040410d49a0829c8771', ref: el => this.input = el, placeholder: this.placeholder, class: "alc-autocomplete__input", type: "text", role: "combobox", "aria-haspopup": "grid", "aria-expanded": "false", "aria-autocomplete": "list", "aria-controls": this.gridId, id: this.inputId, disabled: this.disabled || this.loading, onInput: () => this.handleInput() }, test('data-test-autocomplete-input'))), this.itemSelected && ((_a = this.input) === null || _a === void 0 ? void 0 : _a.value) && (h("button", Object.assign({ key: 'f72623e4729db617f4ae3060146c2d2c8647a5eb', type: "button" // Adicionado para evitar submissão do formulário
            ,
            class: "alc-button alc-button-rounded alc-autocomplete__clear-button", onClick: (event) => this.clearSelection(event) }, test('data-test-autocomplete-clear-button')), h("alc-icon", { key: '07f21c425fafc4a0009718a2109dbefac0b7ae08', name: "x-lg", label: "Limpar" })))), h("div", { key: '459d4e47aa9f6adbc3536e7df97d712cb8bd0ffe', class: "alc-autocomplete__container-results" }, this.loading ? (h("div", { class: "alc-autocomplete__loading-indicator" }, h("alc-icon", { name: "arrow-clockwise", label: "Carregando", class: "alc-autocomplete__loading-icon" }), " Carregando...")) : null, this.error ? (h("div", { class: "alc-autocomplete__has-an-error-indicator" }, h("alc-icon", { name: "exclamation-triangle", label: "Erro", class: "mr-1" }), " Servi\u00E7o indispon\u00EDvel. Volte mais tarde!")) : null, !this.error && this.emptyResult ? (h("div", { class: "alc-autocomplete__has-an-error-indicator" }, h("alc-icon", { name: "exclamation-triangle", label: "Erro", class: "mr-1" }), " Nenhum resultado encontrado. Refine seus crit\u00E9rios de pesquisa.")) : null, h("div", Object.assign({ key: '0c7746fe2febad6825ab31e0619eeb5bc67365d8', class: "alc-autocomplete__results" }, test('data-test-autocomplete-results')), h("ul", { key: '863a18714395fc6ee3123dae27e11621f04107d1', "aria-labelledby": this.labelId, role: "listbox", id: this.gridId, class: listClass, ref: el => this.grid = el }), h("div", { key: 'f9c1fc7eae956f6891382f2f678b447a162dd65e', id: this.messageRowContainerId, class: "alc-autocomplete__message-row-container" })))))));
    }
    static get is() { return "alc-autocomplete"; }
    static get originalStyleUrls() {
        return {
            "$": ["alc-autocomplete.css"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["alc-autocomplete.css"]
        };
    }
    static get properties() {
        return {
            "items": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Array<{ [key: string]: string }>",
                    "resolved": "{ [key: string]: string; }[]",
                    "references": {
                        "Array": {
                            "location": "global",
                            "id": "global::Array"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Itens que ser\u00E3o listado no componente"
                },
                "getter": false,
                "setter": false,
                "defaultValue": "[]"
            },
            "displayKeys": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Indica os atributos dos dados que ser\u00E3o exibidos na lista"
                },
                "getter": false,
                "setter": false,
                "attribute": "display-keys",
                "reflect": true,
                "defaultValue": "''"
            },
            "label": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Label do input"
                },
                "getter": false,
                "setter": false,
                "attribute": "label",
                "reflect": true,
                "defaultValue": "''"
            },
            "hint": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Mensagem de ajuda"
                },
                "getter": false,
                "setter": false,
                "attribute": "hint",
                "reflect": true,
                "defaultValue": "''"
            },
            "required": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Indica se o input \u00E9 obrigat\u00F3rio"
                },
                "getter": false,
                "setter": false,
                "attribute": "required",
                "reflect": true,
                "defaultValue": "false"
            },
            "placeholder": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Texto dentro do input"
                },
                "getter": false,
                "setter": false,
                "attribute": "placeholder",
                "reflect": true
            },
            "listDirection": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "'horizontal' | 'vertical'",
                    "resolved": "\"horizontal\" | \"vertical\"",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Indica o tipo de visualiza\u00E7\u00E3o da lista"
                },
                "getter": false,
                "setter": false,
                "attribute": "list-direction",
                "reflect": true,
                "defaultValue": "'vertical'"
            },
            "disabled": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Desabilita input"
                },
                "getter": false,
                "setter": false,
                "attribute": "disabled",
                "reflect": true,
                "defaultValue": "false"
            },
            "loading": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Indica se os dados est\u00E3o sendo carregados"
                },
                "getter": false,
                "setter": false,
                "attribute": "loading",
                "reflect": true,
                "defaultValue": "false"
            },
            "error": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Indica se houve um erro ao carregar os dados"
                },
                "getter": false,
                "setter": false,
                "attribute": "error",
                "reflect": true,
                "defaultValue": "false"
            },
            "errorMsg": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "getter": false,
                "setter": false,
                "attribute": "error-msg",
                "reflect": true,
                "defaultValue": "null"
            }
        };
    }
    static get states() {
        return {
            "filteredData": {},
            "itemSelected": {},
            "selectedItemValue": {},
            "emptyResult": {}
        };
    }
    static get events() {
        return [{
                "method": "alcChange",
                "name": "alc-change",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Evento emitido sempre que o item selecionado for alterado.\nO valor emitido ser\u00E1 o mesmo que pode ser obtido pelo m\u00E9todo `getSelected()`."
                },
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                }
            }];
    }
    static get methods() {
        return {
            "getSelected": {
                "complexType": {
                    "signature": "() => Promise<any>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<any>"
                },
                "docs": {
                    "text": "Retorna o valor selecionado",
                    "tags": []
                }
            },
            "setSelected": {
                "complexType": {
                    "signature": "(item: any) => Promise<void>",
                    "parameters": [{
                            "name": "item",
                            "type": "any",
                            "docs": ""
                        }],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Define o valor selecionado",
                    "tags": []
                }
            },
            "clearSelected": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Limpa o valor selecionado",
                    "tags": []
                }
            }
        };
    }
    static get elementRef() { return "el"; }
    static get watchers() {
        return [{
                "propName": "selectedItemValue",
                "methodName": "selectedItemValueChanged"
            }, {
                "propName": "loading",
                "methodName": "handleLoadingChange"
            }];
    }
    static get listeners() {
        return [{
                "name": "click",
                "method": "handleBodyClick",
                "target": "body",
                "capture": false,
                "passive": false
            }, {
                "name": "keyup",
                "method": "handleInputKeyUp",
                "target": undefined,
                "capture": false,
                "passive": false
            }, {
                "name": "keydown",
                "method": "handleInputKeyDown",
                "target": undefined,
                "capture": false,
                "passive": false
            }, {
                "name": "click",
                "method": "handleGridClick",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
}
//# sourceMappingURL=alc-autocomplete.js.map
