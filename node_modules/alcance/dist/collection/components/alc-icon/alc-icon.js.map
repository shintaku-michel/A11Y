{"version":3,"file":"alc-icon.js","sourceRoot":"","sources":["../../../../src/components/alc-icon/alc-icon.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Build, Component, Element, Host, Prop, State, Watch, h } from '@stencil/core';\nimport logger from '../utils/logger';\nimport { getSvgContent, alciconContent } from './request';\nimport { /* getName , */ getUrl, inheritAttributes } from './utils';\n\n@Component({\n  tag: 'alc-icon',\n  assetsDirs: ['assets/icons'],\n  styleUrl: 'alc-icon.css',\n  scoped: false,\n})\nexport class AlcIcon {\n  private io?: IntersectionObserver;\n  private iconName: string | null = null;\n  private inheritedAttributes: { [k: string]: any } = {};\n  private role: 'img' | 'presentation' = 'img';\n\n  @Element() el!: HTMLElement;\n\n  @State() private svgContent?: string;\n  @State() private isVisible = false;\n  @State() private ariaLabel?: string;\n\n  /**\n   * Equivalente textual do ícone. Seu uso é semelhante ao atributo `alt` de uma imagem.\n   * Esse texto será lido por software leitor de tela, e utilizado no lugar do ícone se por qualquer motivo a imagem não puder ser carregada no navegador.\n   */\n  @Prop({ reflect: true }) label!: string;\n\n  /**\n   * Define se o ícone deve ser espelhado horizontalmente quando `dir` for `\"rtl\"`.\n   */\n  @Prop({ reflect: true }) flipRtl?: boolean = false;\n\n  /**\n   * Nome do ícone que será mostrado. Deve ser um dos nomes de ícone da biblioteca.\n   */\n  @Prop({ reflect: true }) name?: string;\n\n  /**\n   * Especifica o `src` de um arquivo SVG a ser usado como ícone.\n   */\n  @Prop({ reflect: true }) src?: string;\n\n  /**\n   * Uma combinação de `name` e `src`.\n   * Se o valor for entendido como a URL de um `src`, ele definirá a propriedade `src`.\n   * Caso contrário, assume-se como o nome de ícone da biblioteca, e define a propriedade `name`.\n   */\n  @Prop({ reflect: true }) icon?: string;\n\n  /**\n   * Se ativado, a carga do ícone ocorrerá somente quando o componente estiver visível na _viewport_.\n   */\n  @Prop({ reflect: true }) lazy = false;\n\n  /**\n   * Quando definido como `true`, o conteúdo SVG obtido via HTTP passará por uma limpeza.\n   * Conteúdo que contenha algum elemento `<script>` ou atributo que comece com `on`, como `onclick`, será descartado.\n   * Sendo descartado, a imagem não será mostrada.\n   * @default false\n   */\n  @Prop({ reflect: true }) sanitize = false;\n\n  componentWillLoad() {\n    this.inheritedAttributes = inheritAttributes(this.el, ['aria-label']);\n  }\n\n  connectedCallback() {\n    // purposely do not return the promise here because loading\n    // the svg file should not hold up loading the app\n    // only load the svg if it's visible\n    this.waitUntilVisible(this.el, '50px', () => {\n      this.isVisible = true;\n      this.loadIcon();\n    });\n  }\n\n  disconnectedCallback() {\n    if (this.io) {\n      this.io.disconnect();\n      this.io = undefined;\n    }\n  }\n\n  private waitUntilVisible(el: HTMLElement, rootMargin: string, cb: () => void) {\n    if (Build.isBrowser && this.lazy && typeof window !== 'undefined' && (window as any).IntersectionObserver) {\n      const io = (this.io = new (window as any).IntersectionObserver(\n        (data: IntersectionObserverEntry[]) => {\n          if (data[0].isIntersecting) {\n            io.disconnect();\n            this.io = undefined;\n            cb();\n          }\n        },\n        { rootMargin },\n      ));\n\n      io.observe(el);\n    } else {\n      // browser doesn't support IntersectionObserver\n      // so just fallback to always show it\n      cb();\n    }\n  }\n  \n  private hasAriaHidden = () => {\n    const { el } = this;\n    \n    return el.hasAttribute('aria-hidden') && el.getAttribute('aria-hidden') === 'true';\n  }\n\n  @Watch('label')\n  @Watch('name')\n  @Watch('src')\n  @Watch('icon')\n  loadIcon() {\n    if (Build.isBrowser && this.isVisible) {\n      const url = getUrl(this);\n      if (url) {\n        if (alciconContent.has(url)) {\n          // sync if it's already loaded\n          this.svgContent = alciconContent.get(url);\n          logger.log(this.svgContent);\n        } else {\n          // async if it hasn't been loaded\n          getSvgContent(url, this.sanitize).then(() => (this.svgContent = alciconContent.get(url)));\n        }\n      }\n    }\n\n    // Se label estiver preenchido\n    if (this.label) {\n      this.ariaLabel = this.label;\n      this.role = 'img';\n    }\n    // Se label for um string vazio\n    else if (this.label === '') {\n      this.ariaLabel = undefined;\n      this.role = 'presentation';\n    }\n  }\n\n\n  render() {\n    this.label ?? logger.report('label', this.el.tagName.toLowerCase(), this.el)\n    const { label, iconName, ariaLabel, inheritedAttributes, role } = this;\n    const flipRtl =\n      this.flipRtl ||\n      (iconName &&\n        (iconName.indexOf('arrow') > -1 || iconName.indexOf('chevron') > -1) &&\n        this.flipRtl !== false);\n\n    /**\n     * Only set the aria-label if a) we have generated\n     * one for the icon and if aria-hidden is not set to \"true\".\n     * If developer wants to set their own aria-label, then\n     * inheritedAttributes down below will override whatever\n     * default label we have set.\n     */\n    return (\n      <Host\n        label={label}\n        aria-label={ariaLabel !== undefined && !this.hasAriaHidden() ? ariaLabel : null}\n        role={role}\n        class={{\n          'flip-rtl': !!flipRtl && (this.el.ownerDocument as Document).dir === 'rtl',\n        }}\n        {...inheritedAttributes}\n      >\n        {Build.isBrowser && this.svgContent ? (\n          <span class=\"icon-inner\" innerHTML={this.svgContent}></span>\n        ) : (\n          <span class=\"icon-inner\">{label}</span>\n        )}\n      </Host>\n    );\n  }\n}"]}