// @ts-nocheck
import { h, Host } from "@stencil/core";
import { getUniqueId } from "../utils/getUniqueId";
import logger from "../utils/logger";
import { getMode } from "../utils/theme";
export class AlcDetails {
    constructor() {
        this.idDetails = null;
        /**
         * Mantém aberto.
         */
        this.opened = false;
        this.maxHeight = null;
        this.showDetails = (e) => {
            if (this.disabled) {
                e.preventDefault();
                return;
            }
            this.opened = this.detailsElement.open;
            if (this.opened) {
                this.alcShow.emit();
            }
            else {
                this.alcClose.emit();
            }
        };
    }
    renderIcon() {
        // Não mostra ícone se não for tematizado
        if (getMode() === 'base') {
            return null;
        }
        return (h("alc-icon", { name: "chevron-right", label: "Expandir", class: {
                'alc-details__icon': true,
                'is-open': this.opened,
            } }));
    }
    componentWillLoad() {
        // Antes do componente carregar, cria um id para o details.
        this.idDetails = getUniqueId();
    }
    componentDidLoad() {
        // Aguarda carga do componente para inserir o listener do evento
        this.detailsElement.addEventListener('toggle', this.showDetails);
    }
    // Configuração de altura para animação removida até ajustar para que funcione details dentro do tabs
    // componentDidRender() {
    //   this.summaryElement = this.detailsElement.querySelector('.alc-details__summary');
    //   this.contentElement = this.detailsElement.querySelector('.alc-details__content');
    //   // Por meio do ResizeObserver, redefine o valor de altura máxima, deixando a altura do conteúdo
    //   // dentro do details dinâmico
    //   const target = this.contentElement;
    //   const modifierElement = this.detailsElement;
    //   const minHeight = this.summaryElement.offsetHeight;
    //   function observerCallback() {
    //     const targetHeight = target.scrollHeight;
    //     const height = targetHeight + minHeight + 1;
    //     modifierElement.style.setProperty('--min-height', minHeight + 'px');
    //     modifierElement.style.setProperty('--max-height', height + 'px');
    //   }
    //   this.ro = new ResizeObserver(observerCallback);
    //   this.ro.observe(target);
    //   // Inicia com um cálculo de altura necessário para animação.
    //   // Não interfere na dinâmica do conteúdo.
    //   if (modifierElement) {
    //     const minHeight = this.summaryElement.offsetHeight;
    //     const maxHeight = this.contentElement.offsetHeight;
    //     modifierElement.style.setProperty('--min-height', minHeight + 'px');
    //     modifierElement.style.setProperty('--content-height', maxHeight + 'px');
    //   }
    // }
    render() {
        var _a;
        (_a = this.summary) !== null && _a !== void 0 ? _a : logger.report('summary', this.element.tagName.toLowerCase(), this.element);
        return (h(Host, { key: '82b4dabe8a69e6b2eec1eba297a065931cf8e1fe' }, h("details", { key: '4f8d568957333eb6c9f41485c654daacf8eda14c', id: this.idDetails, open: this.opened, class: {
                'alc-details': true,
                'is-disabled': this.disabled,
                'is-open': this.opened,
            }, ref: el => (this.detailsElement = el) }, h("summary", { key: 'b1be29ff426173d74fc28366996a668ce7c090c4', class: {
                'alc-details__summary': true,
                'is-disabled': this.disabled,
                'is-open': this.opened
            } }, this.renderIcon(), this.summary), h("div", { key: 'a5d050ec9d369667b5a4abb954f6dadacd9152ad', class: "alc-details__content" }, h("slot", { key: '1fe678e8072aa8f4cd430041dca81d0ba23241e2' })))));
    }
    static get is() { return "alc-details"; }
    static get originalStyleUrls() {
        return {
            "base": ["alc-details-base.css"],
            "theme": ["alc-details.css"]
        };
    }
    static get styleUrls() {
        return {
            "base": ["alc-details-base.css"],
            "theme": ["alc-details.css"]
        };
    }
    static get properties() {
        return {
            "summary": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": true,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Insere o summary do details."
                },
                "getter": false,
                "setter": false,
                "attribute": "summary",
                "reflect": true
            },
            "disabled": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Desativa o componente."
                },
                "getter": false,
                "setter": false,
                "attribute": "disabled",
                "reflect": true
            },
            "opened": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Mant\u00E9m aberto."
                },
                "getter": false,
                "setter": false,
                "attribute": "opened",
                "reflect": false,
                "defaultValue": "false"
            }
        };
    }
    static get states() {
        return {
            "maxHeight": {}
        };
    }
    static get events() {
        return [{
                "method": "alcShow",
                "name": "alc-show",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Evento disparado quando a details abrir"
                },
                "complexType": {
                    "original": "null",
                    "resolved": "null",
                    "references": {}
                }
            }, {
                "method": "alcClose",
                "name": "alc-close",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Evento disparado quando a details fechar"
                },
                "complexType": {
                    "original": "null",
                    "resolved": "null",
                    "references": {}
                }
            }];
    }
    static get elementRef() { return "element"; }
}
//# sourceMappingURL=alc-details.js.map
