{"version":3,"file":"alc-menu-item.js","sourceRoot":"","sources":["../../../../src/components/alc-menu-item/alc-menu-item.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Prop, h, Host, Event, EventEmitter, Element, Listen } from '@stencil/core';\nimport classNames from 'classnames';\nexport interface AlcMenuItemSelectEventDetail {\n  originalEvent: MouseEvent | KeyboardEvent;\n}\n\nconst ROLES = {\n  normal: 'menuitem',\n  checkbox: 'menuitemcheckbox',\n  radio: 'menuitemradio',\n}\n\n/**\n * @slot - O rótulo do menu-item.\n *\n * @slot prefix - Prefixo do rótulo do menu-item.\n * Geralmente, utilizado para um ícone associado à opção de menu.\n *\n * @slot suffix - Sufixo do rótulo do menu-item.\n * Geralmente, utilizado para um ícone associado à opção de menu.\n */\n\n@Component({\n  tag: 'alc-menu-item',\n  styleUrl: 'alc-menu-item.css',\n  shadow: false,\n})\nexport class AlcMenuItem {\n  @Element() hostElement: HTMLElement;\n\n  /** Tipo do menu-item. */\n  @Prop({ reflect: true })\n  type?: 'normal' | 'checkbox' | 'radio' = 'normal';\n  /** Indica se o menu-item está ou não marcado. Usado quando `type=checkbox` ou `type=radio`. */\n  @Prop({ reflect: true, mutable: true })\n  checked?: boolean = false;\n  /** Indica se o menu-item está desabilitado. */\n  @Prop({ reflect: true })\n  disabled?:boolean = false;\n  /** Valor do menu-item, que pode ser utilizado para identificar que item foi selecionado. */\n  @Prop({ reflect: true })\n  value?: any;\n\n  @Listen('keydown')\n  handleKeyDown(event: KeyboardEvent) {\n    if (' ' === event.key || 'Enter' === event.key) {\n      event.preventDefault();\n      this.triggerEvent({ originalEvent: event });\n    }\n  }\n\n  @Listen('click')\n  handleClick(event: MouseEvent) {\n    if (!this.disabled) {\n      event.preventDefault();\n      this.triggerEvent({ originalEvent: event });\n    }\n  }\n\n  /** Evento disparado quando o menu-item é selecionado. */\n  @Event({ eventName: 'alc-select' })\n  alcSelect: EventEmitter<{\n    originalEvent: MouseEvent | KeyboardEvent;\n  }>;\n\n  triggerEvent(detail: AlcMenuItemSelectEventDetail) {\n    if (this.disabled) {\n      return;\n    }\n    this.alcSelect.emit(detail);\n  }\n\n  getCssClassMap() {\n    return classNames(\n      'alc-menu-item',\n      this.disabled && 'alc-menu-item--disabled',\n      this.type !== null && 'alc-menu-item--checkable',\n    );\n  }\n\n  render() {\n    const checked = this.checked ? 'true' : 'false';\n    const role = ROLES[this.type];\n\n    return (\n      <Host\n        role={role}\n        aria-checked={this.type === 'normal' ? null : checked}\n        aria-disabled={this.disabled ? 'true' : null}\n        class={this.getCssClassMap()}\n        tabindex={-1}\n      >\n        <span class=\"alc-menu-item__check\">\n          {this.type === 'checkbox' && this.checked\n            ? <alc-icon label=\"\" name=\"check\"></alc-icon>\n            : this.type === 'radio' && this.checked\n              ? <alc-icon label=\"\" name=\"record-circle\" class=\"text-sm\"></alc-icon>\n              : null\n          }\n        </span>\n\n        <span class=\"alc-menu-item__prefix\">\n          <slot name=\"prefix\" />\n        </span>\n\n        <span class=\"alc-menu-item__label\">\n          <slot />\n        </span>\n\n        <span class=\"alc-menu-item__suffix\">\n          <slot name=\"suffix\" />\n        </span>\n      </Host>\n    );\n  }\n}\n"]}