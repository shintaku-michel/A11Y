import { Host, h } from "@stencil/core";
import test from "../utils/testAttributes";
/**
 * @slot - Slot para adicionar elemento de navegação. Pode ser tanto a tag `<a>` quanto um `<routerlink>` no caso de uso com Vue. Também pode-se usar a propriedade url.
*/
export class AlcBreadcrumbItem {
    constructor() {
        /** Indica a url do link, pode-se usar o slot default para adicionar o elemento de navegação */
        this.url = null;
        /** Indica a label do breadcrumb */
        this.label = null;
        /** Indica o nome do icone a ser renderizado */
        this.iconName = null;
        this.isCurrentPage = false;
    }
    componentWillLoad() {
        this.isCurrentPage = !!this.el.ariaCurrent;
    }
    onAriaLabelChange(newValue) {
        this.isCurrentPage = newValue === null ? false : true;
    }
    render() {
        return (h(Host, { key: 'eb3336d1010473107ba48af621865847c669b7e0', role: "listitem" }, h("div", { key: '843d998744324ad3e0e4b38c07db32dda9fff05a', class: 'alc-breadcrumb-item' }, h("div", { key: '5a271f68cc38681bab776a0b8ceda5ce53f859f3', class: {
                'alc-breadcrumb-item__link': true,
                'alc-link': !this.isCurrentPage
            } }, this.iconName && (h("alc-icon", Object.assign({ key: '2b47b53113ed0e955b4c9b022a9aa7a508a54e02', label: "", name: this.iconName, class: "alc-breadcrumb-item__icon", "aria-hidden": "true" }, test('data-test-icon')))), this.url ? (h("a", Object.assign({ href: this.url }, test('data-test-link')), this.label)) : (h("slot", null))), !this.isCurrentPage && (h("span", { key: '4d72144f8495b0da57230a7c3af5d403f127b9e8', class: 'alc-breadcrumb-item__separator' }, "/")))));
    }
    static get is() { return "alc-breadcrumb-item"; }
    static get originalStyleUrls() {
        return {
            "$": ["alc-breadcrumb-item.css"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["alc-breadcrumb-item.css"]
        };
    }
    static get properties() {
        return {
            "url": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Indica a url do link, pode-se usar o slot default para adicionar o elemento de navega\u00E7\u00E3o"
                },
                "getter": false,
                "setter": false,
                "attribute": "url",
                "reflect": true,
                "defaultValue": "null"
            },
            "label": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Indica a label do breadcrumb"
                },
                "getter": false,
                "setter": false,
                "attribute": "label",
                "reflect": true,
                "defaultValue": "null"
            },
            "iconName": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Indica o nome do icone a ser renderizado"
                },
                "getter": false,
                "setter": false,
                "attribute": "icon-name",
                "reflect": true,
                "defaultValue": "null"
            }
        };
    }
    static get states() {
        return {
            "isCurrentPage": {}
        };
    }
    static get elementRef() { return "el"; }
    static get watchers() {
        return [{
                "propName": "aria-current",
                "methodName": "onAriaLabelChange"
            }];
    }
}
//# sourceMappingURL=alc-breadcrumb-item.js.map
