import { Host, h } from "@stencil/core";
import logger from "../utils/logger";
export class AlcEventLab {
    constructor() {
        this.underlined = 1;
    }
    async changePage(pageNumber) {
        this.requestChangeTo(pageNumber);
    }
    requestChangeTo(newButton) {
        const currentButton = this.underlined;
        logger.debug('RequestChangeTo', newButton);
        // Regra interna do componente, que não faz nada se o botão clicado
        // for o que já está sublinhado
        if (newButton === currentButton) {
            logger.debug('Botão já estava sublinhado');
            return;
        }
        // Dispara o evento buttonWillChange.
        const event = this.alcChange.emit({
            from: currentButton,
            to: newButton
        });
        // Verifica se foi prevenido externamente.
        // Se foi, não faz mais nada.
        if (event.defaultPrevented) {
            logger.debug('defaultPrevented');
            return;
        }
        // Registra a alteração solicitada
        if (newButton === 1) {
            this.b2.classList.remove('underline');
            this.b1.classList.add('underline');
        }
        else if (newButton === 2) {
            this.b1.classList.remove('underline');
            this.b2.classList.add('underline');
        }
        this.underlined = newButton;
        // Dispara o evento buttonDidChange.
        this.alcAfterChange.emit({
            from: currentButton,
            to: newButton
        });
    }
    render() {
        this.alcAfterChange.emit({
            from: undefined,
            to: 1
        });
        return (h(Host, { key: '916e2c701b44dbbaae07001c91a295b0bb28aec1' }, h("button", { key: 'd62e5e9f217ef0b46e56556c4703f3cf86795c57', class: "button underline", ref: el => this.b1 = el, onClick: () => this.requestChangeTo(1) }, "1"), h("button", { key: '177c7edc53e2ff0aef977b41a598860d6e8b3812', class: "button", ref: el => this.b2 = el, onClick: () => this.requestChangeTo(2) }, "2"), h("slot", { key: '1b6a3447a5b462ea691f67dfeff86d8ecbcacc42' })));
    }
    static get is() { return "alc-event-lab"; }
    static get originalStyleUrls() {
        return {
            "$": ["alc-event-lab.css"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["alc-event-lab.css"]
        };
    }
    static get events() {
        return [{
                "method": "alcChange",
                "name": "alc-change",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "complexType": {
                    "original": "AlcChangeEventTypes",
                    "resolved": "AlcChangeEventTypes",
                    "references": {
                        "AlcChangeEventTypes": {
                            "location": "local",
                            "path": "/home/jenkins_slave/workspace/alcance-snapshots/packages/alcance/src/components/alc-event-lab/alc-event-lab.tsx",
                            "id": "src/components/alc-event-lab/alc-event-lab.tsx::AlcChangeEventTypes"
                        }
                    }
                }
            }, {
                "method": "alcAfterChange",
                "name": "alc-after-change",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "complexType": {
                    "original": "AlcChangeEventTypes",
                    "resolved": "AlcChangeEventTypes",
                    "references": {
                        "AlcChangeEventTypes": {
                            "location": "local",
                            "path": "/home/jenkins_slave/workspace/alcance-snapshots/packages/alcance/src/components/alc-event-lab/alc-event-lab.tsx",
                            "id": "src/components/alc-event-lab/alc-event-lab.tsx::AlcChangeEventTypes"
                        }
                    }
                }
            }];
    }
    static get methods() {
        return {
            "changePage": {
                "complexType": {
                    "signature": "(pageNumber: number) => Promise<void>",
                    "parameters": [{
                            "name": "pageNumber",
                            "type": "number",
                            "docs": ""
                        }],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "",
                    "tags": []
                }
            }
        };
    }
}
//# sourceMappingURL=alc-event-lab.js.map
