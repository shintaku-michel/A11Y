import { Host, h } from "@stencil/core";
import { getUniqueId } from "../utils/getUniqueId";
import logger from "../utils/logger";
import { childText, createIcon } from "../utils/domUtils";
/**
 * @slot DEFAULT - Slot para o conteúdo principal do nav. Tipicamente, os elementos de navegação pelas funcionalidades do sistema.
 * @slot footer - Slot nomeado para adicionar rodapé no nav. Tipicamente, os elementos de navegação acessórios e configurações, incluindo o seletor de tema.
 * @slot header - Slot nomeado para adicionar cabeçalho no nav. Tipicamente, a identificação do usuário logado no sistema.
 */
export class AlcNav {
    openPanel(panel) {
        if (!panel) {
            return;
        }
        logger.debug('open', { panel });
        panel = panel.closest('.alc-nav__panel');
        // Identifica o painel que está aberto atualmente.
        const current = Array.from(this.panels.children).filter(panel => panel.matches('.is-open'))[0];
        // Mantém painel por cima enquanto está sendo fechado
        if (panel.matches('.alc-nav__panel--parent') && current) {
            current.classList.add('alc-nav__panel--highest');
        }
        const remove = ['is-open', 'mm-panel--parent'];
        const add = [];
        Array.from(this.panels.children)
            .filter(child => child.matches('.alc-nav__panel'))
            .forEach(p => {
            p.classList.add(...add);
            p.classList.remove(...remove);
            if (p !== current) {
                p.classList.remove('alc-nav__panel--highest');
            }
            if (p === panel) {
                p.removeAttribute('inert');
            }
            else {
                p.setAttribute('inert', 'true');
            }
        });
        // Abre novo painel.
        panel.classList.add('is-open');
        // Painel pai
        let parent = this.panels.querySelector(`#${panel.dataset.alcParent}`);
        // Ajusta painéis pais como "parent"
        while (parent) {
            parent = parent.closest('.alc-nav__panel');
            parent.classList.add('alc-nav__panel--parent');
            parent = this.panels.querySelector(`#${parent.dataset.alcParent}`);
        }
        // Todos os links do painel aberto são considerados agora focáveis.
        this.focusableItems = Array.from(this.el.querySelectorAll('.alc-nav__panel.is-open .alc-nav__listview a'));
        // Coloca o primeiro link do painel aberto na sequência de tabulação
        this.focusableItems[0].focus();
        // Se estiver "voltando" de um painel em um nível abaixo na hierarquia,
        // coloca o foco no link que abriu esse painel.
        const listitems = Array.from(this.el.querySelectorAll('.alc-nav__panel.is-open .alc-nav__listitem'));
        listitems.forEach((item) => {
            if (item.id === (current === null || current === void 0 ? void 0 : current.dataset.alcParent)) {
                logger.debug('focus on', item, item.id);
                item.querySelector('a').focus();
            }
        });
    }
    closePanel(panel) {
        logger.debug('close', { panel });
    }
    /**
     * Abre ou fecha o painel especificado pelo parâmetro.
     */
    async togglePanel(panel) {
        const listItem = panel.parentElement;
        if (listItem.classList.contains('is-open')) {
            logger.debug('will close', panel);
            this.closePanel(panel);
        }
        else {
            logger.debug('will open', panel);
            this.openPanel(panel);
        }
    }
    /**
     * Seleciona o item passado pelo parâmetro. Se nenhum valor for passado, apenas remove o item atualmente selecionado.
     */
    async setSelectedItem(listItem) {
        // Remove a classe 'is-selected' e a propriedade 'data-alc-selected' de qualquer item
        this.el.querySelectorAll('.alc-nav__listitem.is-selected').forEach(item => {
            item.classList.remove('is-selected');
            item.removeAttribute('data-alc-selected');
        });
        if (listItem) {
            // Adiciona a classe 'is-selected' e a propriedade 'data-alc-selected' ao item passado como parâmetro
            listItem.classList.add('is-selected');
            listItem.setAttribute('data-alc-selected', 'true');
        }
    }
    setSelected(listitem) {
        this.menu.querySelectorAll('.alc-nav__listitem--selected').forEach(li => {
            li.classList.remove('alc-nav__listitem--selected');
        });
        listitem.classList.add('alc-nav__listitem--selected');
    }
    initMenu() {
        this.menu.id = this.menu.id || getUniqueId();
        const panels = Array.from((this.menu.children)).filter(child => child.matches('[data-alc-panel]'));
        logger.debug({ panels });
        this.panels = document.createElement('div');
        this.panels.classList.add('alc-nav__panels');
        this.menu.append(this.panels);
        panels.forEach(panel => {
            this.initPanel(panel);
        });
    }
    initPanels() {
        this.menu.addEventListener('click', e => {
            var _a, _b;
            const href = ((_b = (_a = e.target) === null || _a === void 0 ? void 0 : _a.closest('a[href]')) === null || _b === void 0 ? void 0 : _b.getAttribute('href')) || '';
            if (href.slice(0, 1) === '#') {
                try {
                    const panel = this.el.querySelector(href);
                    if (panel) {
                        e.preventDefault();
                        this.togglePanel(panel);
                    }
                }
                catch (err) { }
            }
        }, {
            capture: true
        });
    }
    initPanel(panel) {
        var _a, _b;
        if (panel.matches('.alc-nav__panel')) {
            return;
        }
        logger.debug({ panel });
        panel.id = panel.id || getUniqueId();
        panel.classList.add('alc-nav__panel');
        this.panels.append(panel);
        this.initNavbar(panel);
        Array.from(panel.children)
            .filter(element => element.matches('ol, ul'))
            .forEach((listview) => {
            this.initListview(listview);
        });
        Array.from(this.main.children)
            .filter(element => element.matches('ol, ul'))
            .forEach((listview) => {
            this.initListview(listview);
        });
        if ((_a = this.header) === null || _a === void 0 ? void 0 : _a.children) {
            Array.from(this.header.children)
                .filter(element => element.matches('ol, ul'))
                .forEach((listview) => {
                this.initListview(listview);
            });
        }
        if ((_b = this.footer) === null || _b === void 0 ? void 0 : _b.children) {
            Array.from(this.footer.children)
                .filter(element => element.matches('ol, ul'))
                .forEach((listview) => {
                this.initListview(listview);
            });
        }
        return panel;
    }
    initNavbar(panel) {
        if (Array.from(panel.children).some(child => child.matches('.alc-nav__navbar'))) {
            return;
        }
        let parentListitem = null;
        let parentPanel = null;
        if (panel.dataset.alcParent) {
            parentListitem = this.panels.querySelector(`#${panel.dataset.alcParent}`);
            parentPanel = parentListitem.closest('.alc-nav__panel');
            while (parentPanel.closest('.alc-nav__listitem')) {
                parentPanel = parentPanel.parentElement.closest('.alc-nav__panel');
            }
        }
        const navbar = document.createElement('div');
        navbar.classList.add('alc-nav__navbar');
        if (parentPanel) {
            const prev = document.createElement('a');
            prev.classList.add('alc-nav__button', 'alc-nav__button--prev');
            const parentLabel = childText(parentPanel.querySelector('.alc-nav__navbar-title'));
            const labelText = parentLabel ? `Voltar para ${parentLabel}` : 'Voltar para navegação principal';
            const icon = createIcon('arrow-left-short', labelText);
            icon.classList.add('alc-nav__icon--prev');
            prev.href = `#${parentPanel.id}`;
            prev.append(icon);
            navbar.append(prev);
        }
        else {
            return;
        }
        let opener = null;
        if (parentListitem) {
            opener = Array.from(parentListitem.children).filter(child => child.matches('.alc-nav__text'))[0];
        }
        else if (parentPanel) {
            opener = parentPanel.querySelector(`a[href=#${panel.id}]`);
        }
        const title = document.createElement('span');
        title.classList.add('alc-nav__navbar-title');
        title.innerHTML = childText(opener) || '';
        panel.prepend(navbar);
        navbar.append(title);
    }
    initListview(listview) {
        if (listview.matches('.alc-nav__listview')) {
            return;
        }
        listview.classList.add('alc-nav__listview');
        const previous = listview.previousElementSibling;
        const hasLabel = previous ? 'alcLabel' in previous.dataset : false;
        if (hasLabel) {
            listview.classList.add('alc-nav__listview--labelled');
            const wrapper = document.createElement('div');
            wrapper.classList.add('alc-nav__label-wrapper');
            listview.parentElement.insertBefore(wrapper, previous);
            wrapper.insertBefore(previous, null);
            previous.classList.add('alc-nav__label');
            previous.id = previous.id || getUniqueId();
            listview.setAttribute('aria-labelledby', previous.id);
        }
        Array.from(listview.children).forEach((listitem) => {
            this.initListitem(listitem);
        });
    }
    initListitem(listitem) {
        if (listitem.matches('.alc-nav__listitem')) {
            return;
        }
        listitem.classList.add('alc-nav__listitem');
        if (listitem.hasAttribute('data-alc-selected')) {
            listitem.classList.add('is-selected');
        }
        Array.from(listitem.children)
            .filter(element => element.matches('a, span'))
            .forEach(text => text.classList.add('alc-nav__text'));
        Array.from(listitem.children)
            .filter(element => element.matches('[data-alc-panel]'))
            .forEach((subpanel) => this.initSubPanel(subpanel));
    }
    initSubPanel(subpanel) {
        if (subpanel.matches('.alc-nav__panel')) {
            return;
        }
        const listitem = subpanel.parentElement;
        listitem.id = listitem.id || getUniqueId();
        subpanel.id = subpanel.id || getUniqueId();
        listitem.dataset.alcChild = subpanel.id;
        subpanel.dataset.alcParent = listitem.id;
        subpanel.role = "dialog";
        subpanel.setAttribute('aria-labelledby', listitem.id);
        subpanel.classList.add('alc-nav__panel--subpanel');
        let button = Array.from(listitem.children).filter(child => child.matches('.alc-nav__button'))[0];
        if (!button) {
            button = document.createElement('a');
            button.classList.add('alc-nav__button', 'alc-nav__button--next');
            button.setAttribute('aria-expanded', 'false');
        }
        const icon = createIcon('chevron-right');
        icon.setAttribute('aria-hidden', 'true');
        icon.classList.add('alc-nav__icon--next');
        Array.from(listitem.children)
            .filter(child => child.matches('a, span'))
            .forEach(text => {
            if (text.matches('span')) {
                button.classList.add('alc-nav__text');
                button.innerHTML = text.innerHTML;
                listitem.insertBefore(button, text.nextElementSibling);
                text.remove();
            }
            else {
                listitem.insertBefore(button, text.nextElementSibling);
            }
        });
        button.href = `#${subpanel.id}`;
        button.append(icon);
        this.initPanel(subpanel);
    }
    initOpened() {
        const listitem = this.panels.querySelector('.alc-nav__listitem--selected');
        let panel = this.panels.querySelector('.alc-nav__panel');
        if (listitem) {
            this.setSelected(listitem);
            panel = listitem.closest('.alc-nav__panel');
        }
        // Verificar se há um item com o atributo data-alc-selected
        const selectedListItem = this.el.querySelector('.alc-nav__listitem[data-alc-selected]');
        if (selectedListItem) {
            this.setSelectedItem(selectedListItem);
        }
        this.openPanel(panel);
    }
    observeNavLinks() {
        // Seleciona os links que estão dentro de uma listview
        const links = Array.from(this.el.querySelectorAll('.alc-nav__listview a, .alc-nav__listview router-link'));
        links.forEach(link => {
            // Cria um observer para monitorar mudanças no atributo 'class'
            const observer = new MutationObserver(mutations => {
                mutations.forEach(mutation => {
                    if (mutation.attributeName === 'class') {
                        // Se a classe 'alc-nav__text' não estiver presente, adiciona novamente
                        if (!link.classList.contains('alc-nav__text')) {
                            link.classList.add('alc-nav__text');
                        }
                    }
                });
            });
            observer.observe(link, {
                attributes: true,
                attributeFilter: ['class'],
            });
        });
    }
    componentDidLoad() {
        // dispara uma vez no carregamento
        this.isMobile = window.innerWidth < 768;
        this.emitNavContent(this.isMobile);
    }
    componentDidRender() {
        this.initMenu();
        this.initPanels();
        this.initOpened();
        this.focusableItems = Array.from(this.el.querySelectorAll('.alc-nav__panel.is-open .alc-nav__listview a'));
        // Força a classe 'alc-nav__text' nos links mesmo após alterações
        this.observeNavLinks();
    }
    componentWillLoad() {
        this.header = this.el.querySelector("[slot='header']");
        this.footer = this.el.querySelector("[slot='footer']");
    }
    handleWindowResize() {
        const nowMobile = window.innerWidth < 768;
        if (nowMobile !== this.isMobile) {
            this.isMobile = nowMobile;
            this.emitNavContent(this.isMobile);
        }
    }
    emitNavContent(isMobile) {
        this.el.dispatchEvent(new CustomEvent('alc-nav-content', {
            detail: { navEl: this.el, isMobile },
            bubbles: true,
            composed: true
        }));
    }
    handleKeyDown(event) {
        const currentPanel = Array.from(this.panels.children).filter(panel => panel.matches('.is-open'))[0];
        const isSubPanel = currentPanel === null || currentPanel === void 0 ? void 0 : currentPanel.hasAttribute('data-alc-parent');
        if (event.key === 'Escape' && isSubPanel) {
            const backButton = currentPanel.querySelector('.alc-nav__button--prev');
            if (backButton) {
                backButton.click();
            }
            event.preventDefault();
        }
    }
    render() {
        return (h(Host, { key: '4869774167e9dd1f9b2b7e21a8c164c331086398', class: { 'alc-nav': true, 'alc-nav__wrapper': true } }, h("nav", { key: '66fdea76c8704b5630205260fdf370f3c3d47ad0', ref: el => this.menu = el, class: "alc-nav__menu" }, h("div", { key: 'ea80376803eb2b26bea0d0f827892146be384b4d', "data-alc-panel": true }, this.header ? (h("div", { class: "alc-nav__header" }, h("slot", { name: "header" }))) : null, h("div", { key: 'dced630d3b584b25efb5f69b78d60baad2ccc21c', class: "alc-nav__main", ref: el => this.main = el }, h("slot", { key: '1be8b67e85921d8315102090094416ab9d333ce8' })), this.footer ? (h("div", { class: "alc-nav__footer" }, h("slot", { name: "footer" }))) : null))));
    }
    static get is() { return "alc-nav"; }
    static get originalStyleUrls() {
        return {
            "$": ["alc-nav.css"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["alc-nav.css"]
        };
    }
    static get methods() {
        return {
            "togglePanel": {
                "complexType": {
                    "signature": "(panel: HTMLElement) => Promise<void>",
                    "parameters": [{
                            "name": "panel",
                            "type": "HTMLElement",
                            "docs": ""
                        }],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        },
                        "HTMLElement": {
                            "location": "global",
                            "id": "global::HTMLElement"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Abre ou fecha o painel especificado pelo par\u00E2metro.",
                    "tags": []
                }
            },
            "setSelectedItem": {
                "complexType": {
                    "signature": "(listItem?: HTMLElement) => Promise<void>",
                    "parameters": [{
                            "name": "listItem",
                            "type": "HTMLElement",
                            "docs": ""
                        }],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        },
                        "HTMLElement": {
                            "location": "global",
                            "id": "global::HTMLElement"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Seleciona o item passado pelo par\u00E2metro. Se nenhum valor for passado, apenas remove o item atualmente selecionado.",
                    "tags": []
                }
            }
        };
    }
    static get elementRef() { return "el"; }
    static get listeners() {
        return [{
                "name": "resize",
                "method": "handleWindowResize",
                "target": "window",
                "capture": false,
                "passive": true
            }, {
                "name": "keydown",
                "method": "handleKeyDown",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
}
//# sourceMappingURL=alc-nav.js.map
