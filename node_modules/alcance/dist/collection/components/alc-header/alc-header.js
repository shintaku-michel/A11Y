import { Host, h } from "@stencil/core";
import screens from "../../../tailwind-screens";
import logger from "../utils/logger";
import { getUniqueId } from "../utils/getUniqueId";
import { throttle } from "../utils/throttle";
// Pega o valor definido da configuração do tailwind e remove o 'px'
const MOBILE_BREAKPOINT = Number(screens.sm.split('px')[0]);
const TABLET_BREAKPOINT = Number(screens.md.split('px')[0]);
/**
 * @slot DEFAULT - Slot para skip-links, identificação do ambiente, etc.
 * @slot support - Slot para o conteúdo de apoio, como links de ajuda, contato etc.
 * @slot fixed - Slot para conteúdo fixo, como botões de ações rápidas.
 * @slot user - Slot para o menu de usuário.
 */
export class AlcHeader {
    constructor() {
        this.supportItems = [];
        this.availableWidth = 0;
        this.requiredWidth = 0;
        this.scrollTop = 0;
        this.scrollDirection = null;
        this.resizeThrottle = throttle(this.resize, 300);
        this.isDrawer = false;
        this.isSupportDropdown = false;
        this.needSeparator = false;
        this.isMenuCreated = false;
    }
    handleScroll() {
        if (window.innerWidth >= TABLET_BREAKPOINT)
            return;
        const currentScroll = window.pageYOffset || document.documentElement.scrollTop;
        let currentDirection = this.scrollDirection;
        if (currentScroll > this.scrollTop && currentDirection !== 'down' && currentScroll > this.el.clientHeight / 2) {
            // Scroll descendo, esconde
            this.wrapper.classList.add('alc-header--scroll-down');
            currentDirection = 'down';
        }
        if (currentScroll < this.scrollTop && currentDirection !== 'up') {
            // Scroll subindo, mostra
            currentDirection = 'up';
            this.wrapper.classList.remove('alc-header--scroll-down');
        }
        this.scrollTop = currentScroll <= 0 ? 0 : currentScroll;
        this.scrollDirection = currentDirection;
    }
    handleNavContent(event) {
        var _a, _b;
        const { navEl, isMobile } = event.detail;
        // pega o drawer se ainda não pegou
        const drawer = (_a = this.drawer) !== null && _a !== void 0 ? _a : this.el.querySelector('alc-drawer');
        // pega o nav-panel se ainda não pegou
        const navPanel = (_b = this.navPanel) !== null && _b !== void 0 ? _b : document.querySelector('alc-nav-panel');
        if (!drawer || !navPanel) {
            // ainda não inicializou completamente, sai sem fazer nada
            return;
        }
        // PROCURA O BODY DO DRAWER, OU USA O PRÓPRIO drawer COMO BACKUP
        const drawerBody = drawer.querySelector('.alc-drawer__header + div') || drawer;
        const panelContent = navPanel.querySelector('.alc-nav-panel__content');
        if (!drawerBody || !panelContent) {
            return;
        }
        if (isMobile) {
            // MODO MOBILE
            console.log("É Mobile!");
            if (panelContent.contains(navEl)) {
                panelContent.removeChild(navEl);
            }
            if (!drawerBody.contains(navEl)) {
                drawerBody.appendChild(navEl);
            }
            navPanel.classList.add('alc-nav-panel--hidden');
        }
        else {
            // MODO DESKTOP
            if (drawerBody.contains(navEl)) {
                drawerBody.removeChild(navEl);
            }
            if (!panelContent.contains(navEl)) {
                panelContent.appendChild(navEl);
            }
            navPanel.classList.remove('alc-nav-panel--hidden');
        }
    }
    handleResize() {
        this.resizeThrottle();
    }
    resize() {
        // Se o drawer estiver aberto e a tela for maior que o breakpoint, fecha o drawer.
        if (window.innerWidth >= TABLET_BREAKPOINT && this.drawer.isVisible) {
            this.drawer.hide();
        }
    }
    handleAlcHome(event) {
        event.stopPropagation();
        const homeEvent = this.alcHome.emit();
        if (homeEvent.defaultPrevented) {
            event.preventDefault();
        }
        ;
    }
    componentDidRender() {
        // Tabelas de conversão de variante
        const toMenuVariant = {
            link: 'menu-link',
            'menu-link': 'menu-link',
            button: 'menu-item',
            'menu-item': 'menu-item',
            null: 'menu-item',
        };
        const toInlineVariant = {
            link: 'link',
            'menu-link': 'link',
            button: 'button',
            'menu-item': 'button',
            null: 'button',
        };
        // Obtém os elementos do slot support
        if (!this.supportItems.length) {
            const assignedElementsSlotSupport = this.slotSupport.assignedElements();
            if (assignedElementsSlotSupport.length > 0) {
                Array.from(assignedElementsSlotSupport[0].children).forEach(item => {
                    this.supportItems.push(item);
                });
            }
        }
        if (!this.userMenu) {
            this.userMenu = this.slotUser.assignedElements()[0].firstElementChild;
        }
        if (!this.menuSupport) {
            this.menuSupport = document.createElement('div');
        }
        logger.debug('header componentDidRender', this.supportItems, this.slotSupport.assignedElements());
        // Remove filhos de menuSupport
        this.menuSupport.replaceChildren();
        /*
          Dois casos em que o menu de apoio estará "junto" ao menu de usuário:
          1. Quando não houver espaço para os itens de apoio lado a lado no header (isSupportDropdown)
          2. Quando a navegação estiver contida no drawer - padrão para as telas menores (isDrawer)
        */
        if (this.isSupportDropdown || this.isDrawer) {
            logger.debug('header createElement menu', this.supportItems);
            const menu = this.userMenu.querySelector('alc-menu');
            if (this.supportItems.length > 0) {
                // Cria um grupo e um separador dentro dele. O separador dá nome ao grupo.
                const supportGroup = document.createElement('div');
                supportGroup.role = "group";
                const separator = document.createElement('div');
                // @TODO: Estruturar isso depois dentro de alc-menu (ou componentes relacionados)
                separator.className = "alc-header__menu-separator";
                separator.role = "separator";
                separator.innerText = "Menu de apoio";
                separator.id = getUniqueId();
                supportGroup.appendChild(separator);
                supportGroup.setAttribute('aria-labelledby', separator.id);
                Array.from(this.supportItems).forEach(item => {
                    // @ts-ignore
                    item.variant = toMenuVariant[item.variant];
                    // @ts-ignore
                    supportGroup.appendChild(item);
                });
                logger.debug('header insertElement menu', this.supportItems, supportGroup);
                this.menuSupport.appendChild(supportGroup);
                menu.insertAdjacentElement('beforeend', this.menuSupport);
            }
            // @TODO: Encontrar solução mais robusta do que um timeout.
            setTimeout(() => {
                logger.debug('menu.refresh()');
                menu.refresh();
            }, 100);
        }
        else {
            Array.from(this.supportItems).forEach(item => {
                // @ts-ignore
                item.variant = toInlineVariant[item.variant];
                // @ts-ignore
                this.support.appendChild(item);
            });
        }
        if (this.isDrawer) {
            this.userMenu.variation = 'mobile';
            this.drawer.insertAdjacentElement('beforeend', this.userMenu);
            // @TODO: Aqui criou-se uma dependência da estrutura interna do dropdown
            // a necessidade especificar a classe alc-drawer__header.
            // Isso é um ponto de atenção e que merecer ser revisto para uma solução mais robusta.
            this.drawer.querySelector('.alc-drawer__header + div').insertAdjacentElement('afterbegin', this.userMenu);
        }
        else {
            this.userMenu.variation = 'desktop';
            this.slotUser.assignedElements()[0].insertAdjacentElement('beforeend', this.userMenu);
        }
        logger.debug(this.supportItems);
    }
    componentDidLoad() {
        // ref ao drawer já existente no template
        this.drawer = this.el.querySelector('alc-drawer');
        // nav-panel está em outro lugar do DOM
        this.navPanel = document.querySelector('alc-nav-panel');
        this.observer = new ResizeObserver(() => {
            this.checkLayout();
        });
        // @TODO: Encontrar solução mais robusta do que um timeout.
        setTimeout(() => {
            this.calcRequiredWidth();
            this.observer.observe(this.el);
        }, 100);
    }
    render() {
        var _a, _b;
        (_a = this.name) !== null && _a !== void 0 ? _a : logger.report('name', this.el.tagName.toLowerCase(), this.el);
        (_b = this.homeUrl) !== null && _b !== void 0 ? _b : logger.report('homeUrl', this.el.tagName.toLowerCase(), this.el);
        return (h(Host, { key: '50843cc351b03605b026104a99b765dbd2ec1af5' }, h("div", { key: 'acd386bda99c06051a3ecc8c39c7a311bba075aa', class: "alc-header", ref: (el) => this.wrapper = el }, h("header", { key: '8dc133f406d7e46b7ed5c6a43370c9e6195eb24b', class: "alc-header__header" }, h("slot", { key: '33803ee86ade7cd59fdf3522e6a52be4f143ecd3' }), h("slot", { key: 'a12d423b6d9a76409c8b6407be44c9e38b383823', name: "support", ref: (el) => this.slotSupport = el }), h("div", { key: '8f5a09861a39c6554cf9546d0ff148834802a222', class: "alc-header__container" }, h("div", { key: '8ab01c8f29de13803764c09f6acfcec29fb54a02', class: "alc-header__id" }, h("alc-header-id", { key: 'ae05e593ef6c66b4014b4a4de6472fa13807ed4d', name: this.name, description: this.description, homeUrl: this.homeUrl, "onAlc-home": this.handleAlcHome.bind(this) })), h("div", { key: '363e93508d9792a435031c168a1e6447977c1c66', class: "alc-header__panel" }, h("div", { key: 'ce81a3325dd43039f552b4a4a672046525bbc06e', class: "alc-header__support-wrapper", ref: el => this.supportWrapper = el }, h("div", { key: '06ac79d9b6afaf7019e1aec483b6c439cc7f00e7', class: "alc-header__support", ref: el => this.support = el })), h("div", { key: '97879eb8fa630920969b381d3d6c70603efe118e', class: "alc-header__fixed" }, h("slot", { key: '18e753581b7bc1550c147c86d82afc1ef62d52a7', name: "fixed", ref: (el) => this.slotFixed = el })), h("div", { key: 'bc5a9abe1c62324b5b31f7da8e6ef1f400232e6f', class: "alc-header__drawer-nav" }, h("button", { key: '45ccd23d19b2596a114d5a06e1542c4f2c894ab7', class: "alc-header-button", onClick: () => this.drawer.show(), "data-alc-header-drawer-button": true }, h("alc-icon", { key: '034076d0807c83526105def7a2a5c0cb65edd68e', icon: "list", label: "Abrir navega\u00E7\u00E3o", class: "alc-header-button__icon" })), h("alc-drawer", { key: '30239f69ac0224bea50bf15e9a867c8caaf70940', ref: (el) => this.drawer = el })), h("div", { key: '183ef67e4d5b88f4c9b0a627ea37d718e498e38a', class: {
                'alc-header__user': true,
                'alc-header__user--separator': this.needSeparator
            } }, h("slot", { key: 'e43720d6466616b229f77420745637b68a63c24d', name: "user", ref: (el) => this.slotUser = el }))))))));
    }
    calcRequiredWidth() {
        // Altera overflow-y para "hidden" para fazer a medição
        this.supportWrapper.style.overflowY = 'hidden';
        this.supportWrapper.style.overflowX = 'clip';
        this.requiredWidth = this.support.scrollWidth;
        this.supportWrapper.style.removeProperty('overflow-x');
        this.supportWrapper.style.removeProperty('overflow-y');
    }
    checkLayout() {
        // Altera overflow-y para "hidden" para fazer a medição
        this.supportWrapper.style.overflowY = 'hidden';
        this.supportWrapper.style.overflowX = 'clip';
        this.availableWidth = this.supportWrapper.offsetWidth;
        this.isSupportDropdown = (this.requiredWidth > this.availableWidth) || (window.innerWidth < MOBILE_BREAKPOINT);
        this.supportWrapper.style.removeProperty('overflow-x');
        this.supportWrapper.style.removeProperty('overflow-y');
        this.isDrawer = window.innerWidth < TABLET_BREAKPOINT;
        this.needSeparator = this.fixedElementsVisible() || (this.requiredWidth > 0 && !this.isSupportDropdown);
    }
    fixedElementsVisible() {
        const slotElement = this.slotFixed.assignedElements()[0];
        // O slot foi usado
        if (slotElement instanceof HTMLElement) {
            // True se está ocupando alguma largura (ou seja, se tem algo visível)
            return (slotElement.offsetWidth > 0);
        }
        return false;
    }
    static get is() { return "alc-header"; }
    static get originalStyleUrls() {
        return {
            "$": ["alc-header.css"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["alc-header.css"]
        };
    }
    static get properties() {
        return {
            "name": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": true,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "O nome do sistema."
                },
                "getter": false,
                "setter": false,
                "attribute": "name",
                "reflect": true
            },
            "description": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Descri\u00E7\u00E3o do sistema. Usualmente, o nome do sistema (se usada a sigla em \"name\"), descri\u00E7\u00E3o ou um complemento ao nome do sistema."
                },
                "getter": false,
                "setter": false,
                "attribute": "description",
                "reflect": true
            },
            "homeUrl": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": true,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "URL para a p\u00E1gina inicial do sistema."
                },
                "getter": false,
                "setter": false,
                "attribute": "home-url",
                "reflect": true
            }
        };
    }
    static get states() {
        return {
            "isDrawer": {},
            "isSupportDropdown": {},
            "needSeparator": {},
            "isMenuCreated": {}
        };
    }
    static get events() {
        return [{
                "method": "alcHome",
                "name": "alc-home",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Evento disparado quando o usu\u00E1rio aciona o link para a p\u00E1gina inicial.\nExecutar `preventDefault()` evita que a navega\u00E7\u00E3o para a p\u00E1gina inicial aconte\u00E7a."
                },
                "complexType": {
                    "original": "null",
                    "resolved": "null",
                    "references": {}
                }
            }];
    }
    static get elementRef() { return "el"; }
    static get listeners() {
        return [{
                "name": "scroll",
                "method": "handleScroll",
                "target": "window",
                "capture": false,
                "passive": true
            }, {
                "name": "alc-nav-content",
                "method": "handleNavContent",
                "target": "window",
                "capture": false,
                "passive": false
            }, {
                "name": "resize",
                "method": "handleResize",
                "target": "window",
                "capture": false,
                "passive": true
            }];
    }
}
//# sourceMappingURL=alc-header.js.map
