import { Host, h } from "@stencil/core";
import { getUniqueId } from "../utils/getUniqueId";
import { getFocusableElements, focusFirstElement, handleKeyDown } from "../utils/keydown";
import test from "../utils/testAttributes";
import { lockBodyScroll, unlockBodyScroll } from "../utils/scrollLockManager";
/**
 * @slot - O conteúdo da modal.
 * @slot header - O conteúdo do cabeçalho da modal.
 * @slot footer - O conteúdo do rodapé da modal.
 */
export class AlcModal {
    constructor() {
        this.idModalTitle = null;
        this.triggerElement = null;
        /**
         * Define se a modal está aberta ou fechada.
         */
        this.open = false;
        /**
         * Título da modal
         */
        this.headerText = '';
        /**
         * Tamanho da modal
         */
        this.size = 'md';
        /**
         * Previne a modal de fechar ao clicar no overlay.
         */
        this.preventOverlayClose = false;
        this.getModalRef = element => (this.modalRef = element);
        this.handleFocusWhenCloseModal = () => {
            const defaultFocus = ['BODY', 'DOCUMENT'];
            const hasTriggerElement = !!this.triggerElement && document.body.contains(this.triggerElement);
            if (hasTriggerElement && !defaultFocus.includes(this.triggerElement.tagName)) {
                this.triggerElement.focus();
            }
        };
    }
    watchOpen(open) {
        if (open) {
            // Show
            this.alcAfterShow.emit();
            this.triggerElement = document.activeElement;
            lockBodyScroll();
        }
        else {
            // Hide
            this.alcAfterHide.emit();
            const { defaultPrevented: defaultPreventedFocus } = this.alcFocusAfterHide.emit();
            if (!defaultPreventedFocus) {
                this.handleFocusWhenCloseModal();
                unlockBodyScroll();
            }
        }
    }
    /**
     * Método para abrir modal.
     * @returns O valor retornado é `true` se a modal foi realmente exibida com essa chamada ao método.
     */
    async show() {
        if (this.open) {
            return false;
        }
        this.open = true;
        return true;
    }
    /**
     * Método para fechar modal.
     * @returns O valor retornado é `true` se a modal foi realmente oculta com essa chamada ao método.
     */
    async hide() {
        if (!this.open) {
            return false;
        }
        this.open = false;
        return true;
    }
    /**
     * Foco fica dentro da modal quando aberta.
     */
    handleKeyDown(event) {
        if (!this.open) {
            return;
        }
        if (event.defaultPrevented) {
            return;
        }
        if (event.key === 'Escape') {
            event.preventDefault();
            this.handleHideByUser('keyboard');
            return;
        }
        if (event.key !== 'Tab')
            return;
        const focusableElements = getFocusableElements(this.modalRef);
        handleKeyDown(event, focusableElements);
    }
    componentWillLoad() {
        // Antes do componente carregar, cria um id para o titulo da modal (Acessibilidade).
        this.idModalTitle = getUniqueId();
    }
    componentDidRender() {
        // Pega os elementos focáveis a cada renderização (Pode haver mudanças na modal).
        const focusableElements = getFocusableElements(this.modalRef);
        // Após o componente renderizar e estiver aberto, então ja coloca foco dentro da modal.
        if (this.open) {
            focusFirstElement(focusableElements);
        }
    }
    connectedCallback() {
        if (this.open) {
            lockBodyScroll();
        }
    }
    disconnectedCallback() {
        if (this.open) {
            unlockBodyScroll();
        }
    }
    handleOutsideClick(event) {
        const isClickedOutside = event.target === this.overlayRef;
        if (isClickedOutside) {
            this.handleHideByUser('overlay');
        }
    }
    handleHideByUser(hideFrom) {
        // Se o usuário clicar no overlay e estiver impedido de fechar, não faz nada.
        if (hideFrom === 'overlay' && this.preventOverlayClose)
            return;
        const { defaultPrevented } = this.alcHide.emit({ from: hideFrom });
        if (!defaultPrevented) {
            this.open = false;
        }
    }
    render() {
        return (h(Host, { key: '8df9b10e800caa99c53028e32433128b72da1497', style: { display: this.open ? 'block' : 'none' } }, h("div", { key: '9f19c7aa8381b24d765bee25ef7451140fe4fe66', class: "alc-modal__base" }, h("div", Object.assign({ key: '639800fce03bf27e4648c4ca8d8bf7ebcb8db5e2', class: "alc-modal__overlay", onClick: (e) => this.handleOutsideClick(e) }, test('data-test-overlay'), { ref: el => this.overlayRef = el })), h("div", { key: 'de7683718c16ad92d2e2a203c4de14306cfd35ef', class: {
                'alc-modal__card': true,
                'alc-modal__card--sm': this.size === "sm",
                'alc-modal__card--md': this.size === "md",
                'alc-modal__card--lg': this.size === "lg",
                'alc-modal__card--xl': this.size === "xl",
            }, role: "dialog", "aria-modal": "true", "aria-labelledby": this.idModalTitle, ref: this.getModalRef }, h("div", { key: 'b8f6dd643bb6ddb909cd5c101ca25d53b0e253dd', class: "alc-modal__header" }, this.headerText ? (h("h2", { id: this.idModalTitle, class: "alc-modal__title" }, this.headerText)) : (h("slot", { name: "header" })), h("button", Object.assign({ key: '9bb4fe3fecc1ae3be0efd1bbd862696cbe55a1e7', type: "button", class: "alc-button alc-button-rounded", onClick: () => this.handleHideByUser('header-button') }, test('data-test-close-button')), h("alc-icon", Object.assign({ key: '43e419c1b7badb46c95a5e2ae5789edbd7c782b2', name: "x-lg", label: "Fechar Modal" }, test('data-test-close-icon'))))), h("div", { key: '3ae84356e5d7842d24d6a4d166dae9b99ccc756b', class: "alc-modal__content" }, h("slot", { key: '91e0a806036b3b5f0f7179d227912d96c707cf0b' })), h("div", { key: '3b567a11e954c34183af1628b71d16322b0c7210', class: "alc-modal__footer" }, h("slot", { key: '5e3678855e574f4885aea217b4ab0519d6d14a4a', name: "footer" }, h("button", Object.assign({ key: '68a0b787119f1662e9f03a02c536850ce8244d5e', type: "button", class: "alc-button alc-button-primary", onClick: () => this.handleHideByUser('footer-button') }, test('data-test-footer-close-button')), "Fechar")))))));
    }
    static get is() { return "alc-modal"; }
    static get originalStyleUrls() {
        return {
            "base": ["alc-modal-base.css"],
            "theme": ["alc-modal.css"]
        };
    }
    static get styleUrls() {
        return {
            "base": ["alc-modal-base.css"],
            "theme": ["alc-modal.css"]
        };
    }
    static get properties() {
        return {
            "open": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Define se a modal est\u00E1 aberta ou fechada."
                },
                "getter": false,
                "setter": false,
                "attribute": "open",
                "reflect": false,
                "defaultValue": "false"
            },
            "headerText": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "T\u00EDtulo da modal"
                },
                "getter": false,
                "setter": false,
                "attribute": "header-text",
                "reflect": true,
                "defaultValue": "''"
            },
            "size": {
                "type": "string",
                "mutable": true,
                "complexType": {
                    "original": "'sm' | 'md' | 'lg' | 'xl'",
                    "resolved": "\"lg\" | \"md\" | \"sm\" | \"xl\"",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Tamanho da modal"
                },
                "getter": false,
                "setter": false,
                "attribute": "size",
                "reflect": true,
                "defaultValue": "'md'"
            },
            "preventOverlayClose": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Previne a modal de fechar ao clicar no overlay."
                },
                "getter": false,
                "setter": false,
                "attribute": "prevent-overlay-close",
                "reflect": true,
                "defaultValue": "false"
            }
        };
    }
    static get events() {
        return [{
                "method": "alcAfterShow",
                "name": "alc-after-show",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Evento disparado quando a modal abriu"
                },
                "complexType": {
                    "original": "null",
                    "resolved": "null",
                    "references": {}
                }
            }, {
                "method": "alcHide",
                "name": "alc-hide",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Evento disparado quando a modal vai fechar"
                },
                "complexType": {
                    "original": "{\n    from: 'header-button' | 'footer-button' | 'keyboard' | 'overlay';\n  }",
                    "resolved": "{ from: \"header-button\" | \"footer-button\" | \"keyboard\" | \"overlay\"; }",
                    "references": {}
                }
            }, {
                "method": "alcAfterHide",
                "name": "alc-after-hide",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Evento disparado quando a modal fechou"
                },
                "complexType": {
                    "original": "null",
                    "resolved": "null",
                    "references": {}
                }
            }, {
                "method": "alcFocusAfterHide",
                "name": "alc-focus-after-hide",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Evento disparado quando a modal fechou e esta pronto para lidar com foco."
                },
                "complexType": {
                    "original": "null",
                    "resolved": "null",
                    "references": {}
                }
            }];
    }
    static get methods() {
        return {
            "show": {
                "complexType": {
                    "signature": "() => Promise<boolean>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<boolean>"
                },
                "docs": {
                    "text": "M\u00E9todo para abrir modal.",
                    "tags": [{
                            "name": "returns",
                            "text": "O valor retornado \u00E9 `true` se a modal foi realmente exibida com essa chamada ao m\u00E9todo."
                        }]
                }
            },
            "hide": {
                "complexType": {
                    "signature": "() => Promise<boolean>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<boolean>"
                },
                "docs": {
                    "text": "M\u00E9todo para fechar modal.",
                    "tags": [{
                            "name": "returns",
                            "text": "O valor retornado \u00E9 `true` se a modal foi realmente oculta com essa chamada ao m\u00E9todo."
                        }]
                }
            }
        };
    }
    static get watchers() {
        return [{
                "propName": "open",
                "methodName": "watchOpen"
            }];
    }
    static get listeners() {
        return [{
                "name": "keydown",
                "method": "handleKeyDown",
                "target": "document",
                "capture": false,
                "passive": false
            }];
    }
}
//# sourceMappingURL=alc-modal.js.map
