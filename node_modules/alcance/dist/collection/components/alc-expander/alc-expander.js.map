{"version":3,"file":"alc-expander.js","sourceRoot":"","sources":["../../../../src/components/alc-expander/alc-expander.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  Element,\n  Host,\n  h,\n  Prop,\n  Event,\n  EventEmitter,\n  Method,\n  Watch,\n  State,\n} from '@stencil/core';\nimport { getUniqueId } from '../utils/getUniqueId';\nimport logger from '../utils/logger';\n\n/**\n * @slot label - Slot para rótulo do controle. Há opção de adicionar apenas texto por meio da propriedade `label`.\n * Use esse recurso caso seja necessário alguma personalização no HTML referente ao rótulo.\n * Não inclua headings (`h1`, `h2` etc.) nem elementos interativos (`a`, `button`, `input` etc.) nesse slot.\n * @slot DEFAULT  - Slot para o conteúdo do expander.\n*/\n\n@Component({\n  tag: 'alc-expander',\n  styleUrl: 'alc-expander.css',\n  shadow: false,\n})\nexport class AlcExpander {\n  @Element() element!: HTMLElement;\n  private expanderId: string = getUniqueId();\n\n  /**\n   * Rótulo do elemento que controla a abertura e o fechamento do expander.\n   */\n  @Prop({ reflect: true }) label!: string;\n\n  /**\n   * Define se o expander está aberto ou fechado.\n   */\n  @Prop({ reflect: true, mutable: true }) open: boolean = false;\n\n  /**\n   * Oculta o rótulo do controle, mantendo-o acessível para leitores de tela.\n   */\n  @Prop({ reflect: true }) hideLabel: boolean = false;\n\n  @State() isOpen: boolean = this.open;\n\n  /**\n   * Evento disparado antes de abrir. Cancelável.\n   */\n  @Event({ eventName: 'alc-show', cancelable: true, bubbles: true })\n  alcShow: EventEmitter<void>;\n\n  /**\n   * Evento disparado após abrir.\n   */\n  @Event({ eventName: 'alc-after-show', bubbles: true })\n  alcAfterShow: EventEmitter<void>;\n\n  /**\n   * Evento disparado antes de fechar. Cancelável.\n   */\n  @Event({ eventName: 'alc-hide', cancelable: true, bubbles: true })\n  alcHide: EventEmitter<void>;\n\n  /**\n   * Evento disparado após fechar.\n   */\n  @Event({ eventName: 'alc-after-hide', bubbles: true })\n  alcAfterHide: EventEmitter<void>;\n\n  @Watch('open')\n  syncOpen(newValue: boolean) {\n    this.isOpen = newValue;\n  }\n\n  componentWillLoad() {\n    this.isOpen = this.open;\n  }\n\n  private toggleExpander = async (event: Event) => {\n    event.preventDefault(); // previne comportamento nativo de abrir imediatamente\n\n    if (!this.isOpen) {\n      await this.show();\n    } else {\n      await this.hide();\n    }\n  };\n\n  /**\n   * Abre o expander programaticamente.\n   */\n  @Method()\n  async show(): Promise<void> {\n    if (!this.isOpen) {\n      const showEvent = this.alcShow.emit();\n      if (showEvent.defaultPrevented) return;\n      this.isOpen = true;\n      this.open = true;\n      this.alcAfterShow.emit();\n    }\n  }\n\n  /**\n   * Fecha o expander programaticamente.\n   */\n  @Method()\n  async hide(): Promise<void> {\n    if (this.isOpen) {\n      const hideEvent = this.alcHide.emit();\n      if (hideEvent.defaultPrevented) return;\n      this.isOpen = false;\n      this.open = false;\n      this.alcAfterHide.emit();\n    }\n  }\n\n  private renderChevron() {\n    const iconName = this.isOpen ? 'chevron-up' : 'chevron-down';\n    return (\n      <alc-icon\n        name={iconName}\n        label=\"\"\n        class=\"alc-expander__chevron\"\n      ></alc-icon>\n    );\n  }\n\n  render() {\n    this.label ?? logger.report('label', this.element.tagName.toLowerCase(), this.element);\n    \n    const labelContent = (\n      <div\n        class={{\n          'alc-expander__label-container': true,\n          'sr-only': this.hideLabel,\n        }}\n      >\n        <slot name=\"label\">{this.label}</slot>\n      </div>\n    );\n\n    const summaryClasses = {\n      'alc-expander__summary': true,\n      'alc-expander__summary--center': this.hideLabel,\n    };\n\n    return (\n      <Host>\n        <details\n          id={this.expanderId}\n          class={{\n            'alc-expander': true,\n            'is-open': this.isOpen,\n          }}\n          open={this.isOpen}\n        >\n          <summary\n            class={summaryClasses}\n            onClick={this.toggleExpander}\n          >\n            {labelContent}\n            {this.renderChevron()}\n          </summary>\n          <div class=\"alc-expander__content\">\n            <slot></slot>\n          </div>\n        </details>\n      </Host>\n    );\n  }\n}"]}