import { Host, h, } from "@stencil/core";
import { getUniqueId } from "../utils/getUniqueId";
import logger from "../utils/logger";
/**
 * @slot label - Slot para rótulo do controle. Há opção de adicionar apenas texto por meio da propriedade `label`.
 * Use esse recurso caso seja necessário alguma personalização no HTML referente ao rótulo.
 * Não inclua headings (`h1`, `h2` etc.) nem elementos interativos (`a`, `button`, `input` etc.) nesse slot.
 * @slot DEFAULT  - Slot para o conteúdo do expander.
*/
export class AlcExpander {
    constructor() {
        this.expanderId = getUniqueId();
        /**
         * Define se o expander está aberto ou fechado.
         */
        this.open = false;
        /**
         * Oculta o rótulo do controle, mantendo-o acessível para leitores de tela.
         */
        this.hideLabel = false;
        this.isOpen = this.open;
        this.toggleExpander = async (event) => {
            event.preventDefault(); // previne comportamento nativo de abrir imediatamente
            if (!this.isOpen) {
                await this.show();
            }
            else {
                await this.hide();
            }
        };
    }
    syncOpen(newValue) {
        this.isOpen = newValue;
    }
    componentWillLoad() {
        this.isOpen = this.open;
    }
    /**
     * Abre o expander programaticamente.
     */
    async show() {
        if (!this.isOpen) {
            const showEvent = this.alcShow.emit();
            if (showEvent.defaultPrevented)
                return;
            this.isOpen = true;
            this.open = true;
            this.alcAfterShow.emit();
        }
    }
    /**
     * Fecha o expander programaticamente.
     */
    async hide() {
        if (this.isOpen) {
            const hideEvent = this.alcHide.emit();
            if (hideEvent.defaultPrevented)
                return;
            this.isOpen = false;
            this.open = false;
            this.alcAfterHide.emit();
        }
    }
    renderChevron() {
        const iconName = this.isOpen ? 'chevron-up' : 'chevron-down';
        return (h("alc-icon", { name: iconName, label: "", class: "alc-expander__chevron" }));
    }
    render() {
        var _a;
        (_a = this.label) !== null && _a !== void 0 ? _a : logger.report('label', this.element.tagName.toLowerCase(), this.element);
        const labelContent = (h("div", { key: 'f9f7843360293de8ea12c3115ee58c7a11f4ba80', class: {
                'alc-expander__label-container': true,
                'sr-only': this.hideLabel,
            } }, h("slot", { key: 'a74be46734382e662851548b60d8fff2e094d9a7', name: "label" }, this.label)));
        const summaryClasses = {
            'alc-expander__summary': true,
            'alc-expander__summary--center': this.hideLabel,
        };
        return (h(Host, { key: 'd24d4d2eb204875d5b8d83c9bb08ea98da175ee5' }, h("details", { key: 'f8058daa11fd2bb53b025075a9cf53844bd829cf', id: this.expanderId, class: {
                'alc-expander': true,
                'is-open': this.isOpen,
            }, open: this.isOpen }, h("summary", { key: '6555336775d80fffb826d5a77e63998d926188ea', class: summaryClasses, onClick: this.toggleExpander }, labelContent, this.renderChevron()), h("div", { key: '5762d27fb7c7c3983c577543dc291546d27bdc45', class: "alc-expander__content" }, h("slot", { key: '5e8ee74e265c53e67f15f42ef4166f2797726035' })))));
    }
    static get is() { return "alc-expander"; }
    static get originalStyleUrls() {
        return {
            "$": ["alc-expander.css"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["alc-expander.css"]
        };
    }
    static get properties() {
        return {
            "label": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": true,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "R\u00F3tulo do elemento que controla a abertura e o fechamento do expander."
                },
                "getter": false,
                "setter": false,
                "attribute": "label",
                "reflect": true
            },
            "open": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Define se o expander est\u00E1 aberto ou fechado."
                },
                "getter": false,
                "setter": false,
                "attribute": "open",
                "reflect": true,
                "defaultValue": "false"
            },
            "hideLabel": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Oculta o r\u00F3tulo do controle, mantendo-o acess\u00EDvel para leitores de tela."
                },
                "getter": false,
                "setter": false,
                "attribute": "hide-label",
                "reflect": true,
                "defaultValue": "false"
            }
        };
    }
    static get states() {
        return {
            "isOpen": {}
        };
    }
    static get events() {
        return [{
                "method": "alcShow",
                "name": "alc-show",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Evento disparado antes de abrir. Cancel\u00E1vel."
                },
                "complexType": {
                    "original": "void",
                    "resolved": "void",
                    "references": {}
                }
            }, {
                "method": "alcAfterShow",
                "name": "alc-after-show",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Evento disparado ap\u00F3s abrir."
                },
                "complexType": {
                    "original": "void",
                    "resolved": "void",
                    "references": {}
                }
            }, {
                "method": "alcHide",
                "name": "alc-hide",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Evento disparado antes de fechar. Cancel\u00E1vel."
                },
                "complexType": {
                    "original": "void",
                    "resolved": "void",
                    "references": {}
                }
            }, {
                "method": "alcAfterHide",
                "name": "alc-after-hide",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Evento disparado ap\u00F3s fechar."
                },
                "complexType": {
                    "original": "void",
                    "resolved": "void",
                    "references": {}
                }
            }];
    }
    static get methods() {
        return {
            "show": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Abre o expander programaticamente.",
                    "tags": []
                }
            },
            "hide": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Fecha o expander programaticamente.",
                    "tags": []
                }
            }
        };
    }
    static get elementRef() { return "element"; }
    static get watchers() {
        return [{
                "propName": "open",
                "methodName": "syncOpen"
            }];
    }
}
//# sourceMappingURL=alc-expander.js.map
