{"version":3,"file":"alc-nav-panel.js","sourceRoot":"","sources":["../../../../src/components/alc-nav-panel/alc-nav-panel.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Host, Prop, h, Method, Event, EventEmitter, Element, State, Listen, Watch } from '@stencil/core';\nimport { getFocusableElements, handleKeyDown } from '../utils/keydown';\nimport screens from '../../../tailwind-screens';\n\nexport interface AlcStateEventTypes {\n  state: {\n    open: boolean;\n  }\n}\n\nconst DEFAULT_STATE = {\n  open: true\n};\n\n// Pega o valor definido da configuração do tailwind e remove o 'px'\nconst TABLET_BREAKPOINT = Number(screens.md.split('px')[0]);\nconst DESKTOP_BREAKPOINT = Number(screens.lg.split('px')[0]);\n\n/**\n * @slot DEFAULT - Slot para o conteúdo do nav-panel.\n */\n\n@Component({\n  tag: 'alc-nav-panel',\n  styleUrl: 'alc-nav-panel.css',\n  shadow: false\n})\nexport class AlcNavPanel {\n  @Element() el: HTMLAlcNavPanelElement;\n\n  private content: HTMLDivElement;\n  private button: HTMLButtonElement;\n  private state: {\n    open: boolean,\n  } = DEFAULT_STATE;\n  private display: 'mobile' | 'tablet' | 'desktop' = this.getDisplay();\n  private observer: MutationObserver;\n  private offsetTop: number = 0;\n\n  /**\n   * Indica se o nav-panel está visível. O valor inicial desse atributo será definido dinamicamente pelo próprio nav-panel.\n   */\n  @Prop({\n    reflect: true,\n    mutable: true\n  })\n  open: boolean;\n\n  /**\n   * Evento disparado quando o estado do nav-panel é alterado.\n   */\n  @Event({\n    eventName: 'alc-state-change',\n    cancelable: false,\n    bubbles: true\n  }) alcStateChange: EventEmitter<AlcStateEventTypes>;\n\n  /**\n   * Evento disparado quando o nav-panel precisa recuperar o estado.\n   */\n  @Event({\n    eventName: 'alc-state-request',\n    cancelable: false,\n    bubbles: true\n  }) alcStateRequest: EventEmitter<AlcStateEventTypes>;\n\n  /**\n   * Abre o nav-panel.\n   * @returns O valor retornado é `true` se o nav-panel foi exibido com a chamada do método.\n   */\n  @Method()\n  async show(): Promise<boolean> {\n    this.updateState(true);\n    return true;\n  }\n\n  /**\n   * Fecha o nav-panel.\n   * @returns O valor retornado é `true` se o nav-panel foi fechado com a chamada do método.\n   */\n  @Method()\n  async hide(): Promise<boolean> {\n    this.updateState(false);\n    return true;\n  }\n\n  @Listen('resize', { target: 'window' })\n  handleResize() {\n    // Atualiza o display se teve mudanças\n    const newDisplay = this.getDisplay();\n    if (newDisplay !== this.display) {\n      this.display = newDisplay;\n    }\n\n    // Essa classe é utilizada para aplicar padding e margins nas classes de container\n    // ATENÇÃO: Caso ocorra alteração no tamanho do botão ou da margin lateral, deve atualizar o tamanho dos paddings e margins\n    // na classe localizada em \"global/styles/c-layout.scss\"\n    const htmlElementClassList = document.querySelector('html').classList;\n\n    // Controle de CSS da tag html\n    if (newDisplay === 'mobile') {\n      // Se estiver no modo mobile e ter a classe alc-navpanel, remove a classe\n      htmlElementClassList.contains('alc-navpanel') ? htmlElementClassList.remove('alc-navpanel') : null;\n    } else {\n      // Se estiver no modo tablet ou desktop e NÃO ter a classe alc-navpanel, adiciona a classe\n      htmlElementClassList.contains('alc-navpanel') ? null: htmlElementClassList.add('alc-navpanel');\n    }\n\n    // Controle de exibição (open)\n    // Se estiver indo para desktop, o estado salvo define o valor de open\n    if (newDisplay === 'desktop') {\n      this.open = this.state.open;\n    }\n    // Senão, sempre estará oculto.\n    else {\n      this.open = false;\n    }\n\n    // Verifica se teve mudanças nos valores de offsetTop\n    // e atualiza as variáveis CSS\n    if (this.el.offsetTop !== this.offsetTop) {\n      this.setOffset(this.el.offsetTop);\n    }\n\n  }\n\n  @Listen('click', { target: 'body' })\n  handleClick(event: MouseEvent) {\n    // Se estiver fechado, não faz nada\n    if (!this.open) return;\n\n    // Se o elemento clicado é dentro do nav-panel ou um de seus filhos, não faz nada\n    const targetElement = event.target as HTMLElement;\n    if (this.el.contains(targetElement)) return;\n\n    // Se o breakpoint for desktop, não faz nada\n    if (this.display === 'desktop') return;\n\n    // Se o breakpoint for tamanho tablet ou menor, fecha o nav-panel ao clicar fora\n    this.hide();\n  }\n\n  @Listen('keydown')\n  handleKeyDown(event: KeyboardEvent) {\n    // Se estiver fechado, não faz nada\n    if (!this.open || event.defaultPrevented) return;\n\n    switch (event.key) {\n      // Se apertar \"Escape\", fecha o nav-panel\n      case 'Escape':\n        event.preventDefault();\n        this.hide();\n        this.button.focus();\n        break;\n      // Se o breakpoint for tamanho tablet ou menor, controla o foco dentro do nav-panel\n      case 'Tab':\n        if (this.display !== 'desktop') {\n          handleKeyDown(event, getFocusableElements(this.el));\n        }\n        break;\n    }\n  }\n\n  @Watch('open')\n  handleOpen() {\n    if (this.open && this.content) {\n      // Remove o atributo \"hidden\" quando o nav-panel é aberto\n      this.content.hidden = false;\n    }\n  }\n\n  componentWillLoad() {\n    // Monta objeto para o evento - Nesse momento, com o valor padrão.\n    const detail = {\n      state: DEFAULT_STATE\n    };\n    // Requisita o estado gravado\n    this.alcStateRequest.emit(detail); // Emite o evento para solicitar o estado\n    // Garante que o objeto this.state tenha as chaves esperadas, independente do valor de detail.state\n    // Grava o estado em memória\n    // O estado é sempre salvo, independentemente do valor de `display`, porque `display` pode\n    // mudar dinamicamente, e o estado pode passar a ser necessário.\n    this.state = { ...DEFAULT_STATE, ...detail.state };\n\n    if (this.display === 'desktop') {\n      // \"open\" para desktop será inicialmente o estado salvo\n      this.open = this.state.open;\n    }\n    else {\n      // \"open\" para outros cenários (não desktop) inicialmente será false.\n      this.open = false;\n    }\n  }\n\n  componentDidLoad() {\n    this.setOffset(this.el.offsetTop);\n\n    // Esconde o conteúdo quando o nav-panel é fechado após a transição\n    // A animação não funciona quando adiciona hidden no CSS\n    this.content.addEventListener(\"transitionend\", this.handleTransitionEnd.bind(this));\n\n    if (this.getDisplay() !== 'mobile') {\n      // Essa classe é utilizada para aplicar padding e margins nas classes de container\n      document.querySelector('html').classList.add('alc-navpanel');\n    }\n\n    this.observer = new MutationObserver(() => {\n      const newOffsetTop = this.el.offsetTop;\n      if (newOffsetTop !== this.offsetTop) {\n        console.log(`offsetTop mudou de ${this.offsetTop} para ${newOffsetTop}`);\n        this.setOffset(newOffsetTop);\n      }\n    });\n\n    // Observa mudanças no body inteiro, pois mudanças acima no DOM podem afetar o offsetTop\n    this.observer.observe(document.body, {\n      attributes: true,\n      childList: true,\n      subtree: true\n    });\n\n\n  }\n\n  disconnectedCallback() {\n    this.content.removeEventListener(\"transitionend\", this.handleTransitionEnd.bind(this));\n\n    if (this.observer) {\n      this.observer.disconnect();\n    }\n  }\n\n  private handleTransitionEnd() {\n    if (!this.open) {\n      this.content.hidden = true;\n    }\n  }\n\n  private getDisplay(): 'mobile' | 'tablet' | 'desktop' {\n    const width = window.innerWidth;\n\n    if (width >= DESKTOP_BREAKPOINT) return 'desktop';\n    if (width >= TABLET_BREAKPOINT) return 'tablet';\n    return 'mobile';\n  }\n\n  private updateState(open: boolean) {\n    this.open = open;\n\n    if (this.getDisplay() === 'desktop') {\n      this.state.open = open;\n      this.alcStateChange.emit({ state: this.state });\n    }\n  }\n\n  private setOffset(offsetTop?: number) {\n    this.offsetTop = offsetTop;\n    // Altura esta o elemento em relação ao topo da tela)\n    this.el.style.setProperty('--offset-top', this.el.offsetTop.toString());\n  }\n  // Utilizando \"svg\" diretamente em vez de uma tag <img> para permitir a personalização da cor do SVG no modo dark\n  private renderButtonSVG() {\n    return (\n      <svg width=\"24\" height=\"62\" viewBox=\"0 0 24 62\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" >\n        <path d=\"M7 7C1.4 7 0 2.33333 0 0C0 20.6667 6.69364e-06 41.3333 0 62C0 59.6667 1.4 55 7 55H20C22.2091 55 24 53.2091 24 51V11C24 8.79086 22.2091 7 20 7H7Z\" fill=\"#e0f7f6\" class=\"alc-nav-panel__button-svg\" />\n      </svg>\n    )\n  }\n\n  render() {\n\n    return (\n      <Host\n        class={{\n          'alc-nav-panel': true,\n          'alc-nav-panel--opened': this.open\n        }}\n      >\n        <div class=\"alc-nav-panel__container\">\n          <div class=\"alc-nav-panel__button-container\">\n            <button\n              class=\"alc-nav-panel__button\"\n              onClick={() => this.open ? this.hide() : this.show()}\n              aria-pressed={this.open ? 'true' : 'false'}\n              aria-label=\"Exibir navegação\"\n              ref={el => this.button = el}\n              data-alc-navpanel-button\n            >\n              {this.renderButtonSVG()}\n              <alc-icon\n                class=\"alc-nav-panel__button-icon\"\n                name={this.open ? 'x-lg' : 'list'}\n                label=\"\"\n              ></alc-icon>\n            </button>\n          </div>\n          <div\n            class={{\n              'alc-nav-panel__content': true,\n              'alc-nav-panel__content--opened': this.open\n            }}\n            ref={el => this.content = el}\n          >\n            <slot></slot>\n          </div>\n        </div>\n      </Host>\n    );\n  }\n}\n"]}