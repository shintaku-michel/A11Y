import { Host, h } from "@stencil/core";
import { getFocusableElements, handleKeyDown } from "../utils/keydown";
import screens from "../../../tailwind-screens";
const DEFAULT_STATE = {
    open: true
};
// Pega o valor definido da configuração do tailwind e remove o 'px'
const TABLET_BREAKPOINT = Number(screens.md.split('px')[0]);
const DESKTOP_BREAKPOINT = Number(screens.lg.split('px')[0]);
/**
 * @slot DEFAULT - Slot para o conteúdo do nav-panel.
 */
export class AlcNavPanel {
    constructor() {
        this.state = DEFAULT_STATE;
        this.display = this.getDisplay();
        this.offsetTop = 0;
    }
    /**
     * Abre o nav-panel.
     * @returns O valor retornado é `true` se o nav-panel foi exibido com a chamada do método.
     */
    async show() {
        this.updateState(true);
        return true;
    }
    /**
     * Fecha o nav-panel.
     * @returns O valor retornado é `true` se o nav-panel foi fechado com a chamada do método.
     */
    async hide() {
        this.updateState(false);
        return true;
    }
    handleResize() {
        // Atualiza o display se teve mudanças
        const newDisplay = this.getDisplay();
        if (newDisplay !== this.display) {
            this.display = newDisplay;
        }
        // Essa classe é utilizada para aplicar padding e margins nas classes de container
        // ATENÇÃO: Caso ocorra alteração no tamanho do botão ou da margin lateral, deve atualizar o tamanho dos paddings e margins
        // na classe localizada em "global/styles/c-layout.scss"
        const htmlElementClassList = document.querySelector('html').classList;
        // Controle de CSS da tag html
        if (newDisplay === 'mobile') {
            // Se estiver no modo mobile e ter a classe alc-navpanel, remove a classe
            htmlElementClassList.contains('alc-navpanel') ? htmlElementClassList.remove('alc-navpanel') : null;
        }
        else {
            // Se estiver no modo tablet ou desktop e NÃO ter a classe alc-navpanel, adiciona a classe
            htmlElementClassList.contains('alc-navpanel') ? null : htmlElementClassList.add('alc-navpanel');
        }
        // Controle de exibição (open)
        // Se estiver indo para desktop, o estado salvo define o valor de open
        if (newDisplay === 'desktop') {
            this.open = this.state.open;
        }
        // Senão, sempre estará oculto.
        else {
            this.open = false;
        }
        // Verifica se teve mudanças nos valores de offsetTop
        // e atualiza as variáveis CSS
        if (this.el.offsetTop !== this.offsetTop) {
            this.setOffset(this.el.offsetTop);
        }
    }
    handleClick(event) {
        // Se estiver fechado, não faz nada
        if (!this.open)
            return;
        // Se o elemento clicado é dentro do nav-panel ou um de seus filhos, não faz nada
        const targetElement = event.target;
        if (this.el.contains(targetElement))
            return;
        // Se o breakpoint for desktop, não faz nada
        if (this.display === 'desktop')
            return;
        // Se o breakpoint for tamanho tablet ou menor, fecha o nav-panel ao clicar fora
        this.hide();
    }
    handleKeyDown(event) {
        // Se estiver fechado, não faz nada
        if (!this.open || event.defaultPrevented)
            return;
        switch (event.key) {
            // Se apertar "Escape", fecha o nav-panel
            case 'Escape':
                event.preventDefault();
                this.hide();
                this.button.focus();
                break;
            // Se o breakpoint for tamanho tablet ou menor, controla o foco dentro do nav-panel
            case 'Tab':
                if (this.display !== 'desktop') {
                    handleKeyDown(event, getFocusableElements(this.el));
                }
                break;
        }
    }
    handleOpen() {
        if (this.open && this.content) {
            // Remove o atributo "hidden" quando o nav-panel é aberto
            this.content.hidden = false;
        }
    }
    componentWillLoad() {
        // Monta objeto para o evento - Nesse momento, com o valor padrão.
        const detail = {
            state: DEFAULT_STATE
        };
        // Requisita o estado gravado
        this.alcStateRequest.emit(detail); // Emite o evento para solicitar o estado
        // Garante que o objeto this.state tenha as chaves esperadas, independente do valor de detail.state
        // Grava o estado em memória
        // O estado é sempre salvo, independentemente do valor de `display`, porque `display` pode
        // mudar dinamicamente, e o estado pode passar a ser necessário.
        this.state = Object.assign(Object.assign({}, DEFAULT_STATE), detail.state);
        if (this.display === 'desktop') {
            // "open" para desktop será inicialmente o estado salvo
            this.open = this.state.open;
        }
        else {
            // "open" para outros cenários (não desktop) inicialmente será false.
            this.open = false;
        }
    }
    componentDidLoad() {
        this.setOffset(this.el.offsetTop);
        // Esconde o conteúdo quando o nav-panel é fechado após a transição
        // A animação não funciona quando adiciona hidden no CSS
        this.content.addEventListener("transitionend", this.handleTransitionEnd.bind(this));
        if (this.getDisplay() !== 'mobile') {
            // Essa classe é utilizada para aplicar padding e margins nas classes de container
            document.querySelector('html').classList.add('alc-navpanel');
        }
        this.observer = new MutationObserver(() => {
            const newOffsetTop = this.el.offsetTop;
            if (newOffsetTop !== this.offsetTop) {
                console.log(`offsetTop mudou de ${this.offsetTop} para ${newOffsetTop}`);
                this.setOffset(newOffsetTop);
            }
        });
        // Observa mudanças no body inteiro, pois mudanças acima no DOM podem afetar o offsetTop
        this.observer.observe(document.body, {
            attributes: true,
            childList: true,
            subtree: true
        });
    }
    disconnectedCallback() {
        this.content.removeEventListener("transitionend", this.handleTransitionEnd.bind(this));
        if (this.observer) {
            this.observer.disconnect();
        }
    }
    handleTransitionEnd() {
        if (!this.open) {
            this.content.hidden = true;
        }
    }
    getDisplay() {
        const width = window.innerWidth;
        if (width >= DESKTOP_BREAKPOINT)
            return 'desktop';
        if (width >= TABLET_BREAKPOINT)
            return 'tablet';
        return 'mobile';
    }
    updateState(open) {
        this.open = open;
        if (this.getDisplay() === 'desktop') {
            this.state.open = open;
            this.alcStateChange.emit({ state: this.state });
        }
    }
    setOffset(offsetTop) {
        this.offsetTop = offsetTop;
        // Altura esta o elemento em relação ao topo da tela)
        this.el.style.setProperty('--offset-top', this.el.offsetTop.toString());
    }
    // Utilizando "svg" diretamente em vez de uma tag <img> para permitir a personalização da cor do SVG no modo dark
    renderButtonSVG() {
        return (h("svg", { width: "24", height: "62", viewBox: "0 0 24 62", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, h("path", { d: "M7 7C1.4 7 0 2.33333 0 0C0 20.6667 6.69364e-06 41.3333 0 62C0 59.6667 1.4 55 7 55H20C22.2091 55 24 53.2091 24 51V11C24 8.79086 22.2091 7 20 7H7Z", fill: "#e0f7f6", class: "alc-nav-panel__button-svg" })));
    }
    render() {
        return (h(Host, { key: '1b1c04c32abf882778bf6aa7f63a47e118b3042d', class: {
                'alc-nav-panel': true,
                'alc-nav-panel--opened': this.open
            } }, h("div", { key: 'b75b63cab5a85053f7377360af13948d59c2b23a', class: "alc-nav-panel__container" }, h("div", { key: '7ab9cffdfd6612339db76f3bb99b81b96f961b00', class: "alc-nav-panel__button-container" }, h("button", { key: '076db32bc3d9c52932838b9be476baa38c8b09da', class: "alc-nav-panel__button", onClick: () => this.open ? this.hide() : this.show(), "aria-pressed": this.open ? 'true' : 'false', "aria-label": "Exibir navega\u00E7\u00E3o", ref: el => this.button = el, "data-alc-navpanel-button": true }, this.renderButtonSVG(), h("alc-icon", { key: 'e1646298332d38e014e00bad2b1037fe5ae1c800', class: "alc-nav-panel__button-icon", name: this.open ? 'x-lg' : 'list', label: "" }))), h("div", { key: '7328fae319628be1bdcc76a6dff6286b918cc486', class: {
                'alc-nav-panel__content': true,
                'alc-nav-panel__content--opened': this.open
            }, ref: el => this.content = el }, h("slot", { key: 'e8ebae074c216c60ee609b47f06678ec052e3ba1' })))));
    }
    static get is() { return "alc-nav-panel"; }
    static get originalStyleUrls() {
        return {
            "$": ["alc-nav-panel.css"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["alc-nav-panel.css"]
        };
    }
    static get properties() {
        return {
            "open": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Indica se o nav-panel est\u00E1 vis\u00EDvel. O valor inicial desse atributo ser\u00E1 definido dinamicamente pelo pr\u00F3prio nav-panel."
                },
                "getter": false,
                "setter": false,
                "attribute": "open",
                "reflect": true
            }
        };
    }
    static get events() {
        return [{
                "method": "alcStateChange",
                "name": "alc-state-change",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Evento disparado quando o estado do nav-panel \u00E9 alterado."
                },
                "complexType": {
                    "original": "AlcStateEventTypes",
                    "resolved": "AlcStateEventTypes",
                    "references": {
                        "AlcStateEventTypes": {
                            "location": "local",
                            "path": "/home/jenkins_slave/workspace/alcance-snapshots/packages/alcance/src/components/alc-nav-panel/alc-nav-panel.tsx",
                            "id": "src/components/alc-nav-panel/alc-nav-panel.tsx::AlcStateEventTypes"
                        }
                    }
                }
            }, {
                "method": "alcStateRequest",
                "name": "alc-state-request",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Evento disparado quando o nav-panel precisa recuperar o estado."
                },
                "complexType": {
                    "original": "AlcStateEventTypes",
                    "resolved": "AlcStateEventTypes",
                    "references": {
                        "AlcStateEventTypes": {
                            "location": "local",
                            "path": "/home/jenkins_slave/workspace/alcance-snapshots/packages/alcance/src/components/alc-nav-panel/alc-nav-panel.tsx",
                            "id": "src/components/alc-nav-panel/alc-nav-panel.tsx::AlcStateEventTypes"
                        }
                    }
                }
            }];
    }
    static get methods() {
        return {
            "show": {
                "complexType": {
                    "signature": "() => Promise<boolean>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<boolean>"
                },
                "docs": {
                    "text": "Abre o nav-panel.",
                    "tags": [{
                            "name": "returns",
                            "text": "O valor retornado \u00E9 `true` se o nav-panel foi exibido com a chamada do m\u00E9todo."
                        }]
                }
            },
            "hide": {
                "complexType": {
                    "signature": "() => Promise<boolean>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<boolean>"
                },
                "docs": {
                    "text": "Fecha o nav-panel.",
                    "tags": [{
                            "name": "returns",
                            "text": "O valor retornado \u00E9 `true` se o nav-panel foi fechado com a chamada do m\u00E9todo."
                        }]
                }
            }
        };
    }
    static get elementRef() { return "el"; }
    static get watchers() {
        return [{
                "propName": "open",
                "methodName": "handleOpen"
            }];
    }
    static get listeners() {
        return [{
                "name": "resize",
                "method": "handleResize",
                "target": "window",
                "capture": false,
                "passive": true
            }, {
                "name": "click",
                "method": "handleClick",
                "target": "body",
                "capture": false,
                "passive": false
            }, {
                "name": "keydown",
                "method": "handleKeyDown",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
}
//# sourceMappingURL=alc-nav-panel.js.map
