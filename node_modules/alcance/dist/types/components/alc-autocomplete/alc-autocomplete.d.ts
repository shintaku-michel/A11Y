import { EventEmitter } from '../../stencil-public-runtime';
export declare class AlcAutocomplete {
    el: HTMLElement;
    /** Itens que serão listado no componente */
    items: Array<{
        [key: string]: string;
    }>;
    /** Indica os atributos dos dados que serão exibidos na lista */
    displayKeys: string;
    /** Label do input */
    label?: string;
    /** Mensagem de ajuda */
    hint: string;
    /** Indica se o input é obrigatório */
    required: boolean;
    /** Texto dentro do input */
    placeholder?: string;
    /** Indica o tipo de visualização da lista */
    listDirection: 'horizontal' | 'vertical';
    /** Desabilita input */
    disabled: boolean;
    /** Indica se os dados estão sendo carregados */
    loading: boolean;
    /** Indica se houve um erro ao carregar os dados */
    error: boolean;
    errorMsg: string;
    filteredData: any[];
    itemSelected: boolean;
    selectedItemValue: HTMLElement | null;
    emptyResult: boolean;
    input: HTMLInputElement;
    grid: HTMLElement;
    activeRowIndex: number;
    activeColIndex: number;
    rowsCount: number;
    colsCount: number;
    gridFocused: boolean;
    shown: boolean;
    selectionCol: number;
    inputId: string;
    gridId: string;
    labelId: string;
    messageRowContainerId: string;
    /**
   * Evento emitido sempre que o item selecionado for alterado.
   * O valor emitido será o mesmo que pode ser obtido pelo método `getSelected()`.
   */
    alcChange: EventEmitter<any>;
    selectedItemValueChanged(newValue: any): void;
    handleLoadingChange(newVal: boolean, oldVal: boolean): void;
    componentWillLoad(): void;
    componentDidLoad(): void;
    handleBodyClick(evt: MouseEvent): void;
    handleInputKeyUp(evt: KeyboardEvent): void;
    handleInputKeyDown(evt: KeyboardEvent): void;
    handleGridClick(evt: MouseEvent): void;
    isElementInView(element: HTMLElement): boolean;
    updateResults(): void;
    getRowIndex(key: string): number;
    getItemAt(rowIndex: number, colIndex: number): HTMLElement | null;
    selectItem(item: HTMLElement | null, event?: Event): void;
    handleInput(): void;
    handleFocus(): void;
    clearSelection(event: Event): void;
    hideResults(): void;
    removeFocusCell(rowIndex: number, colIndex: number): void;
    focusCell(rowIndex: number, colIndex: number): void;
    ensureCellInView(element: HTMLElement): void;
    searchDataService(searchString: string): any[];
    showMessageRow(message: string): void;
    /** Retorna o valor selecionado */
    getSelected(): Promise<any>;
    /** Define o valor selecionado */
    setSelected(item: any): Promise<void>;
    /** Limpa o valor selecionado */
    clearSelected(): Promise<void>;
    render(): any;
}
