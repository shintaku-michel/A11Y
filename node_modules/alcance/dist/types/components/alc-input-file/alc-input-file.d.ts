import { EventEmitter } from '../../stencil-public-runtime';
export interface AlcFileWithContent {
    file: File;
    content: ArrayBuffer;
}
export interface AlcFileSelectedEvent {
    files: AlcFileWithContent[];
}
export declare class AlcInputFile {
    private idInputFilePolite;
    private textInputElement;
    private resizeObserver;
    private idLabel;
    private idDropzoneText;
    /**
     * Altera o funcionamento para aceitar vários arquivos.
     */
    multiple: boolean;
    /**
     * Obrigatório. ID do input.
     */
    idInput: string;
    /**
     * Define tipos de arquivos específicos para envio. Padrão: Todos.
     */
    accept?: string;
    /**
     * Desativa o componente.
     */
    disabled: boolean;
    /**
     * Indica se é obrigatório.
     */
    required: boolean;
    /**
     * Define o tipo de botão que vai ser renderizado.
     */
    buttonType?: 'secondary' | undefined;
    /**
     * Ícone a ser exibido no início do input.
     */
    iconName?: string;
    /**
     * Modo de visualização do componente.
     * Pode ser 'button', 'input' ou 'dropzone'.
     */
    mode: 'button' | 'input' | 'dropzone';
    alcFileSelected: EventEmitter<AlcFileSelectedEvent>;
    el: HTMLElement;
    files: File[];
    maxInputTextLength: number;
    /**
     * Retorna array de arquivos selecionados com seus blobs.
     * @returns Lista de arquivos com conteúdo.
     */
    getFiles(): Promise<AlcFileWithContent[]>;
    /**
     * Limpa os dados do input e a lista de arquivos.
     */
    clear(): Promise<void>;
    private handleFileChange;
    private readFilesAndEmitEvent;
    private formatFileSize;
    private renderFiles;
    private renderFileInfo;
    private renderPolite;
    private invokeFileInput;
    private handleRemove;
    private handleRemoveAll;
    private handleDrop;
    private handleDragOver;
    private handleDragEnter;
    private handleDragLeave;
    componentWillLoad(): void;
    componentDidLoad(): void;
    disconnectedCallback(): void;
    private initializeResizeObserver;
    private updateMaxInputTextLength;
    private truncateText;
    render(): any;
}
