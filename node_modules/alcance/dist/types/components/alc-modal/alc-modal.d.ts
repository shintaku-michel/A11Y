import { EventEmitter } from '../../stencil-public-runtime';
type hideFromType = 'header-button' | 'footer-button' | 'keyboard' | 'overlay';
export interface AlcModalHideEventDetail {
    from: hideFromType;
}
/**
 * @slot - O conteúdo da modal.
 * @slot header - O conteúdo do cabeçalho da modal.
 * @slot footer - O conteúdo do rodapé da modal.
 */
export declare class AlcModal {
    private idModalTitle;
    private modalRef?;
    private triggerElement;
    private overlayRef;
    /**
     * Define se a modal está aberta ou fechada.
     */
    open?: boolean;
    /**
     * Título da modal
     */
    headerText: string;
    /**
     * Tamanho da modal
     */
    size?: 'sm' | 'md' | 'lg' | 'xl';
    /**
     * Previne a modal de fechar ao clicar no overlay.
     */
    preventOverlayClose: boolean;
    watchOpen(open: boolean): void;
    /**
     * Evento disparado quando a modal abriu
     */
    alcAfterShow: EventEmitter<null>;
    /**
     * Evento disparado quando a modal vai fechar
     */
    alcHide: EventEmitter<{
        from: 'header-button' | 'footer-button' | 'keyboard' | 'overlay';
    }>;
    /**
     * Evento disparado quando a modal fechou
     */
    alcAfterHide: EventEmitter<null>;
    /**
     * Evento disparado quando a modal fechou e esta pronto para lidar com foco.
     */
    alcFocusAfterHide: EventEmitter<null>;
    /**
     * Método para abrir modal.
     * @returns O valor retornado é `true` se a modal foi realmente exibida com essa chamada ao método.
     */
    show(): Promise<boolean>;
    /**
     * Método para fechar modal.
     * @returns O valor retornado é `true` se a modal foi realmente oculta com essa chamada ao método.
     */
    hide(): Promise<boolean>;
    /**
     * Foco fica dentro da modal quando aberta.
     */
    handleKeyDown(event: KeyboardEvent): void;
    componentWillLoad(): void;
    componentDidRender(): void;
    connectedCallback(): void;
    disconnectedCallback(): void;
    private getModalRef;
    private handleFocusWhenCloseModal;
    private handleOutsideClick;
    private handleHideByUser;
    render(): any;
}
export {};
