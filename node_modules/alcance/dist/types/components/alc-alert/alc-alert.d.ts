import { EventEmitter } from '../../stencil-public-runtime';
import { Type } from './index';
/**
 * Vamos lá testar.
 * Ver se isso vai funcionar.
 * ^^^^^ [1]
 *
 * @slot - Slot para o conteúdo do alert.
 * @slot summary - Slot para o summary do alert.
 * @picWidget pic-alert
 */
export declare class Alert {
    private core;
    el: HTMLAlcAlertElement;
    /**
     * Indica se o alert está visível. Pode-se usar essa propriedade em vez dos métodos show/hide.
      */
    visible: boolean;
    watchPropVisible(newValue: boolean): void;
    /**
     * O tipo do alert, de acordo com a natureza da mensagem nele contido.
     */
    type: Type;
    watchType(newValue: Type): void;
    /**
     * Define se o alert pode ser dispensado pelo usuário.
     */
    dismissible: boolean;
    watchDismissible(newValue: boolean): void;
    /**
     * Evento disparado quando o alert é dispensado.
     */
    alcHide: EventEmitter<null>;
    /**
     * Evento disparado quando o alert é dispensado.
     */
    alcAfterHide: EventEmitter<null>;
    connectedCallback(): void;
    /**
     * Fecha o alert.
     * @returns O valor retornado é `true` se o alert foi realmente dispensado com essa chamada ao método.
     */
    hide(): Promise<boolean>;
    /**
     * Exibe o alert.
     * @returns O valor retornado é `true` se o alert foi realmente exibido com esa chamada ao método.
     */
    show(): Promise<boolean>;
    private emitHide;
    private emitAfterHide;
    private renderIcon;
    private renderDismissButton;
    private setVisible;
    componentDidRender(): void;
    /**
     * StencilJS render
     */
    render(): any;
}
