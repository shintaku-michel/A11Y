import { EventEmitter } from '../../stencil-public-runtime';
/**
 * @slot - O conteúdo do dropdown.
 * @slot trigger - O disparador do dropdown, usualmente um botão.
 */
export declare class AlcDropdown {
    el: HTMLElement;
    private trigger;
    private content;
    private originalTriggerTabindex;
    private hideOnEventsMap;
    /**
     * Indica se o dropdown esta aberto ou não. Pode-se usar essa propriedade em vez dos métodos show/hide.
     */
    open: boolean;
    watchOpen(): void;
    /**
     * Nome do evento que, ao ocorrer no conteúdo do dropdown, vai fazer com que ele seja fechado.
     * Podem ser informados vários eventos, separados por um espaço em branco.
     */
    hideOn: string;
    watchHideOn(): void;
    handleKeydown(event: KeyboardEvent): Promise<void>;
    /**
     * Evento disparado quando o dropdown vai abrir
     */
    alcShow: EventEmitter<null>;
    /**
     * Evento disparado quando o dropdown abriu
     */
    alcAfterShow: EventEmitter<null>;
    /**
     * Evento disparado quando o dropdown vai fechar
     */
    alcHide: EventEmitter<null>;
    /**
     * Evento disparado quando o dropdown fechou
     */
    alcAfterHide: EventEmitter<null>;
    /**
     * Método para abrir o dropdown.
     * @returns O valor retornado é `true` se o dropdown foi realmente exibido com essa chamada ao método.
     */
    show(): Promise<boolean>;
    /**
     * Método para fechar o dropdown.
     * @returns O valor retornado é `true` se o dropdown foi realmente oculto com essa chamada ao método.
     */
    hide(): Promise<boolean>;
    private handleAnchorClick;
    toggleDropdown: () => Promise<void>;
    handleTriggerFocus(): void;
    handleContentFocus(): void;
    private setTriggerAccessibility;
    private handleTriggerAriaExpanded;
    private handleTriggerTabindex;
    private handleFocusOut;
    private handleCloseOn;
    private addHideOnListeners;
    componentDidUpdate(): void;
    getTrigger(): HTMLElement;
    componentDidLoad(): void;
    render(): any;
}
