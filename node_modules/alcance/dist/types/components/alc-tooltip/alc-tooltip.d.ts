import { EventEmitter } from '../../stencil-public-runtime';
import { PopupPlacement } from '../alc-popup/alc-popup';
export declare class AlcTooltip {
    contentId: string;
    anchorSlot: HTMLSlotElement;
    anchorEl: HTMLElement;
    hasClickedOrFocused: boolean;
    /**
    * Indica se o tooltip esta ativo ou não. Pode-se usar essa propriedade em vez dos métodos show/hide.
    */
    active: boolean;
    /**
    * Indica o conteudo textual do tooltip. Pode-se usar o slot em vez dessa propriedade.
    */
    content: string;
    /**
    * Define o posicionamento do tooltip.
    */
    placement: PopupPlacement;
    /**
    * Define como o tooltip vai ser ativado. Pode ser: `click` , `hover` , `focus` e/ou `manual`. Pode adicionar mais de um, separando por espaço. Ex.: 'hover focus'.
    */
    trigger: string;
    /**
    * Define o posicionamento do tooltip.
    */
    strategy: 'absolute' | 'fixed';
    /**
     * Exibe o tooltip.
     * @returns O valor retornado é `true` se o tooltip foi realmente exibido com essa chamada ao método.
     */
    show(): Promise<boolean>;
    /**
    * Fecha o tooltip.
    * @returns O valor retornado é `true` se o tooltip foi realmente dispensado com essa chamada ao método.
    */
    hide(): Promise<boolean>;
    /**
    * Evento disparado quando o tooltip vai abrir
    */
    alcShow: EventEmitter<{
        from: 'click' | 'hover' | 'focus' | 'method';
    }>;
    /**
    * Evento disparado quando o tooltip abriu
    */
    alcAfterShow: EventEmitter<null>;
    /**
    * Evento disparado quando o tooltip vai fechar.
    */
    alcHide: EventEmitter<{
        from: 'click' | 'hover' | 'focus' | 'keyboard' | 'method';
    }>;
    /**
    * Evento disparado quando o tooltip fechou.
    */
    alcAfterHide: EventEmitter<null>;
    watchActive(active: boolean): void;
    handleKeyDown(event: KeyboardEvent): void;
    handleFocus(): void;
    handleBlur(): void;
    handleMouseOver(): void;
    handleMouseOut(): void;
    handleClick(): void;
    componentWillLoad(): void;
    componentDidLoad(): void;
    handleHide(type: 'click' | 'hover' | 'focus' | 'keyboard'): Promise<boolean>;
    handleShow(type: 'click' | 'hover' | 'focus'): Promise<boolean>;
    hasTrigger(triggerType: string): boolean;
    render(): any;
}
