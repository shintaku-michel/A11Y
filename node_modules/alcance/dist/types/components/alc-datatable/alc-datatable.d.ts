import { EventEmitter } from '../../stencil-public-runtime';
import 'moment/locale/pt-br';
import { AlcMenuItemCustomEvent } from '../../components';
export declare class AlcDatatable {
    el: HTMLAlcDatatableElement;
    /**
     * Ver documentação do DataTables.net
     */
    childRow: EventEmitter;
    /**
     * Ver documentação do DataTables.net
     */
    columnSizing: EventEmitter;
    /**
     * Ver documentação do DataTables.net
     */
    columnVisibility: EventEmitter;
    /**
     * Ver documentação do DataTables.net
     */
    destroy: EventEmitter;
    /**
     * Ver documentação do DataTables.net
     */
    draw: EventEmitter;
    /**
     * Ver documentação do DataTables.net
     */
    error: EventEmitter;
    /**
     * Ver documentação do DataTables.net
     */
    init: EventEmitter;
    /**
     * Ver documentação do DataTables.net
     */
    length: EventEmitter;
    /**
     * Ver documentação do DataTables.net
     */
    order: EventEmitter;
    /**
     * Ver documentação do DataTables.net
     */
    page: EventEmitter;
    /**
     * Ver documentação do DataTables.net
     */
    preDraw: EventEmitter;
    /**
     * Ver documentação do DataTables.net
     */
    preInit: EventEmitter;
    /**
     * Ver documentação do DataTables.net
     */
    preXhr: EventEmitter;
    /**
     * Ver documentação do DataTables.net
     */
    processing: EventEmitter;
    /**
     * Ver documentação do DataTables.net
     */
    requestChild: EventEmitter;
    /**
     * Ver documentação do DataTables.net
     */
    search: EventEmitter;
    /**
     * Ver documentação do DataTables.net
     */
    stateLoadParams: EventEmitter;
    /**
     * Ver documentação do DataTables.net
     */
    stateLoaded: EventEmitter;
    /**
     * Ver documentação do DataTables.net
     */
    stateSaveParams: EventEmitter;
    /**
     * Ver documentação do DataTables.net
     */
    xhr: EventEmitter;
    /**
     * Ver documentação do DataTables.net
     */
    deselect: EventEmitter;
    /**
     * Ver documentação do DataTables.net
     */
    select: EventEmitter;
    /**
     * Ver documentação do DataTables.net
     */
    selectBlur: EventEmitter;
    /**
     * Ver documentação do DataTables.net
     */
    selectItems: EventEmitter;
    /**
     * Ver documentação do DataTables.net
     */
    selectStyle: EventEmitter;
    /**
     * Ver documentação do DataTables.net
     */
    userSelect: EventEmitter;
    private dataTable;
    private columns;
    private processedOptions;
    private tableWrapper;
    private alertVisibility;
    private paginationElement;
    private dataTableModule;
    private started;
    private firstLoadingWithProcessing;
    private showProcessing;
    private shouldShowLoader;
    private extensionsDefaults;
    ensureJson(input: string | JSON): JSON;
    currentPage: number;
    initCompleted: boolean;
    searchText: string;
    pageLength: string;
    isProcessing: boolean;
    isLoadingActive: boolean;
    watchIsProcessing(): void;
    /**
     * Os dados da tabela
     */
    data?: string | JSON;
    dataWatcher(newValue: string | JSON): void;
    /**
     * As opções da tabela
     */
    options?: string | JSON;
    /**
     * Define as extensões para habilitar/desabilitar
     */
    private extensions?;
    /**
     * Faz com que o componente aguarde a chamada ao método `start()` para iniciar o DataTable.
     */
    deferStart: boolean;
    /**
     * Define o atributo `id` para a tabela (tag `table`), quando ela é criada automaticamente pelo componente.
     * É você não incluir a tag `table` e usar a opção `stateSave`, é necessário definir esse atributo.
     */
    tableId: string;
    DataTableSetup(): void;
    /**
     * Retorna o objeto DataTable.
     * Por meio do objeto retornado é possível configurar extensões do DataTable.
     */
    getDataTable(): Promise<any>;
    /**
     * Retorna a API DataTable.
     */
    getApi(): Promise<any>;
    jsonData: JSON;
    /**
     * Atualiza a exibição da tabela.
     * Necessário para que o componente capture os novos dados depois de uma alteração, quando
     * os dados são providos pelo DOM.
     */
    componentWillLoad(): void;
    /**
      Inicia o DataTable.
      Sempre que `defer-start` for `true`, esse método deve ser chamado para que o componente inicie seu funcionamento.
      @returns O valor retornado é `true` se o DataTable foi realmente iniciado com a chamada desse método.
     */
    start(): Promise<boolean>;
    addOriginalEventsListeners(DataTable: any, domTable: any, component: any): void;
    configureTableWrapper(): void;
    disconnectedCallback(): void;
    handleResize(): void;
    handleScrollEvent(): void;
    getSorting(colIndex: number, index: number, dir: string): string;
    resolveExtensions(): Promise<void>;
    renderHeader(header: HTMLElement, index: number, api: any): HTMLElement;
    reportEmptyTableProps(): void;
    render(): any;
    renderTable(): any;
    prepareStack: (tableNode: HTMLTableElement) => void;
    renderPageLength: () => any;
    renderPagination: () => any;
    renderPageInfo: () => HTMLElement;
    /**
     * Testa se uma coluna é ordenável.
     *
     * Essa função parte do pressuposto que, por padrão, todas as colunas são ordenáveis.
     * Ou seja, que para não ser ordenável, deve haver uma configuração que diga isso.
     *
     * @param colIndex Índice a coluna da tabela
     * @returns true se a coluna for ordenável
     */
    isColumnOrderable: (header: HTMLElement) => boolean;
    renderOrderControls: (headers: Array<String>) => any;
    renderShowColumnsControls: (headers: Array<String>) => any;
    renderSearchControl: () => any;
    renderProcessing: () => any;
    changePage: (e: CustomEvent) => void;
    changeOrder: (e: AlcMenuItemCustomEvent<any>) => void;
    changeVisibility: (e: AlcMenuItemCustomEvent<any>) => void;
    onSearch: (e: InputEvent | Event) => void;
}
