/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
import { Type } from "./components/alc-alert/index";
import { EnvType } from "./components/alc-environment-label/environments";
import { AlcChangeEventTypes } from "./components/alc-event-lab/alc-event-lab";
import { AlcFileSelectedEvent, AlcFileWithContent } from "./components/alc-input-file/alc-input-file";
import { AlcStateEventTypes } from "./components/alc-nav-panel/alc-nav-panel";
import { PopupPlacement } from "./components/alc-popup/alc-popup";
import { PopupPlacement as PopupPlacement1 } from "./components/alc-popup/alc-popup";
export { Type } from "./components/alc-alert/index";
export { EnvType } from "./components/alc-environment-label/environments";
export { AlcChangeEventTypes } from "./components/alc-event-lab/alc-event-lab";
export { AlcFileSelectedEvent, AlcFileWithContent } from "./components/alc-input-file/alc-input-file";
export { AlcStateEventTypes } from "./components/alc-nav-panel/alc-nav-panel";
export { PopupPlacement } from "./components/alc-popup/alc-popup";
export { PopupPlacement as PopupPlacement1 } from "./components/alc-popup/alc-popup";
export namespace Components {
    /**
     * Vamos lá testar.
     * Ver se isso vai funcionar.
     * ^^^^^ [1]
     * @picWidget pic-alert
     */
    interface AlcAlert {
        /**
          * Define se o alert pode ser dispensado pelo usuário.
         */
        "dismissible": boolean;
        /**
          * Fecha o alert.
          * @returns O valor retornado é `true` se o alert foi realmente dispensado com essa chamada ao método.
         */
        "hide": () => Promise<boolean>;
        /**
          * Exibe o alert.
          * @returns O valor retornado é `true` se o alert foi realmente exibido com esa chamada ao método.
         */
        "show": () => Promise<boolean>;
        /**
          * O tipo do alert, de acordo com a natureza da mensagem nele contido.
         */
        "type": Type;
        /**
          * Indica se o alert está visível. Pode-se usar essa propriedade em vez dos métodos show/hide.
         */
        "visible": boolean;
    }
    interface AlcAutocomplete {
        /**
          * Limpa o valor selecionado
         */
        "clearSelected": () => Promise<void>;
        /**
          * Desabilita input
         */
        "disabled": boolean;
        /**
          * Indica os atributos dos dados que serão exibidos na lista
         */
        "displayKeys": string;
        /**
          * Indica se houve um erro ao carregar os dados
         */
        "error": boolean;
        "errorMsg": string;
        /**
          * Retorna o valor selecionado
         */
        "getSelected": () => Promise<any>;
        /**
          * Mensagem de ajuda
         */
        "hint": string;
        /**
          * Itens que serão listado no componente
         */
        "items": Array<{ [key: string]: string }>;
        /**
          * Label do input
         */
        "label"?: string;
        /**
          * Indica o tipo de visualização da lista
         */
        "listDirection": 'horizontal' | 'vertical';
        /**
          * Indica se os dados estão sendo carregados
         */
        "loading": boolean;
        /**
          * Texto dentro do input
         */
        "placeholder"?: string;
        /**
          * Indica se o input é obrigatório
         */
        "required": boolean;
        /**
          * Define o valor selecionado
         */
        "setSelected": (item: any) => Promise<void>;
    }
    interface AlcBadge {
        /**
          * Define a cor do badge. Pode ser 'primary', 'secondary', 'success', 'warning', 'error', 'info' ou 'neutral'.
         */
        "color": 'primary' | 'secondary' | 'success' | 'warning' | 'error' | 'info' | 'neutral';
        /**
          * Define se o badge deve ser exibido como um contador.
         */
        "count"?: boolean;
        /**
          * Define se o badge deve ser exibido como um ponto (dot) sem conteúdo.
         */
        "dot": boolean;
        /**
          * Define se o badge deve ser exibido ou não.
         */
        "hidden": boolean;
        /**
          * O texto a ser exibido dentro do badge (ex: "99+" ou "Novo").
         */
        "label"?: string;
        /**
          * Define se o badge deve aparecer com um contorno ao invés de ser preenchido.
         */
        "outlined": boolean;
        /**
          * Define a posição do badge: 'default', 'floating' ou 'inline'.
         */
        "position": 'default' | 'floating' | 'inline';
        /**
          * Define se o badge deve ter animação de pulsação.
         */
        "pulsate": boolean;
    }
    interface AlcBreadcrumb {
    }
    interface AlcBreadcrumbItem {
        /**
          * Indica o nome do icone a ser renderizado
         */
        "iconName": string;
        /**
          * Indica a label do breadcrumb
         */
        "label": string;
        /**
          * Indica a url do link, pode-se usar o slot default para adicionar o elemento de navegação
         */
        "url": string;
    }
    interface AlcCheckbox {
        /**
          * Texto de mensagem de erro.
         */
        "errorMsg": string;
        /**
          * Texto de ajuda.
         */
        "hint"?: string;
        /**
          * Texto do label do input. Há opção de adicionar o elemento label pelo slot "label".
         */
        "label": string;
    }
    interface AlcDatatable {
        /**
          * Os dados da tabela
         */
        "data"?: string | JSON;
        /**
          * Faz com que o componente aguarde a chamada ao método `start()` para iniciar o DataTable.
         */
        "deferStart": boolean;
        /**
          * Retorna a API DataTable.
         */
        "getApi": () => Promise<any>;
        /**
          * Retorna o objeto DataTable. Por meio do objeto retornado é possível configurar extensões do DataTable.
         */
        "getDataTable": () => Promise<any>;
        /**
          * As opções da tabela
         */
        "options"?: string | JSON;
        /**
          * Inicia o DataTable. Sempre que `defer-start` for `true`, esse método deve ser chamado para que o componente inicie seu funcionamento.
          * @returns O valor retornado é `true` se o DataTable foi realmente iniciado com a chamada desse método.
         */
        "start": () => Promise<boolean>;
        /**
          * Define o atributo `id` para a tabela (tag `table`), quando ela é criada automaticamente pelo componente. É você não incluir a tag `table` e usar a opção `stateSave`, é necessário definir esse atributo.
         */
        "tableId": string;
    }
    interface AlcDetails {
        /**
          * Desativa o componente.
         */
        "disabled": boolean;
        /**
          * Mantém aberto.
         */
        "opened": boolean;
        /**
          * Insere o summary do details.
         */
        "summary": string;
    }
    interface AlcDrawer {
        /**
          * @type Element ou ID
          * @description Elemento ou ID do elemento que será focado quando o drawer fechar.
         */
        "elementToFocus"?: HTMLElement | string;
        /**
          * Método para fechar o drawer.
         */
        "hide": () => Promise<boolean>;
        /**
          * @type boolean
          * @description Define se o drawer está aberto ou fechado.
         */
        "isVisible"?: boolean;
        /**
          * Método para abrir o drawer.
         */
        "show": () => Promise<boolean>;
    }
    interface AlcDropdown {
        /**
          * Método para fechar o dropdown.
          * @returns O valor retornado é `true` se o dropdown foi realmente oculto com essa chamada ao método.
         */
        "hide": () => Promise<boolean>;
        /**
          * Nome do evento que, ao ocorrer no conteúdo do dropdown, vai fazer com que ele seja fechado. Podem ser informados vários eventos, separados por um espaço em branco.
         */
        "hideOn": string;
        /**
          * Indica se o dropdown esta aberto ou não. Pode-se usar essa propriedade em vez dos métodos show/hide.
         */
        "open": boolean;
        /**
          * Método para abrir o dropdown.
          * @returns O valor retornado é `true` se o dropdown foi realmente exibido com essa chamada ao método.
         */
        "show": () => Promise<boolean>;
    }
    interface AlcEnvironmentLabel {
        "env": EnvType;
    }
    interface AlcEventLab {
        "changePage": (pageNumber: number) => Promise<void>;
    }
    interface AlcExpander {
        /**
          * Fecha o expander programaticamente.
         */
        "hide": () => Promise<void>;
        /**
          * Oculta o rótulo do controle, mantendo-o acessível para leitores de tela.
         */
        "hideLabel": boolean;
        /**
          * Rótulo do elemento que controla a abertura e o fechamento do expander.
         */
        "label": string;
        /**
          * Define se o expander está aberto ou fechado.
         */
        "open": boolean;
        /**
          * Abre o expander programaticamente.
         */
        "show": () => Promise<void>;
    }
    /**
     * @cssClass alc-field__label - Aplicada ao elemento `label`.
     * @cssClass alc-field__core - Aplicada ao elemento que agrupa o controle de formulário, mensagem de erro e texto de ajuda.
     */
    interface AlcField {
        /**
          * Texto de mensagem de erro.
         */
        "errorMsg": string;
        /**
          * Texto de ajuda.
         */
        "hint": string;
        /**
          * Texto do label do input.
         */
        "label"?: string;
        /**
          * Indica se o input é obrigatório.
         */
        "required": boolean;
    }
    interface AlcFieldChecker {
        /**
          * Verifica o formulário quando houver submissão.
         */
        "checkOnSubmit": boolean;
    }
    interface AlcFieldset {
        /**
          * Texto de mensagem de erro.
         */
        "errorMsg": string;
        /**
          * Texto de ajuda.
         */
        "hint": string;
        /**
          * Texto da legenda do fieldset.
         */
        "legend": string;
        /**
          * Indica se o fieldset é obrigatório.
         */
        "required": boolean;
    }
    interface AlcHeader {
        /**
          * Descrição do sistema. Usualmente, o nome do sistema (se usada a sigla em "name"), descrição ou um complemento ao nome do sistema.
         */
        "description": string;
        /**
          * URL para a página inicial do sistema.
         */
        "homeUrl": string;
        /**
          * O nome do sistema.
         */
        "name": string;
    }
    interface AlcHeaderAction {
        /**
          * Nome do ícone a ser exibido.
         */
        "iconName": string;
        /**
          * URL para a página de suporte. Usado quando a propriedade `variant` é `link` ou `menu-link`.
         */
        "url": string;
        /**
          * Define o tipo de elemento a ser renderizado.
         */
        "variant": 'button' | 'menu-item' | 'link' | 'menu-link';
    }
    interface AlcHeaderId {
        /**
          * Descrição do sistema. Usualmente, o nome do sistema (se usada a sigla em "name"), o nome de um módulo, ou um complemento ao nome do sistema.
         */
        "description": string;
        /**
          * URL para a página inicial do sistema. O nome do sistema será transformado em um link para essa URL.
         */
        "homeUrl": string;
        /**
          * O nome do sistema. Será mostrado no cabeçalho, que deve estar presente em todas do sistema.
         */
        "name": string;
    }
    interface AlcHeaderNotifications {
        /**
          * Número de notificações a serem exibidas no botão.
         */
        "notifications": number;
        /**
          * URL para a página de notificações. Usado quando a propriedade `variant` é `link`. Se o `variant` for `button`, esse atributo será ignorado.
         */
        "url": string;
        /**
          * Define o tipo de elemento a ser renderizado. Pode ser um button ou um link.
         */
        "variant": 'button' | 'link';
    }
    interface AlcHeaderV1 {
        /**
          * URL para a página inicial do sistema. O nome do sistema será transformado em um link para essa URL.
         */
        "homeUrl": string;
        /**
          * O nome do sistema. Será mostrado no cabeçalho, que deve estar presente em todas do sistema.
         */
        "name": string;
    }
    interface AlcIcon {
        /**
          * Define se o ícone deve ser espelhado horizontalmente quando `dir` for `"rtl"`.
         */
        "flipRtl"?: boolean;
        /**
          * Uma combinação de `name` e `src`. Se o valor for entendido como a URL de um `src`, ele definirá a propriedade `src`. Caso contrário, assume-se como o nome de ícone da biblioteca, e define a propriedade `name`.
         */
        "icon"?: string;
        /**
          * Equivalente textual do ícone. Seu uso é semelhante ao atributo `alt` de uma imagem. Esse texto será lido por software leitor de tela, e utilizado no lugar do ícone se por qualquer motivo a imagem não puder ser carregada no navegador.
         */
        "label": string;
        /**
          * Se ativado, a carga do ícone ocorrerá somente quando o componente estiver visível na _viewport_.
         */
        "lazy": boolean;
        /**
          * Nome do ícone que será mostrado. Deve ser um dos nomes de ícone da biblioteca.
         */
        "name"?: string;
        /**
          * Quando definido como `true`, o conteúdo SVG obtido via HTTP passará por uma limpeza. Conteúdo que contenha algum elemento `<script>` ou atributo que comece com `on`, como `onclick`, será descartado. Sendo descartado, a imagem não será mostrada.
          * @default false
         */
        "sanitize": boolean;
        /**
          * Especifica o `src` de um arquivo SVG a ser usado como ícone.
         */
        "src"?: string;
    }
    interface AlcInputFile {
        /**
          * Define tipos de arquivos específicos para envio. Padrão: Todos.
         */
        "accept"?: string;
        /**
          * Define o tipo de botão que vai ser renderizado.
         */
        "buttonType"?: 'secondary' | undefined;
        /**
          * Limpa os dados do input e a lista de arquivos.
         */
        "clear": () => Promise<void>;
        /**
          * Desativa o componente.
         */
        "disabled": boolean;
        /**
          * Retorna array de arquivos selecionados com seus blobs.
          * @returns Lista de arquivos com conteúdo.
         */
        "getFiles": () => Promise<AlcFileWithContent[]>;
        /**
          * Ícone a ser exibido no início do input.
         */
        "iconName"?: string;
        /**
          * Obrigatório. ID do input.
         */
        "idInput": string;
        /**
          * Modo de visualização do componente. Pode ser 'button', 'input' ou 'dropzone'.
         */
        "mode": 'button' | 'input' | 'dropzone';
        /**
          * Altera o funcionamento para aceitar vários arquivos.
         */
        "multiple": boolean;
        /**
          * Indica se é obrigatório.
         */
        "required": boolean;
    }
    interface AlcLoading {
        /**
          * Define se o indicador de carregamento aparece na tela. Quando o valor é `true` mostra o componente e quando o valor é `false` oculta.
         */
        "active": boolean;
        /**
          * Texto anunciado ao leitor de tela quando mudar o estado para `active=false`.
         */
        "endMsg": string;
        /**
          * Esconde o loading.
          * @returns O valor retornado é `true` se o loading foi realmente oculto com essa chamada ao método.
         */
        "hide": () => Promise<boolean>;
        /**
          * Texto mostrado na tela enquanto estiver carregando e também anunciado no leitor de tela quando o estado mudar para `active=true`.
         */
        "label": string;
        /**
          * Exibe o loading.
          * @returns O valor retornado é `true` se o loading foi realmente exibido com essa chamada ao método.
         */
        "show": () => Promise<boolean>;
        /**
          * Define a variação visual do componente: - `'full-screen'`: ocupa a tela inteira. - `'container'`: ocupa o elemento pai. - `'inline'`: utilizado dentro de textos. - `'button'`: utilizado dentro de botões.
         */
        "variant": 'full-screen' | 'container' | 'inline' | 'button';
    }
    interface AlcMenu {
        "refresh": () => Promise<void>;
    }
    interface AlcMenuItem {
        /**
          * Indica se o menu-item está ou não marcado. Usado quando `type=checkbox` ou `type=radio`.
         */
        "checked"?: boolean;
        /**
          * Indica se o menu-item está desabilitado.
         */
        "disabled"?: boolean;
        /**
          * Tipo do menu-item.
         */
        "type"?: 'normal' | 'checkbox' | 'radio';
        /**
          * Valor do menu-item, que pode ser utilizado para identificar que item foi selecionado.
         */
        "value"?: any;
    }
    interface AlcMenuItemTheme {
    }
    interface AlcMenuLink {
        /**
          * Indica se o menu-link está desabilitado.
         */
        "disabled"?: boolean;
        /**
          * Valor do menu-link, que pode ser utilizado para identificar que link foi selecionado.
         */
        "value"?: any;
    }
    interface AlcModal {
        /**
          * Título da modal
         */
        "headerText": string;
        /**
          * Método para fechar modal.
          * @returns O valor retornado é `true` se a modal foi realmente oculta com essa chamada ao método.
         */
        "hide": () => Promise<boolean>;
        /**
          * Define se a modal está aberta ou fechada.
         */
        "open"?: boolean;
        /**
          * Previne a modal de fechar ao clicar no overlay.
         */
        "preventOverlayClose": boolean;
        /**
          * Método para abrir modal.
          * @returns O valor retornado é `true` se a modal foi realmente exibida com essa chamada ao método.
         */
        "show": () => Promise<boolean>;
        /**
          * Tamanho da modal
         */
        "size"?: 'sm' | 'md' | 'lg' | 'xl';
    }
    interface AlcNav {
        /**
          * Seleciona o item passado pelo parâmetro. Se nenhum valor for passado, apenas remove o item atualmente selecionado.
         */
        "setSelectedItem": (listItem?: HTMLElement) => Promise<void>;
        /**
          * Abre ou fecha o painel especificado pelo parâmetro.
         */
        "togglePanel": (panel: HTMLElement) => Promise<void>;
    }
    interface AlcNavPanel {
        /**
          * Fecha o nav-panel.
          * @returns O valor retornado é `true` se o nav-panel foi fechado com a chamada do método.
         */
        "hide": () => Promise<boolean>;
        /**
          * Indica se o nav-panel está visível. O valor inicial desse atributo será definido dinamicamente pelo próprio nav-panel.
         */
        "open": boolean;
        /**
          * Abre o nav-panel.
          * @returns O valor retornado é `true` se o nav-panel foi exibido com a chamada do método.
         */
        "show": () => Promise<boolean>;
    }
    interface AlcPagination {
        /**
          * Número da página atual
         */
        "currentPage": number;
        /**
          * Número total de páginas.
         */
        "totalPages": number;
    }
    interface AlcPopup {
        /**
          * Aciona a abertura do popup.
         */
        "active": boolean;
        /**
          * Adiciona arrow no popup.
         */
        "arrow": boolean;
        /**
          * Define a distância entre o popup e âncora.
         */
        "distance": number;
        /**
          * Quando definido como `true`, troca o posicionamento (placement) do popup para mantê-lo visível.
         */
        "flip": boolean;
        /**
          * Define o posicionamento do popup.
         */
        "placement": PopupPlacement;
        /**
          * Quando definido como `true`, desloca o popup ao longo do eixo para mantê-lo visível quando cortado.
         */
        "shift": boolean;
        /**
          * Determina como o pop-up é posicionado. A estratégia `absoluta` funciona bem na maioria dos casos. Se o overflow cortar o popup, usar a posição `fixed` muitas vezes pode contornar isso.
         */
        "strategy": 'absolute' | 'fixed';
        /**
          * Syncs the popup's width or height to that of the anchor element.
         */
        "sync": 'width' | 'height' | 'both';
    }
    interface AlcRadio {
        /**
          * Texto de mensagem de erro.
         */
        "errorMsg": string;
        /**
          * Texto de ajuda.
         */
        "hint"?: string;
        /**
          * Texto do label do input. Há opção de adicionar o elemento label pelo slot "label".
         */
        "label": string;
    }
    interface AlcScrollPanel {
        /**
          * Define se há foco.
         */
        "hasFocus": boolean;
        /**
          * Define para qual elemento o scroll vai.
         */
        "scrollToElement": HTMLElement;
    }
    interface AlcSidepanel {
        /**
          * Fecha o sidepanel
          * @returns O valor retornado é `true` se o painel foi dispensado com a chamada do método.
         */
        "hide": () => Promise<boolean>;
        /**
          * Abre o sidepanel.
          * @returns O valor retornado é `true` se o painel foi exibido com a chamada do método.
         */
        "show": () => Promise<boolean>;
        /**
          * Indica se o sidepanel está visível.
         */
        "visible": boolean;
    }
    interface AlcSkipLink {
        /**
          * Valor do `id` do elemento para onde o usuário navegará ao acionar o link.
         */
        "anchor": string;
    }
    interface AlcSkipToNav {
    }
    interface AlcSortIndicator {
        /**
          * Define indicação do sort.
         */
        "sorting": 'asc' | 'desc' | 'none';
    }
    interface AlcTab {
        /**
          * Se, dentro da tab, o primeiro elemento com conteúdo significativo for focalizável, deve ser definido como `true`. Caso contrário, deve ser mantido o valor padrão (`false`).
         */
        "contentFocus"?: boolean;
        /**
          * Rótulo da tab.
         */
        "label": string;
        /**
          * Indica se a tab está ou não selecionada.
         */
        "selected": boolean;
        /**
          * Identificador único da tab.
         */
        "tab": string;
    }
    interface AlcTabButton {
        /**
          * Indica que a tab está selecionada.
         */
        "selected": boolean;
        /**
          * Um identificador da tab deve ser fornecido para cada `alc-tab`. Isso é usado internamente para referenciar a tab selecionada.
         */
        "tab": string;
    }
    interface AlcTable {
    }
    interface AlcTabs {
        /**
          * Seleciona uma tab pelo valor de sua propriedade `tab` ou pela referência do elemento.
          * @param tab A tab a ser selecionada. Se passada como string, deve ser o valor da propriedade `tab` da tab.
         */
        "select": (tab: string | HTMLAlcTabElement) => Promise<boolean>;
        /**
          * O identificador da tab atualmente selecionada
         */
        "selected": string;
    }
    interface AlcTheme {
    }
    interface AlcTooltip {
        /**
          * Indica se o tooltip esta ativo ou não. Pode-se usar essa propriedade em vez dos métodos show/hide.
         */
        "active": boolean;
        /**
          * Indica o conteudo textual do tooltip. Pode-se usar o slot em vez dessa propriedade.
         */
        "content": string;
        /**
          * Fecha o tooltip.
          * @returns O valor retornado é `true` se o tooltip foi realmente dispensado com essa chamada ao método.
         */
        "hide": () => Promise<boolean>;
        /**
          * Define o posicionamento do tooltip.
         */
        "placement": PopupPlacement1;
        /**
          * Exibe o tooltip.
          * @returns O valor retornado é `true` se o tooltip foi realmente exibido com essa chamada ao método.
         */
        "show": () => Promise<boolean>;
        /**
          * Define o posicionamento do tooltip.
         */
        "strategy": 'absolute' | 'fixed';
        /**
          * Define como o tooltip vai ser ativado. Pode ser: `click` , `hover` , `focus` e/ou `manual`. Pode adicionar mais de um, separando por espaço. Ex.: 'hover focus'.
         */
        "trigger": string;
    }
    interface AlcUser {
        /**
          * Imagem do usuário. Pode ser qualquer valor válido para o atributo `src` da tag `img` do HTML.
         */
        "imgSrc": string;
        /**
          * URL que efetua o logout do usuário.
         */
        "logoutUrl": string;
        /**
          * Nome do usuário.
         */
        "name": string;
        /**
          * Número de matrícula ou ponto do usuário.
         */
        "registrationNumber": string;
    }
    interface AlcUserMenu {
        /**
          * URL da imagem do usuário. Se não for fornecida, será exibido um ícone padrão.
         */
        "imgSrc": string;
        /**
          * URL que efetua o logout do usuário. O link "Sair" navegará para essa URL.
         */
        "logoutUrl": string;
        /**
          * Nome do usuário.
         */
        "name": string;
        /**
          * Número de matrícula ou ponto do usuário.
         */
        "registrationNumber": string;
        /**
          * Define a variação do menu de usuário. Geralmente, não é recomendado alterar esse valor.
         */
        "variation": 'mobile' | 'desktop';
    }
    interface AlcViewMore {
        /**
          * Nome da variável CSS correspondente à cor de fundo em que o componente está inserido. Aplica-se ao degradê do corte do texto.
         */
        "bgColorVar": string;
        /**
          * Tamanho mínimo do conteúdo a ser exibido. Pode ser em px, rem ou em: 200px; 20rem; 10em;
         */
        "minHeight": string;
        /**
          * Classes CSS para serem aplicadas ao texto da ação.
         */
        "textClass": string;
        /**
          * Alinhamento do botão de ação.
         */
        "togglePosition": string;
        /**
          * Nome da ação para esconder o conteúdo.
         */
        "toggleTextClose": string;
        /**
          * Nome da ação para revelar o conteúdo.
         */
        "toggleTextOpen": string;
    }
}
export interface AlcAlertCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAlcAlertElement;
}
export interface AlcAutocompleteCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAlcAutocompleteElement;
}
export interface AlcDatatableCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAlcDatatableElement;
}
export interface AlcDetailsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAlcDetailsElement;
}
export interface AlcDrawerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAlcDrawerElement;
}
export interface AlcDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAlcDropdownElement;
}
export interface AlcEventLabCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAlcEventLabElement;
}
export interface AlcExpanderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAlcExpanderElement;
}
export interface AlcHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAlcHeaderElement;
}
export interface AlcHeaderActionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAlcHeaderActionElement;
}
export interface AlcHeaderIdCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAlcHeaderIdElement;
}
export interface AlcHeaderNotificationsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAlcHeaderNotificationsElement;
}
export interface AlcHeaderV1CustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAlcHeaderV1Element;
}
export interface AlcInputFileCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAlcInputFileElement;
}
export interface AlcMenuItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAlcMenuItemElement;
}
export interface AlcMenuLinkCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAlcMenuLinkElement;
}
export interface AlcModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAlcModalElement;
}
export interface AlcNavPanelCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAlcNavPanelElement;
}
export interface AlcPaginationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAlcPaginationElement;
}
export interface AlcSidepanelCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAlcSidepanelElement;
}
export interface AlcTabButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAlcTabButtonElement;
}
export interface AlcTabsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAlcTabsElement;
}
export interface AlcTooltipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAlcTooltipElement;
}
export interface AlcUserCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAlcUserElement;
}
export interface AlcUserMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAlcUserMenuElement;
}
declare global {
    interface HTMLAlcAlertElementEventMap {
        "alc-hide": null;
        "alc-after-hide": null;
    }
    /**
     * Vamos lá testar.
     * Ver se isso vai funcionar.
     * ^^^^^ [1]
     * @picWidget pic-alert
     */
    interface HTMLAlcAlertElement extends Components.AlcAlert, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAlcAlertElementEventMap>(type: K, listener: (this: HTMLAlcAlertElement, ev: AlcAlertCustomEvent<HTMLAlcAlertElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAlcAlertElementEventMap>(type: K, listener: (this: HTMLAlcAlertElement, ev: AlcAlertCustomEvent<HTMLAlcAlertElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAlcAlertElement: {
        prototype: HTMLAlcAlertElement;
        new (): HTMLAlcAlertElement;
    };
    interface HTMLAlcAutocompleteElementEventMap {
        "alc-change": any;
    }
    interface HTMLAlcAutocompleteElement extends Components.AlcAutocomplete, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAlcAutocompleteElementEventMap>(type: K, listener: (this: HTMLAlcAutocompleteElement, ev: AlcAutocompleteCustomEvent<HTMLAlcAutocompleteElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAlcAutocompleteElementEventMap>(type: K, listener: (this: HTMLAlcAutocompleteElement, ev: AlcAutocompleteCustomEvent<HTMLAlcAutocompleteElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAlcAutocompleteElement: {
        prototype: HTMLAlcAutocompleteElement;
        new (): HTMLAlcAutocompleteElement;
    };
    interface HTMLAlcBadgeElement extends Components.AlcBadge, HTMLStencilElement {
    }
    var HTMLAlcBadgeElement: {
        prototype: HTMLAlcBadgeElement;
        new (): HTMLAlcBadgeElement;
    };
    interface HTMLAlcBreadcrumbElement extends Components.AlcBreadcrumb, HTMLStencilElement {
    }
    var HTMLAlcBreadcrumbElement: {
        prototype: HTMLAlcBreadcrumbElement;
        new (): HTMLAlcBreadcrumbElement;
    };
    interface HTMLAlcBreadcrumbItemElement extends Components.AlcBreadcrumbItem, HTMLStencilElement {
    }
    var HTMLAlcBreadcrumbItemElement: {
        prototype: HTMLAlcBreadcrumbItemElement;
        new (): HTMLAlcBreadcrumbItemElement;
    };
    interface HTMLAlcCheckboxElement extends Components.AlcCheckbox, HTMLStencilElement {
    }
    var HTMLAlcCheckboxElement: {
        prototype: HTMLAlcCheckboxElement;
        new (): HTMLAlcCheckboxElement;
    };
    interface HTMLAlcDatatableElementEventMap {
        "alc-child-row": any;
        "alc-column-sizing": any;
        "alc-column-visibility": any;
        "alc-destroy": any;
        "alc-draw": any;
        "alc-error": any;
        "alc-init": any;
        "alc-length": any;
        "alc-order": any;
        "alc-page": any;
        "alc-pre-draw": any;
        "alc-pre-init": any;
        "alc-pre-xhr": any;
        "alc-processing": any;
        "alc-request-child": any;
        "alc-search": any;
        "alc-state-load-params": any;
        "alc-state-loaded": any;
        "alc-state-save-params": any;
        "alc-xhr": any;
        "alc-deselect": any;
        "alc-select": any;
        "alc-select-blur": any;
        "alc-select-items": any;
        "alc-select-style": any;
        "alc-user-select": any;
    }
    interface HTMLAlcDatatableElement extends Components.AlcDatatable, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAlcDatatableElementEventMap>(type: K, listener: (this: HTMLAlcDatatableElement, ev: AlcDatatableCustomEvent<HTMLAlcDatatableElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAlcDatatableElementEventMap>(type: K, listener: (this: HTMLAlcDatatableElement, ev: AlcDatatableCustomEvent<HTMLAlcDatatableElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAlcDatatableElement: {
        prototype: HTMLAlcDatatableElement;
        new (): HTMLAlcDatatableElement;
    };
    interface HTMLAlcDetailsElementEventMap {
        "alc-show": null;
        "alc-close": null;
    }
    interface HTMLAlcDetailsElement extends Components.AlcDetails, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAlcDetailsElementEventMap>(type: K, listener: (this: HTMLAlcDetailsElement, ev: AlcDetailsCustomEvent<HTMLAlcDetailsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAlcDetailsElementEventMap>(type: K, listener: (this: HTMLAlcDetailsElement, ev: AlcDetailsCustomEvent<HTMLAlcDetailsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAlcDetailsElement: {
        prototype: HTMLAlcDetailsElement;
        new (): HTMLAlcDetailsElement;
    };
    interface HTMLAlcDrawerElementEventMap {
        "alc-show": null;
        "alc-after-show": null;
        "alc-hide": null;
        "alc-after-hide": null;
    }
    interface HTMLAlcDrawerElement extends Components.AlcDrawer, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAlcDrawerElementEventMap>(type: K, listener: (this: HTMLAlcDrawerElement, ev: AlcDrawerCustomEvent<HTMLAlcDrawerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAlcDrawerElementEventMap>(type: K, listener: (this: HTMLAlcDrawerElement, ev: AlcDrawerCustomEvent<HTMLAlcDrawerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAlcDrawerElement: {
        prototype: HTMLAlcDrawerElement;
        new (): HTMLAlcDrawerElement;
    };
    interface HTMLAlcDropdownElementEventMap {
        "alc-show": null;
        "alc-after-show": null;
        "alc-hide": null;
        "alc-after-hide": null;
    }
    interface HTMLAlcDropdownElement extends Components.AlcDropdown, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAlcDropdownElementEventMap>(type: K, listener: (this: HTMLAlcDropdownElement, ev: AlcDropdownCustomEvent<HTMLAlcDropdownElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAlcDropdownElementEventMap>(type: K, listener: (this: HTMLAlcDropdownElement, ev: AlcDropdownCustomEvent<HTMLAlcDropdownElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAlcDropdownElement: {
        prototype: HTMLAlcDropdownElement;
        new (): HTMLAlcDropdownElement;
    };
    interface HTMLAlcEnvironmentLabelElement extends Components.AlcEnvironmentLabel, HTMLStencilElement {
    }
    var HTMLAlcEnvironmentLabelElement: {
        prototype: HTMLAlcEnvironmentLabelElement;
        new (): HTMLAlcEnvironmentLabelElement;
    };
    interface HTMLAlcEventLabElementEventMap {
        "alc-change": AlcChangeEventTypes;
        "alc-after-change": AlcChangeEventTypes;
    }
    interface HTMLAlcEventLabElement extends Components.AlcEventLab, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAlcEventLabElementEventMap>(type: K, listener: (this: HTMLAlcEventLabElement, ev: AlcEventLabCustomEvent<HTMLAlcEventLabElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAlcEventLabElementEventMap>(type: K, listener: (this: HTMLAlcEventLabElement, ev: AlcEventLabCustomEvent<HTMLAlcEventLabElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAlcEventLabElement: {
        prototype: HTMLAlcEventLabElement;
        new (): HTMLAlcEventLabElement;
    };
    interface HTMLAlcExpanderElementEventMap {
        "alc-show": void;
        "alc-after-show": void;
        "alc-hide": void;
        "alc-after-hide": void;
    }
    interface HTMLAlcExpanderElement extends Components.AlcExpander, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAlcExpanderElementEventMap>(type: K, listener: (this: HTMLAlcExpanderElement, ev: AlcExpanderCustomEvent<HTMLAlcExpanderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAlcExpanderElementEventMap>(type: K, listener: (this: HTMLAlcExpanderElement, ev: AlcExpanderCustomEvent<HTMLAlcExpanderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAlcExpanderElement: {
        prototype: HTMLAlcExpanderElement;
        new (): HTMLAlcExpanderElement;
    };
    /**
     * @cssClass alc-field__label - Aplicada ao elemento `label`.
     * @cssClass alc-field__core - Aplicada ao elemento que agrupa o controle de formulário, mensagem de erro e texto de ajuda.
     */
    interface HTMLAlcFieldElement extends Components.AlcField, HTMLStencilElement {
    }
    var HTMLAlcFieldElement: {
        prototype: HTMLAlcFieldElement;
        new (): HTMLAlcFieldElement;
    };
    interface HTMLAlcFieldCheckerElement extends Components.AlcFieldChecker, HTMLStencilElement {
    }
    var HTMLAlcFieldCheckerElement: {
        prototype: HTMLAlcFieldCheckerElement;
        new (): HTMLAlcFieldCheckerElement;
    };
    interface HTMLAlcFieldsetElement extends Components.AlcFieldset, HTMLStencilElement {
    }
    var HTMLAlcFieldsetElement: {
        prototype: HTMLAlcFieldsetElement;
        new (): HTMLAlcFieldsetElement;
    };
    interface HTMLAlcHeaderElementEventMap {
        "alc-home": null;
    }
    interface HTMLAlcHeaderElement extends Components.AlcHeader, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAlcHeaderElementEventMap>(type: K, listener: (this: HTMLAlcHeaderElement, ev: AlcHeaderCustomEvent<HTMLAlcHeaderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAlcHeaderElementEventMap>(type: K, listener: (this: HTMLAlcHeaderElement, ev: AlcHeaderCustomEvent<HTMLAlcHeaderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAlcHeaderElement: {
        prototype: HTMLAlcHeaderElement;
        new (): HTMLAlcHeaderElement;
    };
    interface HTMLAlcHeaderActionElementEventMap {
        "alc-select": {
    originalEvent: MouseEvent | KeyboardEvent;
  };
    }
    interface HTMLAlcHeaderActionElement extends Components.AlcHeaderAction, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAlcHeaderActionElementEventMap>(type: K, listener: (this: HTMLAlcHeaderActionElement, ev: AlcHeaderActionCustomEvent<HTMLAlcHeaderActionElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAlcHeaderActionElementEventMap>(type: K, listener: (this: HTMLAlcHeaderActionElement, ev: AlcHeaderActionCustomEvent<HTMLAlcHeaderActionElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAlcHeaderActionElement: {
        prototype: HTMLAlcHeaderActionElement;
        new (): HTMLAlcHeaderActionElement;
    };
    interface HTMLAlcHeaderIdElementEventMap {
        "alc-home": null;
    }
    interface HTMLAlcHeaderIdElement extends Components.AlcHeaderId, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAlcHeaderIdElementEventMap>(type: K, listener: (this: HTMLAlcHeaderIdElement, ev: AlcHeaderIdCustomEvent<HTMLAlcHeaderIdElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAlcHeaderIdElementEventMap>(type: K, listener: (this: HTMLAlcHeaderIdElement, ev: AlcHeaderIdCustomEvent<HTMLAlcHeaderIdElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAlcHeaderIdElement: {
        prototype: HTMLAlcHeaderIdElement;
        new (): HTMLAlcHeaderIdElement;
    };
    interface HTMLAlcHeaderNotificationsElementEventMap {
        "alc-click": null;
    }
    interface HTMLAlcHeaderNotificationsElement extends Components.AlcHeaderNotifications, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAlcHeaderNotificationsElementEventMap>(type: K, listener: (this: HTMLAlcHeaderNotificationsElement, ev: AlcHeaderNotificationsCustomEvent<HTMLAlcHeaderNotificationsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAlcHeaderNotificationsElementEventMap>(type: K, listener: (this: HTMLAlcHeaderNotificationsElement, ev: AlcHeaderNotificationsCustomEvent<HTMLAlcHeaderNotificationsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAlcHeaderNotificationsElement: {
        prototype: HTMLAlcHeaderNotificationsElement;
        new (): HTMLAlcHeaderNotificationsElement;
    };
    interface HTMLAlcHeaderV1ElementEventMap {
        "alc-home": null;
    }
    interface HTMLAlcHeaderV1Element extends Components.AlcHeaderV1, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAlcHeaderV1ElementEventMap>(type: K, listener: (this: HTMLAlcHeaderV1Element, ev: AlcHeaderV1CustomEvent<HTMLAlcHeaderV1ElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAlcHeaderV1ElementEventMap>(type: K, listener: (this: HTMLAlcHeaderV1Element, ev: AlcHeaderV1CustomEvent<HTMLAlcHeaderV1ElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAlcHeaderV1Element: {
        prototype: HTMLAlcHeaderV1Element;
        new (): HTMLAlcHeaderV1Element;
    };
    interface HTMLAlcIconElement extends Components.AlcIcon, HTMLStencilElement {
    }
    var HTMLAlcIconElement: {
        prototype: HTMLAlcIconElement;
        new (): HTMLAlcIconElement;
    };
    interface HTMLAlcInputFileElementEventMap {
        "alc-file-selected": AlcFileSelectedEvent;
    }
    interface HTMLAlcInputFileElement extends Components.AlcInputFile, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAlcInputFileElementEventMap>(type: K, listener: (this: HTMLAlcInputFileElement, ev: AlcInputFileCustomEvent<HTMLAlcInputFileElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAlcInputFileElementEventMap>(type: K, listener: (this: HTMLAlcInputFileElement, ev: AlcInputFileCustomEvent<HTMLAlcInputFileElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAlcInputFileElement: {
        prototype: HTMLAlcInputFileElement;
        new (): HTMLAlcInputFileElement;
    };
    interface HTMLAlcLoadingElement extends Components.AlcLoading, HTMLStencilElement {
    }
    var HTMLAlcLoadingElement: {
        prototype: HTMLAlcLoadingElement;
        new (): HTMLAlcLoadingElement;
    };
    interface HTMLAlcMenuElement extends Components.AlcMenu, HTMLStencilElement {
    }
    var HTMLAlcMenuElement: {
        prototype: HTMLAlcMenuElement;
        new (): HTMLAlcMenuElement;
    };
    interface HTMLAlcMenuItemElementEventMap {
        "alc-select": {
    originalEvent: MouseEvent | KeyboardEvent;
  };
    }
    interface HTMLAlcMenuItemElement extends Components.AlcMenuItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAlcMenuItemElementEventMap>(type: K, listener: (this: HTMLAlcMenuItemElement, ev: AlcMenuItemCustomEvent<HTMLAlcMenuItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAlcMenuItemElementEventMap>(type: K, listener: (this: HTMLAlcMenuItemElement, ev: AlcMenuItemCustomEvent<HTMLAlcMenuItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAlcMenuItemElement: {
        prototype: HTMLAlcMenuItemElement;
        new (): HTMLAlcMenuItemElement;
    };
    interface HTMLAlcMenuItemThemeElement extends Components.AlcMenuItemTheme, HTMLStencilElement {
    }
    var HTMLAlcMenuItemThemeElement: {
        prototype: HTMLAlcMenuItemThemeElement;
        new (): HTMLAlcMenuItemThemeElement;
    };
    interface HTMLAlcMenuLinkElementEventMap {
        "alc-select": {
    originalEvent: MouseEvent | KeyboardEvent;
  };
    }
    interface HTMLAlcMenuLinkElement extends Components.AlcMenuLink, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAlcMenuLinkElementEventMap>(type: K, listener: (this: HTMLAlcMenuLinkElement, ev: AlcMenuLinkCustomEvent<HTMLAlcMenuLinkElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAlcMenuLinkElementEventMap>(type: K, listener: (this: HTMLAlcMenuLinkElement, ev: AlcMenuLinkCustomEvent<HTMLAlcMenuLinkElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAlcMenuLinkElement: {
        prototype: HTMLAlcMenuLinkElement;
        new (): HTMLAlcMenuLinkElement;
    };
    interface HTMLAlcModalElementEventMap {
        "alc-after-show": null;
        "alc-hide": {
    from: 'header-button' | 'footer-button' | 'keyboard' | 'overlay';
  };
        "alc-after-hide": null;
        "alc-focus-after-hide": null;
    }
    interface HTMLAlcModalElement extends Components.AlcModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAlcModalElementEventMap>(type: K, listener: (this: HTMLAlcModalElement, ev: AlcModalCustomEvent<HTMLAlcModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAlcModalElementEventMap>(type: K, listener: (this: HTMLAlcModalElement, ev: AlcModalCustomEvent<HTMLAlcModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAlcModalElement: {
        prototype: HTMLAlcModalElement;
        new (): HTMLAlcModalElement;
    };
    interface HTMLAlcNavElement extends Components.AlcNav, HTMLStencilElement {
    }
    var HTMLAlcNavElement: {
        prototype: HTMLAlcNavElement;
        new (): HTMLAlcNavElement;
    };
    interface HTMLAlcNavPanelElementEventMap {
        "alc-state-change": AlcStateEventTypes;
        "alc-state-request": AlcStateEventTypes;
    }
    interface HTMLAlcNavPanelElement extends Components.AlcNavPanel, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAlcNavPanelElementEventMap>(type: K, listener: (this: HTMLAlcNavPanelElement, ev: AlcNavPanelCustomEvent<HTMLAlcNavPanelElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAlcNavPanelElementEventMap>(type: K, listener: (this: HTMLAlcNavPanelElement, ev: AlcNavPanelCustomEvent<HTMLAlcNavPanelElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAlcNavPanelElement: {
        prototype: HTMLAlcNavPanelElement;
        new (): HTMLAlcNavPanelElement;
    };
    interface HTMLAlcPaginationElementEventMap {
        "alc-change": {
    from: number;
    to: number;
    using: 'isFirst' | 'isPrev' | 'isLast' | 'isNext' | 'isSelect'
  };
    }
    interface HTMLAlcPaginationElement extends Components.AlcPagination, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAlcPaginationElementEventMap>(type: K, listener: (this: HTMLAlcPaginationElement, ev: AlcPaginationCustomEvent<HTMLAlcPaginationElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAlcPaginationElementEventMap>(type: K, listener: (this: HTMLAlcPaginationElement, ev: AlcPaginationCustomEvent<HTMLAlcPaginationElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAlcPaginationElement: {
        prototype: HTMLAlcPaginationElement;
        new (): HTMLAlcPaginationElement;
    };
    interface HTMLAlcPopupElement extends Components.AlcPopup, HTMLStencilElement {
    }
    var HTMLAlcPopupElement: {
        prototype: HTMLAlcPopupElement;
        new (): HTMLAlcPopupElement;
    };
    interface HTMLAlcRadioElement extends Components.AlcRadio, HTMLStencilElement {
    }
    var HTMLAlcRadioElement: {
        prototype: HTMLAlcRadioElement;
        new (): HTMLAlcRadioElement;
    };
    interface HTMLAlcScrollPanelElement extends Components.AlcScrollPanel, HTMLStencilElement {
    }
    var HTMLAlcScrollPanelElement: {
        prototype: HTMLAlcScrollPanelElement;
        new (): HTMLAlcScrollPanelElement;
    };
    interface HTMLAlcSidepanelElementEventMap {
        "alc-state-change": {state: {visible: boolean}};
        "alc-state-request": {state: {visible: boolean}};
    }
    interface HTMLAlcSidepanelElement extends Components.AlcSidepanel, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAlcSidepanelElementEventMap>(type: K, listener: (this: HTMLAlcSidepanelElement, ev: AlcSidepanelCustomEvent<HTMLAlcSidepanelElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAlcSidepanelElementEventMap>(type: K, listener: (this: HTMLAlcSidepanelElement, ev: AlcSidepanelCustomEvent<HTMLAlcSidepanelElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAlcSidepanelElement: {
        prototype: HTMLAlcSidepanelElement;
        new (): HTMLAlcSidepanelElement;
    };
    interface HTMLAlcSkipLinkElement extends Components.AlcSkipLink, HTMLStencilElement {
    }
    var HTMLAlcSkipLinkElement: {
        prototype: HTMLAlcSkipLinkElement;
        new (): HTMLAlcSkipLinkElement;
    };
    interface HTMLAlcSkipToNavElement extends Components.AlcSkipToNav, HTMLStencilElement {
    }
    var HTMLAlcSkipToNavElement: {
        prototype: HTMLAlcSkipToNavElement;
        new (): HTMLAlcSkipToNavElement;
    };
    interface HTMLAlcSortIndicatorElement extends Components.AlcSortIndicator, HTMLStencilElement {
    }
    var HTMLAlcSortIndicatorElement: {
        prototype: HTMLAlcSortIndicatorElement;
        new (): HTMLAlcSortIndicatorElement;
    };
    interface HTMLAlcTabElement extends Components.AlcTab, HTMLStencilElement {
    }
    var HTMLAlcTabElement: {
        prototype: HTMLAlcTabElement;
        new (): HTMLAlcTabElement;
    };
    interface HTMLAlcTabButtonElementEventMap {
        "alc-click": {
    tab: string
  };
        "alc-next": null;
        "alc-previous": null;
        "alc-first": null;
        "alc-last": null;
    }
    interface HTMLAlcTabButtonElement extends Components.AlcTabButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAlcTabButtonElementEventMap>(type: K, listener: (this: HTMLAlcTabButtonElement, ev: AlcTabButtonCustomEvent<HTMLAlcTabButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAlcTabButtonElementEventMap>(type: K, listener: (this: HTMLAlcTabButtonElement, ev: AlcTabButtonCustomEvent<HTMLAlcTabButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAlcTabButtonElement: {
        prototype: HTMLAlcTabButtonElement;
        new (): HTMLAlcTabButtonElement;
    };
    interface HTMLAlcTableElement extends Components.AlcTable, HTMLStencilElement {
    }
    var HTMLAlcTableElement: {
        prototype: HTMLAlcTableElement;
        new (): HTMLAlcTableElement;
    };
    interface HTMLAlcTabsElementEventMap {
        "alc-change": {
    tab: string
  };
    }
    interface HTMLAlcTabsElement extends Components.AlcTabs, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAlcTabsElementEventMap>(type: K, listener: (this: HTMLAlcTabsElement, ev: AlcTabsCustomEvent<HTMLAlcTabsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAlcTabsElementEventMap>(type: K, listener: (this: HTMLAlcTabsElement, ev: AlcTabsCustomEvent<HTMLAlcTabsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAlcTabsElement: {
        prototype: HTMLAlcTabsElement;
        new (): HTMLAlcTabsElement;
    };
    interface HTMLAlcThemeElement extends Components.AlcTheme, HTMLStencilElement {
    }
    var HTMLAlcThemeElement: {
        prototype: HTMLAlcThemeElement;
        new (): HTMLAlcThemeElement;
    };
    interface HTMLAlcTooltipElementEventMap {
        "alc-show": {
    from: 'click' | 'hover' | 'focus' | 'method';
  };
        "alc-after-show": null;
        "alc-hide": {
    from: 'click' | 'hover' | 'focus' | 'keyboard' | 'method';
  };
        "alc-after-hide": null;
    }
    interface HTMLAlcTooltipElement extends Components.AlcTooltip, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAlcTooltipElementEventMap>(type: K, listener: (this: HTMLAlcTooltipElement, ev: AlcTooltipCustomEvent<HTMLAlcTooltipElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAlcTooltipElementEventMap>(type: K, listener: (this: HTMLAlcTooltipElement, ev: AlcTooltipCustomEvent<HTMLAlcTooltipElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAlcTooltipElement: {
        prototype: HTMLAlcTooltipElement;
        new (): HTMLAlcTooltipElement;
    };
    interface HTMLAlcUserElementEventMap {
        "alc-logout": any;
    }
    interface HTMLAlcUserElement extends Components.AlcUser, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAlcUserElementEventMap>(type: K, listener: (this: HTMLAlcUserElement, ev: AlcUserCustomEvent<HTMLAlcUserElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAlcUserElementEventMap>(type: K, listener: (this: HTMLAlcUserElement, ev: AlcUserCustomEvent<HTMLAlcUserElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAlcUserElement: {
        prototype: HTMLAlcUserElement;
        new (): HTMLAlcUserElement;
    };
    interface HTMLAlcUserMenuElementEventMap {
        "alc-logout": any;
    }
    interface HTMLAlcUserMenuElement extends Components.AlcUserMenu, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAlcUserMenuElementEventMap>(type: K, listener: (this: HTMLAlcUserMenuElement, ev: AlcUserMenuCustomEvent<HTMLAlcUserMenuElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAlcUserMenuElementEventMap>(type: K, listener: (this: HTMLAlcUserMenuElement, ev: AlcUserMenuCustomEvent<HTMLAlcUserMenuElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAlcUserMenuElement: {
        prototype: HTMLAlcUserMenuElement;
        new (): HTMLAlcUserMenuElement;
    };
    interface HTMLAlcViewMoreElement extends Components.AlcViewMore, HTMLStencilElement {
    }
    var HTMLAlcViewMoreElement: {
        prototype: HTMLAlcViewMoreElement;
        new (): HTMLAlcViewMoreElement;
    };
    interface HTMLElementTagNameMap {
        "alc-alert": HTMLAlcAlertElement;
        "alc-autocomplete": HTMLAlcAutocompleteElement;
        "alc-badge": HTMLAlcBadgeElement;
        "alc-breadcrumb": HTMLAlcBreadcrumbElement;
        "alc-breadcrumb-item": HTMLAlcBreadcrumbItemElement;
        "alc-checkbox": HTMLAlcCheckboxElement;
        "alc-datatable": HTMLAlcDatatableElement;
        "alc-details": HTMLAlcDetailsElement;
        "alc-drawer": HTMLAlcDrawerElement;
        "alc-dropdown": HTMLAlcDropdownElement;
        "alc-environment-label": HTMLAlcEnvironmentLabelElement;
        "alc-event-lab": HTMLAlcEventLabElement;
        "alc-expander": HTMLAlcExpanderElement;
        "alc-field": HTMLAlcFieldElement;
        "alc-field-checker": HTMLAlcFieldCheckerElement;
        "alc-fieldset": HTMLAlcFieldsetElement;
        "alc-header": HTMLAlcHeaderElement;
        "alc-header-action": HTMLAlcHeaderActionElement;
        "alc-header-id": HTMLAlcHeaderIdElement;
        "alc-header-notifications": HTMLAlcHeaderNotificationsElement;
        "alc-header-v1": HTMLAlcHeaderV1Element;
        "alc-icon": HTMLAlcIconElement;
        "alc-input-file": HTMLAlcInputFileElement;
        "alc-loading": HTMLAlcLoadingElement;
        "alc-menu": HTMLAlcMenuElement;
        "alc-menu-item": HTMLAlcMenuItemElement;
        "alc-menu-item-theme": HTMLAlcMenuItemThemeElement;
        "alc-menu-link": HTMLAlcMenuLinkElement;
        "alc-modal": HTMLAlcModalElement;
        "alc-nav": HTMLAlcNavElement;
        "alc-nav-panel": HTMLAlcNavPanelElement;
        "alc-pagination": HTMLAlcPaginationElement;
        "alc-popup": HTMLAlcPopupElement;
        "alc-radio": HTMLAlcRadioElement;
        "alc-scroll-panel": HTMLAlcScrollPanelElement;
        "alc-sidepanel": HTMLAlcSidepanelElement;
        "alc-skip-link": HTMLAlcSkipLinkElement;
        "alc-skip-to-nav": HTMLAlcSkipToNavElement;
        "alc-sort-indicator": HTMLAlcSortIndicatorElement;
        "alc-tab": HTMLAlcTabElement;
        "alc-tab-button": HTMLAlcTabButtonElement;
        "alc-table": HTMLAlcTableElement;
        "alc-tabs": HTMLAlcTabsElement;
        "alc-theme": HTMLAlcThemeElement;
        "alc-tooltip": HTMLAlcTooltipElement;
        "alc-user": HTMLAlcUserElement;
        "alc-user-menu": HTMLAlcUserMenuElement;
        "alc-view-more": HTMLAlcViewMoreElement;
    }
}
declare namespace LocalJSX {
    /**
     * Vamos lá testar.
     * Ver se isso vai funcionar.
     * ^^^^^ [1]
     * @picWidget pic-alert
     */
    interface AlcAlert {
        /**
          * Define se o alert pode ser dispensado pelo usuário.
         */
        "dismissible"?: boolean;
        /**
          * Evento disparado quando o alert é dispensado.
         */
        "onAlc-after-hide"?: (event: AlcAlertCustomEvent<null>) => void;
        /**
          * Evento disparado quando o alert é dispensado.
         */
        "onAlc-hide"?: (event: AlcAlertCustomEvent<null>) => void;
        /**
          * O tipo do alert, de acordo com a natureza da mensagem nele contido.
         */
        "type"?: Type;
        /**
          * Indica se o alert está visível. Pode-se usar essa propriedade em vez dos métodos show/hide.
         */
        "visible"?: boolean;
    }
    interface AlcAutocomplete {
        /**
          * Desabilita input
         */
        "disabled"?: boolean;
        /**
          * Indica os atributos dos dados que serão exibidos na lista
         */
        "displayKeys"?: string;
        /**
          * Indica se houve um erro ao carregar os dados
         */
        "error"?: boolean;
        "errorMsg"?: string;
        /**
          * Mensagem de ajuda
         */
        "hint"?: string;
        /**
          * Itens que serão listado no componente
         */
        "items"?: Array<{ [key: string]: string }>;
        /**
          * Label do input
         */
        "label"?: string;
        /**
          * Indica o tipo de visualização da lista
         */
        "listDirection"?: 'horizontal' | 'vertical';
        /**
          * Indica se os dados estão sendo carregados
         */
        "loading"?: boolean;
        /**
          * Evento emitido sempre que o item selecionado for alterado. O valor emitido será o mesmo que pode ser obtido pelo método `getSelected()`.
         */
        "onAlc-change"?: (event: AlcAutocompleteCustomEvent<any>) => void;
        /**
          * Texto dentro do input
         */
        "placeholder"?: string;
        /**
          * Indica se o input é obrigatório
         */
        "required"?: boolean;
    }
    interface AlcBadge {
        /**
          * Define a cor do badge. Pode ser 'primary', 'secondary', 'success', 'warning', 'error', 'info' ou 'neutral'.
         */
        "color"?: 'primary' | 'secondary' | 'success' | 'warning' | 'error' | 'info' | 'neutral';
        /**
          * Define se o badge deve ser exibido como um contador.
         */
        "count"?: boolean;
        /**
          * Define se o badge deve ser exibido como um ponto (dot) sem conteúdo.
         */
        "dot"?: boolean;
        /**
          * Define se o badge deve ser exibido ou não.
         */
        "hidden"?: boolean;
        /**
          * O texto a ser exibido dentro do badge (ex: "99+" ou "Novo").
         */
        "label"?: string;
        /**
          * Define se o badge deve aparecer com um contorno ao invés de ser preenchido.
         */
        "outlined"?: boolean;
        /**
          * Define a posição do badge: 'default', 'floating' ou 'inline'.
         */
        "position"?: 'default' | 'floating' | 'inline';
        /**
          * Define se o badge deve ter animação de pulsação.
         */
        "pulsate"?: boolean;
    }
    interface AlcBreadcrumb {
    }
    interface AlcBreadcrumbItem {
        /**
          * Indica o nome do icone a ser renderizado
         */
        "iconName"?: string;
        /**
          * Indica a label do breadcrumb
         */
        "label"?: string;
        /**
          * Indica a url do link, pode-se usar o slot default para adicionar o elemento de navegação
         */
        "url"?: string;
    }
    interface AlcCheckbox {
        /**
          * Texto de mensagem de erro.
         */
        "errorMsg"?: string;
        /**
          * Texto de ajuda.
         */
        "hint"?: string;
        /**
          * Texto do label do input. Há opção de adicionar o elemento label pelo slot "label".
         */
        "label"?: string;
    }
    interface AlcDatatable {
        /**
          * Os dados da tabela
         */
        "data"?: string | JSON;
        /**
          * Faz com que o componente aguarde a chamada ao método `start()` para iniciar o DataTable.
         */
        "deferStart"?: boolean;
        /**
          * Ver documentação do DataTables.net
         */
        "onAlc-child-row"?: (event: AlcDatatableCustomEvent<any>) => void;
        /**
          * Ver documentação do DataTables.net
         */
        "onAlc-column-sizing"?: (event: AlcDatatableCustomEvent<any>) => void;
        /**
          * Ver documentação do DataTables.net
         */
        "onAlc-column-visibility"?: (event: AlcDatatableCustomEvent<any>) => void;
        /**
          * Ver documentação do DataTables.net
         */
        "onAlc-deselect"?: (event: AlcDatatableCustomEvent<any>) => void;
        /**
          * Ver documentação do DataTables.net
         */
        "onAlc-destroy"?: (event: AlcDatatableCustomEvent<any>) => void;
        /**
          * Ver documentação do DataTables.net
         */
        "onAlc-draw"?: (event: AlcDatatableCustomEvent<any>) => void;
        /**
          * Ver documentação do DataTables.net
         */
        "onAlc-error"?: (event: AlcDatatableCustomEvent<any>) => void;
        /**
          * Ver documentação do DataTables.net
         */
        "onAlc-init"?: (event: AlcDatatableCustomEvent<any>) => void;
        /**
          * Ver documentação do DataTables.net
         */
        "onAlc-length"?: (event: AlcDatatableCustomEvent<any>) => void;
        /**
          * Ver documentação do DataTables.net
         */
        "onAlc-order"?: (event: AlcDatatableCustomEvent<any>) => void;
        /**
          * Ver documentação do DataTables.net
         */
        "onAlc-page"?: (event: AlcDatatableCustomEvent<any>) => void;
        /**
          * Ver documentação do DataTables.net
         */
        "onAlc-pre-draw"?: (event: AlcDatatableCustomEvent<any>) => void;
        /**
          * Ver documentação do DataTables.net
         */
        "onAlc-pre-init"?: (event: AlcDatatableCustomEvent<any>) => void;
        /**
          * Ver documentação do DataTables.net
         */
        "onAlc-pre-xhr"?: (event: AlcDatatableCustomEvent<any>) => void;
        /**
          * Ver documentação do DataTables.net
         */
        "onAlc-processing"?: (event: AlcDatatableCustomEvent<any>) => void;
        /**
          * Ver documentação do DataTables.net
         */
        "onAlc-request-child"?: (event: AlcDatatableCustomEvent<any>) => void;
        /**
          * Ver documentação do DataTables.net
         */
        "onAlc-search"?: (event: AlcDatatableCustomEvent<any>) => void;
        /**
          * Ver documentação do DataTables.net
         */
        "onAlc-select"?: (event: AlcDatatableCustomEvent<any>) => void;
        /**
          * Ver documentação do DataTables.net
         */
        "onAlc-select-blur"?: (event: AlcDatatableCustomEvent<any>) => void;
        /**
          * Ver documentação do DataTables.net
         */
        "onAlc-select-items"?: (event: AlcDatatableCustomEvent<any>) => void;
        /**
          * Ver documentação do DataTables.net
         */
        "onAlc-select-style"?: (event: AlcDatatableCustomEvent<any>) => void;
        /**
          * Ver documentação do DataTables.net
         */
        "onAlc-state-load-params"?: (event: AlcDatatableCustomEvent<any>) => void;
        /**
          * Ver documentação do DataTables.net
         */
        "onAlc-state-loaded"?: (event: AlcDatatableCustomEvent<any>) => void;
        /**
          * Ver documentação do DataTables.net
         */
        "onAlc-state-save-params"?: (event: AlcDatatableCustomEvent<any>) => void;
        /**
          * Ver documentação do DataTables.net
         */
        "onAlc-user-select"?: (event: AlcDatatableCustomEvent<any>) => void;
        /**
          * Ver documentação do DataTables.net
         */
        "onAlc-xhr"?: (event: AlcDatatableCustomEvent<any>) => void;
        /**
          * As opções da tabela
         */
        "options"?: string | JSON;
        /**
          * Define o atributo `id` para a tabela (tag `table`), quando ela é criada automaticamente pelo componente. É você não incluir a tag `table` e usar a opção `stateSave`, é necessário definir esse atributo.
         */
        "tableId"?: string;
    }
    interface AlcDetails {
        /**
          * Desativa o componente.
         */
        "disabled"?: boolean;
        /**
          * Evento disparado quando a details fechar
         */
        "onAlc-close"?: (event: AlcDetailsCustomEvent<null>) => void;
        /**
          * Evento disparado quando a details abrir
         */
        "onAlc-show"?: (event: AlcDetailsCustomEvent<null>) => void;
        /**
          * Mantém aberto.
         */
        "opened"?: boolean;
        /**
          * Insere o summary do details.
         */
        "summary": string;
    }
    interface AlcDrawer {
        /**
          * @type Element ou ID
          * @description Elemento ou ID do elemento que será focado quando o drawer fechar.
         */
        "elementToFocus"?: HTMLElement | string;
        /**
          * @type boolean
          * @description Define se o drawer está aberto ou fechado.
         */
        "isVisible"?: boolean;
        /**
          * Evento disparado quando o drawer fechou
         */
        "onAlc-after-hide"?: (event: AlcDrawerCustomEvent<null>) => void;
        /**
          * Evento disparado quando o drawer abriu
         */
        "onAlc-after-show"?: (event: AlcDrawerCustomEvent<null>) => void;
        /**
          * Evento disparado quando o drawer vai fechar
         */
        "onAlc-hide"?: (event: AlcDrawerCustomEvent<null>) => void;
        /**
          * Evento disparado quando o drawer vai abrir
         */
        "onAlc-show"?: (event: AlcDrawerCustomEvent<null>) => void;
    }
    interface AlcDropdown {
        /**
          * Nome do evento que, ao ocorrer no conteúdo do dropdown, vai fazer com que ele seja fechado. Podem ser informados vários eventos, separados por um espaço em branco.
         */
        "hideOn"?: string;
        /**
          * Evento disparado quando o dropdown fechou
         */
        "onAlc-after-hide"?: (event: AlcDropdownCustomEvent<null>) => void;
        /**
          * Evento disparado quando o dropdown abriu
         */
        "onAlc-after-show"?: (event: AlcDropdownCustomEvent<null>) => void;
        /**
          * Evento disparado quando o dropdown vai fechar
         */
        "onAlc-hide"?: (event: AlcDropdownCustomEvent<null>) => void;
        /**
          * Evento disparado quando o dropdown vai abrir
         */
        "onAlc-show"?: (event: AlcDropdownCustomEvent<null>) => void;
        /**
          * Indica se o dropdown esta aberto ou não. Pode-se usar essa propriedade em vez dos métodos show/hide.
         */
        "open"?: boolean;
    }
    interface AlcEnvironmentLabel {
        "env": EnvType;
    }
    interface AlcEventLab {
        "onAlc-after-change"?: (event: AlcEventLabCustomEvent<AlcChangeEventTypes>) => void;
        "onAlc-change"?: (event: AlcEventLabCustomEvent<AlcChangeEventTypes>) => void;
    }
    interface AlcExpander {
        /**
          * Oculta o rótulo do controle, mantendo-o acessível para leitores de tela.
         */
        "hideLabel"?: boolean;
        /**
          * Rótulo do elemento que controla a abertura e o fechamento do expander.
         */
        "label": string;
        /**
          * Evento disparado após fechar.
         */
        "onAlc-after-hide"?: (event: AlcExpanderCustomEvent<void>) => void;
        /**
          * Evento disparado após abrir.
         */
        "onAlc-after-show"?: (event: AlcExpanderCustomEvent<void>) => void;
        /**
          * Evento disparado antes de fechar. Cancelável.
         */
        "onAlc-hide"?: (event: AlcExpanderCustomEvent<void>) => void;
        /**
          * Evento disparado antes de abrir. Cancelável.
         */
        "onAlc-show"?: (event: AlcExpanderCustomEvent<void>) => void;
        /**
          * Define se o expander está aberto ou fechado.
         */
        "open"?: boolean;
    }
    /**
     * @cssClass alc-field__label - Aplicada ao elemento `label`.
     * @cssClass alc-field__core - Aplicada ao elemento que agrupa o controle de formulário, mensagem de erro e texto de ajuda.
     */
    interface AlcField {
        /**
          * Texto de mensagem de erro.
         */
        "errorMsg"?: string;
        /**
          * Texto de ajuda.
         */
        "hint"?: string;
        /**
          * Texto do label do input.
         */
        "label"?: string;
        /**
          * Indica se o input é obrigatório.
         */
        "required"?: boolean;
    }
    interface AlcFieldChecker {
        /**
          * Verifica o formulário quando houver submissão.
         */
        "checkOnSubmit"?: boolean;
    }
    interface AlcFieldset {
        /**
          * Texto de mensagem de erro.
         */
        "errorMsg"?: string;
        /**
          * Texto de ajuda.
         */
        "hint"?: string;
        /**
          * Texto da legenda do fieldset.
         */
        "legend": string;
        /**
          * Indica se o fieldset é obrigatório.
         */
        "required"?: boolean;
    }
    interface AlcHeader {
        /**
          * Descrição do sistema. Usualmente, o nome do sistema (se usada a sigla em "name"), descrição ou um complemento ao nome do sistema.
         */
        "description"?: string;
        /**
          * URL para a página inicial do sistema.
         */
        "homeUrl": string;
        /**
          * O nome do sistema.
         */
        "name": string;
        /**
          * Evento disparado quando o usuário aciona o link para a página inicial. Executar `preventDefault()` evita que a navegação para a página inicial aconteça.
         */
        "onAlc-home"?: (event: AlcHeaderCustomEvent<null>) => void;
    }
    interface AlcHeaderAction {
        /**
          * Nome do ícone a ser exibido.
         */
        "iconName"?: string;
        /**
          * Evento disparado quando o usuário aciona o suporte.
         */
        "onAlc-select"?: (event: AlcHeaderActionCustomEvent<{
    originalEvent: MouseEvent | KeyboardEvent;
  }>) => void;
        /**
          * URL para a página de suporte. Usado quando a propriedade `variant` é `link` ou `menu-link`.
         */
        "url"?: string;
        /**
          * Define o tipo de elemento a ser renderizado.
         */
        "variant"?: 'button' | 'menu-item' | 'link' | 'menu-link';
    }
    interface AlcHeaderId {
        /**
          * Descrição do sistema. Usualmente, o nome do sistema (se usada a sigla em "name"), o nome de um módulo, ou um complemento ao nome do sistema.
         */
        "description"?: string;
        /**
          * URL para a página inicial do sistema. O nome do sistema será transformado em um link para essa URL.
         */
        "homeUrl": string;
        /**
          * O nome do sistema. Será mostrado no cabeçalho, que deve estar presente em todas do sistema.
         */
        "name": string;
        /**
          * Evento disparado quando o usuário aciona o link para a página inicial. Executar `preventDefault()` evita que a navegação para a página inicial aconteça.
         */
        "onAlc-home"?: (event: AlcHeaderIdCustomEvent<null>) => void;
    }
    interface AlcHeaderNotifications {
        /**
          * Número de notificações a serem exibidas no botão.
         */
        "notifications"?: number;
        /**
          * Evento disparado quando o usuário clica nas notificações. Pode ser cancelado.
         */
        "onAlc-click"?: (event: AlcHeaderNotificationsCustomEvent<null>) => void;
        /**
          * URL para a página de notificações. Usado quando a propriedade `variant` é `link`. Se o `variant` for `button`, esse atributo será ignorado.
         */
        "url"?: string;
        /**
          * Define o tipo de elemento a ser renderizado. Pode ser um button ou um link.
         */
        "variant"?: 'button' | 'link';
    }
    interface AlcHeaderV1 {
        /**
          * URL para a página inicial do sistema. O nome do sistema será transformado em um link para essa URL.
         */
        "homeUrl"?: string;
        /**
          * O nome do sistema. Será mostrado no cabeçalho, que deve estar presente em todas do sistema.
         */
        "name"?: string;
        /**
          * Evento disparado quando o usuário aciona o link para a página inicial. Executar `preventDefault()` evita que a navegação para a página inicial aconteça.
         */
        "onAlc-home"?: (event: AlcHeaderV1CustomEvent<null>) => void;
    }
    interface AlcIcon {
        /**
          * Define se o ícone deve ser espelhado horizontalmente quando `dir` for `"rtl"`.
         */
        "flipRtl"?: boolean;
        /**
          * Uma combinação de `name` e `src`. Se o valor for entendido como a URL de um `src`, ele definirá a propriedade `src`. Caso contrário, assume-se como o nome de ícone da biblioteca, e define a propriedade `name`.
         */
        "icon"?: string;
        /**
          * Equivalente textual do ícone. Seu uso é semelhante ao atributo `alt` de uma imagem. Esse texto será lido por software leitor de tela, e utilizado no lugar do ícone se por qualquer motivo a imagem não puder ser carregada no navegador.
         */
        "label": string;
        /**
          * Se ativado, a carga do ícone ocorrerá somente quando o componente estiver visível na _viewport_.
         */
        "lazy"?: boolean;
        /**
          * Nome do ícone que será mostrado. Deve ser um dos nomes de ícone da biblioteca.
         */
        "name"?: string;
        /**
          * Quando definido como `true`, o conteúdo SVG obtido via HTTP passará por uma limpeza. Conteúdo que contenha algum elemento `<script>` ou atributo que comece com `on`, como `onclick`, será descartado. Sendo descartado, a imagem não será mostrada.
          * @default false
         */
        "sanitize"?: boolean;
        /**
          * Especifica o `src` de um arquivo SVG a ser usado como ícone.
         */
        "src"?: string;
    }
    interface AlcInputFile {
        /**
          * Define tipos de arquivos específicos para envio. Padrão: Todos.
         */
        "accept"?: string;
        /**
          * Define o tipo de botão que vai ser renderizado.
         */
        "buttonType"?: 'secondary' | undefined;
        /**
          * Desativa o componente.
         */
        "disabled"?: boolean;
        /**
          * Ícone a ser exibido no início do input.
         */
        "iconName"?: string;
        /**
          * Obrigatório. ID do input.
         */
        "idInput": string;
        /**
          * Modo de visualização do componente. Pode ser 'button', 'input' ou 'dropzone'.
         */
        "mode"?: 'button' | 'input' | 'dropzone';
        /**
          * Altera o funcionamento para aceitar vários arquivos.
         */
        "multiple"?: boolean;
        "onAlc-file-selected"?: (event: AlcInputFileCustomEvent<AlcFileSelectedEvent>) => void;
        /**
          * Indica se é obrigatório.
         */
        "required"?: boolean;
    }
    interface AlcLoading {
        /**
          * Define se o indicador de carregamento aparece na tela. Quando o valor é `true` mostra o componente e quando o valor é `false` oculta.
         */
        "active"?: boolean;
        /**
          * Texto anunciado ao leitor de tela quando mudar o estado para `active=false`.
         */
        "endMsg"?: string;
        /**
          * Texto mostrado na tela enquanto estiver carregando e também anunciado no leitor de tela quando o estado mudar para `active=true`.
         */
        "label"?: string;
        /**
          * Define a variação visual do componente: - `'full-screen'`: ocupa a tela inteira. - `'container'`: ocupa o elemento pai. - `'inline'`: utilizado dentro de textos. - `'button'`: utilizado dentro de botões.
         */
        "variant"?: 'full-screen' | 'container' | 'inline' | 'button';
    }
    interface AlcMenu {
    }
    interface AlcMenuItem {
        /**
          * Indica se o menu-item está ou não marcado. Usado quando `type=checkbox` ou `type=radio`.
         */
        "checked"?: boolean;
        /**
          * Indica se o menu-item está desabilitado.
         */
        "disabled"?: boolean;
        /**
          * Evento disparado quando o menu-item é selecionado.
         */
        "onAlc-select"?: (event: AlcMenuItemCustomEvent<{
    originalEvent: MouseEvent | KeyboardEvent;
  }>) => void;
        /**
          * Tipo do menu-item.
         */
        "type"?: 'normal' | 'checkbox' | 'radio';
        /**
          * Valor do menu-item, que pode ser utilizado para identificar que item foi selecionado.
         */
        "value"?: any;
    }
    interface AlcMenuItemTheme {
    }
    interface AlcMenuLink {
        /**
          * Indica se o menu-link está desabilitado.
         */
        "disabled"?: boolean;
        /**
          * Evento disparado quando o menu-link é selecionado.
         */
        "onAlc-select"?: (event: AlcMenuLinkCustomEvent<{
    originalEvent: MouseEvent | KeyboardEvent;
  }>) => void;
        /**
          * Valor do menu-link, que pode ser utilizado para identificar que link foi selecionado.
         */
        "value"?: any;
    }
    interface AlcModal {
        /**
          * Título da modal
         */
        "headerText"?: string;
        /**
          * Evento disparado quando a modal fechou
         */
        "onAlc-after-hide"?: (event: AlcModalCustomEvent<null>) => void;
        /**
          * Evento disparado quando a modal abriu
         */
        "onAlc-after-show"?: (event: AlcModalCustomEvent<null>) => void;
        /**
          * Evento disparado quando a modal fechou e esta pronto para lidar com foco.
         */
        "onAlc-focus-after-hide"?: (event: AlcModalCustomEvent<null>) => void;
        /**
          * Evento disparado quando a modal vai fechar
         */
        "onAlc-hide"?: (event: AlcModalCustomEvent<{
    from: 'header-button' | 'footer-button' | 'keyboard' | 'overlay';
  }>) => void;
        /**
          * Define se a modal está aberta ou fechada.
         */
        "open"?: boolean;
        /**
          * Previne a modal de fechar ao clicar no overlay.
         */
        "preventOverlayClose"?: boolean;
        /**
          * Tamanho da modal
         */
        "size"?: 'sm' | 'md' | 'lg' | 'xl';
    }
    interface AlcNav {
    }
    interface AlcNavPanel {
        /**
          * Evento disparado quando o estado do nav-panel é alterado.
         */
        "onAlc-state-change"?: (event: AlcNavPanelCustomEvent<AlcStateEventTypes>) => void;
        /**
          * Evento disparado quando o nav-panel precisa recuperar o estado.
         */
        "onAlc-state-request"?: (event: AlcNavPanelCustomEvent<AlcStateEventTypes>) => void;
        /**
          * Indica se o nav-panel está visível. O valor inicial desse atributo será definido dinamicamente pelo próprio nav-panel.
         */
        "open"?: boolean;
    }
    interface AlcPagination {
        /**
          * Número da página atual
         */
        "currentPage"?: number;
        /**
          * Disparado quando ocorre a mudança de uma página para outra.
         */
        "onAlc-change"?: (event: AlcPaginationCustomEvent<{
    from: number;
    to: number;
    using: 'isFirst' | 'isPrev' | 'isLast' | 'isNext' | 'isSelect'
  }>) => void;
        /**
          * Número total de páginas.
         */
        "totalPages"?: number;
    }
    interface AlcPopup {
        /**
          * Aciona a abertura do popup.
         */
        "active"?: boolean;
        /**
          * Adiciona arrow no popup.
         */
        "arrow"?: boolean;
        /**
          * Define a distância entre o popup e âncora.
         */
        "distance"?: number;
        /**
          * Quando definido como `true`, troca o posicionamento (placement) do popup para mantê-lo visível.
         */
        "flip"?: boolean;
        /**
          * Define o posicionamento do popup.
         */
        "placement"?: PopupPlacement;
        /**
          * Quando definido como `true`, desloca o popup ao longo do eixo para mantê-lo visível quando cortado.
         */
        "shift"?: boolean;
        /**
          * Determina como o pop-up é posicionado. A estratégia `absoluta` funciona bem na maioria dos casos. Se o overflow cortar o popup, usar a posição `fixed` muitas vezes pode contornar isso.
         */
        "strategy"?: 'absolute' | 'fixed';
        /**
          * Syncs the popup's width or height to that of the anchor element.
         */
        "sync"?: 'width' | 'height' | 'both';
    }
    interface AlcRadio {
        /**
          * Texto de mensagem de erro.
         */
        "errorMsg"?: string;
        /**
          * Texto de ajuda.
         */
        "hint"?: string;
        /**
          * Texto do label do input. Há opção de adicionar o elemento label pelo slot "label".
         */
        "label"?: string;
    }
    interface AlcScrollPanel {
        /**
          * Define se há foco.
         */
        "hasFocus"?: boolean;
        /**
          * Define para qual elemento o scroll vai.
         */
        "scrollToElement"?: HTMLElement;
    }
    interface AlcSidepanel {
        /**
          * Evento disparado quando o estado do sidepanel é alterado.
         */
        "onAlc-state-change"?: (event: AlcSidepanelCustomEvent<{state: {visible: boolean}}>) => void;
        /**
          * Evento disparado quando o sidepanel precisa recuperar o estado.
         */
        "onAlc-state-request"?: (event: AlcSidepanelCustomEvent<{state: {visible: boolean}}>) => void;
        /**
          * Indica se o sidepanel está visível.
         */
        "visible"?: boolean;
    }
    interface AlcSkipLink {
        /**
          * Valor do `id` do elemento para onde o usuário navegará ao acionar o link.
         */
        "anchor": string;
    }
    interface AlcSkipToNav {
    }
    interface AlcSortIndicator {
        /**
          * Define indicação do sort.
         */
        "sorting"?: 'asc' | 'desc' | 'none';
    }
    interface AlcTab {
        /**
          * Se, dentro da tab, o primeiro elemento com conteúdo significativo for focalizável, deve ser definido como `true`. Caso contrário, deve ser mantido o valor padrão (`false`).
         */
        "contentFocus"?: boolean;
        /**
          * Rótulo da tab.
         */
        "label"?: string;
        /**
          * Indica se a tab está ou não selecionada.
         */
        "selected"?: boolean;
        /**
          * Identificador único da tab.
         */
        "tab": string;
    }
    interface AlcTabButton {
        /**
          * Evento disparado ao clicar em alc-tab-button
         */
        "onAlc-click"?: (event: AlcTabButtonCustomEvent<{
    tab: string
  }>) => void;
        /**
          * Evento disparado para indicar que o primeiro alc-tab-button deve ser selecionado
         */
        "onAlc-first"?: (event: AlcTabButtonCustomEvent<null>) => void;
        /**
          * Evento disparado para indicar que o último alc-tab-button deve ser selecionado
         */
        "onAlc-last"?: (event: AlcTabButtonCustomEvent<null>) => void;
        /**
          * Evento disparado para indicar que o alc-tab-button seguinte deve ser selecionado
         */
        "onAlc-next"?: (event: AlcTabButtonCustomEvent<null>) => void;
        /**
          * Evento disparado para indicar que o alc-tab-button anterior deve ser selecionado
         */
        "onAlc-previous"?: (event: AlcTabButtonCustomEvent<null>) => void;
        /**
          * Indica que a tab está selecionada.
         */
        "selected"?: boolean;
        /**
          * Um identificador da tab deve ser fornecido para cada `alc-tab`. Isso é usado internamente para referenciar a tab selecionada.
         */
        "tab": string;
    }
    interface AlcTable {
    }
    interface AlcTabs {
        /**
          * Disparado quando houve uma mudança de tab
         */
        "onAlc-change"?: (event: AlcTabsCustomEvent<{
    tab: string
  }>) => void;
        /**
          * O identificador da tab atualmente selecionada
         */
        "selected"?: string;
    }
    interface AlcTheme {
    }
    interface AlcTooltip {
        /**
          * Indica se o tooltip esta ativo ou não. Pode-se usar essa propriedade em vez dos métodos show/hide.
         */
        "active"?: boolean;
        /**
          * Indica o conteudo textual do tooltip. Pode-se usar o slot em vez dessa propriedade.
         */
        "content"?: string;
        /**
          * Evento disparado quando o tooltip fechou.
         */
        "onAlc-after-hide"?: (event: AlcTooltipCustomEvent<null>) => void;
        /**
          * Evento disparado quando o tooltip abriu
         */
        "onAlc-after-show"?: (event: AlcTooltipCustomEvent<null>) => void;
        /**
          * Evento disparado quando o tooltip vai fechar.
         */
        "onAlc-hide"?: (event: AlcTooltipCustomEvent<{
    from: 'click' | 'hover' | 'focus' | 'keyboard' | 'method';
  }>) => void;
        /**
          * Evento disparado quando o tooltip vai abrir
         */
        "onAlc-show"?: (event: AlcTooltipCustomEvent<{
    from: 'click' | 'hover' | 'focus' | 'method';
  }>) => void;
        /**
          * Define o posicionamento do tooltip.
         */
        "placement"?: PopupPlacement1;
        /**
          * Define o posicionamento do tooltip.
         */
        "strategy"?: 'absolute' | 'fixed';
        /**
          * Define como o tooltip vai ser ativado. Pode ser: `click` , `hover` , `focus` e/ou `manual`. Pode adicionar mais de um, separando por espaço. Ex.: 'hover focus'.
         */
        "trigger"?: string;
    }
    interface AlcUser {
        /**
          * Imagem do usuário. Pode ser qualquer valor válido para o atributo `src` da tag `img` do HTML.
         */
        "imgSrc"?: string;
        /**
          * URL que efetua o logout do usuário.
         */
        "logoutUrl"?: string;
        /**
          * Nome do usuário.
         */
        "name"?: string;
        /**
          * Evento disparado quando o link "Sair" é acionado. Se cancelado, não navegará para a URL de logout.
         */
        "onAlc-logout"?: (event: AlcUserCustomEvent<any>) => void;
        /**
          * Número de matrícula ou ponto do usuário.
         */
        "registrationNumber"?: string;
    }
    interface AlcUserMenu {
        /**
          * URL da imagem do usuário. Se não for fornecida, será exibido um ícone padrão.
         */
        "imgSrc"?: string;
        /**
          * URL que efetua o logout do usuário. O link "Sair" navegará para essa URL.
         */
        "logoutUrl": string;
        /**
          * Nome do usuário.
         */
        "name"?: string;
        /**
          * Evento disparado quando o link "Sair" é acionado. Se cancelado, não navegará para a URL de logout.
         */
        "onAlc-logout"?: (event: AlcUserMenuCustomEvent<any>) => void;
        /**
          * Número de matrícula ou ponto do usuário.
         */
        "registrationNumber"?: string;
        /**
          * Define a variação do menu de usuário. Geralmente, não é recomendado alterar esse valor.
         */
        "variation"?: 'mobile' | 'desktop';
    }
    interface AlcViewMore {
        /**
          * Nome da variável CSS correspondente à cor de fundo em que o componente está inserido. Aplica-se ao degradê do corte do texto.
         */
        "bgColorVar"?: string;
        /**
          * Tamanho mínimo do conteúdo a ser exibido. Pode ser em px, rem ou em: 200px; 20rem; 10em;
         */
        "minHeight"?: string;
        /**
          * Classes CSS para serem aplicadas ao texto da ação.
         */
        "textClass"?: string;
        /**
          * Alinhamento do botão de ação.
         */
        "togglePosition"?: string;
        /**
          * Nome da ação para esconder o conteúdo.
         */
        "toggleTextClose"?: string;
        /**
          * Nome da ação para revelar o conteúdo.
         */
        "toggleTextOpen"?: string;
    }
    interface IntrinsicElements {
        "alc-alert": AlcAlert;
        "alc-autocomplete": AlcAutocomplete;
        "alc-badge": AlcBadge;
        "alc-breadcrumb": AlcBreadcrumb;
        "alc-breadcrumb-item": AlcBreadcrumbItem;
        "alc-checkbox": AlcCheckbox;
        "alc-datatable": AlcDatatable;
        "alc-details": AlcDetails;
        "alc-drawer": AlcDrawer;
        "alc-dropdown": AlcDropdown;
        "alc-environment-label": AlcEnvironmentLabel;
        "alc-event-lab": AlcEventLab;
        "alc-expander": AlcExpander;
        "alc-field": AlcField;
        "alc-field-checker": AlcFieldChecker;
        "alc-fieldset": AlcFieldset;
        "alc-header": AlcHeader;
        "alc-header-action": AlcHeaderAction;
        "alc-header-id": AlcHeaderId;
        "alc-header-notifications": AlcHeaderNotifications;
        "alc-header-v1": AlcHeaderV1;
        "alc-icon": AlcIcon;
        "alc-input-file": AlcInputFile;
        "alc-loading": AlcLoading;
        "alc-menu": AlcMenu;
        "alc-menu-item": AlcMenuItem;
        "alc-menu-item-theme": AlcMenuItemTheme;
        "alc-menu-link": AlcMenuLink;
        "alc-modal": AlcModal;
        "alc-nav": AlcNav;
        "alc-nav-panel": AlcNavPanel;
        "alc-pagination": AlcPagination;
        "alc-popup": AlcPopup;
        "alc-radio": AlcRadio;
        "alc-scroll-panel": AlcScrollPanel;
        "alc-sidepanel": AlcSidepanel;
        "alc-skip-link": AlcSkipLink;
        "alc-skip-to-nav": AlcSkipToNav;
        "alc-sort-indicator": AlcSortIndicator;
        "alc-tab": AlcTab;
        "alc-tab-button": AlcTabButton;
        "alc-table": AlcTable;
        "alc-tabs": AlcTabs;
        "alc-theme": AlcTheme;
        "alc-tooltip": AlcTooltip;
        "alc-user": AlcUser;
        "alc-user-menu": AlcUserMenu;
        "alc-view-more": AlcViewMore;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * Vamos lá testar.
             * Ver se isso vai funcionar.
             * ^^^^^ [1]
             * @picWidget pic-alert
             */
            "alc-alert": LocalJSX.AlcAlert & JSXBase.HTMLAttributes<HTMLAlcAlertElement>;
            "alc-autocomplete": LocalJSX.AlcAutocomplete & JSXBase.HTMLAttributes<HTMLAlcAutocompleteElement>;
            "alc-badge": LocalJSX.AlcBadge & JSXBase.HTMLAttributes<HTMLAlcBadgeElement>;
            "alc-breadcrumb": LocalJSX.AlcBreadcrumb & JSXBase.HTMLAttributes<HTMLAlcBreadcrumbElement>;
            "alc-breadcrumb-item": LocalJSX.AlcBreadcrumbItem & JSXBase.HTMLAttributes<HTMLAlcBreadcrumbItemElement>;
            "alc-checkbox": LocalJSX.AlcCheckbox & JSXBase.HTMLAttributes<HTMLAlcCheckboxElement>;
            "alc-datatable": LocalJSX.AlcDatatable & JSXBase.HTMLAttributes<HTMLAlcDatatableElement>;
            "alc-details": LocalJSX.AlcDetails & JSXBase.HTMLAttributes<HTMLAlcDetailsElement>;
            "alc-drawer": LocalJSX.AlcDrawer & JSXBase.HTMLAttributes<HTMLAlcDrawerElement>;
            "alc-dropdown": LocalJSX.AlcDropdown & JSXBase.HTMLAttributes<HTMLAlcDropdownElement>;
            "alc-environment-label": LocalJSX.AlcEnvironmentLabel & JSXBase.HTMLAttributes<HTMLAlcEnvironmentLabelElement>;
            "alc-event-lab": LocalJSX.AlcEventLab & JSXBase.HTMLAttributes<HTMLAlcEventLabElement>;
            "alc-expander": LocalJSX.AlcExpander & JSXBase.HTMLAttributes<HTMLAlcExpanderElement>;
            /**
             * @cssClass alc-field__label - Aplicada ao elemento `label`.
             * @cssClass alc-field__core - Aplicada ao elemento que agrupa o controle de formulário, mensagem de erro e texto de ajuda.
             */
            "alc-field": LocalJSX.AlcField & JSXBase.HTMLAttributes<HTMLAlcFieldElement>;
            "alc-field-checker": LocalJSX.AlcFieldChecker & JSXBase.HTMLAttributes<HTMLAlcFieldCheckerElement>;
            "alc-fieldset": LocalJSX.AlcFieldset & JSXBase.HTMLAttributes<HTMLAlcFieldsetElement>;
            "alc-header": LocalJSX.AlcHeader & JSXBase.HTMLAttributes<HTMLAlcHeaderElement>;
            "alc-header-action": LocalJSX.AlcHeaderAction & JSXBase.HTMLAttributes<HTMLAlcHeaderActionElement>;
            "alc-header-id": LocalJSX.AlcHeaderId & JSXBase.HTMLAttributes<HTMLAlcHeaderIdElement>;
            "alc-header-notifications": LocalJSX.AlcHeaderNotifications & JSXBase.HTMLAttributes<HTMLAlcHeaderNotificationsElement>;
            "alc-header-v1": LocalJSX.AlcHeaderV1 & JSXBase.HTMLAttributes<HTMLAlcHeaderV1Element>;
            "alc-icon": LocalJSX.AlcIcon & JSXBase.HTMLAttributes<HTMLAlcIconElement>;
            "alc-input-file": LocalJSX.AlcInputFile & JSXBase.HTMLAttributes<HTMLAlcInputFileElement>;
            "alc-loading": LocalJSX.AlcLoading & JSXBase.HTMLAttributes<HTMLAlcLoadingElement>;
            "alc-menu": LocalJSX.AlcMenu & JSXBase.HTMLAttributes<HTMLAlcMenuElement>;
            "alc-menu-item": LocalJSX.AlcMenuItem & JSXBase.HTMLAttributes<HTMLAlcMenuItemElement>;
            "alc-menu-item-theme": LocalJSX.AlcMenuItemTheme & JSXBase.HTMLAttributes<HTMLAlcMenuItemThemeElement>;
            "alc-menu-link": LocalJSX.AlcMenuLink & JSXBase.HTMLAttributes<HTMLAlcMenuLinkElement>;
            "alc-modal": LocalJSX.AlcModal & JSXBase.HTMLAttributes<HTMLAlcModalElement>;
            "alc-nav": LocalJSX.AlcNav & JSXBase.HTMLAttributes<HTMLAlcNavElement>;
            "alc-nav-panel": LocalJSX.AlcNavPanel & JSXBase.HTMLAttributes<HTMLAlcNavPanelElement>;
            "alc-pagination": LocalJSX.AlcPagination & JSXBase.HTMLAttributes<HTMLAlcPaginationElement>;
            "alc-popup": LocalJSX.AlcPopup & JSXBase.HTMLAttributes<HTMLAlcPopupElement>;
            "alc-radio": LocalJSX.AlcRadio & JSXBase.HTMLAttributes<HTMLAlcRadioElement>;
            "alc-scroll-panel": LocalJSX.AlcScrollPanel & JSXBase.HTMLAttributes<HTMLAlcScrollPanelElement>;
            "alc-sidepanel": LocalJSX.AlcSidepanel & JSXBase.HTMLAttributes<HTMLAlcSidepanelElement>;
            "alc-skip-link": LocalJSX.AlcSkipLink & JSXBase.HTMLAttributes<HTMLAlcSkipLinkElement>;
            "alc-skip-to-nav": LocalJSX.AlcSkipToNav & JSXBase.HTMLAttributes<HTMLAlcSkipToNavElement>;
            "alc-sort-indicator": LocalJSX.AlcSortIndicator & JSXBase.HTMLAttributes<HTMLAlcSortIndicatorElement>;
            "alc-tab": LocalJSX.AlcTab & JSXBase.HTMLAttributes<HTMLAlcTabElement>;
            "alc-tab-button": LocalJSX.AlcTabButton & JSXBase.HTMLAttributes<HTMLAlcTabButtonElement>;
            "alc-table": LocalJSX.AlcTable & JSXBase.HTMLAttributes<HTMLAlcTableElement>;
            "alc-tabs": LocalJSX.AlcTabs & JSXBase.HTMLAttributes<HTMLAlcTabsElement>;
            "alc-theme": LocalJSX.AlcTheme & JSXBase.HTMLAttributes<HTMLAlcThemeElement>;
            "alc-tooltip": LocalJSX.AlcTooltip & JSXBase.HTMLAttributes<HTMLAlcTooltipElement>;
            "alc-user": LocalJSX.AlcUser & JSXBase.HTMLAttributes<HTMLAlcUserElement>;
            "alc-user-menu": LocalJSX.AlcUserMenu & JSXBase.HTMLAttributes<HTMLAlcUserMenuElement>;
            "alc-view-more": LocalJSX.AlcViewMore & JSXBase.HTMLAttributes<HTMLAlcViewMoreElement>;
        }
    }
}
