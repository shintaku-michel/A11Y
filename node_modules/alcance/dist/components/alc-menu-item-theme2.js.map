{"file":"alc-menu-item-theme2.js","mappings":";;;;;AAAA,MAAM,mBAAmB,GAAG,EAAE;;MCQjB,gBAAgB,iBAAAA,kBAAA,CAAA,MAAA,gBAAA,SAAA,WAAA,CAAA;AAL7B,IAAA,WAAA,GAAA;;;;AAOW,QAAA,IAAO,CAAA,OAAA,GAAY,KAAK;;AAGhB,QAAA,IAAU,CAAA,UAAA,GAAG,MAAM;AACnB,QAAA,IAAW,CAAA,WAAA,GAAG,OAAO;AA6CvC;;IAzCC,WAAW,GAAA;QACT,IAAI,CAAC,WAAW,EAAE;;;IAIZ,WAAW,GAAA;AACjB,QAAA,IAAI,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,OAAO;AAC5B,QAAA,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,WAAW;QAC/D,eAAe,CAAC,KAAK,CAAC;QACtB,kBAAkB,CAAC,KAAK,CAAC;;;IAI3B,iBAAiB,GAAA;AACf,QAAA,MAAM,cAAc,GAAG,kBAAkB,EAAE;QAE3C,QAAQ,cAAc;YACpB,KAAK,IAAI,CAAC,WAAW;AACnB,gBAAA,IAAI,CAAC,OAAO,GAAG,KAAK;gBACpB;YACF,KAAK,IAAI,CAAC,UAAU;AAClB,gBAAA,IAAI,CAAC,OAAO,GAAG,IAAI;gBACnB;AACF,YAAA;;gBAEE,IAAI,CAAC,OAAO,GAAG,eAAe,CAAC,QAAQ,CAAC,KAAK,IAAI,CAAC,UAAU;gBAC5D;;;IAKN,MAAM,GAAA;QACJ,QACE,EAAC,IAAI,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAA,EACH,CAAe,CAAA,eAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAA,IAAI,EAAC,UAAU,EAAC,OAAO,EAAE,IAAI,CAAC,OAAO,EAAA,EAClD,CAAU,CAAA,UAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAA,IAAI,EAAC,MAAM,EAAC,KAAK,EAAC,EAAE,EAAC,IAAI,EAAC,QAAQ,EAAY,CAAA,EAE1C,oBAAA,CAAA,CACX;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["__stencil_proxyCustomElement"],"sources":["src/components/alc-menu-item-theme/alc-menu-item-theme.css?tag=alc-menu-item-theme","src/components/alc-menu-item-theme/alc-menu-item-theme.tsx"],"sourcesContent":["","import { Component, Host, Listen, State, h } from '@stencil/core';\nimport { getAppliedTheme, setAppliedTheme, loadUserPreference, saveUserPreference } from '../utils/theme';\n\n@Component({\n  tag: 'alc-menu-item-theme',\n  styleUrl: 'alc-menu-item-theme.css',\n  shadow: false,\n})\nexport class AlcMenuItemTheme {\n  // Estado para controlar se o tema escuro está ativado\n  @State() checked: boolean = false;\n\n  // Constantes para os temas\n  private readonly DARK_THEME = 'dark';\n  private readonly LIGHT_THEME = 'light';\n\n  // Listener para o evento 'alc-select', alterna o tema entre claro e escuro.\n  @Listen('alc-select')\n  handleClick(): void {\n    this.toggleTheme();\n  }\n\n  // Alterna o tema entre claro e escuro.\n  private toggleTheme(): void {\n    this.checked = !this.checked;\n    const theme = this.checked ? this.DARK_THEME : this.LIGHT_THEME;\n    setAppliedTheme(theme);\n    saveUserPreference(theme);\n  }\n\n  // Define o estado inicial do tema com base na preferência do usuário ou no tema do sistema.\n  componentWillLoad(): void {\n    const userPreference = loadUserPreference();\n\n    switch (userPreference) {\n      case this.LIGHT_THEME:\n        this.checked = false;\n        break;\n      case this.DARK_THEME:\n        this.checked = true;\n        break;\n      default:\n        // Se o tema do sistema for dark, então checked 'true' se não 'false'.\n        this.checked = getAppliedTheme('system') === this.DARK_THEME;\n        break;\n    }\n  }\n\n\n  render() {\n    return (\n      <Host>\n        <alc-menu-item type=\"checkbox\" checked={this.checked}>\n          <alc-icon icon=\"moon\" label=\"\" slot=\"prefix\"></alc-icon>\n          Ver no tema escuro\n        </alc-menu-item>\n      </Host>\n    );\n  }\n}\n"],"version":3}