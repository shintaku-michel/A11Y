import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { l as logger } from './logger.js';
import { g as getUniqueId } from './getUniqueId.js';
import { t as testAttributes } from './testAttributes.js';
import { d as defineCustomElement$2 } from './alc-icon2.js';

const alcInputFileCss = "[data-alc-theme=\"light\"] alc-input-file{--text-color-label:var(--alc-color-text-0);--text-color:var(--alc-color-text-1);--shadow-color:var(--alc-color-neutral-5);--outline-color:var(--alc-color-action-60);--border-color:var(--alc-color-neutral-60);--border-color-hover:var(--alc-color-action-60);--border-color-focus:var(--alc-color-action-20);--bg-color-disabled:var(--alc-color-neutral-10);--border-color-disabled:var(--alc-color-neutral-40);--text-color-disabled:var(--alc-color-text-4)}[data-alc-theme=\"dark\"] alc-input-file{--text-color-label:var(--alc-color-text-0);--text-color:var(--alc-color-text-1);--shadow-color:var(--alc-color-neutral-80);--outline-color:var(--alc-color-action-30);--border-color:var(--alc-color-neutral-30);--border-color-hover:var(--alc-color-action-40);--border-color-focus:var(--alc-color-action-70);--bg-color-disabled:var(--alc-color-neutral-80);--border-color-disabled:var(--alc-color-neutral-50);--text-color-disabled:var(--alc-color-text-4)}.alc-input-file__field{display:-ms-flexbox;display:flex;width:100%;-ms-flex-direction:column;flex-direction:column}.alc-input-file__text-button{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;gap:0.5rem;font-size:1rem;line-height:1.5rem}.alc-input-file__content{margin-top:0.5rem;display:-ms-flexbox;display:flex;width:100%;-ms-flex-direction:column;flex-direction:column;gap:0.5rem}.alc-input-file__file{display:-ms-flexbox;display:flex;width:100%;-ms-flex-align:center;align-items:center;-ms-flex-pack:justify;justify-content:space-between;border-radius:0.25rem;background-color:var(--alc-color-layer-b);padding-top:0.5rem;padding-bottom:0.5rem;padding-left:1rem;padding-right:1rem;color:var(--text-color)}.alc-input-file__file span{overflow-wrap:break-word}.alc-input-file__text{font-size:0.875rem;color:var(--alc-color-text-4)}.alc-input-file__label{color:var(--text-color-label)}.alc-input-file__input{display:none}.alc-input-file__input-container{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.alc-input-file__input-wrapper{position:relative;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}.alc-input-file__icon{pointer-events:none;position:absolute;left:0.75rem;top:50%;--tw-translate-y:-50%;-webkit-transform:translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));transform:translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}input[type=text].alc-input-file__text-input{-webkit-box-sizing:border-box;box-sizing:border-box;width:100%;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;padding-top:0.5rem;padding-bottom:0.5rem;padding-left:0.75rem;padding-right:4rem;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;min-height:2.5rem;--tw-shadow:inset 0 2px 4px 0 rgb(0 0 0 / 0.05);--tw-shadow-colored:inset 0 2px 4px 0 var(--tw-shadow-color);-webkit-box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);--tw-shadow-color:var(--shadow-color);--tw-shadow:var(--tw-shadow-colored);transition-property:color, background-color, border-color, fill, stroke, -webkit-text-decoration-color;-webkit-transition-property:color, background-color, border-color, fill, stroke, -webkit-text-decoration-color;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke, -webkit-text-decoration-color;-webkit-transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);-webkit-transition-duration:150ms;transition-duration:150ms}input[type=text].alc-input-file__text-input::-moz-placeholder{color:var(--text-color-placeholder)}input[type=text].alc-input-file__text-input::-webkit-input-placeholder{color:var(--text-color-placeholder)}input[type=text].alc-input-file__text-input:-ms-input-placeholder{color:var(--text-color-placeholder)}input[type=text].alc-input-file__text-input::-ms-input-placeholder{color:var(--text-color-placeholder)}input[type=text].alc-input-file__text-input::placeholder{color:var(--text-color-placeholder)}.alc-input-file__input-wrapper--with-icon input[type=text].alc-input-file__text-input{padding-left:2.5rem;}input[type=text].alc-input-file__text-input:focus{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;outline-style:solid;outline-width:2px;outline-offset:2px;outline-color:var(--outline-color);--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(0px + var(--tw-ring-offset-width)) var(--tw-ring-color);-webkit-box-shadow:var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);box-shadow:var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000)}.alc-input-file__text-input:disabled{border-color:var(--border-color-disabled);background-color:var(--bg-color-disabled);--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;-webkit-box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);cursor:not-allowed;color:var(--text-color-disabled)}.alc-input-file__text-input:disabled:hover{border-color:var(--border-color-disabled)}.alc-input-file__remove-button{position:absolute;top:50%;right:0.5rem;height:2rem;width:2rem;--tw-translate-y:-50%;-webkit-transform:translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));transform:translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));cursor:pointer;border-radius:9999px;border-width:0px;background-color:transparent;padding:0px;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;-webkit-box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)}.alc-input-file__remove-button:hover,.alc-input-file__remove-button:focus{background-color:var(--alc-color-layer-b);outline:2px solid transparent;outline-offset:2px;--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);-webkit-box-shadow:var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);box-shadow:var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);--tw-ring-color:var(--alc-color-primary)}.alc-input-file__remove-button alc-icon{pointer-events:none}.alc-input-file__info{margin-top:0.25rem;text-align:right;font-size:0.875rem;line-height:1rem;color:var(--alc-color-text-4)}.alc-input-file__dropzone{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;gap:0.5rem;background-color:var(--alc-color-layer-b);padding:1rem;color:var(--text-color);cursor:pointer;border-radius:0.25rem;border-width:2px;border-style:dashed;border-color:var(--alc-color-neutral-40);transition-property:color, background-color, border-color, fill, stroke, -webkit-text-decoration-color;-webkit-transition-property:color, background-color, border-color, fill, stroke, -webkit-text-decoration-color;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke, -webkit-text-decoration-color;-webkit-transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);-webkit-transition-duration:200ms;transition-duration:200ms}.alc-input-file__dropzone:focus{outline-style:solid;outline-width:2px;outline-offset:2px;outline-color:var(--outline-color);--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(0px + var(--tw-ring-offset-width)) var(--tw-ring-color);-webkit-box-shadow:var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);box-shadow:var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);border-color:var(--border-color-hover)}.alc-input-file__dropzone:hover{border-color:var(--border-color-hover)}.alc-input-file__dropzone--dragover{border-color:var(--alc-color-primary);background-color:var(--alc-color-neutral-20)}.alc-input-file__dropzone--disabled{cursor:not-allowed;opacity:0.6}.alc-input-file__dropzone-text{text-align:center;font-size:1rem;line-height:1.5rem}.alc-input-file__dropzone.alc-field__input--error{border-color:var(--border-color-error)}.alc-button.alc-field__input--error{border-width:1px;border-color:var(--border-color-error)}@media (max-width: 600px){.alc-input-file__file{-ms-flex-align:start;align-items:flex-start}.alc-input-file__info{text-align:left}}";

const AlcInputFile$1 = /*@__PURE__*/ proxyCustomElement(class AlcInputFile extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.alcFileSelected = createEvent(this, "alc-file-selected", 7);
        this.idInputFilePolite = null;
        this.idLabel = null;
        this.idDropzoneText = null;
        /**
         * Altera o funcionamento para aceitar vários arquivos.
         */
        this.multiple = false;
        /**
         * Define tipos de arquivos específicos para envio. Padrão: Todos.
         */
        this.accept = '*/*';
        /**
         * Desativa o componente.
         */
        this.disabled = false;
        /**
         * Indica se é obrigatório.
         */
        this.required = false;
        /**
         * Define o tipo de botão que vai ser renderizado.
         */
        this.buttonType = undefined;
        /**
         * Modo de visualização do componente.
         * Pode ser 'button', 'input' ou 'dropzone'.
         */
        this.mode = 'button';
        this.files = [];
        this.maxInputTextLength = 50; // Valor inicial arbitrário
        this.renderFiles = () => {
            return this.files.map(file => (h("div", Object.assign({ class: "alc-input-file__file" }, testAttributes('data-test-file')), h("span", null, file.name, " (", this.formatFileSize(file.size), ")"), h("button", Object.assign({ class: "alc-button alc-button-rounded", onClick: () => this.handleRemove(file), "aria-label": `Remover arquivo ${file.name}` }, testAttributes('data-test-delete-file-button')), h("alc-icon", { name: "x", label: "Apagar" })))));
        };
        this.renderFileInfo = () => {
            const totalSize = this.files.reduce((acc, file) => acc + file.size, 0);
            const totalSizeFormatted = this.formatFileSize(totalSize);
            const fileCount = this.files.length;
            const fileText = fileCount === 1 ? 'arquivo' : 'arquivos';
            return (h("span", Object.assign({}, testAttributes('data-test-file-info')), `${fileCount} ${fileText} (${totalSizeFormatted} no total)`));
        };
        this.renderPolite = () => {
            let politeText = 'Nenhum arquivo selecionado.';
            if (this.files.length === 1) {
                politeText = 'Arquivo selecionado: ' + this.files[0].name;
            }
            if (this.files.length > 1) {
                const fileNames = this.files.map(file => file.name).join('; ');
                politeText = this.files.length + ' arquivos selecionados: ' + fileNames;
            }
            return (h("span", { "aria-live": "polite", class: "sr-only", id: this.idInputFilePolite, role: "status" }, politeText));
        };
        this.invokeFileInput = () => {
            const inputClick = this.el.querySelector('#' + this.idInput);
            inputClick.click();
        };
        this.handleRemove = (file) => {
            this.files = this.files.filter(currentFile => currentFile !== file);
            // Atualiza os arquivos do input
            const dataTransfer = new DataTransfer();
            this.files.forEach(f => dataTransfer.items.add(f));
            const inputFileElement = this.el.querySelector('#' + this.idInput);
            inputFileElement.files = dataTransfer.files;
            // Ler o conteúdo dos arquivos restantes e emitir o evento
            this.readFilesAndEmitEvent(this.files);
        };
        this.handleRemoveAll = () => {
            this.files = [];
            const inputFileElement = this.el.querySelector('#' + this.idInput);
            inputFileElement.value = '';
            this.alcFileSelected.emit({ files: [] });
        };
        this.handleDrop = (e) => {
            var _a;
            e.preventDefault();
            e.stopPropagation();
            if (this.disabled)
                return;
            const droppedFiles = (_a = e.dataTransfer) === null || _a === void 0 ? void 0 : _a.files;
            if (droppedFiles && droppedFiles.length > 0) {
                const filesArray = Array.from(droppedFiles);
                if (this.multiple) {
                    this.files = [...this.files, ...filesArray];
                }
                else {
                    this.files = [filesArray[0]];
                }
                // Atualiza os arquivos do input
                const dataTransfer = new DataTransfer();
                this.files.forEach(f => dataTransfer.items.add(f));
                const inputFileElement = this.el.querySelector('#' + this.idInput);
                inputFileElement.files = dataTransfer.files;
                // Ler o conteúdo dos arquivos e emitir o evento
                this.readFilesAndEmitEvent(this.files);
            }
        };
        this.handleDragOver = (e) => {
            e.preventDefault();
            e.stopPropagation();
        };
        this.handleDragEnter = (e) => {
            e.preventDefault();
            e.stopPropagation();
            if (this.disabled)
                return;
            const dropzone = e.currentTarget;
            dropzone.classList.add('alc-input-file__dropzone--dragover');
        };
        this.handleDragLeave = (e) => {
            e.preventDefault();
            e.stopPropagation();
            if (this.disabled)
                return;
            const dropzone = e.currentTarget;
            dropzone.classList.remove('alc-input-file__dropzone--dragover');
        };
    }
    /**
     * Retorna array de arquivos selecionados com seus blobs.
     * @returns Lista de arquivos com conteúdo.
     */
    async getFiles() {
        const inputFileElement = this.el.querySelector('#' + this.idInput);
        const files = Array.from(inputFileElement.files || []);
        const filesWithContent = await Promise.all(files.map(async (file) => {
            const content = await file.arrayBuffer();
            return { file, content };
        }));
        return filesWithContent;
    }
    /**
     * Limpa os dados do input e a lista de arquivos.
     */
    async clear() {
        this.files = [];
        const inputFileElement = this.el.querySelector('#' + this.idInput);
        inputFileElement.value = '';
    }
    handleFileChange(e) {
        const input = e.target;
        const files = Array.from(input.files || []);
        this.files = files;
        // Ler o conteúdo dos arquivos e emitir o evento
        this.readFilesAndEmitEvent(files);
    }
    async readFilesAndEmitEvent(files) {
        const filesWithContent = await Promise.all(files.map(async (file) => {
            const content = await file.arrayBuffer();
            return { file, content };
        }));
        this.alcFileSelected.emit({ files: filesWithContent });
    }
    formatFileSize(sizeInBytes) {
        const units = ['B', 'KB', 'MB', 'GB', 'TB'];
        let size = sizeInBytes;
        let unitIndex = 0;
        while (size >= 1024 && unitIndex < units.length - 1) {
            size = size / 1024;
            unitIndex++;
        }
        return `${size.toFixed(2)} ${units[unitIndex]}`;
    }
    componentWillLoad() {
        // Antes do componente carregar, cria um id para o controle de aria-live
        this.idInputFilePolite = getUniqueId();
        this.idLabel = getUniqueId();
        this.idDropzoneText = getUniqueId();
    }
    componentDidLoad() {
        if (this.mode === 'input') {
            this.textInputElement = this.el.querySelector('.alc-input-file__text-input');
            this.updateMaxInputTextLength();
            this.initializeResizeObserver();
            // Observa mudanças no número de arquivos para atualizar o tamanho disponível
            new MutationObserver(() => {
                this.updateMaxInputTextLength();
            }).observe(this.el, { childList: true, subtree: true });
        }
    }
    disconnectedCallback() {
        if (this.resizeObserver) {
            this.resizeObserver.disconnect();
        }
    }
    initializeResizeObserver() {
        this.resizeObserver = new ResizeObserver(() => {
            this.updateMaxInputTextLength();
        });
        this.resizeObserver.observe(this.textInputElement);
    }
    updateMaxInputTextLength() {
        if (!this.textInputElement)
            return;
        // Obtém a largura total do input
        const inputWidth = this.textInputElement.offsetWidth;
        // Largura do botão de remover (close button)
        const closeButtonWidth = this.files.length > 0 ? 28 : 0; // 28px se o botão estiver presente, 0 se não
        // Padding esquerdo
        let paddingLeft = 12; // Padding padrão quando não há ícone (em pixels)
        if (this.iconName) {
            paddingLeft = 40; // Padding maior quando há ícone (corresponde a pl-10)
        }
        // Padding direito (para o botão de remover ou padding padrão)
        const paddingRight = closeButtonWidth > 0 ? 40 : 12; // 40px se o botão estiver presente, 12px se não
        // Espaçamento total (padding esquerdo + padding direito)
        const totalPadding = paddingLeft + paddingRight;
        // Calcula a largura disponível
        const availableWidth = inputWidth - totalPadding;
        // Estima o número de caracteres que cabem no espaço disponível
        const characterWidth = 7.8; // Largura média de um caractere em pixels
        const maxChars = Math.floor(availableWidth / characterWidth);
        // Atualizar o estado
        this.maxInputTextLength = maxChars > 0 ? maxChars : 10; // Define um mínimo de 10 caracteres
    }
    truncateText(text, maxLength) {
        if (text.length <= maxLength) {
            return text;
        }
        return text.substring(0, maxLength - 3) + '...';
    }
    render() {
        var _a;
        (_a = this.idInput) !== null && _a !== void 0 ? _a : logger.report('id-input', this.el.tagName.toLowerCase(), this.el);
        const inputAttributes = {
            type: 'file',
            id: this.idInput,
            class: 'alc-input-file__input',
            multiple: this.multiple,
            accept: this.accept,
            disabled: this.disabled,
            onChange: (e) => this.handleFileChange(e),
            required: this.required // A obrigatoriedade fica no file input real
        };
        const fileInput = h("input", Object.assign({ key: '2035a612a2a06be66cadc9bb9abdbe14b4d3fea9' }, inputAttributes, testAttributes('data-test-file-input')));
        // Obtém os nomes dos arquivos
        const fileNames = this.files.map(file => file.name);
        // Junta os nomes dos arquivos e trunca o texto se necessário
        const inputTextValue = this.truncateText(fileNames.join(', '), this.maxInputTextLength);
        // Define o atributo title para mostrar os nomes completos ao passar o mouse
        const inputTitle = fileNames.join(', ');
        return (h(Host, { key: '4014a1d76f8469fff2c900d42e18c3a20d65dc41' }, h("slot", { key: '6fd005ff39bc1c29f968851f1bf9ed18996c0fbe' }), this.renderPolite(), this.mode === 'button' && (h("div", { key: 'c52a0c22d813fa13ead54e4f68f3e0380d5e828d', class: "alc-input-file__field" }, h("button", Object.assign({ key: 'b865bc268007d20fd5c314f8f4a205896085f0f1', class: `alc-button ${this.buttonType === 'secondary' ? 'alc-button--secondary' : ''}`, onClick: this.invokeFileInput, disabled: this.disabled }, testAttributes('data-test-button')), h("span", { key: '2a9642c7d0a89f3aee66877527f75216d6110c7b', class: "alc-input-file__text-button" }, this.iconName && h("alc-icon", { key: '19fa2cb81759e3a26d5ef8d9908808d6346ab90f', name: this.iconName, label: "" }), this.multiple ? 'Escolher arquivos' : 'Escolher arquivo')), h("div", Object.assign({ key: '1c8a116685150a992bc2ef5dcb709bfea93f8a9c', class: "alc-input-file__content", "aria-controls": this.idInputFilePolite }, testAttributes('data-test-file-content')), this.files.length > 0 ? (this.renderFiles()) : (h("small", { class: "alc-input-file__text" }, "Nenhum arquivo selecionado"))))), this.mode === 'input' && (h("div", { key: '75a462b4ed59c6672ffd6b12352963449425bc93', class: "alc-input-file__field" }, h("div", { key: '5e9ede15d24855a494e4867936b8f352daa009e9', class: "alc-input-file__input-container" }, h("div", { key: '0f60d4544e6c10efa31b810e7c4b4054a8eaec3d', class: `alc-input-file__input-wrapper ${this.iconName ? 'alc-input-file__input-wrapper--with-icon' : ''}` }, this.iconName && (h("alc-icon", { key: '5ac6e47aa8084c06754606436a125e687c803251', class: "alc-input-file__icon", name: this.iconName, label: "" })), h("input", Object.assign({ key: 'f3dd7623af2747930fbe1792dcd660e3e4ec24e2', type: "text", class: "alc-input-file__text-input", readOnly: true, value: inputTextValue, "aria-labelledby": this.idLabel, placeholder: "Selecione um arquivo", onClick: this.invokeFileInput, onKeyDown: (e) => {
                if (e.key === 'Enter' || e.key === ' ') {
                    e.preventDefault();
                    this.invokeFileInput();
                }
            }, "aria-description": inputTitle }, testAttributes('data-test-input'))), this.files.length > 0 && (h("button", Object.assign({ key: 'e57be5e726b1dffa4fe673e30ae076c78f118320', class: "alc-input-file__remove-button", onClick: this.handleRemoveAll, "aria-label": "Remover arquivos selecionados" }, testAttributes('data-test-delete-file-button')), h("alc-icon", { key: '4ff389c91553e5061225f8a4090e7903de3edf13', name: "x", label: "Apagar" }))))), h("div", { key: '113752296f8b66d3b204b3fcf266d71c4bd5171b', class: "alc-input-file__info" }, this.files.length > 0 ? this.renderFileInfo() : ''))), this.mode === 'dropzone' && (h("div", { key: 'e8b5fe04f1c073c067d81437294a988c99cd1a03', class: "alc-input-file__field" }, h("div", Object.assign({ key: 'a340dfc0aa1387332820220db7052690278c1ac0', class: `alc-input-file__dropzone ${this.disabled ? 'alc-input-file__dropzone--disabled' : ''}`, onDrop: this.handleDrop, onDragOver: this.handleDragOver, onDragEnter: this.handleDragEnter, onDragLeave: this.handleDragLeave, role: "button", tabIndex: 0, "aria-labelledby": this.idLabel, "aria-describedby": this.idDropzoneText, onClick: this.invokeFileInput, onKeyDown: (e) => {
                if (e.key === 'Enter' || e.key === ' ') {
                    e.preventDefault();
                    this.invokeFileInput();
                }
            } }, testAttributes('data-test-dropzone')), this.iconName && h("alc-icon", { key: 'e7335363a685a87839caa04eb07a7ec7904b33c3', name: this.iconName, label: "" }), h("span", { key: 'd5299aa97c8d78ca42f0470898ace7e0e313bf8f', class: "alc-input-file__dropzone-text", id: this.idDropzoneText }, "Arraste e solte arquivos aqui ou clique para selecionar")), h("div", { key: '4a31ad607c0bc19d4eb4ba8848053a3f13ac1c2d', class: "alc-input-file__content", "aria-controls": this.idInputFilePolite }, this.files.length > 0 ? (this.renderFiles()) : ('')))), fileInput));
    }
    get el() { return this; }
    static get style() { return alcInputFileCss; }
}, [4, "alc-input-file", {
        "multiple": [516],
        "idInput": [513, "id-input"],
        "accept": [513],
        "disabled": [516],
        "required": [516],
        "buttonType": [513, "button-type"],
        "iconName": [513, "icon-name"],
        "mode": [513],
        "files": [32],
        "maxInputTextLength": [32],
        "getFiles": [64],
        "clear": [64]
    }]);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["alc-input-file", "alc-icon"];
    components.forEach(tagName => { switch (tagName) {
        case "alc-input-file":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, AlcInputFile$1);
            }
            break;
        case "alc-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
    } });
}

const AlcInputFile = AlcInputFile$1;
const defineCustomElement = defineCustomElement$1;

export { AlcInputFile, defineCustomElement };
//# sourceMappingURL=alc-input-file.js.map

//# sourceMappingURL=alc-input-file.js.map