import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { s as screens } from './tailwind-screens.js';
import { l as logger } from './logger.js';
import { t as testAttributes } from './testAttributes.js';
import { d as defineCustomElement$3 } from './alc-drawer2.js';
import { d as defineCustomElement$2 } from './alc-icon2.js';

const alcSidepanelCss = ":host{display:block}alc-sidepanel{--_offset:calc(var(--offset, 80) * 1px);--height:calc(100vh - var(--_offset))}@media (min-width: 768px){.alc-sidepanel__mobile-container{display:none}}.alc-sidepanel__desktop-container{position:-webkit-sticky;position:sticky;top:var(--_offset);z-index:1020;display:none}@media (min-width: 768px){.alc-sidepanel__desktop-container{display:block}}.alc-sidepanel__desktop-slot{display:none;overflow-y:auto;--tw-bg-opacity:1;background-color:rgb(255 255 255 / var(--tw-bg-opacity))}.alc-sidepanel__desktop-slot:is([data-alc-theme=\"dark\"] *){--tw-bg-opacity:1;background-color:rgb(0 0 0 / var(--tw-bg-opacity))}.alc-sidepanel__desktop-slot{height:var(--height)}.alc-sidepanel__desktop-slot.is-open{display:block;width:18rem;--tw-shadow:0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);--tw-shadow-colored:0 20px 25px -5px var(--tw-shadow-color), 0 8px 10px -6px var(--tw-shadow-color);-webkit-box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)}";

// Pega o valor definido da configuração do tailwind e remove o 'px'
const MOBILE_BREAKPOINT = Number(screens.md.split('px')[0]);
const DEFAULT_STATE = {
    visible: true
};
const AlcSidepanel$1 = /*@__PURE__*/ proxyCustomElement(class AlcSidepanel extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.alcStateChange = createEvent(this, "alc-state-change", 6);
        this.alcStateRequest = createEvent(this, "alc-state-request", 6);
        this.isMobile = false;
        this.drawer = null;
        this.slotContainer = null;
        this.mobileSlot = null;
        this.desktopSlot = null;
        this.slotContent = null;
        this.state = DEFAULT_STATE;
        /**
         * Indica se o sidepanel está visível.
         */
        this.visible = true;
        this.renderMobile = () => ([
            h("button", Object.assign({ class: "alc-button alc-button-rounded absolute right-2 -mt-[3.25rem] text-white", onClick: () => this.drawer.show() }, testAttributes('data-test-sidepanel-mobile-close-button'), { "data-alc-sidepanel-drawer-button": true }), h("alc-icon", { name: "list", label: "Abrir" })),
            h("alc-drawer", { "onSl-show": () => this.visible = true, "onSl-hide": () => this.visible = false, ref: el => this.drawer = el }, h("div", { ref: el => this.mobileSlot = el }))
        ]);
    }
    /**
     * Abre o sidepanel.
     * @returns O valor retornado é `true` se o painel foi exibido com a chamada do método.
     */
    async show() {
        this.visible = true;
        this.state.visible = this.visible;
        if (this.isMobile) {
            return this.drawer.show();
        }
        else {
            this.alcStateChange.emit({ state: this.state });
        }
        return;
    }
    /**
     * Fecha o sidepanel
     * @returns O valor retornado é `true` se o painel foi dispensado com a chamada do método.
     */
    async hide() {
        this.visible = false;
        this.state.visible = this.visible;
        if (this.isMobile) {
            return this.drawer.hide();
        }
        else {
            this.alcStateChange.emit({ state: this.state });
        }
        return;
    }
    handleResize() {
        this.isMobile = window.innerWidth < MOBILE_BREAKPOINT;
    }
    componentWillLoad() {
        let detail = {
            state: this.state
        };
        this.handleResize();
        this.state.visible = this.visible;
        this.alcStateRequest.emit(detail);
        // Garante que o objeto this.state tenha as chaves esperadas, independente do valor de detail.state
        this.state = Object.assign(Object.assign({}, DEFAULT_STATE), detail.state);
        this.visible = this.state.visible;
    }
    componentDidRender() {
        var _a, _b;
        if ((_a = this.slotContainer.children) === null || _a === void 0 ? void 0 : _a.length) {
            // @TODO Melhorar isso, pois pressupõe que tem somente um children
            this.slotContent = this.slotContainer.children[0];
        }
        if (this.isMobile) {
            this.mobileSlot.appendChild(this.slotContent);
        }
        else {
            this.desktopSlot.appendChild(this.slotContent);
        }
        this.setOffset();
        const top = document.querySelector('[data-alc-top]');
        (_b = this.ro) === null || _b === void 0 ? void 0 : _b.disconnect();
        this.ro = new ResizeObserver(() => {
            this.setOffset();
        });
        this.ro.observe(top);
    }
    disconnectedCallback() {
        var _a;
        (_a = this.ro) === null || _a === void 0 ? void 0 : _a.disconnect();
    }
    render() {
        console.debug('render menu container');
        if (!this.isMobile && this.visible) {
            document.querySelector('html').classList.add('alc-sidepanel-visible');
        }
        else {
            document.querySelector('html').classList.remove('alc-sidepanel-visible');
        }
        return (h(Host, { key: 'faeacb3a035ddcb2f77951759e3fabf13f055aa9', class: "alc-sidepanel" }, h("div", { key: '1b168abcc82fbad96e26743ad6ef750083e0aac8', ref: el => this.slotContainer = el }, h("slot", { key: '6d8bd910fe70f5c65f122c7d9f6cbc951cd8ed4c' })), h("div", { key: '677d9bcdb77d68b05dbeef0933aca74f3f4fb929', class: {
                'alc-sidepanel__mobile-container': true,
            } }, this.renderMobile()), h("div", { key: 'f5efb3e8a82ed58eabeca33939da1f8ae65eb6c5', class: {
                'alc-sidepanel__desktop-container': true,
            } }, h("button", Object.assign({ key: '0c15d78e6ba75a566173b4cb55e3e41dc3585588', type: "button", class: "alc-button alc-button-rounded fixed left-2 -mt-[3.75rem] text-white z-[1020] focus-visible:outline-2 focus-visible:outline-white", onClick: () => this.visible ? this.hide() : this.show(), "aria-pressed": this.visible ? 'true' : 'false' }, testAttributes('data-test-sidepanel-desktop-close-button'), { "data-alc-sidepanel-button": true }), h("alc-icon", { key: '79b13d7cc336a82bc4c7fa2856fbe5275fb59996', name: "list", label: "Exibir navega\u00E7\u00E3o" })), h("div", { key: '1d694d33e34441ae63b323d69249dddddb942e3e', ref: el => this.desktopSlot = el, class: {
                'alc-sidepanel__desktop-slot': true,
                'is-open': this.visible,
            } }))));
    }
    setOffset() {
        const top = document.querySelector('[data-alc-top]');
        logger.debug(top.offsetHeight);
        this.el.style.setProperty('--offset', top.offsetHeight.toString());
    }
    get el() { return this; }
    static get style() { return alcSidepanelCss; }
}, [4, "alc-sidepanel", {
        "visible": [1540],
        "isMobile": [32],
        "show": [64],
        "hide": [64]
    }, [[9, "resize", "handleResize"]]]);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["alc-sidepanel", "alc-drawer", "alc-icon"];
    components.forEach(tagName => { switch (tagName) {
        case "alc-sidepanel":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, AlcSidepanel$1);
            }
            break;
        case "alc-drawer":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "alc-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
    } });
}

const AlcSidepanel = AlcSidepanel$1;
const defineCustomElement = defineCustomElement$1;

export { AlcSidepanel, defineCustomElement };
//# sourceMappingURL=alc-sidepanel.js.map

//# sourceMappingURL=alc-sidepanel.js.map