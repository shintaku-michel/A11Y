{"file":"alc-icon2.js","mappings":"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","names":["__stencil_proxyCustomElement"],"sources":["src/components/alc-icon/utils.ts","src/components/alc-icon/validate.ts","src/components/alc-icon/request.ts","src/components/alc-icon/alc-icon.css?tag=alc-icon","src/components/alc-icon/alc-icon.tsx"],"sourcesContent":["import { getAssetPath } from '@stencil/core';\nimport { AlcIcon as Icon } from './alc-icon';\n\n\nlet CACHED_MAP: Map<string, string>;\n\nexport const getIconMap = (): Map<string, string> => {\n  if (typeof window === 'undefined') {\n    return new Map();\n  } else {\n    if (!CACHED_MAP) {\n      const win = window as any;\n      win.Ionicons = win.Ionicons || {};\n      CACHED_MAP = win.Ionicons.map = win.Ionicons.map || new Map();\n    }\n    return CACHED_MAP;\n  }\n};\n\nexport const addIcons = (icons: { [name: string]: string; }) => {\n  const map = getIconMap();\n  Object.keys(icons).forEach(name => map.set(name, icons[name]));\n};\n\n\nexport const getUrl = (i: Icon) => {\n  let url = getSrc(i.src);\n  if (url) {\n    return url;\n  }\n\n  url = getName(i.name, i.icon);\n  if (url) {\n    return getNamedUrl(url);\n  }\n\n  if (i.icon) {\n    url = getSrc(i.icon);\n    if (url) {\n      return url;\n    }\n\n    url = getSrc(i.icon);\n    if (url) {\n      return url;\n    }\n  }\n\n  return null;\n};\n\n\nconst getNamedUrl = (iconName: string) => {\n  const url = getIconMap().get(iconName);\n  if (url) {\n    return url;\n  }\n  return getAssetPath(`assets/icons/${iconName}.svg`);\n};\n\n\nexport const getName = (\n  iconName: string | undefined,\n  icon: string | undefined\n) => {\n\n  // if an icon was passed in using the ios or md attributes\n  // set the iconName to whatever was passed in\n  if (!iconName && icon && !isSrc(icon)) {\n      iconName = icon;\n  }\n  \n  if (isStr(iconName)) {\n      iconName = toLower(iconName);\n  }\n\n  if (!isStr(iconName) || iconName.trim() === '') {\n    return null;\n  }\n\n  // only allow alpha characters and dash\n  const invalidChars = iconName.replace(/[a-z]|-|\\d/gi, '');\n  if (invalidChars !== '') {\n    return null;\n  }\n\n  return iconName;\n};\n\nexport const getSrc = (src: string | undefined) => {\n  if (isStr(src)) {\n    src = src.trim();\n    if (isSrc(src)) {\n      return src;\n    }\n  }\n  return null;\n};\n\nexport const isSrc = (str: string) => str.length > 0 && /(\\/|\\.)/.test(str);\n\nexport const isStr = (val: any): val is string => typeof val === 'string';\n\nexport const toLower = (val: string) => val.toLowerCase();\n\n/**\n * Elements inside of web components sometimes need to inherit global attributes\n * set on the host. For example, the inner input in `ion-input` should inherit\n * the `title` attribute that developers set directly on `ion-input`. This\n * helper function should be called in componentWillLoad and assigned to a variable\n * that is later used in the render function.\n *\n * This does not need to be reactive as changing attributes on the host element\n * does not trigger a re-render.\n */\nexport const inheritAttributes = (el: HTMLElement, attributes: string[] = []) => {\n  const attributeObject: { [k: string]: any } = {};\n\n  attributes.forEach(attr => {\n    if (el.hasAttribute(attr)) {\n      const value = el.getAttribute(attr);\n      if (value !== null) {\n        attributeObject[attr] = el.getAttribute(attr);\n      }\n      el.removeAttribute(attr);\n    }\n  });\n\n  return attributeObject;\n}","import { isStr } from './utils';\n\nexport const validateContent = (svgContent: string) => {\n  const div = document.createElement('div');\n  div.innerHTML = svgContent;\n\n  // setup this way to ensure it works on our buddy IE\n  for (let i = div.childNodes.length - 1; i >= 0; i--) {\n    if (div.childNodes[i].nodeName.toLowerCase() !== 'svg') {\n      div.removeChild(div.childNodes[i]);\n    }\n  }\n\n  // must only have 1 root element\n  const svgElm = div.firstElementChild;\n  if (svgElm && svgElm.nodeName.toLowerCase() === 'svg') {\n    const svgClass = svgElm.getAttribute('class') || '';\n    svgElm.setAttribute('class', (svgClass + ' alc-icon__image').trim());\n\n    // root element must be an svg\n    // lets double check we've got valid elements\n    // do not allow scripts\n    if (isValid(svgElm as any)) {\n      return div.innerHTML;\n    }\n  }\n  return '';\n};\n\nexport const isValid = (elm: HTMLElement) => {\n  if (elm.nodeType === 1) {\n    if (elm.nodeName.toLowerCase() === 'script') {\n      return false;\n    }\n\n    for (let i = 0; i < elm.attributes.length; i++) {\n      const val = elm.attributes[i].nodeName;\n      if (isStr(val) && val.toLowerCase().indexOf('on') === 0) {\n        return false;\n      }\n    }\n\n    for (let i = 0; i < elm.childNodes.length; i++) {\n      if (!isValid(elm.childNodes[i] as any)) {\n        return false;\n      }\n    }\n  }\n  return true;\n};","import { validateContent } from './validate';\n\nexport const alciconContent = new Map<string, string>();\nconst requests = new Map<string, Promise<any>>();\n\n/*\n * Originalmente, a função validateContent (importada acima) inseria uma classe\n * no elemento svg obtido. Precisávamos de outra classe (do Alcance, não o ionic),\n * e que essa classe fosse inserida sempre, independentemente de validação.\n * Por isso foi criada essa função aqui. Desse modo, o svg obtido já fica com\n * a classe devida antes de ir para o cache.\n *\n * Obs.: A inclusão da classe dentro da função de validação (como feito originalmente\n * pela equipe do ionic) parece ser um desvio do objetivo da função.\n */\nconst addSvgClass = (svgContent: string, className: string): string => {\n  // Cria container temporário para o svg\n  const div = document.createElement('div');\n  div.innerHTML = svgContent;\n  // Adiciona a classe necessária no svg\n  div.querySelector('svg').classList.add(className);\n  // Atualiza string HTML do svg.\n  return div.innerHTML;\n}\n\nexport const getSvgContent = (url: string, sanitize: boolean) => {\n  // see if we already have a request for this url\n  let req = requests.get(url);\n\n  if (!req) {\n    if (typeof fetch !== 'undefined' && typeof document !== 'undefined') {\n      // we don't already have a request\n      req = fetch(url).then((rsp) => {\n        if (rsp.ok) {\n          return rsp.text().then((svgContent) => {\n            if (svgContent && sanitize !== false) {\n              svgContent = validateContent(svgContent);\n            }\n            if (svgContent) {\n              svgContent = addSvgClass(svgContent, 'alc-icon__image');\n            }\n            alciconContent.set(url, svgContent || '');\n          });\n        }\n        alciconContent.set(url, '');\n      });\n\n      // cache for the same requests\n      requests.set(url, req);\n    } else {\n      // set to empty for ssr scenarios and resolve promise\n      alciconContent.set(url, '');\n      return Promise.resolve();\n    }\n  }\n\n  return req;\n};","alc-icon {\n  /* @apply flex-none w-4 text-center; */\n  @apply inline-block;\n}\n\n/* @TODO Rever o nome dessa classe */\n.icon-inner {\n  @apply inline-flex items-center;\n}\n\nalc-icon.size-x-small {\n  @apply text-xs;\n}\n\nalc-icon.size-small {\n  @apply text-sm;\n}\n\nalc-icon.size-medium {\n  @apply text-base;\n}\n\nalc-icon.size-large {\n  @apply text-lg;\n}\n\nalc-icon.size-x-large {\n  @apply text-xl;\n}\n\nalc-icon.size-xx-large {\n  @apply text-2xl;\n}\n\n.alc-icon__image {\n  /* Medidas em 'em' para poder variar de acordo com o tamanho do texto\n     que no qual está inserido. */\n  @apply w-[1em] h-[1em] -mt-[0.125em] top-[0.125em] relative;\n}\n","import { Build, Component, Element, Host, Prop, State, Watch, h } from '@stencil/core';\nimport logger from '../utils/logger';\nimport { getSvgContent, alciconContent } from './request';\nimport { /* getName , */ getUrl, inheritAttributes } from './utils';\n\n@Component({\n  tag: 'alc-icon',\n  assetsDirs: ['assets/icons'],\n  styleUrl: 'alc-icon.css',\n  scoped: false,\n})\nexport class AlcIcon {\n  private io?: IntersectionObserver;\n  private iconName: string | null = null;\n  private inheritedAttributes: { [k: string]: any } = {};\n  private role: 'img' | 'presentation' = 'img';\n\n  @Element() el!: HTMLElement;\n\n  @State() private svgContent?: string;\n  @State() private isVisible = false;\n  @State() private ariaLabel?: string;\n\n  /**\n   * Equivalente textual do ícone. Seu uso é semelhante ao atributo `alt` de uma imagem.\n   * Esse texto será lido por software leitor de tela, e utilizado no lugar do ícone se por qualquer motivo a imagem não puder ser carregada no navegador.\n   */\n  @Prop({ reflect: true }) label!: string;\n\n  /**\n   * Define se o ícone deve ser espelhado horizontalmente quando `dir` for `\"rtl\"`.\n   */\n  @Prop({ reflect: true }) flipRtl?: boolean = false;\n\n  /**\n   * Nome do ícone que será mostrado. Deve ser um dos nomes de ícone da biblioteca.\n   */\n  @Prop({ reflect: true }) name?: string;\n\n  /**\n   * Especifica o `src` de um arquivo SVG a ser usado como ícone.\n   */\n  @Prop({ reflect: true }) src?: string;\n\n  /**\n   * Uma combinação de `name` e `src`.\n   * Se o valor for entendido como a URL de um `src`, ele definirá a propriedade `src`.\n   * Caso contrário, assume-se como o nome de ícone da biblioteca, e define a propriedade `name`.\n   */\n  @Prop({ reflect: true }) icon?: string;\n\n  /**\n   * Se ativado, a carga do ícone ocorrerá somente quando o componente estiver visível na _viewport_.\n   */\n  @Prop({ reflect: true }) lazy = false;\n\n  /**\n   * Quando definido como `true`, o conteúdo SVG obtido via HTTP passará por uma limpeza.\n   * Conteúdo que contenha algum elemento `<script>` ou atributo que comece com `on`, como `onclick`, será descartado.\n   * Sendo descartado, a imagem não será mostrada.\n   * @default false\n   */\n  @Prop({ reflect: true }) sanitize = false;\n\n  componentWillLoad() {\n    this.inheritedAttributes = inheritAttributes(this.el, ['aria-label']);\n  }\n\n  connectedCallback() {\n    // purposely do not return the promise here because loading\n    // the svg file should not hold up loading the app\n    // only load the svg if it's visible\n    this.waitUntilVisible(this.el, '50px', () => {\n      this.isVisible = true;\n      this.loadIcon();\n    });\n  }\n\n  disconnectedCallback() {\n    if (this.io) {\n      this.io.disconnect();\n      this.io = undefined;\n    }\n  }\n\n  private waitUntilVisible(el: HTMLElement, rootMargin: string, cb: () => void) {\n    if (Build.isBrowser && this.lazy && typeof window !== 'undefined' && (window as any).IntersectionObserver) {\n      const io = (this.io = new (window as any).IntersectionObserver(\n        (data: IntersectionObserverEntry[]) => {\n          if (data[0].isIntersecting) {\n            io.disconnect();\n            this.io = undefined;\n            cb();\n          }\n        },\n        { rootMargin },\n      ));\n\n      io.observe(el);\n    } else {\n      // browser doesn't support IntersectionObserver\n      // so just fallback to always show it\n      cb();\n    }\n  }\n  \n  private hasAriaHidden = () => {\n    const { el } = this;\n    \n    return el.hasAttribute('aria-hidden') && el.getAttribute('aria-hidden') === 'true';\n  }\n\n  @Watch('label')\n  @Watch('name')\n  @Watch('src')\n  @Watch('icon')\n  loadIcon() {\n    if (Build.isBrowser && this.isVisible) {\n      const url = getUrl(this);\n      if (url) {\n        if (alciconContent.has(url)) {\n          // sync if it's already loaded\n          this.svgContent = alciconContent.get(url);\n          logger.log(this.svgContent);\n        } else {\n          // async if it hasn't been loaded\n          getSvgContent(url, this.sanitize).then(() => (this.svgContent = alciconContent.get(url)));\n        }\n      }\n    }\n\n    // Se label estiver preenchido\n    if (this.label) {\n      this.ariaLabel = this.label;\n      this.role = 'img';\n    }\n    // Se label for um string vazio\n    else if (this.label === '') {\n      this.ariaLabel = undefined;\n      this.role = 'presentation';\n    }\n  }\n\n\n  render() {\n    this.label ?? logger.report('label', this.el.tagName.toLowerCase(), this.el)\n    const { label, iconName, ariaLabel, inheritedAttributes, role } = this;\n    const flipRtl =\n      this.flipRtl ||\n      (iconName &&\n        (iconName.indexOf('arrow') > -1 || iconName.indexOf('chevron') > -1) &&\n        this.flipRtl !== false);\n\n    /**\n     * Only set the aria-label if a) we have generated\n     * one for the icon and if aria-hidden is not set to \"true\".\n     * If developer wants to set their own aria-label, then\n     * inheritedAttributes down below will override whatever\n     * default label we have set.\n     */\n    return (\n      <Host\n        label={label}\n        aria-label={ariaLabel !== undefined && !this.hasAriaHidden() ? ariaLabel : null}\n        role={role}\n        class={{\n          'flip-rtl': !!flipRtl && (this.el.ownerDocument as Document).dir === 'rtl',\n        }}\n        {...inheritedAttributes}\n      >\n        {Build.isBrowser && this.svgContent ? (\n          <span class=\"icon-inner\" innerHTML={this.svgContent}></span>\n        ) : (\n          <span class=\"icon-inner\">{label}</span>\n        )}\n      </Host>\n    );\n  }\n}"],"version":3}