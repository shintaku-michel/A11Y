import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { g as getUniqueId } from './getUniqueId.js';
import { l as logger } from './logger.js';
import { a as getMode } from './theme.js';
import { d as defineCustomElement$2 } from './alc-icon2.js';

const alcDetailsBaseCss = ".alc-details__summary.is-disabled{cursor:not-allowed}";

const themeAlcDetailsCss = "alc-details{--bg-color:var(--alc-color-surface);--shadow-color:var(--alc-color-border)}@supports (color: color-mix(in srgb, black, white)){alc-details{--shadow-color:color-mix(in srgb, var(--alc-color-border) 50%, transparent)}}[data-alc-theme=\"light\"] alc-details{--border-color:var(--alc-color-border);--text-color-hover:var(--alc-color-action-60);--bg-color-disabled:var(--alc-color-neutral-10);--border-color-disabled:var(--alc-color-neutral-20);--text-color-disabled:var(--alc-color-text-4)}[data-alc-theme=\"dark\"] alc-details{--border-color:var(--alc-color-border);--text-color-hover:var(--alc-color-action-40);--bg-color-disabled:var(--alc-color-neutral-80);--border-color-disabled:var(--alc-color-neutral-70);--text-color-disabled:var(--alc-color-text-3)}:host{display:block}.alc-details__summary{list-style:none}.alc-details__summary::-webkit-details-marker{display:none}.alc-details{margin-bottom:0.5rem;border-radius:var(--alc-radius-default);background-color:var(--bg-color);--tw-shadow:0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);--tw-shadow-colored:0 1px 3px 0 var(--tw-shadow-color), 0 1px 2px -1px var(--tw-shadow-color);-webkit-box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);--tw-shadow-color:var(--shadow-color);--tw-shadow:var(--tw-shadow-colored);}.alc-details.is-disabled{border-radius:var(--alc-radius-default);border-color:var(--border-color-disabled);background-color:var(--bg-color-disabled);color:var(--text-color-disabled)}.alc-details__summary{--summary-padding:calc(0.5rem - 2px);display:-ms-flexbox;display:flex;cursor:pointer;-ms-flex-align:center;align-items:center;gap:0.5rem;padding:var(--summary-padding);font-size:1rem;line-height:1.5rem;transition-property:color, background-color, border-color, fill, stroke, -webkit-text-decoration-color;-webkit-transition-property:color, background-color, border-color, fill, stroke, -webkit-text-decoration-color;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke, -webkit-text-decoration-color;-webkit-transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);-webkit-transition-duration:150ms;transition-duration:150ms;border-radius:var(--alc-radius-default);border-width:1px;border-color:var(--border-color)}.alc-details__summary:hover{color:var(--text-color-hover)}.alc-details__summary.is-open{border-bottom-right-radius:0px;border-bottom-left-radius:0px}.alc-details__summary:focus-visible{border-color:var(--border-color)}.alc-details__icon{-webkit-transform-origin:center;transform-origin:center;--tw-rotate:0deg;-webkit-transform:translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));transform:translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));-webkit-transition-property:-webkit-transform;transition-property:-webkit-transform;transition-property:transform;transition-property:transform, -webkit-transform;-webkit-transition-duration:200ms;transition-duration:200ms;-webkit-transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1)}.alc-details__icon.is-open{--tw-rotate:90deg;-webkit-transform:translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));transform:translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}.alc-details__summary.is-disabled{pointer-events:none;cursor:not-allowed;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;outline:2px solid transparent;outline-offset:2px}.alc-details__summary.is-disabled:focus-visible{border-color:transparent}.alc-details__content{border-radius:var(--alc-radius-default);border-top-left-radius:0px;border-top-right-radius:0px;border-right-width:1px;border-left-width:1px;border-bottom-width:1px;border-color:var(--border-color);padding:0.5rem;}";

const AlcDetails$1 = /*@__PURE__*/ proxyCustomElement(class AlcDetails extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.alcShow = createEvent(this, "alc-show", 7);
        this.alcClose = createEvent(this, "alc-close", 6);
        this.idDetails = null;
        /**
         * Mantém aberto.
         */
        this.opened = false;
        this.maxHeight = null;
        this.showDetails = (e) => {
            if (this.disabled) {
                e.preventDefault();
                return;
            }
            this.opened = this.detailsElement.open;
            if (this.opened) {
                this.alcShow.emit();
            }
            else {
                this.alcClose.emit();
            }
        };
    }
    renderIcon() {
        // Não mostra ícone se não for tematizado
        if (getMode() === 'base') {
            return null;
        }
        return (h("alc-icon", { name: "chevron-right", label: "Expandir", class: {
                'alc-details__icon': true,
                'is-open': this.opened,
            } }));
    }
    componentWillLoad() {
        // Antes do componente carregar, cria um id para o details.
        this.idDetails = getUniqueId();
    }
    componentDidLoad() {
        // Aguarda carga do componente para inserir o listener do evento
        this.detailsElement.addEventListener('toggle', this.showDetails);
    }
    // Configuração de altura para animação removida até ajustar para que funcione details dentro do tabs
    // componentDidRender() {
    //   this.summaryElement = this.detailsElement.querySelector('.alc-details__summary');
    //   this.contentElement = this.detailsElement.querySelector('.alc-details__content');
    //   // Por meio do ResizeObserver, redefine o valor de altura máxima, deixando a altura do conteúdo
    //   // dentro do details dinâmico
    //   const target = this.contentElement;
    //   const modifierElement = this.detailsElement;
    //   const minHeight = this.summaryElement.offsetHeight;
    //   function observerCallback() {
    //     const targetHeight = target.scrollHeight;
    //     const height = targetHeight + minHeight + 1;
    //     modifierElement.style.setProperty('--min-height', minHeight + 'px');
    //     modifierElement.style.setProperty('--max-height', height + 'px');
    //   }
    //   this.ro = new ResizeObserver(observerCallback);
    //   this.ro.observe(target);
    //   // Inicia com um cálculo de altura necessário para animação.
    //   // Não interfere na dinâmica do conteúdo.
    //   if (modifierElement) {
    //     const minHeight = this.summaryElement.offsetHeight;
    //     const maxHeight = this.contentElement.offsetHeight;
    //     modifierElement.style.setProperty('--min-height', minHeight + 'px');
    //     modifierElement.style.setProperty('--content-height', maxHeight + 'px');
    //   }
    // }
    render() {
        var _a;
        (_a = this.summary) !== null && _a !== void 0 ? _a : logger.report('summary', this.element.tagName.toLowerCase(), this.element);
        return (h(Host, { key: '82b4dabe8a69e6b2eec1eba297a065931cf8e1fe' }, h("details", { key: '4f8d568957333eb6c9f41485c654daacf8eda14c', id: this.idDetails, open: this.opened, class: {
                'alc-details': true,
                'is-disabled': this.disabled,
                'is-open': this.opened,
            }, ref: el => (this.detailsElement = el) }, h("summary", { key: 'b1be29ff426173d74fc28366996a668ce7c090c4', class: {
                'alc-details__summary': true,
                'is-disabled': this.disabled,
                'is-open': this.opened
            } }, this.renderIcon(), this.summary), h("div", { key: 'a5d050ec9d369667b5a4abb954f6dadacd9152ad', class: "alc-details__content" }, h("slot", { key: '1fe678e8072aa8f4cd430041dca81d0ba23241e2' })))));
    }
    get element() { return this; }
    static get style() { return {
        base: alcDetailsBaseCss,
        theme: themeAlcDetailsCss
    }; }
}, [36, "alc-details", {
        "summary": [513],
        "disabled": [516],
        "opened": [1028],
        "maxHeight": [32]
    }]);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["alc-details", "alc-icon"];
    components.forEach(tagName => { switch (tagName) {
        case "alc-details":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, AlcDetails$1);
            }
            break;
        case "alc-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
    } });
}

const AlcDetails = AlcDetails$1;
const defineCustomElement = defineCustomElement$1;

export { AlcDetails, defineCustomElement };
//# sourceMappingURL=alc-details.js.map

//# sourceMappingURL=alc-details.js.map