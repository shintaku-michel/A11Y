import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';
import { l as logger } from './logger.js';
import { s as setAppliedTheme, g as getAppliedTheme, r as removeUserPreference, b as saveUserPreference, l as loadUserPreference } from './theme.js';
import { g as getUniqueId } from './getUniqueId.js';
import { t as testAttributes } from './testAttributes.js';
import { d as defineCustomElement$2 } from './alc-field2.js';

const alcThemeBaseCss = "";

const alcThemeCss = "alc-theme{display:block}.alc-theme__label{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);white-space:nowrap;border-width:0}.alc-field__core .alc-theme__select{width:auto}";

const NO_THEME = 0;
const LIGHT_THEME = 1;
const DARK_THEME = 2;
const AlcTheme$1 = /*@__PURE__*/ proxyCustomElement(class AlcTheme extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
    }
    change(theme) {
        logger.log('changed to', theme);
        switch (theme) {
            case LIGHT_THEME:
                setAppliedTheme('light');
                saveUserPreference('light');
                break;
            case DARK_THEME:
                setAppliedTheme('dark');
                saveUserPreference('dark');
                break;
            default:
                setAppliedTheme(getAppliedTheme('system'));
                removeUserPreference();
                break;
        }
        this.selectedTheme = theme;
    }
    getSelectedValue(select) {
        return parseInt(select.selectedOptions[0].value);
    }
    componentWillLoad() {
        const userPreference = loadUserPreference();
        if (userPreference === 'light') {
            this.selectedTheme = LIGHT_THEME;
        }
        else if (userPreference === 'dark') {
            this.selectedTheme = DARK_THEME;
        }
        else {
            this.selectedTheme = NO_THEME;
        }
        this.selectId = getUniqueId();
    }
    render() {
        return (h(Host, { key: '1303b40b7cf8291232126b54294abfeea9907b16' }, h("alc-field", { key: '6091a7a2ad536f854c532ce898fd40b7b4479ca9' }, h("label", Object.assign({ key: '8570c6bf2d41e99c4ef01b14f209613a82117b36', htmlFor: this.selectId, slot: "label", class: "alc-theme__label" }, testAttributes('data-test-label')), "Tema"), h("div", { key: 'b3e55038e3df6b4dc75e8b3d1ff71d0960d9a087' }, h("select", Object.assign({ key: 'aa73b515c5aa45ec04faaffff8e3948511f756ed', onChange: (e) => this.change(this.getSelectedValue(e.target)), class: "alc-theme__select", id: this.selectId }, testAttributes('data-test-select')), h("option", { key: 'c7b043b78f2c693051cb710ce12f51fe17139c16', value: NO_THEME, selected: this.selectedTheme === NO_THEME }, "Do Sistema", this.selectedTheme === NO_THEME ? ' ✔' : ''), h("option", { key: '66b49cf0fb421ae680c2b3750fbec2290676a532', value: LIGHT_THEME, selected: this.selectedTheme === LIGHT_THEME }, "Claro", this.selectedTheme === LIGHT_THEME ? ' ✔' : ''), h("option", { key: '86181cfa6e6507d83abc9f1cd0cef398a9c403d1', value: DARK_THEME, selected: this.selectedTheme === DARK_THEME }, "Escuro", this.selectedTheme === DARK_THEME ? ' ✔' : ''))))));
    }
    static get style() { return {
        base: alcThemeBaseCss,
        theme: alcThemeCss
    }; }
}, [32, "alc-theme", {
        "selectedTheme": [32]
    }]);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["alc-theme", "alc-field"];
    components.forEach(tagName => { switch (tagName) {
        case "alc-theme":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, AlcTheme$1);
            }
            break;
        case "alc-field":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
    } });
}

const AlcTheme = AlcTheme$1;
const defineCustomElement = defineCustomElement$1;

export { AlcTheme, defineCustomElement };
//# sourceMappingURL=alc-theme.js.map

//# sourceMappingURL=alc-theme.js.map