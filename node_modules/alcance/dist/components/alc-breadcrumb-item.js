import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';
import { t as testAttributes } from './testAttributes.js';
import { d as defineCustomElement$2 } from './alc-icon2.js';

const alcBreadcrumbItemCss = "[data-alc-theme=\"dark\"] alc-breadcrumb-item{--outline-color:var(--alc-color-action-30)}[data-alc-theme=\"light\"] alc-breadcrumb-item{--outline-color:var(--alc-color-action-60)}.alc-breadcrumb-item{display:-ms-flexbox;display:flex;-ms-flex-align:baseline;align-items:baseline}.alc-breadcrumb-item__link{display:-ms-flexbox;display:flex;-ms-flex-align:baseline;align-items:baseline;color:var(--alc-color-text-secondary)}.alc-breadcrumb-item__icon{margin-right:0.25rem}.alc-breadcrumb-item__link a{border-radius:0.125rem;outline-color:var(--outline-color)}.alc-breadcrumb-item__separator{margin-left:0.25rem;margin-right:0.25rem}";

const AlcBreadcrumbItem$1 = /*@__PURE__*/ proxyCustomElement(class AlcBreadcrumbItem extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        /** Indica a url do link, pode-se usar o slot default para adicionar o elemento de navegação */
        this.url = null;
        /** Indica a label do breadcrumb */
        this.label = null;
        /** Indica o nome do icone a ser renderizado */
        this.iconName = null;
        this.isCurrentPage = false;
    }
    componentWillLoad() {
        this.isCurrentPage = !!this.el.ariaCurrent;
    }
    onAriaLabelChange(newValue) {
        this.isCurrentPage = newValue === null ? false : true;
    }
    render() {
        return (h(Host, { key: 'eb3336d1010473107ba48af621865847c669b7e0', role: "listitem" }, h("div", { key: '843d998744324ad3e0e4b38c07db32dda9fff05a', class: 'alc-breadcrumb-item' }, h("div", { key: '5a271f68cc38681bab776a0b8ceda5ce53f859f3', class: {
                'alc-breadcrumb-item__link': true,
                'alc-link': !this.isCurrentPage
            } }, this.iconName && (h("alc-icon", Object.assign({ key: '2b47b53113ed0e955b4c9b022a9aa7a508a54e02', label: "", name: this.iconName, class: "alc-breadcrumb-item__icon", "aria-hidden": "true" }, testAttributes('data-test-icon')))), this.url ? (h("a", Object.assign({ href: this.url }, testAttributes('data-test-link')), this.label)) : (h("slot", null))), !this.isCurrentPage && (h("span", { key: '4d72144f8495b0da57230a7c3af5d403f127b9e8', class: 'alc-breadcrumb-item__separator' }, "/")))));
    }
    get el() { return this; }
    static get watchers() { return {
        "aria-current": ["onAriaLabelChange"]
    }; }
    static get style() { return alcBreadcrumbItemCss; }
}, [4, "alc-breadcrumb-item", {
        "url": [513],
        "label": [513],
        "iconName": [513, "icon-name"],
        "isCurrentPage": [32]
    }, undefined, {
        "aria-current": ["onAriaLabelChange"]
    }]);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["alc-breadcrumb-item", "alc-icon"];
    components.forEach(tagName => { switch (tagName) {
        case "alc-breadcrumb-item":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, AlcBreadcrumbItem$1);
            }
            break;
        case "alc-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
    } });
}

const AlcBreadcrumbItem = AlcBreadcrumbItem$1;
const defineCustomElement = defineCustomElement$1;

export { AlcBreadcrumbItem, defineCustomElement };
//# sourceMappingURL=alc-breadcrumb-item.js.map

//# sourceMappingURL=alc-breadcrumb-item.js.map