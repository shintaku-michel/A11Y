import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { l as logger } from './logger.js';

const alcTabButtonBaseCss = "alc-tab-button{display:inline-block}.alc-tabs__button.active{-webkit-text-decoration-line:underline;text-decoration-line:underline}";

const themeAlcTabButtonCss = "[data-alc-theme=\"dark\"] .alc-tabs__button{--text-color:#52daf2;--bg-color-button:var(--alc-color-neutral-70)}[data-alc-theme=\"dark\"] .alc-tabs__button:hover{--bg-color-button:#3d4551}[data-alc-theme=\"dark\"] .alc-tabs__button.active{--text-color:var(--alc-color-text-primary);--bg-color-button:var(--bg-color)}[data-alc-theme=\"light\"] .alc-tabs__button{--text-color:var(--alc-color-link-text);--bg-color-button:#dfe1e2}[data-alc-theme=\"light\"] .alc-tabs__button:hover{--bg-color-button:#c6cace}[data-alc-theme=\"light\"] .alc-tabs__button.active{--text-color:var(--alc-color-text-primary);--bg-color-button:var(--bg-color)}alc-tab-button{display:inline-block}.alc-tabs__button{z-index:10;border-color:var(--border-color);background-color:var(--bg-color-button);padding:0.5rem;padding-top:0.75rem;color:var(--text-color);border-right-width:var(--border-width);border-bottom-width:var(--border-width)}.alc-tabs__button.active{cursor:default;padding-top:0.5rem;-webkit-text-decoration-line:none;text-decoration-line:none;border-top-width:4px;border-bottom-color:transparent}alc-tab-button:first-child{border-color:var(--border-color);border-left-width:var(--border-width)}.alc-tabs__button:focus-visible,.alc-tabs__button.active:focus-visible{outline-style:solid;outline-width:2px;outline-offset:-8px;outline-color:var(--outline-color)}";

const AlcTabButton = /*@__PURE__*/ proxyCustomElement(class AlcTabButton extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.alcClick = createEvent(this, "alc-click", 7);
        this.alcNext = createEvent(this, "alc-next", 7);
        this.alcPrevious = createEvent(this, "alc-previous", 7);
        this.alcFirst = createEvent(this, "alc-first", 7);
        this.alcLast = createEvent(this, "alc-last", 7);
    }
    selectedChanged(newValue, oldValue) {
        if (newValue !== oldValue) {
            if (newValue) {
                this.button.setAttribute('tabindex', '0');
            }
            else {
                this.button.setAttribute('tabindex', '-1');
            }
        }
    }
    selectTab(e) {
        if (this.tab !== undefined) {
            this.alcClick.emit({
                tab: this.tab
            });
            e.preventDefault();
        }
    }
    // Inspirado na implementação do WAI - função onKeyDown().
    // https://www.w3.org/WAI/content-assets/wai-aria-practices/patterns/tabs/examples/js/tabs-automatic.js
    keyDownHandler(e) {
        let handled = false;
        switch (e.key) {
            case 'ArrowRight':
                this.alcNext.emit();
                handled = true;
                break;
            case 'ArrowLeft':
                this.alcPrevious.emit();
                handled = true;
                break;
            case 'Home':
                this.alcFirst.emit();
                handled = true;
                break;
            case 'End':
                this.alcLast.emit();
                handled = true;
                break;
        }
        if (handled) {
            e.preventDefault();
        }
    }
    componentWillLoad() {
    }
    render() {
        var _a;
        (_a = this.tab) !== null && _a !== void 0 ? _a : logger.report('tab', this.el.tagName.toLowerCase(), this.el);
        const getId = () => {
            let id;
            if (this.el.id) {
                id = this.el.id;
            }
            else {
                id = `alc-button_${this.el.tab}`;
            }
            return id;
        };
        return (h(Host, null, h("button", { onClick: this.selectTab.bind(this), onKeyDown: this.keyDownHandler.bind(this), role: 'tab', "aria-selected": this.selected ? 'true' : 'false', tabindex: '-1', id: getId(), class: {
                'alc-tabs__button': true,
                active: this.selected
            }, ref: el => this.button = el }, h("slot", null))));
    }
    get el() { return this; }
    static get watchers() { return {
        "selected": ["selectedChanged"]
    }; }
    static get style() { return {
        base: alcTabButtonBaseCss,
        theme: themeAlcTabButtonCss
    }; }
}, [36, "alc-tab-button", {
        "tab": [513],
        "selected": [1540]
    }, undefined, {
        "selected": ["selectedChanged"]
    }]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["alc-tab-button"];
    components.forEach(tagName => { switch (tagName) {
        case "alc-tab-button":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, AlcTabButton);
            }
            break;
    } });
}

export { AlcTabButton as A, defineCustomElement as d };
//# sourceMappingURL=alc-tab-button2.js.map

//# sourceMappingURL=alc-tab-button2.js.map