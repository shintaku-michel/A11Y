import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { g as getUniqueId } from './getUniqueId.js';
import { l as logger } from './logger.js';
import { t as testAttributes } from './testAttributes.js';
import { d as defineCustomElement$1 } from './alc-icon2.js';

const alcPaginationBaseCss = "alc-pagination{display:block}.alc-pagination{display:-ms-flexbox;display:flex;list-style-type:none;padding-left:0px;padding-right:0px}.alc-pagination__link{margin-left:0.25rem;margin-right:0.25rem;border-width:1px;border-style:solid;border-color:transparent;padding-left:0.5rem;padding-right:0.5rem}.alc-pagination__link.is-active{cursor:not-allowed;border-color:currentColor;color:currentColor;-webkit-text-decoration-line:none;text-decoration-line:none}.alc-pagination__link.is-disabled{cursor:not-allowed;color:currentColor;-webkit-text-decoration-line:none;text-decoration-line:none}";

const themeAlcPaginationCss = ".alc-pagination{display:-ms-flexbox;display:flex}.alc-pagination__content{display:-ms-flexbox;display:flex;list-style-type:none;-ms-flex-align:center;align-items:center}.alc-pagination__button--first,.alc-pagination__button--last{display:none}@media (min-width: 576px){.alc-pagination__button--first,.alc-pagination__button--last{display:block}}.alc-pagination__item{margin-left:0.125rem;margin-right:0.125rem;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}.alc-pagination__select{--border-width:1px;margin-left:0.25rem;margin-right:0.25rem;padding-top:0.25rem;padding-bottom:0.25rem;border-width:var(--border-width);padding-left:calc(0.25rem - var(--border-width));padding-right:calc(0.25rem - var(--border-width));max-height:2rem;min-width:4rem}";

const Pagination = /*@__PURE__*/ proxyCustomElement(class Pagination extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.alcChange = createEvent(this, "alc-change", 6);
        this.idSelectPagination = null;
        this.disabledSelect = false;
        /**
         * Número total de páginas.
         */
        this.totalPages = 1;
        /**
         * Número da página atual
         */
        this.currentPage = 1;
        /**
        * @type Array<number>
        * @default []
        *
        * Lista de páginas
        */
        this.pageList = [];
        this.paginationItem = {
            'isFirst': {
                icon: 'chevron-double-left',
                label: 'Ir para primeira página',
            },
            'isLast': {
                icon: 'chevron-double-right',
                label: 'Ir para última página',
            },
            'isPrev': {
                icon: 'chevron-left',
                label: 'Ir para página anterior',
            },
            'isNext': {
                icon: 'chevron-right',
                label: 'Ir para próxima página',
            },
        };
        this.checkPage = (using) => {
            const leftPaginationItems = ['isFirst', 'isPrev'];
            const rightPaginationItems = ['isLast', 'isNext'];
            if (leftPaginationItems.includes(using)) {
                return this.currentPage !== 1;
            }
            if (rightPaginationItems.includes(using)) {
                return this.currentPage !== this.pageList.length;
            }
            return true;
        };
        this.handleSelectedPage = (event) => {
            this.handleChangePage(parseInt(event.target.value), 'isSelect');
        };
        this.renderPaginationItem = (pageNumber, using) => {
            const paginationItemIsDisabled = !this.checkPage(using);
            const paginationItemLabel = (!paginationItemIsDisabled && using !== 'isFirst') ? `, Ir para página ${pageNumber}` : '';
            return (h("li", null, h("button", Object.assign({ onClick: () => this.handleChangePage(pageNumber, using), class: {
                    'alc-button alc-button-rounded': true,
                    'alc-pagination__button--first': using === 'isFirst',
                    'alc-pagination__button--last': using === 'isLast',
                }, "aria-label": this.paginationItem[using].label + paginationItemLabel, "aria-disabled": paginationItemIsDisabled, disabled: paginationItemIsDisabled }, testAttributes('data-test-pagination-button')), h("alc-icon", { name: this.paginationItem[using].icon, label: "" }))));
        };
    }
    watchPropTotalPages(newValue, oldValue) {
        if (newValue < this.currentPage) {
            this.totalPages = oldValue;
            logger.warn(`"total-pages" não pode ser menor do que "current-page". Foi mantido o valor ${oldValue}`);
            return;
        }
        this.pageList = [...new Array(newValue)].map((_, index) => index + 1);
    }
    componentWillLoad() {
        this.pageList = [...new Array(this.totalPages)].map((_, index) => index + 1);
        this.idSelectPagination = getUniqueId();
    }
    handleChangePage(pageNumber, using) {
        if (!this.checkPage(using)) {
            return;
        }
        const newChange = this.alcChange.emit({
            from: this.currentPage,
            to: pageNumber,
            using: using,
        });
        this.pageChangeHandler(newChange);
    }
    pageChangeHandler(event) {
        const { using, to } = event.detail;
        switch (using) {
            case 'isFirst':
                this.currentPage = 1;
                break;
            case 'isPrev':
                this.currentPage = this.currentPage - 1;
                break;
            case 'isNext':
                this.currentPage = this.currentPage + 1;
                break;
            case 'isLast':
                this.currentPage = this.totalPages;
                break;
            default:
                this.currentPage = to;
                break;
        }
    }
    render() {
        return (h(Host, { key: 'b9c2cd42db54e71b3c5a51a415954b1c54eb45a1' }, h("nav", { key: '882ca182b295ef0381c3ded7d7a0a0c050b46433', role: "navigation", "aria-label": "Navega\u00E7\u00E3o paginada", class: "alc-pagination" }, h("ul", { key: '477efe3227941828b93bce80c41059df2c5b0a98', class: "alc-pagination__content" }, this.renderPaginationItem(1, 'isFirst'), this.renderPaginationItem(this.currentPage - 1, 'isPrev'), h("li", { key: '9d359535992c6a6774da1d48470179da7eb0f58e', class: "alc-pagination__item" }, h("label", { key: 'fdeecaa87d18f33ba5a1d62cfe5405230ff6d7b9', htmlFor: this.idSelectPagination }, "P\u00E1gina"), h("select", { key: '9b30bfdd417a4dfbc719ef1625debd5ff4b650c4', onChange: this.handleSelectedPage, class: "alc-pagination__select", id: this.idSelectPagination, disabled: this.disabledSelect }, this.pageList.map(page => (h("option", { value: page, selected: page === this.currentPage, "aria-label": `Página ${page}` }, page)))), "de ", this.totalPages), this.renderPaginationItem(this.currentPage + 1, 'isNext'), this.renderPaginationItem(this.pageList.length, 'isLast')))));
    }
    static get watchers() { return {
        "totalPages": ["watchPropTotalPages"]
    }; }
    static get style() { return {
        base: alcPaginationBaseCss,
        theme: themeAlcPaginationCss
    }; }
}, [32, "alc-pagination", {
        "totalPages": [1538, "total-pages"],
        "currentPage": [1538, "current-page"],
        "pageList": [32]
    }, undefined, {
        "totalPages": ["watchPropTotalPages"]
    }]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["alc-pagination", "alc-icon"];
    components.forEach(tagName => { switch (tagName) {
        case "alc-pagination":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, Pagination);
            }
            break;
        case "alc-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}

export { Pagination as P, defineCustomElement as d };
//# sourceMappingURL=alc-pagination2.js.map

//# sourceMappingURL=alc-pagination2.js.map