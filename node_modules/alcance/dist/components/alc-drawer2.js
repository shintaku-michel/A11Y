import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { g as getFocusableElements, h as handleKeyDown, f as focusFirstElement } from './keydown.js';
import { t as testAttributes } from './testAttributes.js';
import { l as lockBodyScroll, u as unlockBodyScroll } from './scrollLockManager.js';
import { d as defineCustomElement$1 } from './alc-icon2.js';

const alcDrawerBaseCss = ".alc-modal__overlay{position:fixed;inset:0px;z-index:10;display:-ms-flexbox;display:flex;-ms-flex-align:start;align-items:flex-start;-ms-flex-pack:end;justify-content:flex-end}.alc-drawer__content{position:relative;height:100%;width:100%;max-width:28rem;overflow-y:auto}.alc-drawer__header{display:-ms-flexbox;display:flex;-ms-flex-pack:end;justify-content:flex-end;padding:1rem}";

const themeAlcDrawerCss = ".alc-drawer__overlay{position:fixed;inset:0px;z-index:30;display:-ms-flexbox;display:flex;-ms-flex-align:start;align-items:flex-start;-ms-flex-pack:end;justify-content:flex-end;background-color:rgb(45 46 47 / var(--tw-bg-opacity));--tw-bg-opacity:0.4}.alc-drawer__content{position:relative;height:100%;width:100%;max-width:28rem;overflow-y:auto;background-color:var(--alc-color-surface-primary);--tw-shadow:0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);--tw-shadow-colored:0 10px 15px -3px var(--tw-shadow-color), 0 4px 6px -4px var(--tw-shadow-color);-webkit-box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)}.alc-drawer__header{position:absolute;right:0px;display:block;padding-right:var(--alc-spacing-04);padding-top:var(--alc-spacing-04)}";

const AlcDrawer = /*@__PURE__*/ proxyCustomElement(class AlcDrawer extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.alcShow = createEvent(this, "alc-show", 7);
        this.alcAfterShow = createEvent(this, "alc-after-show", 6);
        this.alcHide = createEvent(this, "alc-hide", 7);
        this.alcAfterHide = createEvent(this, "alc-after-hide", 6);
        this.triggerElement = null;
        /**
        * @type Element ou ID
        * @description Elemento ou ID do elemento que será focado quando o drawer fechar.
        */
        this.elementToFocus = null;
        /**
        * @type boolean
        * @description Define se o drawer está aberto ou fechado.
        */
        this.isVisible = false;
        this.getDrawerRef = (element) => this.drawerRef = element;
        this.handleFocusWhenCloseDrawer = () => {
            if (!!this.elementToFocus) {
                let element = this.elementToFocus;
                if (typeof element === 'string') {
                    element = document.getElementById(element);
                }
                return !!element ? element.focus() : null;
            }
            const defaultFocus = ['BODY', 'DOCUMENT'];
            const hasTriggerElement = !!this.triggerElement && document.body.contains(this.triggerElement);
            if (hasTriggerElement && !defaultFocus.includes(this.triggerElement.tagName)) {
                this.triggerElement.focus();
                return;
            }
            return;
        };
    }
    watchIsVisible(isVisible) {
        if (isVisible) {
            lockBodyScroll();
            this.triggerElement = document.activeElement;
            this.show();
            return isVisible;
        }
        unlockBodyScroll();
        this.hide();
        return isVisible;
    }
    /**
    * Método para abrir o drawer.
    */
    async show() {
        if (this.isVisible) {
            return false;
        }
        const { defaultPrevented } = this.alcShow.emit();
        if (defaultPrevented) {
            return false;
        }
        this.isVisible = true;
        this.alcAfterShow.emit();
        return true;
    }
    /**
    * Método para fechar o drawer.
    */
    async hide() {
        if (!this.isVisible) {
            return false;
        }
        const { defaultPrevented } = this.alcHide.emit();
        if (defaultPrevented) {
            return false;
        }
        this.isVisible = false;
        this.alcAfterHide.emit();
        this.handleFocusWhenCloseDrawer();
        return true;
    }
    /**
    * Foco fica dentro do drawer quando aberta.
    */
    handleKeyDown(event) {
        if (!this.isVisible) {
            return;
        }
        if (event.defaultPrevented) {
            return;
        }
        if (event.key === 'Escape') {
            event.preventDefault();
            this.hide();
            return;
        }
        if (event.key !== 'Tab')
            return;
        const focusableElements = getFocusableElements(this.drawerRef);
        handleKeyDown(event, focusableElements);
    }
    componentDidRender() {
        // Pega os elementos focáveis a cada renderização (Pode haver mudanças no drawer).
        const focusableElements = getFocusableElements(this.drawerRef);
        // Após o componente renderizar e estiver aberto, então ja coloca foco dentro do drawer.
        if (this.isVisible) {
            focusFirstElement(focusableElements);
        }
    }
    connectedCallback() {
        if (this.isVisible) {
            lockBodyScroll();
        }
    }
    disconnectedCallback() {
        if (this.isVisible) {
            unlockBodyScroll();
        }
    }
    render() {
        return (h(Host, { key: 'ca2677c0cd1d14c67bafa67fce53f5b424f4685e', style: { display: this.isVisible ? 'block' : 'none' } }, h("div", { key: '8acd999442e9acf8a2e809cfa7815da89eee94cb', class: "alc-drawer__overlay" }, h("div", { key: 'fb8f0c024488670e1b8d2ecdb127bf3932b12571', class: "alc-drawer__content bg-white dark:bg-black", role: "dialog", "aria-modal": "true", ref: this.getDrawerRef }, h("div", { key: '849e2ea5ff524e1d38e56f9d8927dfccf7f0a4d9', class: "alc-drawer__header" }, h("button", Object.assign({ key: '4c1cb2eeb3873269d1e22c2562aca16194483c0f', class: "alc-button alc-button-rounded", onClick: () => this.hide() }, testAttributes('data-test-close-button')), h("alc-icon", Object.assign({ key: '3d49c3ad15ddaa614ff1c247de746248e94c498b', name: "x-lg", label: "Fechar Drawer" }, testAttributes('data-test-close-icon'))))), h("div", { key: 'ece60e72f6084d1a481561acb9978f769e4178d3' }, h("slot", { key: '8c460fb7b5dcc59fe786028b1a7557e0308f5b7c' }))))));
    }
    static get watchers() { return {
        "isVisible": ["watchIsVisible"]
    }; }
    static get style() { return {
        base: alcDrawerBaseCss,
        theme: themeAlcDrawerCss
    }; }
}, [36, "alc-drawer", {
        "elementToFocus": [1, "element-to-focus"],
        "isVisible": [1540, "is-visible"],
        "show": [64],
        "hide": [64]
    }, [[4, "keydown", "handleKeyDown"]], {
        "isVisible": ["watchIsVisible"]
    }]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["alc-drawer", "alc-icon"];
    components.forEach(tagName => { switch (tagName) {
        case "alc-drawer":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, AlcDrawer);
            }
            break;
        case "alc-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}

export { AlcDrawer as A, defineCustomElement as d };
//# sourceMappingURL=alc-drawer2.js.map

//# sourceMappingURL=alc-drawer2.js.map