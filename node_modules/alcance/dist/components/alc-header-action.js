import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { l as logger } from './logger.js';
import { d as defineCustomElement$4 } from './alc-icon2.js';
import { d as defineCustomElement$3 } from './alc-menu-item2.js';
import { d as defineCustomElement$2 } from './alc-menu-link2.js';

const alcHeaderActionCss = "alc-header-action{display:inline}.alc-header-action__menu-link-icon{margin-right:0.5rem}";

const AlcHeaderAction$1 = /*@__PURE__*/ proxyCustomElement(class AlcHeaderAction extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.alcSelect = createEvent(this, "alc-select", 7);
        this.slotNodes = null;
        /**
         * Nome do ícone a ser exibido.
         */
        this.iconName = 'square';
        /**
         * Define o tipo de elemento a ser renderizado.
         */
        this.variant = 'button';
        /**
         * URL para a página de suporte. Usado quando a propriedade `variant` é `link` ou `menu-link`.
         */
        this.url = '';
        this.spaceKeyEvent = null;
        /** handler comum a todas as ativações locais */
        this.triggerEvent = (detail) => {
            this.alcSelect.emit(detail);
        };
    }
    handleKeyDownLink(event) {
        if (event.key === ' ') {
            event.preventDefault();
            const anchor = this.hostElement.querySelector('a');
            if (anchor) {
                this.spaceKeyEvent = event;
                anchor.click();
            }
        }
    }
    handleClickLink(event) {
        var _a;
        const originalEvent = (_a = this.spaceKeyEvent) !== null && _a !== void 0 ? _a : event;
        this.spaceKeyEvent = null; // Despreza esse evento para os próximos disparos.
        this.triggerEvent({ originalEvent: originalEvent });
    }
    handleKeyDownButton(event) {
        if (event.key === ' ' || event.key === 'Enter') {
            event.preventDefault();
            this.triggerEvent({ originalEvent: event });
        }
    }
    handleClickButton(event) {
        event.preventDefault();
        this.triggerEvent({ originalEvent: event });
    }
    handleAlcSelect(event) {
        // Esse código faz com que o evento deixe de ser do menu-item ou do menu-link
        // e passe a ser um evento do header-action.
        // Dessa forma, o usuário desse componente não precisa se preocupar com esse
        // detalhe da implementação interna. Ou seja, para todos os efeitos, para quem
        // vê de fora, o evento é disparado pelo header-action.
        event.stopPropagation();
        this.triggerEvent({
            originalEvent: event.detail.originalEvent
        });
    }
    componentDidLoad() {
        this.slotNodes = this.slot.assignedNodes();
    }
    componentDidRender() {
        var _a, _b, _c;
        logger.debug('alc-header-action did render', this.slotNodes);
        // Captura os nós do <slot> apenas na primeira execução
        (_a = this.slotNodes) !== null && _a !== void 0 ? _a : (this.slotNodes = (_b = this.slot) === null || _b === void 0 ? void 0 : _b.assignedNodes());
        // Mapeia cada variante ao respectivo container
        const containerByVariant = {
            button: this.buttonContainer,
            link: this.linkContainer,
            'menu-item': this.menuItemContainer,
            'menu-link': this.menuLinkContainer,
        };
        const target = containerByVariant[this.variant];
        const node = (_c = this.slotNodes) === null || _c === void 0 ? void 0 : _c[0];
        // Só anexa se ambos existirem e o nó ainda não estiver no container
        if (target && node && !target.contains(node)) {
            target.appendChild(node);
        }
    }
    render() {
        var _a;
        // Tabela de renderização por variante
        const renderByVariant = {
            button: this.renderButton.bind(this),
            link: this.renderLink.bind(this),
            'menu-item': this.renderMenuItem.bind(this),
            'menu-link': this.renderMenuLink.bind(this),
        };
        // Executa o renderer correspondente (se existir)
        const VariantContent = (_a = renderByVariant[this.variant]) === null || _a === void 0 ? void 0 : _a.call(renderByVariant);
        return (h(Host, { key: 'd02313f6b6c7bc5a94fabdd43f96920b1fbdc459' }, h("slot", { key: 'a507bd91aef614b15bdc168e8e0c2335b5baa360', ref: el => (this.slot = el) }), VariantContent));
    }
    renderButton() {
        return (h("button", { class: "alc-header-button", onClick: this.handleClickButton.bind(this), onKeyDown: this.handleKeyDownButton.bind(this) }, h("alc-icon", { icon: this.iconName, label: "", class: "alc-header-button__icon" }), h("span", { class: "alc-header-button__label", ref: el => this.buttonContainer = el })));
    }
    renderLink() {
        return (h("a", { href: this.url, class: "alc-header-button", onClick: this.handleClickLink.bind(this), onKeyDown: this.handleKeyDownLink.bind(this) }, h("alc-icon", { icon: this.iconName, label: "", class: "alc-header-button__icon" }), h("span", { class: "alc-header-button__label", ref: el => this.linkContainer = el })));
    }
    renderMenuItem() {
        return (h("alc-menu-item", { "onAlc-select": this.handleAlcSelect.bind(this) }, h("alc-icon", { slot: "prefix", icon: this.iconName, label: "" }), h("span", { ref: el => this.menuItemContainer = el })));
    }
    renderMenuLink() {
        return (h("alc-menu-link", { "onAlc-select": this.handleAlcSelect.bind(this) }, h("a", { href: this.url, ref: el => this.menuLinkContainer = el }, h("alc-icon", { icon: this.iconName, label: "", class: "alc-header-action__menu-link-icon" }))));
    }
    get hostElement() { return this; }
    static get style() { return alcHeaderActionCss; }
}, [4, "alc-header-action", {
        "iconName": [513, "icon-name"],
        "variant": [513],
        "url": [1]
    }]);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["alc-header-action", "alc-icon", "alc-menu-item", "alc-menu-link"];
    components.forEach(tagName => { switch (tagName) {
        case "alc-header-action":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, AlcHeaderAction$1);
            }
            break;
        case "alc-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$4();
            }
            break;
        case "alc-menu-item":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "alc-menu-link":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
    } });
}

const AlcHeaderAction = AlcHeaderAction$1;
const defineCustomElement = defineCustomElement$1;

export { AlcHeaderAction, defineCustomElement };
//# sourceMappingURL=alc-header-action.js.map

//# sourceMappingURL=alc-header-action.js.map