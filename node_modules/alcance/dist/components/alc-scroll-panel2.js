import { proxyCustomElement, HTMLElement, forceUpdate, h, Host } from '@stencil/core/internal/client';
import { l as logger } from './logger.js';
import { t as throttle } from './throttle.js';
import { d as defineCustomElement$1 } from './alc-icon2.js';

const alcScrollPanelBaseCss = "alc-scroll-panel{display:block}.alc-scroll-panel{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row;-ms-flex-align:stretch;align-items:stretch}.alc-scroll-panel__content{overflow-x:hidden;white-space:nowrap}";

const themeAlcScrollPanelCss = "alc-scroll-panel{display:block}.alc-scroll-panel{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row;-ms-flex-align:stretch;align-items:stretch}.alc-scroll-panel__content{overflow-x:hidden;white-space:nowrap}[data-alc-theme=\"dark\"] alc-scroll-panel{--border-color:var(--alc-color-border);--shadow-color:#adadad;--outline-color:var(--alc-color-action-30)}[data-alc-theme=\"dark\"] .alc-scroll-panel__button{--text-color:var(--alc-color-link-text);--bg-color:transparent}[data-alc-theme=\"dark\"] .alc-scroll-panel__button:hover{--text-color:var(--alc-color-text-0);--bg-color:var(--alc-color-action-50)}[data-alc-theme=\"dark\"] .alc-scroll-panel__button:active{--text-color:var(--alc-color-text-0);--bg-color:var(--alc-color-action-70)}[data-alc-theme=\"dark\"] .alc-scroll-panel__button:disabled{--text-color:var(--alc-color-neutral-60);--bg-color:transparent}[data-alc-theme=\"light\"] alc-scroll-panel{--border-color:var(--alc-color-border);--shadow-color:#adadad;--outline-color:var(--alc-color-action-60)}[data-alc-theme=\"light\"] .alc-scroll-panel__button{--text-color:var(--alc-color-link-text);--bg-color:transparent}[data-alc-theme=\"light\"] .alc-scroll-panel__button:hover{--text-color:var(--alc-color-text-contrast);--bg-color:var(--alc-color-action-50)}[data-alc-theme=\"light\"] .alc-scroll-panel__button:active{--text-color:var(--alc-color-text-contrast);--bg-color:var(--alc-color-action-70)}[data-alc-theme=\"light\"] .alc-scroll-panel__button:disabled{--text-color:var(--alc-color-neutral-30);--bg-color:transparent}.alc-scroll-panel__button{--border-width:var(--alc-border-width);border-width:var(--border-width) 0;border-bottom-color:var(--border-color);border-top-color:transparent;height:100%;width:2.5rem;background-color:var(--bg-color);color:var(--text-color);transition-property:color, background-color, border-color, fill, stroke, -webkit-text-decoration-color;-webkit-transition-property:color, background-color, border-color, fill, stroke, -webkit-text-decoration-color;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke, -webkit-text-decoration-color;-webkit-transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);-webkit-transition-duration:150ms;transition-duration:150ms}.alc-scroll-panel__wrapper-content{position:relative;overflow:hidden}.alc-scroll-panel__content{overflow:auto}.alc-scroll-panel__content::-webkit-scrollbar{display:none}.alc-scroll-panel__has-scroll-left::before,.alc-scroll-panel__has-scroll-right::after{display:block;--tw-content:\"\\200C\";content:var(--tw-content);pointer-events:none;position:absolute;top:0px;z-index:10;height:100%;width:0.75rem}.alc-scroll-panel__has-scroll-left::before{left:0px;-webkit-box-shadow:inset 8px 0px 8px -8px var(--shadow-color);box-shadow:inset 8px 0px 8px -8px var(--shadow-color)}.alc-scroll-panel__has-scroll-right::after{right:0px;-webkit-box-shadow:inset -8px 0px 8px -8px var(--shadow-color);box-shadow:inset -8px 0px 8px -8px var(--shadow-color)}.alc-scroll-panel__button:focus-visible,.alc-scroll-panel__button.active:focus-visible{outline-style:solid;outline-width:2px;outline-offset:-2px;outline-color:var(--outline-color)}";

const SCROLL_STEP = 20;
const AlcScrollPanel = /*@__PURE__*/ proxyCustomElement(class AlcScrollPanel extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.hasScroll = false;
        this.canScrollRight = false;
        this.canScrollLeft = false;
        /**
        * Define se há foco.
        */
        this.hasFocus = true;
        this.scrollWidth = 0;
        this.scrolling = 0;
        this.resizeThrottle = throttle(this.resize, 200);
        this.scrollThrottle = throttle(this.handleScroll, 300);
    }
    themeLoadedHandler() {
        this.handleScroll();
    }
    handleResize() {
        this.resizeThrottle();
    }
    handleScrollToElement(element) {
        if (!!element) {
            element.scrollIntoView({ inline: "center", block: 'nearest' });
        }
    }
    resize() {
        this.handleScroll();
        this.handleScrollToElement(this.scrollToElement);
    }
    handleScroll() {
        this.scrollWidth = this.content.scrollWidth;
        this.hasScroll = this.scrollWidth > this.content.offsetWidth;
        this.setCanScroll();
    }
    scrollRight() {
        this.content.scrollLeft += SCROLL_STEP;
        this.setCanScroll();
    }
    scrollLeft() {
        this.content.scrollLeft = this.content.scrollLeft - SCROLL_STEP;
        this.setCanScroll();
    }
    startScrolling(button, scroll) {
        if (this.scrolling)
            return;
        this.scrolling = window.setInterval(() => {
            if (button.disabled) {
                this.stopScrolling();
                return;
            }
            scroll.apply(this);
        }, 200);
    }
    startScrollingRight(e) {
        const button = e.currentTarget;
        if (button instanceof HTMLButtonElement) {
            this.startScrolling(button, this.scrollRight);
        }
    }
    startScrollingLeft(e) {
        const button = e.currentTarget;
        if (button instanceof HTMLButtonElement) {
            this.startScrolling(button, this.scrollLeft);
        }
    }
    stopScrolling() {
        window.clearInterval(this.scrolling);
        this.scrolling = 0;
    }
    setCanScroll() {
        // Math.ceil foi necessário ao verificar funcionamento em um dispositivo móvel real,
        // onde scrollLeft apresenta números fracionários.
        this.canScrollRight = Math.ceil(this.content.offsetWidth + this.content.scrollLeft) < this.scrollWidth;
        this.canScrollLeft = this.content.scrollLeft > 0;
    }
    componentDidRender() {
        var _a;
        /*
         O trecho abaixo permite que o componente seja atualizado
         sempre que houver mudanças no conteúdo (como a inclusão de "fihos").
         Isso foi feito para permitir, por exemplo, que o conteúdo do panel
         seja atualizado dinamicamente com a manipulação do DOM.
         */
        (_a = this.mo) === null || _a === void 0 ? void 0 : _a.disconnect();
        this.mo = new MutationObserver(() => {
            logger.debug('forceUpdate scroll-panel');
            forceUpdate(this.el);
        });
        this.mo.observe(this.el, {
            childList: true,
            subtree: true
        });
        this.handleScroll();
    }
    disconnectedCallback() {
        var _a;
        (_a = this.mo) === null || _a === void 0 ? void 0 : _a.disconnect();
        this.resizeThrottle.cancel();
        this.scrollThrottle.cancel();
    }
    render() {
        return (h(Host, { key: '3c5dee05949d2b073dcb87abd7c4df0826377f4c' }, h("div", { key: '8cb56b2dfa1b2b82f8b3eb7dd52018410e1a9554', class: "alc-scroll-panel" }, this.hasScroll
            ? h("div", { key: "left-button" }, h("button", { onClick: this.scrollLeft.bind(this), onMouseDown: this.startScrollingLeft.bind(this), onMouseUp: this.stopScrolling.bind(this), onTouchStart: this.startScrollingLeft.bind(this), onTouchEnd: this.stopScrolling.bind(this), onTouchCancel: this.stopScrolling.bind(this), class: "alc-scroll-panel__button", disabled: !this.canScrollLeft, "aria-label": "Ir para esquerda", tabindex: this.hasFocus ? '0' : '-1' }, h("alc-icon", { name: "chevron-left", label: '' })))
            : null, h("div", { class: {
                "alc-scroll-panel__wrapper-content": true,
                "alc-scroll-panel__has-scroll-left": this.canScrollLeft,
                "alc-scroll-panel__has-scroll-right": this.canScrollRight
            }, key: "content" }, h("div", { key: '93e54d7ba7f47158fc3fcdfd357a742ed83568cc', class: "alc-scroll-panel__content", ref: el => this.content = el, onScroll: () => this.scrollThrottle() }, h("slot", { key: '49672486ccf36230946da3949ee80fc61f4098c4' }))), this.hasScroll
            ? h("div", { key: "right-button" }, h("button", { onClick: this.scrollRight.bind(this), onMouseDown: this.startScrollingRight.bind(this), onMouseUp: this.stopScrolling.bind(this), onTouchStart: this.startScrollingRight.bind(this), onTouchEnd: this.stopScrolling.bind(this), onTouchCancel: this.stopScrolling.bind(this), class: "alc-scroll-panel__button", disabled: !this.canScrollRight, "aria-label": "Ir para direita", tabindex: this.hasFocus ? '0' : '-1' }, h("alc-icon", { name: "chevron-right", label: '' })))
            : null)));
    }
    get el() { return this; }
    static get watchers() { return {
        "scrollToElement": ["handleScrollToElement"]
    }; }
    static get style() { return {
        base: alcScrollPanelBaseCss,
        theme: themeAlcScrollPanelCss
    }; }
}, [36, "alc-scroll-panel", {
        "hasFocus": [516, "has-focus"],
        "scrollToElement": [16],
        "hasScroll": [32],
        "canScrollRight": [32],
        "canScrollLeft": [32]
    }, [[8, "themeLoaded", "themeLoadedHandler"], [9, "resize", "handleResize"]], {
        "scrollToElement": ["handleScrollToElement"]
    }]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["alc-scroll-panel", "alc-icon"];
    components.forEach(tagName => { switch (tagName) {
        case "alc-scroll-panel":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, AlcScrollPanel);
            }
            break;
        case "alc-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}

export { AlcScrollPanel as A, defineCustomElement as d };
//# sourceMappingURL=alc-scroll-panel2.js.map

//# sourceMappingURL=alc-scroll-panel2.js.map