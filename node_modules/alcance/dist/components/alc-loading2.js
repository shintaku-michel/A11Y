import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';
import { l as logger } from './logger.js';
import { t as testAttributes } from './testAttributes.js';

const alcLoadingCss = "[data-alc-theme=\"light\"] alc-loading{--bg-color-overlay:#2d2e2f66;--border-color-loading-default:#dfe1e2;--border-color-loading:var(--alc-color-action-60)}[data-alc-theme=\"dark\"] alc-loading{--bg-color-overlay:#565c6566;--border-color-loading-default:#2d2e2f;--border-color-loading:var(--alc-color-action-40)}alc-loading{--bg-color-card:var(--alc-color-surface)}.alc-loading__overlay{position:fixed;top:0px;left:0px;z-index:1090;height:100%;width:100%;background-color:var(--bg-color-overlay);display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;gap:0.5rem}.alc-loading__card{min-width:12rem;border-radius:var(--alc-radius-default);background-color:var(--bg-color-card);padding:1rem;display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;text-wrap:nowrap;text-align:center}.alc-loading__card::before{display:block;--tw-content:\"\\200C\";content:var(--tw-content);margin-bottom:var(--alc-spacing-03);height:3rem;width:3rem}@-webkit-keyframes spin{to{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes spin{to{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}.alc-loading__card::before{-webkit-animation:spin 1s linear infinite;animation:spin 1s linear infinite;border-radius:9999px;border-width:6px;border-style:solid;border-color:var(--border-color-loading);border-right-color:var(--border-color-loading-default)}.alc-loading__container{position:relative}.alc-loading__card-container{margin-bottom:0.5rem;margin-top:0.5rem;min-width:12rem;border-radius:var(--alc-radius-default);background-color:var(--bg-color-card);padding:1rem;display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;text-wrap:nowrap;text-align:center}.alc-loading__overlay-container{position:absolute;inset:0px;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;background-color:var(--bg-color-overlay);z-index:50}.alc-loading__spinner-container{height:2.5rem;width:2.5rem}@keyframes spin{to{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}.alc-loading__spinner-container{-webkit-animation:spin 1s linear infinite;animation:spin 1s linear infinite;border-radius:9999px;border-width:4px;border-style:solid;border-color:var(--border-color-loading);border-right-color:var(--border-color-loading-default)}.alc-loading__inline{display:inline-block}.alc-loading__spinner-inline,.alc-loading__label-inline{display:-ms-inline-flexbox;display:inline-flex;vertical-align:sub}.alc-loading__spinner-inline{margin-right:0.5rem;height:1.25rem;width:1.25rem;-ms-flex-negative:0;flex-shrink:0}@keyframes spin{to{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}.alc-loading__spinner-inline{-webkit-animation:spin 1s linear infinite;animation:spin 1s linear infinite;border-radius:9999px;border-width:2px;border-style:solid;border-color:var(--border-color-loading);border-right-color:var(--border-color-loading-default)}.alc-loading__label-inline{font-size:0.875rem;line-height:1rem;line-height:1}.alc-loading__button{display:inline-block}.alc-loading__button-wrapper{display:-ms-inline-flexbox;display:inline-flex;-ms-flex-align:center;align-items:center}.alc-loading__spinner-button{position:relative;top:0.125em;margin-top:-0.125em;height:1rem;width:1rem}@keyframes spin{to{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}.alc-loading__spinner-button{-webkit-animation:spin 1s linear infinite;animation:spin 1s linear infinite;border-radius:9999px;border-width:2px;border-style:solid;border-color:var(--border-color-loading);border-right-color:var(--border-color-loading-default)}.sr-only{position:absolute;margin:-1px;height:1px;width:1px;overflow:hidden;white-space:nowrap;border-width:0px;padding:0px;clip:rect(0, 0, 0, 0)}";

const AlcLoading = /*@__PURE__*/ proxyCustomElement(class AlcLoading extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        /**
         * Define se o indicador de carregamento aparece na tela. Quando o valor é `true` mostra o componente e quando o valor é `false` oculta.
         */
        this.active = false;
        /**
        * Texto mostrado na tela enquanto estiver carregando e também anunciado no leitor de tela quando o estado mudar para `active=true`.
        */
        this.label = 'Carregando...';
        /**
        * Texto anunciado ao leitor de tela quando mudar o estado para `active=false`.
        */
        this.endMsg = 'Finalizado.';
        /**
         * Define a variação visual do componente:
         * - `'full-screen'`: ocupa a tela inteira.
         * - `'container'`: ocupa o elemento pai.
         * - `'inline'`: utilizado dentro de textos.
         * - `'button'`: utilizado dentro de botões.
         */
        this.variant = 'full-screen';
        /**
         * Mensagem interna para a região aria-live.
         */
        this.ariaMessage = '';
        this.parentButton = null;
    }
    /**
     * Exibe o loading.
     * @returns O valor retornado é `true` se o loading foi realmente exibido com essa chamada ao método.
     */
    async show() {
        if (this.active) {
            return false;
        }
        this.active = true;
        return true;
    }
    /**
     * Esconde o loading.
     * @returns O valor retornado é `true` se o loading foi realmente oculto com essa chamada ao método.
     */
    async hide() {
        if (!this.active) {
            return false;
        }
        this.active = false;
        return true;
    }
    onActiveChange(newValue, oldValue) {
        if (newValue !== oldValue) {
            this.updateAriaMessage();
            if (this.variant === 'button') {
                this.updateParentButtonAttributes();
            }
        }
    }
    componentWillLoad() {
        this.updateAriaMessage();
    }
    componentDidLoad() {
        if (this.variant === 'button') {
            this.findParentButton();
            this.updateParentButtonAttributes();
        }
    }
    updateAriaMessage() {
        this.ariaMessage = this.active ? this.label : this.endMsg;
    }
    findParentButton() {
        this.parentButton = this.el.closest('button');
        if (!this.parentButton) {
            logger.warn('alc-loading[variant="button"] deve estar dentro de um elemento <button>.');
        }
    }
    updateParentButtonAttributes() {
        if (this.parentButton) {
            if (this.active) {
                this.parentButton.setAttribute('aria-label', this.label);
            }
            else {
                this.parentButton.removeAttribute('aria-label');
            }
        }
    }
    render() {
        const shouldRenderAriaLive = this.variant !== 'button';
        return (h(Host, { key: '4e4d1315ccbcbd55c2718dd8421845ab217901fa' }, this.renderLoadingVisuals(), shouldRenderAriaLive && (h("div", Object.assign({ key: 'eab510d1080f9a3d1ec98600f86621a4faf99765', class: "sr-only", "aria-live": "polite", role: "status" }, testAttributes('data-test-acessibility')), this.ariaMessage))));
    }
    renderLoadingVisuals() {
        switch (this.variant) {
            case 'full-screen':
                return this.renderFullScreen();
            case 'container':
                return this.renderContainer();
            case 'inline':
                return this.renderInline();
            case 'button':
                return this.renderButton();
            default:
                return null;
        }
    }
    renderFullScreen() {
        if (!this.active)
            return null;
        return (h("div", { class: "alc-loading__overlay", "aria-hidden": "true" }, h("div", { class: "alc-loading__card" }, h("p", null, this.label))));
    }
    renderContainer() {
        if (!this.active)
            return null;
        return (h("div", { class: "alc-loading__overlay-container", "aria-hidden": "true" }, h("div", { class: "alc-loading__card-container" }, h("div", { class: "alc-loading__spinner-container" }), h("p", null, this.label))));
    }
    renderInline() {
        if (!this.active)
            return null;
        return (h("div", { class: "alc-loading__inline", "aria-hidden": "true" }, h("div", { class: "alc-loading__spinner-inline" }), h("span", { class: "alc-loading__label" }, this.label)));
    }
    renderButton() {
        if (!this.active)
            return null;
        return (h("div", { class: "alc-loading__button", "aria-hidden": "true" }, h("span", { class: "alc-loading__button-wrapper" }, h("div", { class: "alc-loading__spinner-button" }))));
    }
    get el() { return this; }
    static get watchers() { return {
        "active": ["onActiveChange"]
    }; }
    static get style() { return alcLoadingCss; }
}, [0, "alc-loading", {
        "active": [1540],
        "label": [513],
        "endMsg": [513, "end-msg"],
        "variant": [513],
        "show": [64],
        "hide": [64]
    }, undefined, {
        "active": ["onActiveChange"]
    }]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["alc-loading"];
    components.forEach(tagName => { switch (tagName) {
        case "alc-loading":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, AlcLoading);
            }
            break;
    } });
}

export { AlcLoading as A, defineCustomElement as d };
//# sourceMappingURL=alc-loading2.js.map

//# sourceMappingURL=alc-loading2.js.map