import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { l as logger } from './logger.js';

const alcEventLabCss = ":host{display:block}";

const AlcEventLab$1 = /*@__PURE__*/ proxyCustomElement(class AlcEventLab extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.alcChange = createEvent(this, "alc-change", 7);
        this.alcAfterChange = createEvent(this, "alc-after-change", 6);
        this.underlined = 1;
    }
    async changePage(pageNumber) {
        this.requestChangeTo(pageNumber);
    }
    requestChangeTo(newButton) {
        const currentButton = this.underlined;
        logger.debug('RequestChangeTo', newButton);
        // Regra interna do componente, que não faz nada se o botão clicado
        // for o que já está sublinhado
        if (newButton === currentButton) {
            logger.debug('Botão já estava sublinhado');
            return;
        }
        // Dispara o evento buttonWillChange.
        const event = this.alcChange.emit({
            from: currentButton,
            to: newButton
        });
        // Verifica se foi prevenido externamente.
        // Se foi, não faz mais nada.
        if (event.defaultPrevented) {
            logger.debug('defaultPrevented');
            return;
        }
        // Registra a alteração solicitada
        if (newButton === 1) {
            this.b2.classList.remove('underline');
            this.b1.classList.add('underline');
        }
        else if (newButton === 2) {
            this.b1.classList.remove('underline');
            this.b2.classList.add('underline');
        }
        this.underlined = newButton;
        // Dispara o evento buttonDidChange.
        this.alcAfterChange.emit({
            from: currentButton,
            to: newButton
        });
    }
    render() {
        this.alcAfterChange.emit({
            from: undefined,
            to: 1
        });
        return (h(Host, { key: '916e2c701b44dbbaae07001c91a295b0bb28aec1' }, h("button", { key: 'd62e5e9f217ef0b46e56556c4703f3cf86795c57', class: "button underline", ref: el => this.b1 = el, onClick: () => this.requestChangeTo(1) }, "1"), h("button", { key: '177c7edc53e2ff0aef977b41a598860d6e8b3812', class: "button", ref: el => this.b2 = el, onClick: () => this.requestChangeTo(2) }, "2"), h("slot", { key: '1b6a3447a5b462ea691f67dfeff86d8ecbcacc42' })));
    }
    static get style() { return alcEventLabCss; }
}, [4, "alc-event-lab", {
        "changePage": [64]
    }]);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["alc-event-lab"];
    components.forEach(tagName => { switch (tagName) {
        case "alc-event-lab":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, AlcEventLab$1);
            }
            break;
    } });
}

const AlcEventLab = AlcEventLab$1;
const defineCustomElement = defineCustomElement$1;

export { AlcEventLab, defineCustomElement };
//# sourceMappingURL=alc-event-lab.js.map

//# sourceMappingURL=alc-event-lab.js.map