{"version":3,"file":"p-C4olUleU.system.js","sources":["src/components/alc-nav-panel/alc-nav-panel.css?tag=alc-nav-panel","src/components/alc-nav-panel/alc-nav-panel.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n\n[data-alc-theme=\"light\"] alc-nav-panel {\n  --color-button: theme('colors.mint-cool.5');\n  --color-button-hover: theme('colors.mint-cool.10');\n\n  /* 26 indica 15% de transparencia */\n  --color-drop-shadow: theme('colors.black')26;\n  --outline-color: var(--alc-color-action-60);\n}\n\n[data-alc-theme=\"dark\"] alc-nav-panel {\n  --color-button: theme('colors.cyan.70');\n  --color-button-hover: theme('colors.cyan.60');\n\n  /* No modo dark ja tem contraste suficiente entre a borda e conteúdo,\n    por isso não precisa de sombra\n   */\n  --color-drop-shadow: theme('colors.transparent');\n  --outline-color: var(--alc-color-neutral-0);\n}\n\n\nalc-nav-panel {\n  --border-width: theme('borderWidth.8');\n\n  /* Largura padrão do conteúdo */\n  --content-width: 18rem;\n  \n  /* O valor default é 72px, que seria a altura padrão em produção do header, em situação \"normal\" */\n  --height: calc(var(--offset-top, 72) * 1px);\n\n  /*  Valor do conteudo + borda direita */\n  --max-width: calc(var(--content-width) + var(--border-width));\n}\n\n.alc-nav-panel {\n  /* Define a largura minima (tamanho da borda) para centralizar o conteúdo */\n  @apply md:min-w-[--border-width] transition-all z-50;\n}\n\n.alc-nav-panel--opened {\n  /* Aqui é definido a largura para empurrar o conteúdo a partir do lg */\n  @apply lg:min-w-[--max-width];\n}\n\n.alc-nav-panel__container {\n  @apply flex fixed flex-row-reverse;\n  /* Altura do viewpoint - o offsetTop do nav-panel */\n  height: calc(100vh - var(--height));\n}\n\n.alc-nav-panel__content {\n  @apply bg-[--alc-color-surface] h-full w-0 opacity-0 transition-all overflow-x-hidden block z-0;\n}\n\n.alc-nav-panel__content--opened {\n  @apply block w-[--content-width] opacity-100;\n}\n\n.alc-nav-panel__button-container {\n  @apply border-[--color-button] -z-0 text-[--alc-color-text-primary];\n  border-left-width: var(--border-width);\n  /* Drop-shadow para o sombreamento contornar o botão svg */\n  filter: drop-shadow(0 4px 3px var(--color-drop-shadow)) drop-shadow(0 2px 2px var(--color-drop-shadow));\n}\n\n.alc-nav-panel__button {\n  @apply relative mt-4 rounded -left-2 pl-2;\n}\n\n.alc-nav-panel__button:focus-visible {\n  @apply outline-none;\n}\n\n.alc-nav-panel__button:focus-visible .alc-nav-panel__button-icon {\n  @apply outline outline-2 outline-[--outline-color];\n}\n\n.alc-nav-panel__button-icon {\n  @apply absolute top-5 left-2;\n}\n\n.alc-nav-panel__button-svg {\n  @apply fill-[--color-button];\n}\n\n/* Tratamento da cor do svg + borda quando o botão recebe foco */\n.alc-nav-panel__button:hover .alc-nav-panel__button-svg {\n  @apply fill-[--color-button-hover] transition-colors;\n}\n\n.alc-nav-panel__button-container:has(.alc-nav-panel__button:hover) {\n  @apply border-[--color-button-hover] transition-colors;\n}\n/* ******* */\n.alc-nav-panel--hidden {\n  @apply hidden;\n}","import { Component, Host, Prop, h, Method, Event, EventEmitter, Element, State, Listen, Watch } from '@stencil/core';\nimport { getFocusableElements, handleKeyDown } from '../utils/keydown';\nimport screens from '../../../tailwind-screens';\n\nexport interface AlcStateEventTypes {\n  state: {\n    open: boolean;\n  }\n}\n\nconst DEFAULT_STATE = {\n  open: true\n};\n\n// Pega o valor definido da configuração do tailwind e remove o 'px'\nconst TABLET_BREAKPOINT = Number(screens.md.split('px')[0]);\nconst DESKTOP_BREAKPOINT = Number(screens.lg.split('px')[0]);\n\n/**\n * @slot DEFAULT - Slot para o conteúdo do nav-panel.\n */\n\n@Component({\n  tag: 'alc-nav-panel',\n  styleUrl: 'alc-nav-panel.css',\n  shadow: false\n})\nexport class AlcNavPanel {\n  @Element() el: HTMLAlcNavPanelElement;\n\n  private content: HTMLDivElement;\n  private button: HTMLButtonElement;\n  private state: {\n    open: boolean,\n  } = DEFAULT_STATE;\n  private display: 'mobile' | 'tablet' | 'desktop' = this.getDisplay();\n  private observer: MutationObserver;\n  private offsetTop: number = 0;\n\n  /**\n   * Indica se o nav-panel está visível. O valor inicial desse atributo será definido dinamicamente pelo próprio nav-panel.\n   */\n  @Prop({\n    reflect: true,\n    mutable: true\n  })\n  open: boolean;\n\n  /**\n   * Evento disparado quando o estado do nav-panel é alterado.\n   */\n  @Event({\n    eventName: 'alc-state-change',\n    cancelable: false,\n    bubbles: true\n  }) alcStateChange: EventEmitter<AlcStateEventTypes>;\n\n  /**\n   * Evento disparado quando o nav-panel precisa recuperar o estado.\n   */\n  @Event({\n    eventName: 'alc-state-request',\n    cancelable: false,\n    bubbles: true\n  }) alcStateRequest: EventEmitter<AlcStateEventTypes>;\n\n  /**\n   * Abre o nav-panel.\n   * @returns O valor retornado é `true` se o nav-panel foi exibido com a chamada do método.\n   */\n  @Method()\n  async show(): Promise<boolean> {\n    this.updateState(true);\n    return true;\n  }\n\n  /**\n   * Fecha o nav-panel.\n   * @returns O valor retornado é `true` se o nav-panel foi fechado com a chamada do método.\n   */\n  @Method()\n  async hide(): Promise<boolean> {\n    this.updateState(false);\n    return true;\n  }\n\n  @Listen('resize', { target: 'window' })\n  handleResize() {\n    // Atualiza o display se teve mudanças\n    const newDisplay = this.getDisplay();\n    if (newDisplay !== this.display) {\n      this.display = newDisplay;\n    }\n\n    // Essa classe é utilizada para aplicar padding e margins nas classes de container\n    // ATENÇÃO: Caso ocorra alteração no tamanho do botão ou da margin lateral, deve atualizar o tamanho dos paddings e margins\n    // na classe localizada em \"global/styles/c-layout.scss\"\n    const htmlElementClassList = document.querySelector('html').classList;\n\n    // Controle de CSS da tag html\n    if (newDisplay === 'mobile') {\n      // Se estiver no modo mobile e ter a classe alc-navpanel, remove a classe\n      htmlElementClassList.contains('alc-navpanel') ? htmlElementClassList.remove('alc-navpanel') : null;\n    } else {\n      // Se estiver no modo tablet ou desktop e NÃO ter a classe alc-navpanel, adiciona a classe\n      htmlElementClassList.contains('alc-navpanel') ? null: htmlElementClassList.add('alc-navpanel');\n    }\n\n    // Controle de exibição (open)\n    // Se estiver indo para desktop, o estado salvo define o valor de open\n    if (newDisplay === 'desktop') {\n      this.open = this.state.open;\n    }\n    // Senão, sempre estará oculto.\n    else {\n      this.open = false;\n    }\n\n    // Verifica se teve mudanças nos valores de offsetTop\n    // e atualiza as variáveis CSS\n    if (this.el.offsetTop !== this.offsetTop) {\n      this.setOffset(this.el.offsetTop);\n    }\n\n  }\n\n  @Listen('click', { target: 'body' })\n  handleClick(event: MouseEvent) {\n    // Se estiver fechado, não faz nada\n    if (!this.open) return;\n\n    // Se o elemento clicado é dentro do nav-panel ou um de seus filhos, não faz nada\n    const targetElement = event.target as HTMLElement;\n    if (this.el.contains(targetElement)) return;\n\n    // Se o breakpoint for desktop, não faz nada\n    if (this.display === 'desktop') return;\n\n    // Se o breakpoint for tamanho tablet ou menor, fecha o nav-panel ao clicar fora\n    this.hide();\n  }\n\n  @Listen('keydown')\n  handleKeyDown(event: KeyboardEvent) {\n    // Se estiver fechado, não faz nada\n    if (!this.open || event.defaultPrevented) return;\n\n    switch (event.key) {\n      // Se apertar \"Escape\", fecha o nav-panel\n      case 'Escape':\n        event.preventDefault();\n        this.hide();\n        this.button.focus();\n        break;\n      // Se o breakpoint for tamanho tablet ou menor, controla o foco dentro do nav-panel\n      case 'Tab':\n        if (this.display !== 'desktop') {\n          handleKeyDown(event, getFocusableElements(this.el));\n        }\n        break;\n    }\n  }\n\n  @Watch('open')\n  handleOpen() {\n    if (this.open && this.content) {\n      // Remove o atributo \"hidden\" quando o nav-panel é aberto\n      this.content.hidden = false;\n    }\n  }\n\n  componentWillLoad() {\n    // Monta objeto para o evento - Nesse momento, com o valor padrão.\n    const detail = {\n      state: DEFAULT_STATE\n    };\n    // Requisita o estado gravado\n    this.alcStateRequest.emit(detail); // Emite o evento para solicitar o estado\n    // Garante que o objeto this.state tenha as chaves esperadas, independente do valor de detail.state\n    // Grava o estado em memória\n    // O estado é sempre salvo, independentemente do valor de `display`, porque `display` pode\n    // mudar dinamicamente, e o estado pode passar a ser necessário.\n    this.state = { ...DEFAULT_STATE, ...detail.state };\n\n    if (this.display === 'desktop') {\n      // \"open\" para desktop será inicialmente o estado salvo\n      this.open = this.state.open;\n    }\n    else {\n      // \"open\" para outros cenários (não desktop) inicialmente será false.\n      this.open = false;\n    }\n  }\n\n  componentDidLoad() {\n    this.setOffset(this.el.offsetTop);\n\n    // Esconde o conteúdo quando o nav-panel é fechado após a transição\n    // A animação não funciona quando adiciona hidden no CSS\n    this.content.addEventListener(\"transitionend\", this.handleTransitionEnd.bind(this));\n\n    if (this.getDisplay() !== 'mobile') {\n      // Essa classe é utilizada para aplicar padding e margins nas classes de container\n      document.querySelector('html').classList.add('alc-navpanel');\n    }\n\n    this.observer = new MutationObserver(() => {\n      const newOffsetTop = this.el.offsetTop;\n      if (newOffsetTop !== this.offsetTop) {\n        console.log(`offsetTop mudou de ${this.offsetTop} para ${newOffsetTop}`);\n        this.setOffset(newOffsetTop);\n      }\n    });\n\n    // Observa mudanças no body inteiro, pois mudanças acima no DOM podem afetar o offsetTop\n    this.observer.observe(document.body, {\n      attributes: true,\n      childList: true,\n      subtree: true\n    });\n\n\n  }\n\n  disconnectedCallback() {\n    this.content.removeEventListener(\"transitionend\", this.handleTransitionEnd.bind(this));\n\n    if (this.observer) {\n      this.observer.disconnect();\n    }\n  }\n\n  private handleTransitionEnd() {\n    if (!this.open) {\n      this.content.hidden = true;\n    }\n  }\n\n  private getDisplay(): 'mobile' | 'tablet' | 'desktop' {\n    const width = window.innerWidth;\n\n    if (width >= DESKTOP_BREAKPOINT) return 'desktop';\n    if (width >= TABLET_BREAKPOINT) return 'tablet';\n    return 'mobile';\n  }\n\n  private updateState(open: boolean) {\n    this.open = open;\n\n    if (this.getDisplay() === 'desktop') {\n      this.state.open = open;\n      this.alcStateChange.emit({ state: this.state });\n    }\n  }\n\n  private setOffset(offsetTop?: number) {\n    this.offsetTop = offsetTop;\n    // Altura esta o elemento em relação ao topo da tela)\n    this.el.style.setProperty('--offset-top', this.el.offsetTop.toString());\n  }\n  // Utilizando \"svg\" diretamente em vez de uma tag <img> para permitir a personalização da cor do SVG no modo dark\n  private renderButtonSVG() {\n    return (\n      <svg width=\"24\" height=\"62\" viewBox=\"0 0 24 62\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" >\n        <path d=\"M7 7C1.4 7 0 2.33333 0 0C0 20.6667 6.69364e-06 41.3333 0 62C0 59.6667 1.4 55 7 55H20C22.2091 55 24 53.2091 24 51V11C24 8.79086 22.2091 7 20 7H7Z\" fill=\"#e0f7f6\" class=\"alc-nav-panel__button-svg\" />\n      </svg>\n    )\n  }\n\n  render() {\n\n    return (\n      <Host\n        class={{\n          'alc-nav-panel': true,\n          'alc-nav-panel--opened': this.open\n        }}\n      >\n        <div class=\"alc-nav-panel__container\">\n          <div class=\"alc-nav-panel__button-container\">\n            <button\n              class=\"alc-nav-panel__button\"\n              onClick={() => this.open ? this.hide() : this.show()}\n              aria-pressed={this.open ? 'true' : 'false'}\n              aria-label=\"Exibir navegação\"\n              ref={el => this.button = el}\n              data-alc-navpanel-button\n            >\n              {this.renderButtonSVG()}\n              <alc-icon\n                class=\"alc-nav-panel__button-icon\"\n                name={this.open ? 'x-lg' : 'list'}\n                label=\"\"\n              ></alc-icon>\n            </button>\n          </div>\n          <div\n            class={{\n              'alc-nav-panel__content': true,\n              'alc-nav-panel__content--opened': this.open\n            }}\n            ref={el => this.content = el}\n          >\n            <slot></slot>\n          </div>\n        </div>\n      </Host>\n    );\n  }\n}\n"],"names":[],"mappings":"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"}