{"version":3,"names":["alcFieldCss","AlcField","constructor","hostRef","this","describedBy","Map","errorId","hintId","hint","required","errorMsg","watchErrorMsg","newValue","logger","debug","input","slottedElement","tagName","mode","getAttribute","dropzoneElement","querySelector","classList","add","textInputElement","buttonElement","remove","findInputElement","element","toLowerCase","i","children","length","found","componentDidLoad","getUniqueId","el","id","setAttribute","inputId","set","label","labelEl","small","document","createElement","innerText","appendChild","updateAriaDescribedBy","componentWillRender","delete","currentDescribedBy","get","trim","render","h","Host","key","class","htmlFor","name","alcThemeBaseCss","alcThemeCss","NO_THEME","LIGHT_THEME","DARK_THEME","AlcTheme","change","theme","log","setAppliedTheme","saveUserPreference","getAppliedTheme","removeUserPreference","selectedTheme","getSelectedValue","select","parseInt","selectedOptions","value","componentWillLoad","userPreference","loadUserPreference","selectId","Object","assign","slot","testAttributes","onChange","e","target","selected"],"sources":["src/components/alc-field/alc-field.css?tag=alc-field","src/components/alc-field/alc-field.tsx","src/components/alc-theme/alc-theme-base.css?tag=alc-theme&mode=base","src/components/alc-theme/alc-theme.css?tag=alc-theme&mode=theme","src/components/alc-theme/alc-theme.tsx"],"sourcesContent":["\n[data-alc-theme=\"light\"] alc-field {\n  --text-color: var(--alc-color-text-4);\n  --text-color-label: var(--alc-color-text-0);\n  --text-color-placeholder: var(--alc-color-text-4);\n\n  --bg-color: var(--alc-color-surface-primary);\n\n  --shadow-color: var(--alc-color-neutral-5);\n\n  --outline-color: var(--alc-color-action-60);\n\n  --border-color: var(--alc-color-neutral-60);\n  --border-color-hover: var(--alc-color-action-60);\n  --border-color-focus : var(--alc-color-action-20);\n\n  /* Estilização de desabilitado */\n  --bg-color-disabled    : var(--alc-color-neutral-10);\n  --border-color-disabled: var(--alc-color-neutral-40);\n  --text-color-disabled  : var(--alc-color-text-4);\n\n  /* Estilização de error */\n  --text-color-error: var(--alc-color-error-50);\n  --border-color-error       : var(--alc-color-error-50);\n  --border-color-hover-error : var(--alc-color-error-45);\n  --border-color-focus-error : var(--alc-color-error-20);\n}\n\n[data-alc-theme=\"dark\"] alc-field {\n  --text-color: var(--alc-color-text-4);\n  --text-color-label: var(--alc-color-text-0);\n  --text-color-placeholder: var(--alc-color-text-4);\n\n  --bg-color: var(--alc-color-neutral-100);\n\n  --shadow-color: var(--alc-color-neutral-80);\n\n  --outline-color: var(--alc-color-action-30);\n\n  --border-color: var(--alc-color-neutral-30);\n  --border-color-hover: var(--alc-color-action-40);\n  --border-color-focus : var(--alc-color-action-70);\n\n  /* Estilização de desabilitado */\n  --bg-color-disabled    : var(--alc-color-neutral-80);\n  --border-color-disabled: var(--alc-color-neutral-50);\n  --text-color-disabled  : var(--alc-color-text-4);\n\n  /* Estilização de error */\n  --text-color-error: var(--alc-color-error-45);\n  --border-color-error       : var(--alc-color-error-45);\n  --border-color-hover-error : var(--alc-color-error-50);\n  --border-color-focus-error : var(--alc-color-error-70);\n}\n\n\n.alc-field {\n  @apply flex flex-col gap-1;\n}\n\n.alc-field__label {\n  @apply text-[--text-color-label];\n}\n\n.alc-field__core {\n  @apply flex flex-col gap-1;\n}\n\n.alc-field__text {\n  @apply text-sm text-[--text-color];\n\n  &--error {\n    @apply text-[--text-color-error];\n  }\n}\n\n.alc-field__input {\n  @apply shadow-inner shadow-[--shadow-color] w-full transition-colors min-h-[theme(height.10)];\n  @apply bg-[--bg-color] border border-[--border-color];\n  @apply placeholder:text-[--text-color-placeholder];\n\n  @apply hover:border-[--border-color-hover];\n  @apply focus:ring-0 focus:border-[--border-color-hover] focus:outline focus:outline-2 focus:outline-offset-2 focus:outline-[--outline-color];\n\n  @apply disabled:shadow-none disabled:bg-[--bg-color-disabled] disabled:border-[--border-color-disabled];\n  @apply disabled:text-[--text-color-disabled] disabled:cursor-not-allowed;\n  @apply disabled:hover:border-[--border-color-disabled];\n}\n\n.alc-field__input--error {\n  @apply border-[--border-color-error];\n  @apply hover:border-[--border-color-hover-error];\n  @apply focus:border-[--border-color-hover-error];\n}","import { Component, Element, Host, h, Prop, State, Watch} from '@stencil/core';\nimport { getUniqueId } from '../utils/getUniqueId';\nimport logger from '../utils/logger';\n\n/**\n * @slot - Slot para o controle de formulário.\n * Pode ser um `input` (text, number, password, email etc.), `select` ou `textarea`.\n *\n * @slot label - Slot para o elemento label do campo. Há opção de adicionar apenas o texto por meio da propriedade `label`.\n * Use esse recurso case seja necessário alguma personalização no HTML referente ao label.\n *\n * @cssClass alc-field__label - Aplicada ao elemento `label`.\n * @cssClass alc-field__core - Aplicada ao elemento que agrupa o controle de formulário, mensagem de erro e texto de ajuda.\n*/\n\n@Component({\n  tag: 'alc-field',\n  styleUrl: 'alc-field.css',\n  scoped: false,\n})\nexport class AlcField {\n\n  describedBy = new Map();\n  errorId = '';\n  hintId = '';\n\n  @Element() el: HTMLAlcFieldElement;\n\n  @State() input: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\n  @State() inputId: string;\n  @State() slottedElement: HTMLElement;\n\n  /**\n   * Texto do label do input.\n  */\n  @Prop({ reflect: true }) label?: string;\n\n  /**\n   * Texto de ajuda.\n  */\n  @Prop({ reflect: true }) hint: string = '';\n\n  /**\n   * Indica se o input é obrigatório.\n  */\n  @Prop({ reflect: true }) required: boolean = false;\n\n\n  /**\n   * Texto de mensagem de erro.\n  */\n  @Prop({\n    mutable: true,\n    reflect: true,\n  }) errorMsg: string = '';\n  @Watch('errorMsg')\n  watchErrorMsg(newValue: string) {\n    logger.debug('watchErrorMsg', newValue, this.input);\n\n    if (newValue) {\n      if (this.slottedElement.tagName === 'ALC-INPUT-FILE') {\n        const mode = this.slottedElement.getAttribute('mode');\n        if (mode === 'dropzone') {\n          const dropzoneElement = this.slottedElement.querySelector('.alc-input-file__dropzone');\n          if (dropzoneElement) {\n            dropzoneElement.classList.add('alc-field__input--error');\n          }\n        } else if (mode === 'input') {\n          const textInputElement = this.slottedElement.querySelector('.alc-input-file__text-input');\n          if (textInputElement) {\n            textInputElement.classList.add('alc-field__input--error');\n          }\n        } else if (mode === 'button') {\n          const buttonElement = this.slottedElement.querySelector('button.alc-button');\n          if (buttonElement) {\n            buttonElement.classList.add('alc-field__input--error');\n          }\n        }\n      } else {\n        // É um elemento nativo\n        this.input.classList.add('alc-field__input--error');\n      }\n    } else {\n      if (this.slottedElement.tagName === 'ALC-INPUT-FILE') {\n        const mode = this.slottedElement.getAttribute('mode');\n        if (mode === 'dropzone') {\n          const dropzoneElement = this.slottedElement.querySelector('.alc-input-file__dropzone');\n          if (dropzoneElement) {\n            dropzoneElement.classList.remove('alc-field__input--error');\n          }\n        } else if (mode === 'input') {\n          const textInputElement = this.slottedElement.querySelector('.alc-input-file__text-input');\n          if (textInputElement) {\n            textInputElement.classList.remove('alc-field__input--error');\n          }\n        } else if (mode === 'button') {\n          const buttonElement = this.slottedElement.querySelector('button.alc-button');\n          if (buttonElement) {\n            buttonElement.classList.remove('alc-field__input--error');\n          }\n        }\n      } else {\n        // É um elemento nativo\n        this.input.classList.remove('alc-field__input--error');\n      }\n    }\n  }\n  \n  // Função recursiva para encontrar o <input>\n  private findInputElement(element: Element): HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement | null {\n    if (!element) return null;\n\n    const tagName = element.tagName.toLowerCase();\n    if (tagName === 'input' || tagName === 'select' || tagName === 'textarea') {\n      return element as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\n    }\n\n    for (let i = 0; i < element.children.length; i++) {\n      const found = this.findInputElement(element.children[i]);\n      if (found) {\n        return found;\n      }\n    }\n\n    return null;\n  }\n\n  async componentDidLoad() {\n    // Reserva IDs para os elementos de erro e dica\n    this.errorId = getUniqueId();\n    this.hintId = getUniqueId();\n\n    // Seleciona o elemento slotted\n    this.slottedElement = this.el.querySelector('input, select, textarea, alc-input-file');\n\n    if (this.slottedElement) {\n      // Procura o elemento <input> dentro do componente slotted\n      this.input = this.findInputElement(this.slottedElement);\n\n      if (this.input) {\n        this.input.id = this.input.id || getUniqueId();\n        this.input.setAttribute('aria-required', this.required ? 'true' : 'false');\n        this.input.classList.add('alc-field__input');\n        this.inputId = this.input.getAttribute('id');\n        this.watchErrorMsg(this.errorMsg);\n        this.describedBy.set('original', this.input.getAttribute('aria-describedby') || '');\n      }\n    }\n\n    // Configura o label se não estiver usando o slot \"label\"\n    if (!this.label) {\n      const labelEl = this.el.querySelector('[slot=\"label\"] label');\n      labelEl?.classList.add('alc-field__label');\n      if (labelEl && this.required) {\n        const small = document.createElement('small');\n        small.setAttribute('aria-hidden', 'true');\n        small.innerText = ' (obrigatório)';\n        labelEl.appendChild(small);\n      }\n    }\n\n    // Atualiza os atributos de acessibilidade\n    this.updateAriaDescribedBy();\n  }\n  componentWillRender() {\n    this.updateAriaDescribedBy();\n  }\n\n\n  private updateAriaDescribedBy() {\n    if (this.errorMsg) {\n      this.describedBy.set('error', this.errorId);\n    } else {\n      this.describedBy.delete('error');\n    }\n\n    if (this.hint) {\n      this.describedBy.set('hint', this.hintId);\n    } else {\n      this.describedBy.delete('hint');\n    }\n\n    let currentDescribedBy = '';\n\n    currentDescribedBy += ` ${this.describedBy.get('original') || ''}`;\n    currentDescribedBy += ` ${this.describedBy.get('error') || ''}`;\n    currentDescribedBy += ` ${this.describedBy.get('hint') || ''}`;\n\n    if (this.input) this.input.setAttribute('aria-describedby', currentDescribedBy.trim());\n  }\n\n  render() {\n\n    return (\n      <Host\n        class={{\n          'alc-field': true,\n        }}\n      >\n        {\n          this.label\n            ?\n            <div> {/* Essa div faz o label desvincular-se da estrutura do flex, permitindo que seja mostrado inline, que é o natural */}\n              <label\n                class=\"alc-field__label\"\n                htmlFor={this.inputId}\n              >\n                {this.label}\n                {this.required\n                ?\n                  // aria-hidden porque o \"required\" do input já é suficiente para informar.\n                  <small aria-hidden=\"true\"> (obrigatório)</small>\n                :\n                  null\n                }\n              </label>\n            </div>\n            :\n            <slot name=\"label\"></slot>\n        }\n        <div class=\"alc-field__core\">\n          <slot></slot>\n          { this.errorMsg\n            ?\n              <small\n                class=\"alc-field__text alc-field__text--error\"\n                id={this.errorId}\n              >\n                {this.errorMsg}\n              </small>\n            :\n              null\n          }\n          { this.hint\n            ?\n              <small\n                class=\"alc-field__text\"\n                id={this.hintId}\n              >\n                {this.hint}\n              </small>\n            :\n              null\n          }\n        </div>\n\n      </Host>\n    );\n  }\n\n}\n","/* CSS básico para que o componente funcione - sem dependências externas */","/* Definição das variáveis - Setup dos temas*/\n\n\n/* CSS COMUM a todos os temas */\nalc-theme {\n  display: block;\n}\n\n.alc-theme__label {\n  @apply sr-only;\n}\n\n/*\n  Não tem problema em usar .alc-field__core aqui porque:\n  1. alc-theme está usando o componente alc-field, ou seja, um componente já \"conhece\" o outro, porque depende dele.\n  2. A classe alc-field__core faz parte da API pública de alc-field.\n */\n.alc-field__core .alc-theme__select {\n  /*\n    Isso foi feito para manter o visual adotado desde o início com o seletor de tema,\n    que não ocupa 100% da largura disponível, como acontece por padrão para os\n    campos de entrada usando o componente alc-field.\n  */\n  @apply w-auto;\n}\n","import { Component, Host, h, State } from '@stencil/core';\nimport logger from '../utils/logger';\nimport { getAppliedTheme, setAppliedTheme, loadUserPreference, saveUserPreference, removeUserPreference } from '../utils/theme';\nimport { getUniqueId } from '../utils/getUniqueId';\nimport testAttributes from '../utils/testAttributes';\n\nconst NO_THEME = 0;\nconst LIGHT_THEME = 1;\nconst DARK_THEME = 2;\n\n@Component({\n  tag: 'alc-theme',\n  styleUrls: {\n    base: 'alc-theme-base.css',\n    theme: 'alc-theme.css'\n  },\n  scoped: false\n})\nexport class AlcTheme {\n\n  themeLink: HTMLLinkElement;\n  selectId: string;\n\n  @State() selectedTheme: number;\n\n  private change(theme: number) {\n\n    logger.log('changed to', theme);\n    switch (theme) {\n      case LIGHT_THEME:\n        setAppliedTheme('light');\n        saveUserPreference('light');\n        break;\n        case DARK_THEME:\n        setAppliedTheme('dark');\n        saveUserPreference('dark');\n        break;\n      default:\n        setAppliedTheme(getAppliedTheme('system'));\n        removeUserPreference();\n        break;\n    }\n    this.selectedTheme = theme;\n  }\n\n  private getSelectedValue(select: HTMLSelectElement): number {\n    return parseInt(select.selectedOptions[0].value);\n  }\n\n  componentWillLoad() {\n\n    const userPreference = loadUserPreference();\n    if (userPreference === 'light') {\n      this.selectedTheme = LIGHT_THEME;\n    }\n    else if (userPreference === 'dark') {\n      this.selectedTheme = DARK_THEME;\n    }\n    else {\n      this.selectedTheme = NO_THEME;\n    }\n    this.selectId = getUniqueId();\n  }\n\n  render() {\n\n    return (\n      <Host>\n        <alc-field>\n          {/* Label colocado como slot para poder ter seu visual personalizado (sr-only) */}\n          <label\n            htmlFor={this.selectId}\n            slot=\"label\"\n            class=\"alc-theme__label\"\n            {...testAttributes('data-test-label')}\n          >\n            Tema\n          </label>\n          <div>\n            <select\n              onChange={(e) => this.change(this.getSelectedValue(e.target as HTMLSelectElement))}\n              class=\"alc-theme__select\"\n              id={this.selectId}\n              {...testAttributes('data-test-select')}\n            >\n              <option value={NO_THEME} selected={this.selectedTheme === NO_THEME}>\n                Do Sistema\n                {this.selectedTheme === NO_THEME ? ' ✔' : ''}\n              </option>\n              <option value={LIGHT_THEME} selected={this.selectedTheme === LIGHT_THEME}>\n                Claro\n                {this.selectedTheme === LIGHT_THEME ? ' ✔' : ''}\n              </option>\n              <option value={DARK_THEME} selected={this.selectedTheme === DARK_THEME}>\n                Escuro\n                {this.selectedTheme === DARK_THEME ? ' ✔' : ''}\n              </option>\n            </select>\n          </div>\n        </alc-field>\n      </Host>\n    );\n  }\n\n}\n"],"mappings":"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","ignoreList":[]}