{"version":3,"names":["alcFieldsetCss","AlcFieldset","exports","class_1","hostRef","this","describedBy","Map","errorId","hintId","hint","required","errorMsg","prototype","watchErrorMsg","newValue","logger","debug","el","classList","add","remove","componentWillLoad","getUniqueId","componentWillRender","set","delete","render","h","Host","key","Object","assign","class","mapToString","test","legend","id","map","size","Array","from","values","join"],"sources":["src/components/alc-fieldset/alc-fieldset.css?tag=alc-fieldset","src/components/alc-fieldset/alc-fieldset.tsx"],"sourcesContent":["alc-fieldset {\n  display: block;\n}\n\n[data-alc-theme=\"dark\"] alc-fieldset {\n  --border-color: var(--alc-color-border);\n  --text-color: var(--alc-color-text-4);\n  --text-color-error: var(--alc-color-error-45);\n}\n\n[data-alc-theme=\"light\"] alc-fieldset {\n  --border-color: theme('colors.gray-warm.50');\n  --text-color: var(--alc-color-text-4);\n  --text-color-error: var(--alc-color-error-50);\n}\n\n.alc-fieldset {\n  @apply border border-solid border-[--border-color] rounded p-3;\n}\n\n.alc-fieldset__legend {\n  @apply font-semibold px-1.5;\n}\n\n.alc-fieldset__text-container {\n  @apply mt-4 flex flex-col gap-1;\n}\n\n.alc-fieldset__text {\n  @apply text-sm text-[--text-color];\n\n  &--error {\n    @apply text-[--text-color-error];\n  }\n}","import { Component, Element, Host, h, Prop, Watch } from '@stencil/core';\nimport { getUniqueId } from '../utils/getUniqueId';\nimport logger from '../utils/logger';\nimport test from '../utils/testAttributes';\n\n/**\n * @slot DEFAULT - Slot para o conteúdo do fieldset.\n*/\n\n@Component({\n  tag: 'alc-fieldset',\n  styleUrl: 'alc-fieldset.css',\n  shadow: false,\n})\nexport class AlcFieldset {\n\n  describedBy = new Map();\n  errorId = '';\n  hintId = '';\n\n  @Element() el: HTMLAlcFieldsetElement;\n\n  /**\n   * Texto da legenda do fieldset.\n  */\n  @Prop({ reflect: true }) legend!: string;\n\n  /**\n   * Texto de ajuda.\n  */\n  @Prop({ reflect: true }) hint: string = '';\n\n  /**\n   * Indica se o fieldset é obrigatório.\n  */\n  @Prop({ reflect: true }) required: boolean = false;\n\n\n  /**\n   * Texto de mensagem de erro.\n   */\n  @Prop({\n    mutable: true,\n    reflect: true,\n  }) errorMsg: string = '';\n  @Watch('errorMsg')\n  watchErrorMsg(newValue: string) {\n\n    logger.debug('watchErrorMsg', newValue);\n\n    if (newValue) {\n      this.el.classList.add('alc-form__input--error');\n    }\n    else {\n      this.el.classList.remove('alc-form__input--error');\n    }\n  }\n\n  componentWillLoad() {\n\n    // Independentemente de qualquer coisa, reserva ids para esses elementos.\n    this.errorId = getUniqueId();\n    this.hintId = getUniqueId();\n\n    if (this.el) {\n      this.watchErrorMsg(this.errorMsg);\n    }\n\n  }\n\n  componentWillRender() {\n\n    if (this.errorMsg) {\n      this.describedBy.set('error', this.errorId);\n    }\n    else {\n      this.describedBy.delete('error');\n    }\n\n    if (this.hint) {\n      this.describedBy.set('hint', this.hintId);\n    }\n    else {\n      this.describedBy.delete('hint');\n    }\n\n  }\n\n  render() {\n\n\n    return (\n      <Host>\n        <fieldset\n          class=\"alc-fieldset\"\n          aria-describedby={mapToString(this.describedBy)}\n          {...test('data-test-fieldset')}\n        >\n          <legend\n            class=\"alc-fieldset__legend\"\n            {...test('data-test-legend')}\n          >\n            {this.legend}\n            {this.required\n              ?\n              // aria-hidden porque o \"required\" do input já é suficiente para informar.\n              <small aria-hidden=\"true\"> (obrigatório)</small>\n              :\n              null\n            }\n          </legend>\n          <slot></slot>\n          <div class=\"alc-fieldset__text-container\">\n            {this.errorMsg\n              ?\n              <small\n                class=\"alc-fieldset__text alc-fieldset__text--error\"\n                id={this.errorId}\n                {...test('data-test-error')}\n              >\n                {this.errorMsg}\n              </small>\n              :\n              null\n            }\n            {this.hint\n              ?\n              <small\n                class=\"alc-fieldset__text\"\n                id={this.hintId}\n                {...test('data-test-hint')}\n              >\n                {this.hint}\n              </small>\n              :\n              null\n            }\n          </div>\n        </fieldset>\n      </Host>\n    );\n  }\n\n}\n\n// get Map and transform in a string with the values separated by spaces. return null if Map is empty.\nfunction mapToString(map: Map<string, string>) {\n  if (map.size > 0) {\n    return Array.from(map.values()).join(' ');\n  }\n  else {\n    return null;\n  }\n}\n"],"mappings":"oSAAA,IAAMA,EAAiB,2yB,ICcVC,EAAWC,EAAA,0BALxB,SAAAC,EAAAC,G,UAOEC,KAAAC,YAAc,IAAIC,IAClBF,KAAOG,QAAG,GACVH,KAAMI,OAAG,GAYgBJ,KAAIK,KAAW,GAKfL,KAAQM,SAAY,MAS1CN,KAAQO,SAAW,EAmGvB,CAjGCT,EAAAU,UAAAC,cAAA,SAAcC,GAEZC,EAAOC,MAAM,gBAAiBF,GAE9B,GAAIA,EAAU,CACZV,KAAKa,GAAGC,UAAUC,IAAI,yB,KAEnB,CACHf,KAAKa,GAAGC,UAAUE,OAAO,yB,GAI7BlB,EAAAU,UAAAS,kBAAA,WAGEjB,KAAKG,QAAUe,IACflB,KAAKI,OAASc,IAEd,GAAIlB,KAAKa,GAAI,CACXb,KAAKS,cAAcT,KAAKO,S,GAK5BT,EAAAU,UAAAW,oBAAA,WAEE,GAAInB,KAAKO,SAAU,CACjBP,KAAKC,YAAYmB,IAAI,QAASpB,KAAKG,Q,KAEhC,CACHH,KAAKC,YAAYoB,OAAO,Q,CAG1B,GAAIrB,KAAKK,KAAM,CACbL,KAAKC,YAAYmB,IAAI,OAAQpB,KAAKI,O,KAE/B,CACHJ,KAAKC,YAAYoB,OAAO,O,GAK5BvB,EAAAU,UAAAc,OAAA,WAGE,OACEC,EAACC,EAAI,CAAAC,IAAA,4CACHF,EAAA,WAAAG,OAAAC,OAAA,CAAAF,IAAA,2CACEG,MAAM,eAAc,mBACFC,EAAY7B,KAAKC,cAC/B6B,KAEJP,EAAA,SAAAG,OAAAC,OAAA,CAAAF,IAAA,2CACEG,MAAM,wBACFE,KAEH9B,KAAK+B,OACL/B,KAAKM,SAGJiB,EAAA,uBAAmB,QAA6B,kBAEhD,MAGJA,EAAa,QAAAE,IAAA,6CACbF,EAAK,OAAAE,IAAA,2CAAAG,MAAM,gCACR5B,KAAKO,SAEJgB,EAAA,QAAAG,OAAAC,OAAA,CACEC,MAAM,+CACNI,GAAIhC,KAAKG,SACL2B,KAEH9B,KAAKO,UAGR,KAEDP,KAAKK,KAEJkB,EAAA,QAAAG,OAAAC,OAAA,CACEC,MAAM,qBACNI,GAAIhC,KAAKI,QACL0B,KAEH9B,KAAKK,MAGR,O,mPAzHU,IAoIxB,SAASwB,EAAYI,GACnB,GAAIA,EAAIC,KAAO,EAAG,CAChB,OAAOC,MAAMC,KAAKH,EAAII,UAAUC,KAAK,I,KAElC,CACH,OAAO,I,CAEX,C","ignoreList":[]}