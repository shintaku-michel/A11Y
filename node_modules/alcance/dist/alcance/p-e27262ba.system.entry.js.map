{"version":3,"names":["alcEventLabCss","AlcEventLab","exports","class_1","hostRef","this","underlined","prototype","changePage","pageNumber","requestChangeTo","newButton","currentButton","logger","debug","event","alcChange","emit","from","to","defaultPrevented","b2","classList","remove","b1","add","alcAfterChange","render","_this","undefined","h","Host","key","class","ref","el","onClick"],"sources":["src/components/alc-event-lab/alc-event-lab.css?tag=alc-event-lab","src/components/alc-event-lab/alc-event-lab.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n","import { Component, Host, h, Event, EventEmitter, Method } from '@stencil/core';\nimport logger from '../utils/logger';\n\nexport interface AlcChangeEventTypes {\n  from: number;\n  to: number;\n}\n\n@Component({\n  tag: 'alc-event-lab',\n  styleUrl: 'alc-event-lab.css',\n})\nexport class AlcEventLab {\n\n  b1: HTMLButtonElement;\n  b2: HTMLButtonElement;\n\n  underlined: number = 1;\n\n  @Event({\n    eventName: 'alc-change',\n    cancelable: true\n  })\n  alcChange: EventEmitter<AlcChangeEventTypes>;\n\n  @Event({\n    eventName: 'alc-after-change',\n    cancelable: false\n  })\n  alcAfterChange: EventEmitter<AlcChangeEventTypes>;\n\n  @Method()\n  async changePage(pageNumber: number) {\n    this.requestChangeTo(pageNumber);\n  }\n\n  requestChangeTo(newButton: number) {\n\n    const currentButton = this.underlined;\n\n    logger.debug('RequestChangeTo', newButton);\n\n    // Regra interna do componente, que não faz nada se o botão clicado\n    // for o que já está sublinhado\n    if (newButton === currentButton) {\n      logger.debug('Botão já estava sublinhado');\n      return;\n    }\n\n    // Dispara o evento buttonWillChange.\n    const event = this.alcChange.emit({\n      from: currentButton,\n      to: newButton\n    });\n\n    // Verifica se foi prevenido externamente.\n    // Se foi, não faz mais nada.\n    if (event.defaultPrevented) {\n      logger.debug('defaultPrevented')\n      return;\n    }\n\n    // Registra a alteração solicitada\n    if (newButton === 1) {\n      this.b2.classList.remove('underline');\n      this.b1.classList.add('underline');\n    }\n    else if (newButton === 2) {\n      this.b1.classList.remove('underline');\n      this.b2.classList.add('underline');\n    }\n    this.underlined = newButton;\n\n\n    // Dispara o evento buttonDidChange.\n    this.alcAfterChange.emit({\n      from: currentButton,\n      to: newButton\n    });\n\n  }\n\n  render() {\n\n    this.alcAfterChange.emit({\n      from: undefined,\n      to: 1\n    });\n\n    return (\n      <Host>\n\n        <button\n          class=\"button underline\"\n          ref={el => this.b1 = el}\n          onClick={() => this.requestChangeTo(1)}\n        >\n          1\n        </button>\n\n        <button\n          class=\"button\"\n          ref={el => this.b2 = el}\n          onClick={() =>this.requestChangeTo(2)}\n        >\n          2\n        </button>\n\n        <slot></slot>\n      </Host>\n    );\n  }\n\n}\n"],"mappings":"spDAAA,IAAMA,EAAiB,uB,ICYVC,EAAWC,EAAA,2BAJxB,SAAAC,EAAAC,G,iGASEC,KAAUC,WAAW,CAgGtB,CAjFOH,EAAAI,UAAAC,WAAN,SAAiBC,G,qFACfJ,KAAKK,gBAAgBD,G,iBAGvBN,EAAAI,UAAAG,gBAAA,SAAgBC,GAEd,IAAMC,EAAgBP,KAAKC,WAE3BO,EAAOC,MAAM,kBAAmBH,GAIhC,GAAIA,IAAcC,EAAe,CAC/BC,EAAOC,MAAM,8BACb,M,CAIF,IAAMC,EAAQV,KAAKW,UAAUC,KAAK,CAChCC,KAAMN,EACNO,GAAIR,IAKN,GAAII,EAAMK,iBAAkB,CAC1BP,EAAOC,MAAM,oBACb,M,CAIF,GAAIH,IAAc,EAAG,CACnBN,KAAKgB,GAAGC,UAAUC,OAAO,aACzBlB,KAAKmB,GAAGF,UAAUG,IAAI,Y,MAEnB,GAAId,IAAc,EAAG,CACxBN,KAAKmB,GAAGF,UAAUC,OAAO,aACzBlB,KAAKgB,GAAGC,UAAUG,IAAI,Y,CAExBpB,KAAKC,WAAaK,EAIlBN,KAAKqB,eAAeT,KAAK,CACvBC,KAAMN,EACNO,GAAIR,G,EAKRR,EAAAI,UAAAoB,OAAA,eAAAC,EAAAvB,KAEEA,KAAKqB,eAAeT,KAAK,CACvBC,KAAMW,UACNV,GAAI,IAGN,OACEW,EAACC,EAAI,CAAAC,IAAA,4CAEHF,EACE,UAAAE,IAAA,2CAAAC,MAAM,mBACNC,IAAK,SAAAC,GAAM,OAAAP,EAAKJ,GAAKW,CAAV,EACXC,QAAS,WAAM,OAAAR,EAAKlB,gBAAgB,EAArB,GAGR,KAEToB,EACE,UAAAE,IAAA,2CAAAC,MAAM,SACNC,IAAK,SAAAC,GAAM,OAAAP,EAAKP,GAAKc,CAAV,EACXC,QAAS,WAAK,OAAAR,EAAKlB,gBAAgB,EAArB,GAGP,KAEToB,EAAa,QAAAE,IAAA,6C,WAhGG,I","ignoreList":[]}