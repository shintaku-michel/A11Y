{"version":3,"names":["alcFieldCheckerCss","AlcFieldChecker","constructor","hostRef","this","idAlert","errorFields","checkOnSubmit","handleFormSubmit","e","checkAlcFields","length","preventDefault","componentWillLoad","getUniqueId","componentDidLoad","observer","MutationObserver","alcFields","hostElement","querySelectorAll","forEach","field","observe","attributes","childList","subtree","formElement","querySelector","addEventListener","disconnectedCallback","_a","disconnect","getFieldId","inputElement","getAttribute","isChildOfFieldset","element","closest","getLabelText","labelElement","textContent","trim","Array","from","filter","tagName","toLowerCase","hasAttribute","map","isCheckboxOrRadioButton","isFieldset","id","label","errorMsg","render","h","key","class","type","dismissible","href"],"sources":["src/components/alc-field-checker/alc-field-checker.css?tag=alc-field-checker","src/components/alc-field-checker/alc-field-checker.tsx"],"sourcesContent":["\n.alc-field-checker {\n  @apply block;\n}\n","import { Component, h, State, Element, Prop } from '@stencil/core';\nimport { getUniqueId } from '../utils/getUniqueId'\n@Component({\n  tag: 'alc-field-checker',\n  styleUrl: 'alc-field-checker.css',\n  shadow: false,\n})\nexport class AlcFieldChecker {\n  private idAlert = null;\n  @Element() hostElement: HTMLElement;\n  @State() errorFields: { id: string; label: string; errorMsg: string }[] = [];\n   /**\n   * Verifica o formulário quando houver submissão.\n  */\n  @Prop({ reflect: true }) checkOnSubmit = false;\n  observer: MutationObserver;\n\n  componentWillLoad() {\n    this.idAlert = getUniqueId();\n  }\n  componentDidLoad() {\n    // Se true, o componente só irá verificar os campos caso haja uma submissão de formulário\n    if (!this.checkOnSubmit) {\n      this.checkAlcFields();\n      this.observer = new MutationObserver(() => this.checkAlcFields());\n      const alcFields = this.hostElement.querySelectorAll('alc-field, alc-fieldset, alc-checkbox, alc-radio');\n      // Observa apenas os componentes alc-field que estão dentro do alc-field-checker, permitindo o uso de mais de um formulário por página\n      alcFields.forEach((field) => this.observer.observe(field, { attributes: true, childList: true, subtree: true }));\n    } else {\n      const formElement = this.hostElement.querySelector('form');\n      if (formElement) {\n        formElement.addEventListener('submit', this.handleFormSubmit);\n      }\n    }\n  }\n\n  disconnectedCallback() {\n    this.observer?.disconnect();\n  }\n\n  getFieldId(field: Element): string {\n    // Obtém o ID do element filho (input, select e etc que estão dentro do alc-field) para criar a âncora quando houver erro\n    const inputElement = field.querySelector('input, textarea, select');\n    return inputElement ? inputElement.getAttribute('id') : '';\n  }\n\n  isChildOfFieldset(element: Element): boolean {\n    // Verifica se o alc-checkbox e alc-radio são filhos de um alc-fieldset\n    return element.closest('alc-fieldset') !== null;\n  }\n\n  getLabelText(field: Element): string {\n    // Obtém o texto dos componentes alc-checkbox e alc-radio, já que não possuem a propriedade label\n    const labelElement = field.querySelector('label');\n    return labelElement ? labelElement.textContent.trim() : '';\n  }\n\n  checkAlcFields() {\n    const alcFields = Array.from(this.hostElement.querySelectorAll('alc-field, alc-fieldset, alc-checkbox, alc-radio'))\n    .filter((field) => {\n      // Se os componentes alc-checkbox e alc-radio forem filhos de um alc-fieldset, o atributo error-msg deles serão ignorados\n      if (field.tagName.toLowerCase() === 'alc-checkbox' || field.tagName.toLowerCase() === 'alc-radio') {\n        return !this.isChildOfFieldset(field);\n      }\n      return true;\n    });\n    this.errorFields = alcFields\n      // Apenas os alc-field que possuem a propriedade erro-msg com alguma mensagem, são enviados para o mapa de erros\n      .filter((field) => field.hasAttribute('error-msg') && field.getAttribute('error-msg') !== '')\n      .map((field) => {\n        const isCheckboxOrRadioButton = field.tagName.toLowerCase() === 'alc-checkbox' || field.tagName.toLowerCase() === 'alc-radio';\n        const isFieldset = field.tagName.toLowerCase() === 'alc-fieldset';\n        return {\n          id: this.getFieldId(field),\n          label: isCheckboxOrRadioButton ? this.getLabelText(field) : isFieldset ? field.getAttribute('legend') : field.getAttribute('label'),\n          errorMsg: field.getAttribute('error-msg'),\n        };\n      });\n  }\n\n  handleFormSubmit = (e: Event) => {\n    this.checkAlcFields();\n    if (this.errorFields.length > 0) {\n      e.preventDefault();\n    }\n  };\n\n  render() {\n    return (\n      <div class=\"alc-field-checker\">\n        {this.errorFields.length > 0 && (\n          <alc-alert id={this.idAlert} type=\"warning\" dismissible={false}>\n            <span class='alc-alert__summary'>Atenção: Seu formulário contém {this.errorFields.length} {this.errorFields.length > 1 ? \"erros\" : \"erro\"}</span>\n            <ul>\n              {this.errorFields.map((field) => (\n                <li>\n                  <a href={`#${field.id}`} class=\"alc-link alc-link--color-text\">\n                    <strong>{field.label}:</strong> {field.errorMsg}\n                  </a>\n                </li>\n              ))}\n            </ul>\n          </alc-alert>\n        )}\n        <slot></slot>\n      </div>\n    );\n  }\n}\n"],"mappings":"sFAAA,MAAMA,EAAqB,oC,MCOdC,EAAe,MAL5B,WAAAC,CAAAC,G,UAMUC,KAAOC,QAAG,KAETD,KAAWE,YAAsD,GAIjDF,KAAaG,cAAG,MAkEzCH,KAAAI,iBAAoBC,IAClBL,KAAKM,iBACL,GAAIN,KAAKE,YAAYK,OAAS,EAAG,CAC/BF,EAAEG,gB,EAyBP,CA3FC,iBAAAC,GACET,KAAKC,QAAUS,G,CAEjB,gBAAAC,GAEE,IAAKX,KAAKG,cAAe,CACvBH,KAAKM,iBACLN,KAAKY,SAAW,IAAIC,kBAAiB,IAAMb,KAAKM,mBAChD,MAAMQ,EAAYd,KAAKe,YAAYC,iBAAiB,oDAEpDF,EAAUG,SAASC,GAAUlB,KAAKY,SAASO,QAAQD,EAAO,CAAEE,WAAY,KAAMC,UAAW,KAAMC,QAAS,Q,KACnG,CACL,MAAMC,EAAcvB,KAAKe,YAAYS,cAAc,QACnD,GAAID,EAAa,CACfA,EAAYE,iBAAiB,SAAUzB,KAAKI,iB,GAKlD,oBAAAsB,G,OACEC,EAAA3B,KAAKY,YAAU,MAAAe,SAAA,SAAAA,EAAAC,Y,CAGjB,UAAAC,CAAWX,GAET,MAAMY,EAAeZ,EAAMM,cAAc,2BACzC,OAAOM,EAAeA,EAAaC,aAAa,MAAQ,E,CAG1D,iBAAAC,CAAkBC,GAEhB,OAAOA,EAAQC,QAAQ,kBAAoB,I,CAG7C,YAAAC,CAAajB,GAEX,MAAMkB,EAAelB,EAAMM,cAAc,SACzC,OAAOY,EAAeA,EAAaC,YAAYC,OAAS,E,CAG1D,cAAAhC,GACE,MAAMQ,EAAYyB,MAAMC,KAAKxC,KAAKe,YAAYC,iBAAiB,qDAC9DyB,QAAQvB,IAEP,GAAIA,EAAMwB,QAAQC,gBAAkB,gBAAkBzB,EAAMwB,QAAQC,gBAAkB,YAAa,CACjG,OAAQ3C,KAAKgC,kBAAkBd,E,CAEjC,OAAO,IAAI,IAEblB,KAAKE,YAAcY,EAEhB2B,QAAQvB,GAAUA,EAAM0B,aAAa,cAAgB1B,EAAMa,aAAa,eAAiB,KACzFc,KAAK3B,IACJ,MAAM4B,EAA0B5B,EAAMwB,QAAQC,gBAAkB,gBAAkBzB,EAAMwB,QAAQC,gBAAkB,YAClH,MAAMI,EAAa7B,EAAMwB,QAAQC,gBAAkB,eACnD,MAAO,CACLK,GAAIhD,KAAK6B,WAAWX,GACpB+B,MAAOH,EAA0B9C,KAAKmC,aAAajB,GAAS6B,EAAa7B,EAAMa,aAAa,UAAYb,EAAMa,aAAa,SAC3HmB,SAAUhC,EAAMa,aAAa,aAC9B,G,CAWP,MAAAoB,GACE,OACEC,EAAA,OAAAC,IAAA,2CAAKC,MAAM,qBACRtD,KAAKE,YAAYK,OAAS,GACzB6C,EAAW,aAAAC,IAAA,2CAAAL,GAAIhD,KAAKC,QAASsD,KAAK,UAAUC,YAAa,OACvDJ,EAAM,QAAAC,IAAA,2CAAAC,MAAM,sBAAoB,kCAAiCtD,KAAKE,YAAYK,OAAM,IAAGP,KAAKE,YAAYK,OAAS,EAAI,QAAU,QACnI6C,EACG,MAAAC,IAAA,4CAAArD,KAAKE,YAAY2C,KAAK3B,GACrBkC,EAAA,UACEA,EAAG,KAAAK,KAAM,IAAIvC,EAAM8B,KAAMM,MAAM,iCAC7BF,EAAA,cAASlC,EAAM+B,MAAgB,SAAE/B,EAAMgC,eAOnDE,EAAa,QAAAC,IAAA,6C","ignoreList":[]}