{"version":3,"names":["alcTabsBaseCss","themeAlcTabsCss","AlcTabs","constructor","hostRef","this","selectedTabButton","tabList","selectedTab","hasScroll","onTabClicked","e","select","detail","tab","selectedChange","newValue","oldValue","getTab","tabs","shouldSwitch","getTabButton","tabButtons","getAttribute","tabSwitch","selected","leavingTab","leavingTabButton","alcChange","emit","selectedHandler","selectedNextButton","onTabButtonNext","selectedPreviousButton","onTabButtonPrevious","selectedFirstButton","onTabButtonFirst","selectedLastButton","onTabButtonLast","undefined","Array","from","el","querySelectorAll","filter","t","closest","logger","log","b","getNextButton","button","nextIndex","buttonIndex","findIndex","length","getPreviousButton","previousIndex","handleScroll","scrollWidth","width","offsetWidth","overflowX","style","themeLoadedHandler","componentDidLoad","initialTab","_a","slotButton","hasButtonSlot","some","s","isValidTabButton","target","nextButton","handleSelectTabButton","previousButton","firstButton","lastButton","changed","querySelector","focus","includes","componentDidRender","mo","disconnect","MutationObserver","forceUpdate","observe","childList","map","i","tabpanel","hasAttribute","setAttribute","disconnectedCallback","render","h","label","Host","onAlcTabButtonClick","onAlcTabButtonNext","bind","onAlcTabButtonPrevious","class","hasFocus","scrollToElement","role","ref","name","tabEl","find","error","buttons","buttonEl"],"sources":["src/components/alc-tabs/alc-tabs-base.css?tag=alc-tabs&mode=base","src/components/alc-tabs/alc-tabs.css?tag=alc-tabs&mode=theme","src/components/alc-tabs/alc-tabs.tsx"],"sourcesContent":["/* CSS básico para que o componente funcione - sem dependências externas */\nalc-tabs {\n  @apply block;\n}\n\n.alc-tabs {\n  @apply border border-solid;\n}\n\n.alc-tabs__tab-list {\n  @apply border-0 border-b border-dotted;\n}","alc-tabs {\n  /**\n   * @prop --bg-color: Cor de fundo da tab ativa e seu conteúdo.\n   */\n  --bg-color: var(--alc-color-surface);\n\n  --border-color: var(--alc-color-border);\n  --border-width: var(--alc-border-width);\n\n}\n\n/* Definição das variáveis - Setup dos temas*/\n[data-alc-theme=\"light\"] alc-tabs {\n  --outline-color: var(--alc-color-action-60);\n}\n\n[data-alc-theme=\"dark\"] alc-tabs {\n  --outline-color: var(--alc-color-action-30);\n}","import { Component, Host, h, Element, Prop, Listen, Watch, State, Event, EventEmitter, Method, forceUpdate } from '@stencil/core';\n\nimport { TabButtonClickEventDetail } from '../alc-tab-button/alc-tab-button-interface';\nimport logger from '../utils/logger';\n\nexport interface AlcTabsDidChangeEventTypes {\n  tab: string\n}\n\n@Component({\n  tag: 'alc-tabs',\n  styleUrls: {\n    base: 'alc-tabs-base.css',\n    theme: 'alc-tabs.css'\n  },\n  scoped: false\n})\nexport class AlcTabs {\n\n  private hasButtonSlot: boolean;\n\n  private selectedTabButton?: HTMLAlcTabButtonElement = null;\n\n  private tabList: HTMLDivElement = null;\n\n  private mo: MutationObserver;\n\n  /**\n   * O identificador da tab atualmente selecionada\n   */\n  @Prop({ mutable: true, reflect: true }) selected: string;\n\n  @Watch('selected')\n  selectedChange(newValue: string, oldValue: string) {\n    if (newValue !== oldValue) {\n      this.select(newValue);\n    }\n  }\n\n  @Element() el!: HTMLAlcTabsElement;\n\n  @State() selectedTab?: HTMLAlcTabElement = null;\n\n  @State() hasScroll = false;\n\n  /**\n   * Disparado quando houve uma mudança de tab\n   */\n  @Event({\n    eventName: 'alc-change'\n  }) alcChange!: EventEmitter<{\n    tab: string\n  }>;\n\n  /**\n   * Seleciona uma tab pelo valor de sua propriedade `tab` ou pela referência do elemento.\n   *\n   * @param tab A tab a ser selecionada. Se passada como string, deve ser o valor da propriedade `tab` da tab.\n   */\n  @Method()\n  async select(tab: string | HTMLAlcTabElement): Promise<boolean> {\n    const selectedTab = getTab(this.tabs, tab);\n    if (!this.shouldSwitch(selectedTab)) {\n      return false;\n    }\n    const selectedTabButton = getTabButton(this.tabButtons, selectedTab.getAttribute('tab'));\n    this.tabSwitch(selectedTab, selectedTabButton);\n\n    this.selected = selectedTab.getAttribute('tab');\n    return true;\n  }\n\n  private tabSwitch(selectedTab: HTMLAlcTabElement, selectedTabButton: HTMLAlcTabButtonElement) {\n    const leavingTab = this.selectedTab;\n    const leavingTabButton = this.selectedTabButton;\n    this.selectedTab = selectedTab;\n    this.selectedTabButton = selectedTabButton;\n\n    selectedTab.selected = true;\n    selectedTabButton.selected = true;\n\n    if (leavingTab !== selectedTab) {\n      if (leavingTab) {\n        leavingTab.selected = false;\n        this.alcChange.emit({ tab: selectedTab.tab });\n      }\n      if (leavingTabButton) {\n        leavingTabButton.selected = false;\n      }\n    }\n  }\n\n  // Evento disparado por alc-tab-button\n  @Listen('alc-click')\n  selectedHandler(e: CustomEvent) {\n    this.select(e.detail.tab);\n  }\n\n  @Listen('alc-next')\n  selectedNextButton(e: CustomEvent) {\n    this.onTabButtonNext(e)\n  }\n\n  @Listen('alc-previous')\n  selectedPreviousButton(e: CustomEvent) {\n    this.onTabButtonPrevious(e)\n  }\n\n  @Listen('alc-first')\n  selectedFirstButton(e: CustomEvent) {\n    this.onTabButtonFirst(e);\n  }\n\n  @Listen('alc-last')\n  selectedLastButton(e: CustomEvent) {\n    this.onTabButtonLast(e);\n  }\n\n  private shouldSwitch(selectedTab: HTMLAlcTabElement | undefined): selectedTab is HTMLAlcTabElement {\n    const leavingTab = this.selectedTab;\n    return selectedTab !== undefined && selectedTab !== leavingTab;\n  }\n\n  private get tabs() {\n    let tabs = Array.from(this.el.querySelectorAll('alc-tab'));\n    tabs = tabs.filter(t => t.closest('alc-tabs') === this.el);\n    logger.log('my tabs are', tabs, this.el);\n    return tabs;\n  }\n\n  private get tabButtons() {\n    let tabButtons = Array.from(this.el.querySelectorAll('alc-tab-button'));\n    tabButtons = tabButtons.filter(b => b.closest('alc-tabs') === this.el)\n    return tabButtons;\n  }\n\n  private getNextButton(button: HTMLAlcTabButtonElement ) {\n\n    let nextIndex: number;\n    const buttonIndex = this.tabButtons.findIndex(b => b === button);\n\n    // Último -> primeiro\n    if (buttonIndex === this.tabButtons.length - 1) {\n      nextIndex = 0;\n    }\n    else {\n      nextIndex = buttonIndex + 1;\n    }\n\n    return this.tabButtons[nextIndex];\n  }\n\n  private getPreviousButton(button: HTMLAlcTabButtonElement ) {\n\n    let previousIndex: number;\n    const buttonIndex = this.tabButtons.findIndex(b => b === button);\n\n\n    // Primeiro -> último\n    if (buttonIndex <= 0) {\n      previousIndex = this.tabButtons.length - 1;\n    }\n    else {\n      previousIndex = buttonIndex - 1;\n    }\n\n    return this.tabButtons[previousIndex];\n  }\n\n  private handleScroll() {\n    let scrollWidth = 0;\n    let width = this.tabList.offsetWidth;\n    let overflowX = this.tabList.style.overflowX;\n\n    this.tabList.style.overflowX = 'auto';\n    scrollWidth = this.tabList.scrollWidth;\n    this.tabList.style.overflowX = overflowX;\n\n    logger.log('width', width, scrollWidth);\n\n    this.hasScroll = scrollWidth > width;\n  }\n\n  @Listen('themeLoaded', {\n    target: 'window'\n  })\n  themeLoadedHandler() {\n    this.handleScroll();\n  }\n\n  async componentDidLoad() {\n    // Se selected não tiver sido indicado, a primeira será a inicial\n    const initialTab = this.selected || this.tabs[0]?.tab;\n\n    await this.select(initialTab);\n\n    let slotButton = Array.from(this.el.querySelectorAll('[slot=\"button\"]'));\n    this.hasButtonSlot = slotButton.some(s => s.closest('alc-tabs') === this.el);\n  }\n\n  private onTabClicked = (e: CustomEvent<TabButtonClickEventDetail>) => {\n    this.select(e.detail.tab);\n  }\n\n  private async onTabButtonNext (e: CustomEvent) {\n    if(!this.isValidTabButton(e)) return;\n    \n    const target = e.target as HTMLAlcTabButtonElement;\n\n    const nextButton = this.getNextButton(target);\n    this.handleSelectTabButton(nextButton);\n  }\n\n  private async onTabButtonPrevious (e: CustomEvent) {\n    if(!this.isValidTabButton(e)) return;\n\n    const target = e.target as HTMLAlcTabButtonElement;\n\n    const previousButton = this.getPreviousButton(target);\n    this.handleSelectTabButton(previousButton);\n  }\n\n  private async onTabButtonFirst (e: CustomEvent) {\n    if(!this.isValidTabButton(e)) return;\n\n    const firstButton = this.tabButtons[0];\n    this.handleSelectTabButton(firstButton);\n  }\n\n  private async onTabButtonLast (e: CustomEvent) {\n    if(!this.isValidTabButton(e)) return;\n\n    const lastButton = this.tabButtons[this.tabButtons.length - 1];\n    this.handleSelectTabButton(lastButton);\n  }\n\n  private async handleSelectTabButton(tab: HTMLAlcTabButtonElement) {\n    const changed = await this.select(tab.tab);\n    if (changed) {\n      tab.querySelector('button').focus();\n    }\n  }\n\n  private isValidTabButton(e: CustomEvent) {\n    const target = e.target as HTMLAlcTabButtonElement;\n    return Array.from(this.tabButtons).includes(target);\n  }\n\n  componentDidRender() {\n\n    /*\n     O trecho abaixo permite que o componente seja atualizado\n     sempre que houver mudanças no conteúdo (como a inclusão de \"fihos\").\n     Isso foi feito para permitir, por exemplo, que uma tab seja\n     adicionada pela simples manipulação do DOM.\n     */\n    this.mo?.disconnect();\n    this.mo = new MutationObserver(() => {\n      forceUpdate(this.el);\n    });\n    this.mo.observe(this.el, {childList: true});\n    this.mo.observe(this.el.querySelector('.alc-tabs'), {childList: true});\n\n\n    this.tabs.map((tab, i) => {\n      const tabpanel = tab.querySelector('[role=\"tabpanel\"]');\n\n      if (this.tabButtons.length <= i) {\n        return;\n      }\n\n      const button = this.tabButtons[i].querySelector('button');\n\n      if (!tabpanel.hasAttribute('id')) {\n        tabpanel.setAttribute('id', `tab_${i}`);\n      }\n      if (!button.hasAttribute('id')) {\n        button.setAttribute('id', `button_${i}`);\n      }\n\n      tabpanel.setAttribute('aria-labelledby', button.getAttribute('id'));\n      button.setAttribute('aria-controls', tabpanel.getAttribute('id'));\n    });\n\n    // this.handleScroll();\n  }\n\n  disconnectedCallback() {\n    this.mo?.disconnect();\n  }\n\n  render() {\n\n    let tabList: Array<HTMLElement>;\n\n    if (!this.hasButtonSlot) {\n      tabList = this.tabs.map((tab) => {\n        // Não parece ser um boa ideia criar esses elementos dinamicamente, dessa forma\n        // Fazendo assim, a inclusão de uma nova tab no DOM, por exemplo, não\n        // reflete automaticamente aqui, porque não ocorre o \"render\".\n        return (\n          <alc-tab-button tab={tab.tab}>\n            {tab.label}\n          </alc-tab-button>\n        );\n      });\n    }\n\n    logger.log('rendering', this.el, tabList);\n\n    return (\n      <Host\n        onAlcTabButtonClick={this.onTabClicked}\n        onAlcTabButtonNext={this.onTabButtonNext.bind(this)}\n        onAlcTabButtonPrevious={this.onTabButtonPrevious.bind(this)}\n      >\n        <div class=\"alc-tabs\">\n\n          <alc-scroll-panel hasFocus={false} scrollToElement={this.selectedTabButton} >\n            <div role=\"tablist\" ref={el => this.tabList = el} class=\"alc-tabs__tab-list\">\n              <slot name=\"button\" />\n              {tabList}\n            </div>\n          </alc-scroll-panel>\n\n          <slot />\n        </div>\n\n      </Host>\n    );\n  }\n\n}\n\nconst getTab = (tabs: HTMLAlcTabElement[], tab: string | HTMLAlcTabElement): HTMLAlcTabElement | undefined => {\n  const tabEl = (typeof tab === 'string')\n    ? tabs.find(t => t.tab === tab)\n    : tab;\n\n  if (!tabEl) {\n    logger.error(`tab with id: \"${tabEl}\" does not exist`);\n  }\n  return tabEl;\n};\n\nconst getTabButton = (buttons: HTMLAlcTabButtonElement[], tab: string): HTMLAlcTabButtonElement | undefined => {\n\n  const buttonEl = buttons.find(b => b.tab === tab);\n\n  if (!buttonEl) {\n    logger.error(`tab button with id: \"${buttonEl}\" does not exist`);\n  }\n  return buttonEl;\n};\n\n"],"mappings":"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","ignoreList":[]}