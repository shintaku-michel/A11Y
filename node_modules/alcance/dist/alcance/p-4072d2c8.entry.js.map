{"version":3,"names":["alcNavPanelCss","DEFAULT_STATE","open","TABLET_BREAKPOINT","Number","screens","md","split","DESKTOP_BREAKPOINT","lg","AlcNavPanel","constructor","hostRef","this","state","display","getDisplay","offsetTop","show","updateState","hide","handleResize","newDisplay","htmlElementClassList","document","querySelector","classList","contains","remove","add","el","setOffset","handleClick","event","targetElement","target","handleKeyDown","defaultPrevented","key","preventDefault","button","focus","getFocusableElements","handleOpen","content","hidden","componentWillLoad","detail","alcStateRequest","emit","Object","assign","componentDidLoad","addEventListener","handleTransitionEnd","bind","observer","MutationObserver","newOffsetTop","console","log","observe","body","attributes","childList","subtree","disconnectedCallback","removeEventListener","disconnect","width","window","innerWidth","alcStateChange","style","setProperty","toString","renderButtonSVG","h","height","viewBox","fill","xmlns","d","class","render","Host","onClick","ref","name","label"],"sources":["src/components/alc-nav-panel/alc-nav-panel.css?tag=alc-nav-panel","src/components/alc-nav-panel/alc-nav-panel.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n\n[data-alc-theme=\"light\"] alc-nav-panel {\n  --color-button: theme('colors.mint-cool.5');\n  --color-button-hover: theme('colors.mint-cool.10');\n\n  /* 26 indica 15% de transparencia */\n  --color-drop-shadow: theme('colors.black')26;\n  --outline-color: var(--alc-color-action-60);\n}\n\n[data-alc-theme=\"dark\"] alc-nav-panel {\n  --color-button: theme('colors.cyan.70');\n  --color-button-hover: theme('colors.cyan.60');\n\n  /* No modo dark ja tem contraste suficiente entre a borda e conteúdo,\n    por isso não precisa de sombra\n   */\n  --color-drop-shadow: theme('colors.transparent');\n  --outline-color: var(--alc-color-neutral-0);\n}\n\n\nalc-nav-panel {\n  --border-width: theme('borderWidth.8');\n\n  /* Largura padrão do conteúdo */\n  --content-width: 18rem;\n  \n  /* O valor default é 72px, que seria a altura padrão em produção do header, em situação \"normal\" */\n  --height: calc(var(--offset-top, 72) * 1px);\n\n  /*  Valor do conteudo + borda direita */\n  --max-width: calc(var(--content-width) + var(--border-width));\n}\n\n.alc-nav-panel {\n  /* Define a largura minima (tamanho da borda) para centralizar o conteúdo */\n  @apply md:min-w-[--border-width] transition-all z-50;\n}\n\n.alc-nav-panel--opened {\n  /* Aqui é definido a largura para empurrar o conteúdo a partir do lg */\n  @apply lg:min-w-[--max-width];\n}\n\n.alc-nav-panel__container {\n  @apply flex fixed flex-row-reverse;\n  /* Altura do viewpoint - o offsetTop do nav-panel */\n  height: calc(100vh - var(--height));\n}\n\n.alc-nav-panel__content {\n  @apply bg-[--alc-color-surface] h-full w-0 opacity-0 transition-all overflow-x-hidden block z-0;\n}\n\n.alc-nav-panel__content--opened {\n  @apply block w-[--content-width] opacity-100;\n}\n\n.alc-nav-panel__button-container {\n  @apply border-[--color-button] -z-0 text-[--alc-color-text-primary];\n  border-left-width: var(--border-width);\n  /* Drop-shadow para o sombreamento contornar o botão svg */\n  filter: drop-shadow(0 4px 3px var(--color-drop-shadow)) drop-shadow(0 2px 2px var(--color-drop-shadow));\n}\n\n.alc-nav-panel__button {\n  @apply relative mt-4 rounded -left-2 pl-2;\n}\n\n.alc-nav-panel__button:focus-visible {\n  @apply outline-none;\n}\n\n.alc-nav-panel__button:focus-visible .alc-nav-panel__button-icon {\n  @apply outline outline-2 outline-[--outline-color];\n}\n\n.alc-nav-panel__button-icon {\n  @apply absolute top-5 left-2;\n}\n\n.alc-nav-panel__button-svg {\n  @apply fill-[--color-button];\n}\n\n/* Tratamento da cor do svg + borda quando o botão recebe foco */\n.alc-nav-panel__button:hover .alc-nav-panel__button-svg {\n  @apply fill-[--color-button-hover] transition-colors;\n}\n\n.alc-nav-panel__button-container:has(.alc-nav-panel__button:hover) {\n  @apply border-[--color-button-hover] transition-colors;\n}\n/* ******* */\n.alc-nav-panel--hidden {\n  @apply hidden;\n}","import { Component, Host, Prop, h, Method, Event, EventEmitter, Element, State, Listen, Watch } from '@stencil/core';\nimport { getFocusableElements, handleKeyDown } from '../utils/keydown';\nimport screens from '../../../tailwind-screens';\n\nexport interface AlcStateEventTypes {\n  state: {\n    open: boolean;\n  }\n}\n\nconst DEFAULT_STATE = {\n  open: true\n};\n\n// Pega o valor definido da configuração do tailwind e remove o 'px'\nconst TABLET_BREAKPOINT = Number(screens.md.split('px')[0]);\nconst DESKTOP_BREAKPOINT = Number(screens.lg.split('px')[0]);\n\n/**\n * @slot DEFAULT - Slot para o conteúdo do nav-panel.\n */\n\n@Component({\n  tag: 'alc-nav-panel',\n  styleUrl: 'alc-nav-panel.css',\n  shadow: false\n})\nexport class AlcNavPanel {\n  @Element() el: HTMLAlcNavPanelElement;\n\n  private content: HTMLDivElement;\n  private button: HTMLButtonElement;\n  private state: {\n    open: boolean,\n  } = DEFAULT_STATE;\n  private display: 'mobile' | 'tablet' | 'desktop' = this.getDisplay();\n  private observer: MutationObserver;\n  private offsetTop: number = 0;\n\n  /**\n   * Indica se o nav-panel está visível. O valor inicial desse atributo será definido dinamicamente pelo próprio nav-panel.\n   */\n  @Prop({\n    reflect: true,\n    mutable: true\n  })\n  open: boolean;\n\n  /**\n   * Evento disparado quando o estado do nav-panel é alterado.\n   */\n  @Event({\n    eventName: 'alc-state-change',\n    cancelable: false,\n    bubbles: true\n  }) alcStateChange: EventEmitter<AlcStateEventTypes>;\n\n  /**\n   * Evento disparado quando o nav-panel precisa recuperar o estado.\n   */\n  @Event({\n    eventName: 'alc-state-request',\n    cancelable: false,\n    bubbles: true\n  }) alcStateRequest: EventEmitter<AlcStateEventTypes>;\n\n  /**\n   * Abre o nav-panel.\n   * @returns O valor retornado é `true` se o nav-panel foi exibido com a chamada do método.\n   */\n  @Method()\n  async show(): Promise<boolean> {\n    this.updateState(true);\n    return true;\n  }\n\n  /**\n   * Fecha o nav-panel.\n   * @returns O valor retornado é `true` se o nav-panel foi fechado com a chamada do método.\n   */\n  @Method()\n  async hide(): Promise<boolean> {\n    this.updateState(false);\n    return true;\n  }\n\n  @Listen('resize', { target: 'window' })\n  handleResize() {\n    // Atualiza o display se teve mudanças\n    const newDisplay = this.getDisplay();\n    if (newDisplay !== this.display) {\n      this.display = newDisplay;\n    }\n\n    // Essa classe é utilizada para aplicar padding e margins nas classes de container\n    // ATENÇÃO: Caso ocorra alteração no tamanho do botão ou da margin lateral, deve atualizar o tamanho dos paddings e margins\n    // na classe localizada em \"global/styles/c-layout.scss\"\n    const htmlElementClassList = document.querySelector('html').classList;\n\n    // Controle de CSS da tag html\n    if (newDisplay === 'mobile') {\n      // Se estiver no modo mobile e ter a classe alc-navpanel, remove a classe\n      htmlElementClassList.contains('alc-navpanel') ? htmlElementClassList.remove('alc-navpanel') : null;\n    } else {\n      // Se estiver no modo tablet ou desktop e NÃO ter a classe alc-navpanel, adiciona a classe\n      htmlElementClassList.contains('alc-navpanel') ? null: htmlElementClassList.add('alc-navpanel');\n    }\n\n    // Controle de exibição (open)\n    // Se estiver indo para desktop, o estado salvo define o valor de open\n    if (newDisplay === 'desktop') {\n      this.open = this.state.open;\n    }\n    // Senão, sempre estará oculto.\n    else {\n      this.open = false;\n    }\n\n    // Verifica se teve mudanças nos valores de offsetTop\n    // e atualiza as variáveis CSS\n    if (this.el.offsetTop !== this.offsetTop) {\n      this.setOffset(this.el.offsetTop);\n    }\n\n  }\n\n  @Listen('click', { target: 'body' })\n  handleClick(event: MouseEvent) {\n    // Se estiver fechado, não faz nada\n    if (!this.open) return;\n\n    // Se o elemento clicado é dentro do nav-panel ou um de seus filhos, não faz nada\n    const targetElement = event.target as HTMLElement;\n    if (this.el.contains(targetElement)) return;\n\n    // Se o breakpoint for desktop, não faz nada\n    if (this.display === 'desktop') return;\n\n    // Se o breakpoint for tamanho tablet ou menor, fecha o nav-panel ao clicar fora\n    this.hide();\n  }\n\n  @Listen('keydown')\n  handleKeyDown(event: KeyboardEvent) {\n    // Se estiver fechado, não faz nada\n    if (!this.open || event.defaultPrevented) return;\n\n    switch (event.key) {\n      // Se apertar \"Escape\", fecha o nav-panel\n      case 'Escape':\n        event.preventDefault();\n        this.hide();\n        this.button.focus();\n        break;\n      // Se o breakpoint for tamanho tablet ou menor, controla o foco dentro do nav-panel\n      case 'Tab':\n        if (this.display !== 'desktop') {\n          handleKeyDown(event, getFocusableElements(this.el));\n        }\n        break;\n    }\n  }\n\n  @Watch('open')\n  handleOpen() {\n    if (this.open && this.content) {\n      // Remove o atributo \"hidden\" quando o nav-panel é aberto\n      this.content.hidden = false;\n    }\n  }\n\n  componentWillLoad() {\n    // Monta objeto para o evento - Nesse momento, com o valor padrão.\n    const detail = {\n      state: DEFAULT_STATE\n    };\n    // Requisita o estado gravado\n    this.alcStateRequest.emit(detail); // Emite o evento para solicitar o estado\n    // Garante que o objeto this.state tenha as chaves esperadas, independente do valor de detail.state\n    // Grava o estado em memória\n    // O estado é sempre salvo, independentemente do valor de `display`, porque `display` pode\n    // mudar dinamicamente, e o estado pode passar a ser necessário.\n    this.state = { ...DEFAULT_STATE, ...detail.state };\n\n    if (this.display === 'desktop') {\n      // \"open\" para desktop será inicialmente o estado salvo\n      this.open = this.state.open;\n    }\n    else {\n      // \"open\" para outros cenários (não desktop) inicialmente será false.\n      this.open = false;\n    }\n  }\n\n  componentDidLoad() {\n    this.setOffset(this.el.offsetTop);\n\n    // Esconde o conteúdo quando o nav-panel é fechado após a transição\n    // A animação não funciona quando adiciona hidden no CSS\n    this.content.addEventListener(\"transitionend\", this.handleTransitionEnd.bind(this));\n\n    if (this.getDisplay() !== 'mobile') {\n      // Essa classe é utilizada para aplicar padding e margins nas classes de container\n      document.querySelector('html').classList.add('alc-navpanel');\n    }\n\n    this.observer = new MutationObserver(() => {\n      const newOffsetTop = this.el.offsetTop;\n      if (newOffsetTop !== this.offsetTop) {\n        console.log(`offsetTop mudou de ${this.offsetTop} para ${newOffsetTop}`);\n        this.setOffset(newOffsetTop);\n      }\n    });\n\n    // Observa mudanças no body inteiro, pois mudanças acima no DOM podem afetar o offsetTop\n    this.observer.observe(document.body, {\n      attributes: true,\n      childList: true,\n      subtree: true\n    });\n\n\n  }\n\n  disconnectedCallback() {\n    this.content.removeEventListener(\"transitionend\", this.handleTransitionEnd.bind(this));\n\n    if (this.observer) {\n      this.observer.disconnect();\n    }\n  }\n\n  private handleTransitionEnd() {\n    if (!this.open) {\n      this.content.hidden = true;\n    }\n  }\n\n  private getDisplay(): 'mobile' | 'tablet' | 'desktop' {\n    const width = window.innerWidth;\n\n    if (width >= DESKTOP_BREAKPOINT) return 'desktop';\n    if (width >= TABLET_BREAKPOINT) return 'tablet';\n    return 'mobile';\n  }\n\n  private updateState(open: boolean) {\n    this.open = open;\n\n    if (this.getDisplay() === 'desktop') {\n      this.state.open = open;\n      this.alcStateChange.emit({ state: this.state });\n    }\n  }\n\n  private setOffset(offsetTop?: number) {\n    this.offsetTop = offsetTop;\n    // Altura esta o elemento em relação ao topo da tela)\n    this.el.style.setProperty('--offset-top', this.el.offsetTop.toString());\n  }\n  // Utilizando \"svg\" diretamente em vez de uma tag <img> para permitir a personalização da cor do SVG no modo dark\n  private renderButtonSVG() {\n    return (\n      <svg width=\"24\" height=\"62\" viewBox=\"0 0 24 62\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" >\n        <path d=\"M7 7C1.4 7 0 2.33333 0 0C0 20.6667 6.69364e-06 41.3333 0 62C0 59.6667 1.4 55 7 55H20C22.2091 55 24 53.2091 24 51V11C24 8.79086 22.2091 7 20 7H7Z\" fill=\"#e0f7f6\" class=\"alc-nav-panel__button-svg\" />\n      </svg>\n    )\n  }\n\n  render() {\n\n    return (\n      <Host\n        class={{\n          'alc-nav-panel': true,\n          'alc-nav-panel--opened': this.open\n        }}\n      >\n        <div class=\"alc-nav-panel__container\">\n          <div class=\"alc-nav-panel__button-container\">\n            <button\n              class=\"alc-nav-panel__button\"\n              onClick={() => this.open ? this.hide() : this.show()}\n              aria-pressed={this.open ? 'true' : 'false'}\n              aria-label=\"Exibir navegação\"\n              ref={el => this.button = el}\n              data-alc-navpanel-button\n            >\n              {this.renderButtonSVG()}\n              <alc-icon\n                class=\"alc-nav-panel__button-icon\"\n                name={this.open ? 'x-lg' : 'list'}\n                label=\"\"\n              ></alc-icon>\n            </button>\n          </div>\n          <div\n            class={{\n              'alc-nav-panel__content': true,\n              'alc-nav-panel__content--opened': this.open\n            }}\n            ref={el => this.content = el}\n          >\n            <slot></slot>\n          </div>\n        </div>\n      </Host>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}