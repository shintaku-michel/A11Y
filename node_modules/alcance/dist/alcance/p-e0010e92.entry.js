import{r as t,c as s,f as i,h as e,H as a,g as o}from"./p-BuFKlV49.js";import{l as n}from"./p-aC3bzUnr.js";const l="alc-tabs{display:block}.alc-tabs{border-width:1px;border-style:solid}.alc-tabs__tab-list{border-width:0px;border-bottom-width:1px;border-style:dotted}";const r='alc-tabs{--bg-color:var(--alc-color-surface);--border-color:var(--alc-color-border);--border-width:var(--alc-border-width)}[data-alc-theme="light"] alc-tabs{--outline-color:var(--alc-color-action-60)}[data-alc-theme="dark"] alc-tabs{--outline-color:var(--alc-color-action-30)}';const h=class{constructor(i){t(this,i);this.alcChange=s(this,"alc-change",7);this.selectedTabButton=null;this.tabList=null;this.selectedTab=null;this.hasScroll=false;this.onTabClicked=t=>{this.select(t.detail.tab)}}selectedChange(t,s){if(t!==s){this.select(t)}}async select(t){const s=c(this.tabs,t);if(!this.shouldSwitch(s)){return false}const i=d(this.tabButtons,s.getAttribute("tab"));this.tabSwitch(s,i);this.selected=s.getAttribute("tab");return true}tabSwitch(t,s){const i=this.selectedTab;const e=this.selectedTabButton;this.selectedTab=t;this.selectedTabButton=s;t.selected=true;s.selected=true;if(i!==t){if(i){i.selected=false;this.alcChange.emit({tab:t.tab})}if(e){e.selected=false}}}selectedHandler(t){this.select(t.detail.tab)}selectedNextButton(t){this.onTabButtonNext(t)}selectedPreviousButton(t){this.onTabButtonPrevious(t)}selectedFirstButton(t){this.onTabButtonFirst(t)}selectedLastButton(t){this.onTabButtonLast(t)}shouldSwitch(t){const s=this.selectedTab;return t!==undefined&&t!==s}get tabs(){let t=Array.from(this.el.querySelectorAll("alc-tab"));t=t.filter((t=>t.closest("alc-tabs")===this.el));n.log("my tabs are",t,this.el);return t}get tabButtons(){let t=Array.from(this.el.querySelectorAll("alc-tab-button"));t=t.filter((t=>t.closest("alc-tabs")===this.el));return t}getNextButton(t){let s;const i=this.tabButtons.findIndex((s=>s===t));if(i===this.tabButtons.length-1){s=0}else{s=i+1}return this.tabButtons[s]}getPreviousButton(t){let s;const i=this.tabButtons.findIndex((s=>s===t));if(i<=0){s=this.tabButtons.length-1}else{s=i-1}return this.tabButtons[s]}handleScroll(){let t=0;let s=this.tabList.offsetWidth;let i=this.tabList.style.overflowX;this.tabList.style.overflowX="auto";t=this.tabList.scrollWidth;this.tabList.style.overflowX=i;n.log("width",s,t);this.hasScroll=t>s}themeLoadedHandler(){this.handleScroll()}async componentDidLoad(){var t;const s=this.selected||((t=this.tabs[0])===null||t===void 0?void 0:t.tab);await this.select(s);let i=Array.from(this.el.querySelectorAll('[slot="button"]'));this.hasButtonSlot=i.some((t=>t.closest("alc-tabs")===this.el))}async onTabButtonNext(t){if(!this.isValidTabButton(t))return;const s=t.target;const i=this.getNextButton(s);this.handleSelectTabButton(i)}async onTabButtonPrevious(t){if(!this.isValidTabButton(t))return;const s=t.target;const i=this.getPreviousButton(s);this.handleSelectTabButton(i)}async onTabButtonFirst(t){if(!this.isValidTabButton(t))return;const s=this.tabButtons[0];this.handleSelectTabButton(s)}async onTabButtonLast(t){if(!this.isValidTabButton(t))return;const s=this.tabButtons[this.tabButtons.length-1];this.handleSelectTabButton(s)}async handleSelectTabButton(t){const s=await this.select(t.tab);if(s){t.querySelector("button").focus()}}isValidTabButton(t){const s=t.target;return Array.from(this.tabButtons).includes(s)}componentDidRender(){var t;(t=this.mo)===null||t===void 0?void 0:t.disconnect();this.mo=new MutationObserver((()=>{i(this.el)}));this.mo.observe(this.el,{childList:true});this.mo.observe(this.el.querySelector(".alc-tabs"),{childList:true});this.tabs.map(((t,s)=>{const i=t.querySelector('[role="tabpanel"]');if(this.tabButtons.length<=s){return}const e=this.tabButtons[s].querySelector("button");if(!i.hasAttribute("id")){i.setAttribute("id",`tab_${s}`)}if(!e.hasAttribute("id")){e.setAttribute("id",`button_${s}`)}i.setAttribute("aria-labelledby",e.getAttribute("id"));e.setAttribute("aria-controls",i.getAttribute("id"))}))}disconnectedCallback(){var t;(t=this.mo)===null||t===void 0?void 0:t.disconnect()}render(){let t;if(!this.hasButtonSlot){t=this.tabs.map((t=>e("alc-tab-button",{tab:t.tab},t.label)))}n.log("rendering",this.el,t);return e(a,{onAlcTabButtonClick:this.onTabClicked,onAlcTabButtonNext:this.onTabButtonNext.bind(this),onAlcTabButtonPrevious:this.onTabButtonPrevious.bind(this)},e("div",{class:"alc-tabs"},e("alc-scroll-panel",{hasFocus:false,scrollToElement:this.selectedTabButton},e("div",{role:"tablist",ref:t=>this.tabList=t,class:"alc-tabs__tab-list"},e("slot",{name:"button"}),t)),e("slot",null)))}get el(){return o(this)}static get watchers(){return{selected:["selectedChange"]}}};const c=(t,s)=>{const i=typeof s==="string"?t.find((t=>t.tab===s)):s;if(!i){n.error(`tab with id: "${i}" does not exist`)}return i};const d=(t,s)=>{const i=t.find((t=>t.tab===s));if(!i){n.error(`tab button with id: "${i}" does not exist`)}return i};h.style={base:l,theme:r};export{h as alc_tabs};
//# sourceMappingURL=p-e0010e92.entry.js.map