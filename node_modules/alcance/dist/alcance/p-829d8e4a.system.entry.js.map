{"version":3,"names":["noop","setup","value","domain","defaultValue","undefined","includes","logger","warn","concat","domains","type","dismissible","visible","defaults","setupType","setupDismissible","setupVisible","AlertCore","_a","_b","_c","_d","_e","dispatchHide","_f","dispatchAfterHide","_g","setVisible","_this","this","hide","defaultPrevented","show","ALC","version","alc","console","debug","alcAlertBaseCss","themeAlcAlertCss","iconMap","Map","set","label","name","Alert","exports","class_1","hostRef","prototype","watchPropVisible","newValue","core","watchType","watchDismissible","connectedCallback","emitHide","emitAfterHide","alcHide","emit","alcAfterHide","renderIcon","icon","get","h","renderDismissButton","Object","assign","class","test","onClick","componentDidRender","el","querySelectorAll","forEach","link","classList","add","render","Host","key","style","display"],"sources":["src/components/alc-alert/alc-alert.core.ts","src/core/alc.ts","src/components/alc-alert/alc-alert-base.css?tag=alc-alert&mode=base","src/components/alc-alert/alc-alert.css?tag=alc-alert&mode=theme","src/components/alc-alert/alc-alert.tsx"],"sourcesContent":["import { AnyFunction, Type } from './index';\nimport logger from '../utils/logger';\n\nconst noop: AnyFunction = () => {};\n\nconst setup = (value, domain = [], defaultValue) => {\n\n  if (value === undefined) {\n    return defaultValue;\n  }\n\n  if (!domain.includes(value)) {\n    logger.warn(`\"${value}\" não é um valor válido; usando o valor padrão \"${defaultValue}\"`);\n    return defaultValue;\n  }\n\n  return value;\n}\n\nconst domains = {\n  type: ['info', 'warning', 'error', 'success'],\n  dismissible: [true, false],\n  visible: [true, false]\n}\n\nconst defaults = {\n  type: 'info' as Type,\n  dismissible: true,\n  visible: true\n}\n\nconst setupType = value => setup(value, domains.type, defaults.type);\nconst setupDismissible = value => setup(value, domains.dismissible, defaults.dismissible)\nconst setupVisible = value => setup(value, domains.visible, defaults.visible);\n\nclass AlertCore {\n\n  // Tipo do alert\n  type: Type = 'info';\n  // Indica se o alert pode ou não ser dispensado\n  dismissible = true;\n  // Indica se o alerta está ou não visível\n  visible = true;\n  // Ajusta a visibilidade do alert\n  setVisible: AnyFunction = noop;\n  // Dispara o evento alc-hide\n  dispatchHide: AnyFunction = noop;\n  // Dispara o evento alc-after-hide\n  dispatchAfterHide: AnyFunction = noop;\n\n  constructor({\n    type = defaults.type,\n    dismissible = defaults.dismissible,\n    visible = defaults.visible,\n    dispatchHide = noop,\n    dispatchAfterHide = noop,\n    setVisible = noop\n  }) {\n\n    this.type = setupType(type);\n    this.dismissible = setupDismissible(dismissible);\n    this.dispatchAfterHide = dispatchAfterHide;\n    this.dispatchHide = dispatchHide;\n\n    this.setVisible = visible => {\n      this.visible = visible;\n      setVisible(visible);\n    }\n    this.setVisible(setupVisible(visible));\n  };\n\n  hide = () => {\n    if (!this.visible) {\n      return false;\n    }\n    const { defaultPrevented } = this.dispatchHide();\n    if (defaultPrevented) {\n      return false;\n    }\n\n    this.setVisible(false);\n    this.dispatchAfterHide();\n    return true;\n  };\n\n  show = () => {\n    if (!this.visible) {\n      this.setVisible(true);\n      return true;\n    }\n    return false;\n  }\n}\n\nexport { AlertCore, defaults };\n","import alc from '../../package.json'\ntype AlcTypes = {\n  version: string;\n}\n\nconst ALC: AlcTypes = {\n  version: alc.version,\n};\n\nconsole.debug('Core do ALC executado.');\n\nexport default ALC;\n","/* CSS básico para que o componente funcione - sem dependências externas */\nalc-alert {\n  @apply block;\n}\n.alc-alert {\n  @apply border border-solid;\n}","/* Definição das variáveis - Setup dos temas*/\n[data-alc-theme=\"dark\"] alc-alert {\n/**\n * @prop --bg-color-info: Cor de fundo para info\n * @prop --border-color-info: Cor de borda para info\n * @prop --text-color-info: Cor de texto para info\n */\n  --bg-color-info: var(--alc-color-info-70);\n  --border-color-info: var(--alc-color-info-60);\n  --text-color-info: var(--alc-color-text-1);\n\n/**\n * @prop --bg-color-warning: Cor de fundo para warning\n * @prop --border-color-warning: Cor de borda para warning\n * @prop --text-color-warning: Cor de texto para warning\n */\n  --bg-color-warning: var(--alc-color-warning-60);\n  --border-color-warning: var(--alc-color-warning-50);\n  --text-color-warning: var(--alc-color-text-1);\n\n  --bg-color-error: var(--alc-color-error-70);\n  --border-color-error: var(--alc-color-error-60);\n  --text-color-error: var(--alc-color-text-1);\n\n  --bg-color-success: var(--alc-color-success-70);\n  --border-color-success: var(--alc-color-success-60);\n  --text-color-success: var(--alc-color-text-1);\n}\n\n[data-alc-theme=\"light\"] alc-alert {\n\n  --bg-color-info: var(--alc-color-info-10);\n  --border-color-info: var(--alc-color-info-40);\n  --text-color-info: var(--alc-color-info-70);\n\n  --bg-color-warning: var(--alc-color-warning-10);\n  --border-color-warning: var(--alc-color-warning-20);\n  --text-color-warning: var(--alc-color-warning-60);\n\n  --bg-color-error: var(--alc-color-error-20);\n  --border-color-error: var(--alc-color-error-50);\n  --text-color-error: var(--alc-color-error-70);\n\n  --bg-color-success: var(--alc-color-success-10);\n  --border-color-success: var(--alc-color-success-50);\n  --text-color-success: var(--alc-color-success-70);\n}\n\n\n/* CSS COMUM a todos os temas */\n.alc-alert {\n  --border-width: theme('borderWidth.6');\n\n  @apply rounded-sm py-4 pr-4 my-2;\n  border-left-width: var(--border-width);\n  padding-left: calc(theme('padding.6') - var(--border-width));\n  color: var(--alc-color-text-1);\n}\n\n.alc-alert {\n  @apply flex flex-row flex-nowrap;\n}\n\n.alc-alert__content {\n  @apply flex-grow pl-2;\n}\n\n/**\n * @prop alc-alert__summary: Elemento que deve conter o sumário do alerta.\n */\n.alc-alert__summary {\n  @apply font-bold block;\n}\n\n.alc-alert__dismiss {\n  @apply  ml-2 -my-2 -mr-2;\n}\n\n.alc-alert--info {\n  background-color: var(--bg-color-info);\n  border-color: var(--border-color-info);\n  color: var(--text-color-info);\n}\n\n.alc-alert--warning {\n  background-color: var(--bg-color-warning);\n  border-color: var(--border-color-warning);\n  color: var(--text-color-warning);\n}\n\n.alc-alert--error {\n  background-color: var(--bg-color-error);\n  border-color: var(--border-color-error);\n  color: var(--text-color-error);\n}\n\n.alc-alert--success {\n  background-color: var(--bg-color-success);\n  border-color: var(--border-color-success);\n  color: var(--text-color-success);\n}\n","import { Component, Element, Prop, Event, EventEmitter, h, Method, Watch, Host } from '@stencil/core';\nimport { AlertCore } from './alc-alert.core';\nimport { Type } from './index';\nimport ALC from '../../core/alc';\nimport logger from '../utils/logger';\nimport test from '../utils/testAttributes';\n\n// @TODO Ver se é possível deixar os códigos SVG separados em outros arquivos,\n//       mas sem que crie problemas com importação de assets quando for distribuído.\nconst iconMap = new Map();\n\niconMap.set('info', {\n  label: 'Informação:',\n  name: 'info-circle'\n});\niconMap.set('error', {\n  label: 'Erro:',\n  name: 'x-circle'\n});\niconMap.set('warning', {\n  label: 'Alerta:',\n  name: 'exclamation-circle'\n});\niconMap.set('success', {\n  label: 'Sucesso:',\n  name: 'check-circle'\n});\n\n// Comentários sobre o comentário (jsdoc-like) abaixo:\n//\n// 1- O texto livre inicial é colocado na chave `docs` do json.\n//\n// 2- @slot é uma tag definida pelo StencilJS. É colocado na chave:\n//   slots: [\n//     {\n//       \"name\": \"default\",\n//       \"docs\": \"Slot para o conteúdo do alert\"\n//     }\n//   ]\n//\n// 3- @picWidget é um exemplo de tag customizada. É colocado na chave:\n//   docsTags: [\n//     {\n//       \"name\": \"picWidget\",\n//       \"text\": \"pic-alert\"\n//     }\n//   ]\n/**\n * Vamos lá testar.\n * Ver se isso vai funcionar.\n * ^^^^^ [1]\n *\n * @slot - Slot para o conteúdo do alert.\n * @slot summary - Slot para o summary do alert.\n * @picWidget pic-alert\n */\n\n@Component({\n  tag: 'alc-alert',\n  styleUrls: {\n    base: 'alc-alert-base.css',\n    theme: 'alc-alert.css'\n  },\n  scoped: false,\n})\n\nexport class Alert {\n\n  // The alert core\n  private core: AlertCore;\n\n  @Element() el: HTMLAlcAlertElement;\n\n  /**\n   * Indica se o alert está visível. Pode-se usar essa propriedade em vez dos métodos show/hide.\n    */\n  @Prop({ mutable: true, reflect: true }) visible: boolean = true;\n\n  @Watch('visible')\n  watchPropVisible(newValue: boolean) {\n    newValue === true ? this.core.show() : this.core.hide();\n  }\n\n  /**\n   * O tipo do alert, de acordo com a natureza da mensagem nele contido.\n   */\n  // @TODO O ideal seria buscar o valor default do core, mas não fica legal a documentação\n  @Prop({ reflect: true }) type: Type = 'info';\n\n  @Watch('type')\n  watchType(newValue: Type) {\n    this.core.type = newValue;\n  }\n\n  /**\n   * Define se o alert pode ser dispensado pelo usuário.\n   */\n  // @TODO O ideal seria buscar o valor default do core, mas não fica legal a documentação\n  @Prop({ reflect: true }) dismissible: boolean = true;\n\n  @Watch('dismissible')\n  watchDismissible(newValue: boolean) {\n    this.core.dismissible = newValue;\n  }\n\n  /**\n   * Evento disparado quando o alert é dispensado.\n   */\n  @Event({\n    eventName: 'alc-hide',\n    cancelable: true,\n    bubbles: true\n\n  }) alcHide: EventEmitter<null>;\n  /**\n   * Evento disparado quando o alert é dispensado.\n   */\n  @Event({\n    eventName: 'alc-after-hide',\n    cancelable: false,\n    bubbles: true\n  }) alcAfterHide: EventEmitter<null>;\n\n  connectedCallback() {\n    this.core = new AlertCore({\n      type: this.type,\n      dismissible: this.dismissible,\n      visible: this.visible,\n      dispatchHide: () => this.emitHide(),\n      dispatchAfterHide: () => this.emitAfterHide(),\n      setVisible: this.setVisible\n    });\n  }\n\n  /**\n   * Fecha o alert.\n   * @returns O valor retornado é `true` se o alert foi realmente dispensado com essa chamada ao método.\n   */\n  @Method()\n  async hide(): Promise<boolean> {\n    return this.core.hide();\n  }\n\n  /**\n   * Exibe o alert.\n   * @returns O valor retornado é `true` se o alert foi realmente exibido com esa chamada ao método.\n   */\n  @Method()\n  async show(): Promise<boolean> {\n    return this.core.show();\n  }\n\n  /*\n   * Dispara o evento will dismiss\n   */\n  private emitHide(): CustomEvent {\n    return this.alcHide.emit();\n  }\n\n  /*\n   * Dispara o evento did dismiss\n   */\n  private emitAfterHide(): CustomEvent {\n    return this.alcAfterHide.emit();\n  }\n\n\n  /*\n   * Renderiza o ícone de acordo com o type\n   */\n  private renderIcon(): string {\n    let icon = iconMap.get(this.core.type);\n    return <alc-icon name={icon.name} label={icon.label}></alc-icon>\n  }\n\n  /*\n   * Renderiza o botão \"dispensar\" se for o caso.\n   */\n  private renderDismissButton(): string {\n    // Will not have a button if !dismissible\n    if (!this.core.dismissible) {\n      return null;\n    }\n\n    return (\n      <div class=\"alc-alert__dismiss\" {...test('data-test-dismiss')}>\n        <button\n          class={`alc-button alc-button-rounded alc-button-rounded--${this.core.type}`}\n          onClick={() => this.hide()}\n        >\n          <alc-icon name=\"x-lg\" label=\"Dispensar\"></alc-icon>\n        </button>\n      </div>\n    );\n  }\n\n  private setVisible = (visible: boolean) => {\n    this.visible = visible;\n  }\n\n  componentDidRender() {\n    this.el.querySelectorAll('a').forEach(link => {\n      link.classList.add('alc-link--color-text');\n    });\n  }\n\n  /**\n   * StencilJS render\n   */\n\n  render() {\n\n    logger.debug('render alc-alert', ALC);\n\n    return (\n      <Host\n        style={{display: this.visible ? null : 'none'}}\n      >\n        <div class={\"alc-alert alc-alert--\" + this.core.type}>\n          {this.renderIcon()}\n          <div class='alc-alert__content'>\n            <div class=\"alc-alert__summary\">\n              <slot name=\"summary\"></slot>\n            </div>\n            <slot />\n          </div>\n\n          {this.renderDismissButton()}\n        </div>\n      </Host>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}