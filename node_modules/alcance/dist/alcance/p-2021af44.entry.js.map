{"version":3,"names":["alcExpanderCss","AlcExpander","constructor","hostRef","this","expanderId","getUniqueId","open","hideLabel","isOpen","toggleExpander","async","event","preventDefault","show","hide","syncOpen","newValue","componentWillLoad","showEvent","alcShow","emit","defaultPrevented","alcAfterShow","hideEvent","alcHide","alcAfterHide","renderChevron","iconName","h","name","label","class","render","_a","logger","report","element","tagName","toLowerCase","labelContent","key","summaryClasses","Host","id","onClick","alcMenuItemThemeCss","AlcMenuItemTheme","checked","DARK_THEME","LIGHT_THEME","handleClick","toggleTheme","theme","setAppliedTheme","saveUserPreference","userPreference","loadUserPreference","getAppliedTheme","type","icon","slot"],"sources":["src/components/alc-expander/alc-expander.css?tag=alc-expander","src/components/alc-expander/alc-expander.tsx","src/components/alc-menu-item-theme/alc-menu-item-theme.css?tag=alc-menu-item-theme","src/components/alc-menu-item-theme/alc-menu-item-theme.tsx"],"sourcesContent":["/* Container principal: transparente e com largura total */\n.alc-expander {\n  @apply bg-transparent w-full border-none m-0 p-0;\n}\n\n/* Summary padrão: alinhado à direita */\n.alc-expander__summary {\n  @apply flex items-center justify-end cursor-pointer list-none w-full p-2 bg-transparent border-none dark:shadow-[0px_4px_4px_0px_rgba(255,255,255,0.20)] shadow-[0px_4px_4px_0px_rgba(0,0,0,0.10)];;\n}\n\n/* Quando o summary deve centralizar o chevron (hideSummary true) */\n.alc-expander__summary--center {\n  @apply justify-center;\n}\n\n/* Container do label no summary */\n.alc-expander__label-container {\n  /* Mantém o alinhamento à esquerda quando o label é exibido */\n  @apply mr-auto;\n}\n\n/* Chevrons: renderizados inline */\n.alc-expander__chevron {\n  @apply h-6 shrink-0;\n}\n\n/* Conteúdo do expander */\n.alc-expander__content {\n  @apply bg-transparent w-full dark:shadow-[0px_4px_4px_0px_rgba(255,255,255,0.20)] shadow-[0px_4px_4px_0px_rgba(0,0,0,0.10)];\n}","import {\n  Component,\n  Element,\n  Host,\n  h,\n  Prop,\n  Event,\n  EventEmitter,\n  Method,\n  Watch,\n  State,\n} from '@stencil/core';\nimport { getUniqueId } from '../utils/getUniqueId';\nimport logger from '../utils/logger';\n\n/**\n * @slot label - Slot para rótulo do controle. Há opção de adicionar apenas texto por meio da propriedade `label`.\n * Use esse recurso caso seja necessário alguma personalização no HTML referente ao rótulo.\n * Não inclua headings (`h1`, `h2` etc.) nem elementos interativos (`a`, `button`, `input` etc.) nesse slot.\n * @slot DEFAULT  - Slot para o conteúdo do expander.\n*/\n\n@Component({\n  tag: 'alc-expander',\n  styleUrl: 'alc-expander.css',\n  shadow: false,\n})\nexport class AlcExpander {\n  @Element() element!: HTMLElement;\n  private expanderId: string = getUniqueId();\n\n  /**\n   * Rótulo do elemento que controla a abertura e o fechamento do expander.\n   */\n  @Prop({ reflect: true }) label!: string;\n\n  /**\n   * Define se o expander está aberto ou fechado.\n   */\n  @Prop({ reflect: true, mutable: true }) open: boolean = false;\n\n  /**\n   * Oculta o rótulo do controle, mantendo-o acessível para leitores de tela.\n   */\n  @Prop({ reflect: true }) hideLabel: boolean = false;\n\n  @State() isOpen: boolean = this.open;\n\n  /**\n   * Evento disparado antes de abrir. Cancelável.\n   */\n  @Event({ eventName: 'alc-show', cancelable: true, bubbles: true })\n  alcShow: EventEmitter<void>;\n\n  /**\n   * Evento disparado após abrir.\n   */\n  @Event({ eventName: 'alc-after-show', bubbles: true })\n  alcAfterShow: EventEmitter<void>;\n\n  /**\n   * Evento disparado antes de fechar. Cancelável.\n   */\n  @Event({ eventName: 'alc-hide', cancelable: true, bubbles: true })\n  alcHide: EventEmitter<void>;\n\n  /**\n   * Evento disparado após fechar.\n   */\n  @Event({ eventName: 'alc-after-hide', bubbles: true })\n  alcAfterHide: EventEmitter<void>;\n\n  @Watch('open')\n  syncOpen(newValue: boolean) {\n    this.isOpen = newValue;\n  }\n\n  componentWillLoad() {\n    this.isOpen = this.open;\n  }\n\n  private toggleExpander = async (event: Event) => {\n    event.preventDefault(); // previne comportamento nativo de abrir imediatamente\n\n    if (!this.isOpen) {\n      await this.show();\n    } else {\n      await this.hide();\n    }\n  };\n\n  /**\n   * Abre o expander programaticamente.\n   */\n  @Method()\n  async show(): Promise<void> {\n    if (!this.isOpen) {\n      const showEvent = this.alcShow.emit();\n      if (showEvent.defaultPrevented) return;\n      this.isOpen = true;\n      this.open = true;\n      this.alcAfterShow.emit();\n    }\n  }\n\n  /**\n   * Fecha o expander programaticamente.\n   */\n  @Method()\n  async hide(): Promise<void> {\n    if (this.isOpen) {\n      const hideEvent = this.alcHide.emit();\n      if (hideEvent.defaultPrevented) return;\n      this.isOpen = false;\n      this.open = false;\n      this.alcAfterHide.emit();\n    }\n  }\n\n  private renderChevron() {\n    const iconName = this.isOpen ? 'chevron-up' : 'chevron-down';\n    return (\n      <alc-icon\n        name={iconName}\n        label=\"\"\n        class=\"alc-expander__chevron\"\n      ></alc-icon>\n    );\n  }\n\n  render() {\n    this.label ?? logger.report('label', this.element.tagName.toLowerCase(), this.element);\n    \n    const labelContent = (\n      <div\n        class={{\n          'alc-expander__label-container': true,\n          'sr-only': this.hideLabel,\n        }}\n      >\n        <slot name=\"label\">{this.label}</slot>\n      </div>\n    );\n\n    const summaryClasses = {\n      'alc-expander__summary': true,\n      'alc-expander__summary--center': this.hideLabel,\n    };\n\n    return (\n      <Host>\n        <details\n          id={this.expanderId}\n          class={{\n            'alc-expander': true,\n            'is-open': this.isOpen,\n          }}\n          open={this.isOpen}\n        >\n          <summary\n            class={summaryClasses}\n            onClick={this.toggleExpander}\n          >\n            {labelContent}\n            {this.renderChevron()}\n          </summary>\n          <div class=\"alc-expander__content\">\n            <slot></slot>\n          </div>\n        </details>\n      </Host>\n    );\n  }\n}",null,"import { Component, Host, Listen, State, h } from '@stencil/core';\nimport { getAppliedTheme, setAppliedTheme, loadUserPreference, saveUserPreference } from '../utils/theme';\n\n@Component({\n  tag: 'alc-menu-item-theme',\n  styleUrl: 'alc-menu-item-theme.css',\n  shadow: false,\n})\nexport class AlcMenuItemTheme {\n  // Estado para controlar se o tema escuro está ativado\n  @State() checked: boolean = false;\n\n  // Constantes para os temas\n  private readonly DARK_THEME = 'dark';\n  private readonly LIGHT_THEME = 'light';\n\n  // Listener para o evento 'alc-select', alterna o tema entre claro e escuro.\n  @Listen('alc-select')\n  handleClick(): void {\n    this.toggleTheme();\n  }\n\n  // Alterna o tema entre claro e escuro.\n  private toggleTheme(): void {\n    this.checked = !this.checked;\n    const theme = this.checked ? this.DARK_THEME : this.LIGHT_THEME;\n    setAppliedTheme(theme);\n    saveUserPreference(theme);\n  }\n\n  // Define o estado inicial do tema com base na preferência do usuário ou no tema do sistema.\n  componentWillLoad(): void {\n    const userPreference = loadUserPreference();\n\n    switch (userPreference) {\n      case this.LIGHT_THEME:\n        this.checked = false;\n        break;\n      case this.DARK_THEME:\n        this.checked = true;\n        break;\n      default:\n        // Se o tema do sistema for dark, então checked 'true' se não 'false'.\n        this.checked = getAppliedTheme('system') === this.DARK_THEME;\n        break;\n    }\n  }\n\n\n  render() {\n    return (\n      <Host>\n        <alc-menu-item type=\"checkbox\" checked={this.checked}>\n          <alc-icon icon=\"moon\" label=\"\" slot=\"prefix\"></alc-icon>\n          Ver no tema escuro\n        </alc-menu-item>\n      </Host>\n    );\n  }\n}\n"],"mappings":"iMAAA,MAAMA,EAAiB,28D,MC2BVC,EAAW,MALxB,WAAAC,CAAAC,G,wKAOUC,KAAUC,WAAWC,IAUWF,KAAIG,KAAY,MAK/BH,KAASI,UAAY,MAErCJ,KAAAK,OAAkBL,KAAKG,KAmCxBH,KAAAM,eAAiBC,MAAOC,IAC9BA,EAAMC,iBAEN,IAAKT,KAAKK,OAAQ,OACVL,KAAKU,M,KACN,OACCV,KAAKW,M,EAsFhB,CApGC,QAAAC,CAASC,GACPb,KAAKK,OAASQ,C,CAGhB,iBAAAC,GACEd,KAAKK,OAASL,KAAKG,I,CAiBrB,UAAMO,GACJ,IAAKV,KAAKK,OAAQ,CAChB,MAAMU,EAAYf,KAAKgB,QAAQC,OAC/B,GAAIF,EAAUG,iBAAkB,OAChClB,KAAKK,OAAS,KACdL,KAAKG,KAAO,KACZH,KAAKmB,aAAaF,M,EAQtB,UAAMN,GACJ,GAAIX,KAAKK,OAAQ,CACf,MAAMe,EAAYpB,KAAKqB,QAAQJ,OAC/B,GAAIG,EAAUF,iBAAkB,OAChClB,KAAKK,OAAS,MACdL,KAAKG,KAAO,MACZH,KAAKsB,aAAaL,M,EAId,aAAAM,GACN,MAAMC,EAAWxB,KAAKK,OAAS,aAAe,eAC9C,OACEoB,EAAA,YACEC,KAAMF,EACNG,MAAM,GACNC,MAAM,yB,CAKZ,MAAAC,G,OACEC,EAAA9B,KAAK2B,SAAK,MAAAG,SAAA,EAAAA,EAAIC,EAAOC,OAAO,QAAShC,KAAKiC,QAAQC,QAAQC,cAAenC,KAAKiC,SAE9E,MAAMG,EACJX,EAAA,OAAAY,IAAA,2CACET,MAAO,CACL,gCAAiC,KACjC,UAAW5B,KAAKI,YAGlBqB,EAAM,QAAAY,IAAA,2CAAAX,KAAK,SAAS1B,KAAK2B,QAI7B,MAAMW,EAAiB,CACrB,wBAAyB,KACzB,gCAAiCtC,KAAKI,WAGxC,OACEqB,EAACc,EAAI,CAAAF,IAAA,4CACHZ,EAAA,WAAAY,IAAA,2CACEG,GAAIxC,KAAKC,WACT2B,MAAO,CACL,eAAgB,KAChB,UAAW5B,KAAKK,QAElBF,KAAMH,KAAKK,QAEXoB,EACE,WAAAY,IAAA,2CAAAT,MAAOU,EACPG,QAASzC,KAAKM,gBAEb8B,EACApC,KAAKuB,iBAERE,EAAK,OAAAY,IAAA,2CAAAT,MAAM,yBACTH,EAAA,QAAAY,IAAA,+C,0FCvKZ,MAAMK,EAAsB,G,MCQfC,EAAgB,MAL7B,WAAA7C,CAAAC,G,UAOWC,KAAO4C,QAAY,MAGX5C,KAAU6C,WAAG,OACb7C,KAAW8C,YAAG,OA6ChC,CAzCC,WAAAC,GACE/C,KAAKgD,a,CAIC,WAAAA,GACNhD,KAAK4C,SAAW5C,KAAK4C,QACrB,MAAMK,EAAQjD,KAAK4C,QAAU5C,KAAK6C,WAAa7C,KAAK8C,YACpDI,EAAgBD,GAChBE,EAAmBF,E,CAIrB,iBAAAnC,GACE,MAAMsC,EAAiBC,IAEvB,OAAQD,GACN,KAAKpD,KAAK8C,YACR9C,KAAK4C,QAAU,MACf,MACF,KAAK5C,KAAK6C,WACR7C,KAAK4C,QAAU,KACf,MACF,QAEE5C,KAAK4C,QAAUU,EAAgB,YAActD,KAAK6C,WAClD,M,CAKN,MAAAhB,GACE,OACEJ,EAACc,EAAI,CAAAF,IAAA,4CACHZ,EAAe,iBAAAY,IAAA,2CAAAkB,KAAK,WAAWX,QAAS5C,KAAK4C,SAC3CnB,EAAU,YAAAY,IAAA,2CAAAmB,KAAK,OAAO7B,MAAM,GAAG8B,KAAK,WAEtB,sB","ignoreList":[]}