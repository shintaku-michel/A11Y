import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-BuFKlV49.js';
import { l as logger } from './logger-CZkdJRkw.js';
import { t as testAttributes } from './testAttributes-DKpd2q2s.js';

const noop = () => { };
const setup = (value, domain = [], defaultValue) => {
    if (value === undefined) {
        return defaultValue;
    }
    if (!domain.includes(value)) {
        logger.warn(`"${value}" não é um valor válido; usando o valor padrão "${defaultValue}"`);
        return defaultValue;
    }
    return value;
};
const domains = {
    type: ['info', 'warning', 'error', 'success'],
    dismissible: [true, false],
    visible: [true, false]
};
const defaults = {
    type: 'info',
    dismissible: true,
    visible: true
};
const setupType = value => setup(value, domains.type, defaults.type);
const setupDismissible = value => setup(value, domains.dismissible, defaults.dismissible);
const setupVisible = value => setup(value, domains.visible, defaults.visible);
class AlertCore {
    constructor({ type = defaults.type, dismissible = defaults.dismissible, visible = defaults.visible, dispatchHide = noop, dispatchAfterHide = noop, setVisible = noop }) {
        // Tipo do alert
        this.type = 'info';
        // Indica se o alert pode ou não ser dispensado
        this.dismissible = true;
        // Indica se o alerta está ou não visível
        this.visible = true;
        // Ajusta a visibilidade do alert
        this.setVisible = noop;
        // Dispara o evento alc-hide
        this.dispatchHide = noop;
        // Dispara o evento alc-after-hide
        this.dispatchAfterHide = noop;
        this.hide = () => {
            if (!this.visible) {
                return false;
            }
            const { defaultPrevented } = this.dispatchHide();
            if (defaultPrevented) {
                return false;
            }
            this.setVisible(false);
            this.dispatchAfterHide();
            return true;
        };
        this.show = () => {
            if (!this.visible) {
                this.setVisible(true);
                return true;
            }
            return false;
        };
        this.type = setupType(type);
        this.dismissible = setupDismissible(dismissible);
        this.dispatchAfterHide = dispatchAfterHide;
        this.dispatchHide = dispatchHide;
        this.setVisible = visible => {
            this.visible = visible;
            setVisible(visible);
        };
        this.setVisible(setupVisible(visible));
    }
    ;
}

const version = "0.16.0";
var alc = {
	version: version};

const ALC = {
    version: alc.version,
};
console.debug('Core do ALC executado.');

const alcAlertBaseCss = "alc-alert{display:block}.alc-alert{border-width:1px;border-style:solid}";

const themeAlcAlertCss = "[data-alc-theme=\"dark\"] alc-alert{--bg-color-info:var(--alc-color-info-70);--border-color-info:var(--alc-color-info-60);--text-color-info:var(--alc-color-text-1);--bg-color-warning:var(--alc-color-warning-60);--border-color-warning:var(--alc-color-warning-50);--text-color-warning:var(--alc-color-text-1);--bg-color-error:var(--alc-color-error-70);--border-color-error:var(--alc-color-error-60);--text-color-error:var(--alc-color-text-1);--bg-color-success:var(--alc-color-success-70);--border-color-success:var(--alc-color-success-60);--text-color-success:var(--alc-color-text-1)}[data-alc-theme=\"light\"] alc-alert{--bg-color-info:var(--alc-color-info-10);--border-color-info:var(--alc-color-info-40);--text-color-info:var(--alc-color-info-70);--bg-color-warning:var(--alc-color-warning-10);--border-color-warning:var(--alc-color-warning-20);--text-color-warning:var(--alc-color-warning-60);--bg-color-error:var(--alc-color-error-20);--border-color-error:var(--alc-color-error-50);--text-color-error:var(--alc-color-error-70);--bg-color-success:var(--alc-color-success-10);--border-color-success:var(--alc-color-success-50);--text-color-success:var(--alc-color-success-70)}.alc-alert{--border-width:6px;margin-top:0.5rem;margin-bottom:0.5rem;border-radius:0.125rem;padding-top:1rem;padding-bottom:1rem;padding-right:1rem;border-left-width:var(--border-width);padding-left:calc(1.5rem - var(--border-width));color:var(--alc-color-text-1);display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row;-ms-flex-wrap:nowrap;flex-wrap:nowrap}.alc-alert__content{-ms-flex-positive:1;flex-grow:1;padding-left:0.5rem}.alc-alert__summary{display:block;font-weight:700}.alc-alert__dismiss{margin-top:-0.5rem;margin-bottom:-0.5rem;margin-left:0.5rem;margin-right:-0.5rem}.alc-alert--info{background-color:var(--bg-color-info);border-color:var(--border-color-info);color:var(--text-color-info)}.alc-alert--warning{background-color:var(--bg-color-warning);border-color:var(--border-color-warning);color:var(--text-color-warning)}.alc-alert--error{background-color:var(--bg-color-error);border-color:var(--border-color-error);color:var(--text-color-error)}.alc-alert--success{background-color:var(--bg-color-success);border-color:var(--border-color-success);color:var(--text-color-success)}";

// @TODO Ver se é possível deixar os códigos SVG separados em outros arquivos,
//       mas sem que crie problemas com importação de assets quando for distribuído.
const iconMap = new Map();
iconMap.set('info', {
    label: 'Informação:',
    name: 'info-circle'
});
iconMap.set('error', {
    label: 'Erro:',
    name: 'x-circle'
});
iconMap.set('warning', {
    label: 'Alerta:',
    name: 'exclamation-circle'
});
iconMap.set('success', {
    label: 'Sucesso:',
    name: 'check-circle'
});
const Alert = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.alcHide = createEvent(this, "alc-hide", 7);
        this.alcAfterHide = createEvent(this, "alc-after-hide", 6);
        /**
         * Indica se o alert está visível. Pode-se usar essa propriedade em vez dos métodos show/hide.
          */
        this.visible = true;
        /**
         * O tipo do alert, de acordo com a natureza da mensagem nele contido.
         */
        // @TODO O ideal seria buscar o valor default do core, mas não fica legal a documentação
        this.type = 'info';
        /**
         * Define se o alert pode ser dispensado pelo usuário.
         */
        // @TODO O ideal seria buscar o valor default do core, mas não fica legal a documentação
        this.dismissible = true;
        this.setVisible = (visible) => {
            this.visible = visible;
        };
    }
    watchPropVisible(newValue) {
        newValue === true ? this.core.show() : this.core.hide();
    }
    watchType(newValue) {
        this.core.type = newValue;
    }
    watchDismissible(newValue) {
        this.core.dismissible = newValue;
    }
    connectedCallback() {
        this.core = new AlertCore({
            type: this.type,
            dismissible: this.dismissible,
            visible: this.visible,
            dispatchHide: () => this.emitHide(),
            dispatchAfterHide: () => this.emitAfterHide(),
            setVisible: this.setVisible
        });
    }
    /**
     * Fecha o alert.
     * @returns O valor retornado é `true` se o alert foi realmente dispensado com essa chamada ao método.
     */
    async hide() {
        return this.core.hide();
    }
    /**
     * Exibe o alert.
     * @returns O valor retornado é `true` se o alert foi realmente exibido com esa chamada ao método.
     */
    async show() {
        return this.core.show();
    }
    /*
     * Dispara o evento will dismiss
     */
    emitHide() {
        return this.alcHide.emit();
    }
    /*
     * Dispara o evento did dismiss
     */
    emitAfterHide() {
        return this.alcAfterHide.emit();
    }
    /*
     * Renderiza o ícone de acordo com o type
     */
    renderIcon() {
        let icon = iconMap.get(this.core.type);
        return h("alc-icon", { name: icon.name, label: icon.label });
    }
    /*
     * Renderiza o botão "dispensar" se for o caso.
     */
    renderDismissButton() {
        // Will not have a button if !dismissible
        if (!this.core.dismissible) {
            return null;
        }
        return (h("div", Object.assign({ class: "alc-alert__dismiss" }, testAttributes()), h("button", { class: `alc-button alc-button-rounded alc-button-rounded--${this.core.type}`, onClick: () => this.hide() }, h("alc-icon", { name: "x-lg", label: "Dispensar" }))));
    }
    componentDidRender() {
        this.el.querySelectorAll('a').forEach(link => {
            link.classList.add('alc-link--color-text');
        });
    }
    /**
     * StencilJS render
     */
    render() {
        logger.debug('render alc-alert', ALC);
        return (h(Host, { key: '659c2cf489d4d1a8da0fc8e6aed725322c9dc38a', style: { display: this.visible ? null : 'none' } }, h("div", { key: 'ce93997657b175b0bebf0fb616f21ecb37738832', class: "alc-alert alc-alert--" + this.core.type }, this.renderIcon(), h("div", { key: '9ad2f7bf6903e63c8e123df01a73f510c6164d3c', class: 'alc-alert__content' }, h("div", { key: '9b3168c210ad5b525c7a34a5273008c06f5d1e73', class: "alc-alert__summary" }, h("slot", { key: '3eebdf45b31d6f86cb5a5d3d6e366e0c062be2ee', name: "summary" })), h("slot", { key: '237e8b7b3dc224f3e37040be1746bfe15190d998' })), this.renderDismissButton())));
    }
    get el() { return getElement(this); }
    static get watchers() { return {
        "visible": ["watchPropVisible"],
        "type": ["watchType"],
        "dismissible": ["watchDismissible"]
    }; }
};
Alert.style = {
    base: alcAlertBaseCss,
    theme: themeAlcAlertCss
};

export { Alert as alc_alert };
//# sourceMappingURL=alc-alert.entry.js.map

//# sourceMappingURL=alc-alert.entry.js.map