import { r as registerInstance, h, H as Host, g as getElement } from './index-BuFKlV49.js';
import { l as logger } from './logger-CZkdJRkw.js';
import { t as testAttributes } from './testAttributes-DKpd2q2s.js';

const alcTabBaseCss = "";

const themeAlcTabCss = ".alc-tabs__tab:focus-visible{outline-style:solid;outline-width:2px;outline-offset:-8px;outline-color:var(--outline-color)}.alc-tabs__tab--content{border-color:var(--border-color);background-color:var(--bg-color);padding:0.75rem;border-width:var(--border-width);margin-top:calc(-1 * var(--border-width))}";

const AlcTab = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Rótulo da tab.
         */
        this.label = '';
        /**
         * Se, dentro da tab, o primeiro elemento com conteúdo significativo for focalizável, deve ser definido como `true`.
         * Caso contrário, deve ser mantido o valor padrão (`false`).
         */
        this.contentFocus = false;
    }
    render() {
        var _a;
        (_a = this.tab) !== null && _a !== void 0 ? _a : logger.report('tab', this.el.tagName.toLowerCase(), this.el);
        const getId = () => {
            let id;
            if (this.el.id) {
                id = this.el.id;
            }
            else {
                id = `alc-tab_${this.el.tab}`;
            }
            return id;
        };
        return (h(Host, null, h("div", Object.assign({ hidden: !this.selected, role: 'tabpanel', id: getId(), tabindex: this.contentFocus ? null : '0', class: 'alc-tabs__tab' }, testAttributes()), h("div", { class: 'alc-tabs__tab--content' }, h("slot", null)))));
    }
    get el() { return getElement(this); }
};
AlcTab.style = {
    base: alcTabBaseCss,
    theme: themeAlcTabCss
};

export { AlcTab as alc_tab };
//# sourceMappingURL=alc-tab.entry.js.map

//# sourceMappingURL=alc-tab.entry.js.map