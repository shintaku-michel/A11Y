import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-BuFKlV49.js';
import { g as getUniqueId } from './getUniqueId-BY09qPiz.js';
import { l as logger } from './logger-CZkdJRkw.js';
import { s as setAppliedTheme, b as saveUserPreference, l as loadUserPreference, g as getAppliedTheme } from './theme-BR2kXvnz.js';

const alcExpanderCss = ".alc-expander{margin:0px;width:100%;border-style:none;background-color:transparent;padding:0px}.alc-expander__summary{display:-ms-flexbox;display:flex;width:100%;cursor:pointer;list-style-type:none;-ms-flex-align:center;align-items:center;-ms-flex-pack:end;justify-content:flex-end;border-style:none;background-color:transparent;padding:0.5rem;--tw-shadow:0px 4px 4px 0px rgba(0,0,0,0.10);--tw-shadow-colored:0px 4px 4px 0px var(--tw-shadow-color);-webkit-box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)}.alc-expander__summary:is([data-alc-theme=\"dark\"] *){--tw-shadow:0px 4px 4px 0px rgba(255,255,255,0.20);--tw-shadow-colored:0px 4px 4px 0px var(--tw-shadow-color);-webkit-box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)}.alc-expander__summary--center{-ms-flex-pack:center;justify-content:center}.alc-expander__label-container{margin-right:auto}.alc-expander__chevron{height:1.5rem;-ms-flex-negative:0;flex-shrink:0}.alc-expander__content{width:100%;background-color:transparent;--tw-shadow:0px 4px 4px 0px rgba(0,0,0,0.10);--tw-shadow-colored:0px 4px 4px 0px var(--tw-shadow-color);-webkit-box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)}.alc-expander__content:is([data-alc-theme=\"dark\"] *){--tw-shadow:0px 4px 4px 0px rgba(255,255,255,0.20);--tw-shadow-colored:0px 4px 4px 0px var(--tw-shadow-color);-webkit-box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)}";

const AlcExpander = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.alcShow = createEvent(this, "alc-show", 7);
        this.alcAfterShow = createEvent(this, "alc-after-show", 7);
        this.alcHide = createEvent(this, "alc-hide", 7);
        this.alcAfterHide = createEvent(this, "alc-after-hide", 7);
        this.expanderId = getUniqueId();
        /**
         * Define se o expander está aberto ou fechado.
         */
        this.open = false;
        /**
         * Oculta o rótulo do controle, mantendo-o acessível para leitores de tela.
         */
        this.hideLabel = false;
        this.isOpen = this.open;
        this.toggleExpander = async (event) => {
            event.preventDefault(); // previne comportamento nativo de abrir imediatamente
            if (!this.isOpen) {
                await this.show();
            }
            else {
                await this.hide();
            }
        };
    }
    syncOpen(newValue) {
        this.isOpen = newValue;
    }
    componentWillLoad() {
        this.isOpen = this.open;
    }
    /**
     * Abre o expander programaticamente.
     */
    async show() {
        if (!this.isOpen) {
            const showEvent = this.alcShow.emit();
            if (showEvent.defaultPrevented)
                return;
            this.isOpen = true;
            this.open = true;
            this.alcAfterShow.emit();
        }
    }
    /**
     * Fecha o expander programaticamente.
     */
    async hide() {
        if (this.isOpen) {
            const hideEvent = this.alcHide.emit();
            if (hideEvent.defaultPrevented)
                return;
            this.isOpen = false;
            this.open = false;
            this.alcAfterHide.emit();
        }
    }
    renderChevron() {
        const iconName = this.isOpen ? 'chevron-up' : 'chevron-down';
        return (h("alc-icon", { name: iconName, label: "", class: "alc-expander__chevron" }));
    }
    render() {
        var _a;
        (_a = this.label) !== null && _a !== void 0 ? _a : logger.report('label', this.element.tagName.toLowerCase(), this.element);
        const labelContent = (h("div", { key: 'f9f7843360293de8ea12c3115ee58c7a11f4ba80', class: {
                'alc-expander__label-container': true,
                'sr-only': this.hideLabel,
            } }, h("slot", { key: 'a74be46734382e662851548b60d8fff2e094d9a7', name: "label" }, this.label)));
        const summaryClasses = {
            'alc-expander__summary': true,
            'alc-expander__summary--center': this.hideLabel,
        };
        return (h(Host, { key: 'd24d4d2eb204875d5b8d83c9bb08ea98da175ee5' }, h("details", { key: 'f8058daa11fd2bb53b025075a9cf53844bd829cf', id: this.expanderId, class: {
                'alc-expander': true,
                'is-open': this.isOpen,
            }, open: this.isOpen }, h("summary", { key: '6555336775d80fffb826d5a77e63998d926188ea', class: summaryClasses, onClick: this.toggleExpander }, labelContent, this.renderChevron()), h("div", { key: '5762d27fb7c7c3983c577543dc291546d27bdc45', class: "alc-expander__content" }, h("slot", { key: '5e8ee74e265c53e67f15f42ef4166f2797726035' })))));
    }
    get element() { return getElement(this); }
    static get watchers() { return {
        "open": ["syncOpen"]
    }; }
};
AlcExpander.style = alcExpanderCss;

const alcMenuItemThemeCss = "";

const AlcMenuItemTheme = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        // Estado para controlar se o tema escuro está ativado
        this.checked = false;
        // Constantes para os temas
        this.DARK_THEME = 'dark';
        this.LIGHT_THEME = 'light';
    }
    // Listener para o evento 'alc-select', alterna o tema entre claro e escuro.
    handleClick() {
        this.toggleTheme();
    }
    // Alterna o tema entre claro e escuro.
    toggleTheme() {
        this.checked = !this.checked;
        const theme = this.checked ? this.DARK_THEME : this.LIGHT_THEME;
        setAppliedTheme(theme);
        saveUserPreference(theme);
    }
    // Define o estado inicial do tema com base na preferência do usuário ou no tema do sistema.
    componentWillLoad() {
        const userPreference = loadUserPreference();
        switch (userPreference) {
            case this.LIGHT_THEME:
                this.checked = false;
                break;
            case this.DARK_THEME:
                this.checked = true;
                break;
            default:
                // Se o tema do sistema for dark, então checked 'true' se não 'false'.
                this.checked = getAppliedTheme('system') === this.DARK_THEME;
                break;
        }
    }
    render() {
        return (h(Host, { key: '788a260b2aeae1d875d478e3ad990fb3cef50866' }, h("alc-menu-item", { key: '4b333a7fc81b036be43319a6411f363e13d6d04e', type: "checkbox", checked: this.checked }, h("alc-icon", { key: '6723be08ad75ec0f9e9fe4736d8befb3fbfba68a', icon: "moon", label: "", slot: "prefix" }), "Ver no tema escuro")));
    }
};
AlcMenuItemTheme.style = alcMenuItemThemeCss;

export { AlcExpander as alc_expander, AlcMenuItemTheme as alc_menu_item_theme };
//# sourceMappingURL=alc-expander.alc-menu-item-theme.entry.js.map

//# sourceMappingURL=alc-expander_2.entry.js.map