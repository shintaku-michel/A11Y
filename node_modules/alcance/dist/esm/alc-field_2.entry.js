import { r as registerInstance, h, H as Host, g as getElement } from './index-BuFKlV49.js';
import { g as getUniqueId } from './getUniqueId-BY09qPiz.js';
import { l as logger } from './logger-CZkdJRkw.js';
import { s as setAppliedTheme, g as getAppliedTheme, r as removeUserPreference, b as saveUserPreference, l as loadUserPreference } from './theme-BR2kXvnz.js';
import { t as testAttributes } from './testAttributes-DKpd2q2s.js';

const alcFieldCss = "[data-alc-theme=\"light\"] alc-field{--text-color:var(--alc-color-text-4);--text-color-label:var(--alc-color-text-0);--text-color-placeholder:var(--alc-color-text-4);--bg-color:var(--alc-color-surface-primary);--shadow-color:var(--alc-color-neutral-5);--outline-color:var(--alc-color-action-60);--border-color:var(--alc-color-neutral-60);--border-color-hover:var(--alc-color-action-60);--border-color-focus:var(--alc-color-action-20);--bg-color-disabled:var(--alc-color-neutral-10);--border-color-disabled:var(--alc-color-neutral-40);--text-color-disabled:var(--alc-color-text-4);--text-color-error:var(--alc-color-error-50);--border-color-error:var(--alc-color-error-50);--border-color-hover-error:var(--alc-color-error-45);--border-color-focus-error:var(--alc-color-error-20)}[data-alc-theme=\"dark\"] alc-field{--text-color:var(--alc-color-text-4);--text-color-label:var(--alc-color-text-0);--text-color-placeholder:var(--alc-color-text-4);--bg-color:var(--alc-color-neutral-100);--shadow-color:var(--alc-color-neutral-80);--outline-color:var(--alc-color-action-30);--border-color:var(--alc-color-neutral-30);--border-color-hover:var(--alc-color-action-40);--border-color-focus:var(--alc-color-action-70);--bg-color-disabled:var(--alc-color-neutral-80);--border-color-disabled:var(--alc-color-neutral-50);--text-color-disabled:var(--alc-color-text-4);--text-color-error:var(--alc-color-error-45);--border-color-error:var(--alc-color-error-45);--border-color-hover-error:var(--alc-color-error-50);--border-color-focus-error:var(--alc-color-error-70)}.alc-field{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;gap:0.25rem}.alc-field__label{color:var(--text-color-label)}.alc-field__core{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;gap:0.25rem}.alc-field__text{font-size:0.875rem;line-height:1rem;color:var(--text-color)}.alc-field__text--error{color:var(--text-color-error)}.alc-field__input{min-height:2.5rem;width:100%;--tw-shadow:inset 0 2px 4px 0 rgb(0 0 0 / 0.05);--tw-shadow-colored:inset 0 2px 4px 0 var(--tw-shadow-color);-webkit-box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);--tw-shadow-color:var(--shadow-color);--tw-shadow:var(--tw-shadow-colored);transition-property:color, background-color, border-color, fill, stroke, -webkit-text-decoration-color;-webkit-transition-property:color, background-color, border-color, fill, stroke, -webkit-text-decoration-color;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke, -webkit-text-decoration-color;-webkit-transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);-webkit-transition-duration:150ms;transition-duration:150ms;border-width:1px;border-color:var(--border-color);background-color:var(--bg-color)}.alc-field__input::-moz-placeholder{color:var(--text-color-placeholder)}.alc-field__input::-webkit-input-placeholder{color:var(--text-color-placeholder)}.alc-field__input:-ms-input-placeholder{color:var(--text-color-placeholder)}.alc-field__input::-ms-input-placeholder{color:var(--text-color-placeholder)}.alc-field__input::placeholder{color:var(--text-color-placeholder)}.alc-field__input:hover{border-color:var(--border-color-hover)}.alc-field__input:focus{border-color:var(--border-color-hover);outline-style:solid;outline-width:2px;outline-offset:2px;outline-color:var(--outline-color);--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(0px + var(--tw-ring-offset-width)) var(--tw-ring-color);-webkit-box-shadow:var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);box-shadow:var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000)}.alc-field__input:disabled{border-color:var(--border-color-disabled);background-color:var(--bg-color-disabled);--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;-webkit-box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);cursor:not-allowed;color:var(--text-color-disabled)}.alc-field__input:hover:disabled{border-color:var(--border-color-disabled)}.alc-field__input--error{border-color:var(--border-color-error)}.alc-field__input--error:hover{border-color:var(--border-color-hover-error)}.alc-field__input--error:focus{border-color:var(--border-color-hover-error)}";

const AlcField = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.describedBy = new Map();
        this.errorId = '';
        this.hintId = '';
        /**
         * Texto de ajuda.
        */
        this.hint = '';
        /**
         * Indica se o input é obrigatório.
        */
        this.required = false;
        /**
         * Texto de mensagem de erro.
        */
        this.errorMsg = '';
    }
    watchErrorMsg(newValue) {
        logger.debug('watchErrorMsg', newValue, this.input);
        if (newValue) {
            if (this.slottedElement.tagName === 'ALC-INPUT-FILE') {
                const mode = this.slottedElement.getAttribute('mode');
                if (mode === 'dropzone') {
                    const dropzoneElement = this.slottedElement.querySelector('.alc-input-file__dropzone');
                    if (dropzoneElement) {
                        dropzoneElement.classList.add('alc-field__input--error');
                    }
                }
                else if (mode === 'input') {
                    const textInputElement = this.slottedElement.querySelector('.alc-input-file__text-input');
                    if (textInputElement) {
                        textInputElement.classList.add('alc-field__input--error');
                    }
                }
                else if (mode === 'button') {
                    const buttonElement = this.slottedElement.querySelector('button.alc-button');
                    if (buttonElement) {
                        buttonElement.classList.add('alc-field__input--error');
                    }
                }
            }
            else {
                // É um elemento nativo
                this.input.classList.add('alc-field__input--error');
            }
        }
        else {
            if (this.slottedElement.tagName === 'ALC-INPUT-FILE') {
                const mode = this.slottedElement.getAttribute('mode');
                if (mode === 'dropzone') {
                    const dropzoneElement = this.slottedElement.querySelector('.alc-input-file__dropzone');
                    if (dropzoneElement) {
                        dropzoneElement.classList.remove('alc-field__input--error');
                    }
                }
                else if (mode === 'input') {
                    const textInputElement = this.slottedElement.querySelector('.alc-input-file__text-input');
                    if (textInputElement) {
                        textInputElement.classList.remove('alc-field__input--error');
                    }
                }
                else if (mode === 'button') {
                    const buttonElement = this.slottedElement.querySelector('button.alc-button');
                    if (buttonElement) {
                        buttonElement.classList.remove('alc-field__input--error');
                    }
                }
            }
            else {
                // É um elemento nativo
                this.input.classList.remove('alc-field__input--error');
            }
        }
    }
    // Função recursiva para encontrar o <input>
    findInputElement(element) {
        if (!element)
            return null;
        const tagName = element.tagName.toLowerCase();
        if (tagName === 'input' || tagName === 'select' || tagName === 'textarea') {
            return element;
        }
        for (let i = 0; i < element.children.length; i++) {
            const found = this.findInputElement(element.children[i]);
            if (found) {
                return found;
            }
        }
        return null;
    }
    async componentDidLoad() {
        // Reserva IDs para os elementos de erro e dica
        this.errorId = getUniqueId();
        this.hintId = getUniqueId();
        // Seleciona o elemento slotted
        this.slottedElement = this.el.querySelector('input, select, textarea, alc-input-file');
        if (this.slottedElement) {
            // Procura o elemento <input> dentro do componente slotted
            this.input = this.findInputElement(this.slottedElement);
            if (this.input) {
                this.input.id = this.input.id || getUniqueId();
                this.input.setAttribute('aria-required', this.required ? 'true' : 'false');
                this.input.classList.add('alc-field__input');
                this.inputId = this.input.getAttribute('id');
                this.watchErrorMsg(this.errorMsg);
                this.describedBy.set('original', this.input.getAttribute('aria-describedby') || '');
            }
        }
        // Configura o label se não estiver usando o slot "label"
        if (!this.label) {
            const labelEl = this.el.querySelector('[slot="label"] label');
            labelEl === null || labelEl === void 0 ? void 0 : labelEl.classList.add('alc-field__label');
            if (labelEl && this.required) {
                const small = document.createElement('small');
                small.setAttribute('aria-hidden', 'true');
                small.innerText = ' (obrigatório)';
                labelEl.appendChild(small);
            }
        }
        // Atualiza os atributos de acessibilidade
        this.updateAriaDescribedBy();
    }
    componentWillRender() {
        this.updateAriaDescribedBy();
    }
    updateAriaDescribedBy() {
        if (this.errorMsg) {
            this.describedBy.set('error', this.errorId);
        }
        else {
            this.describedBy.delete('error');
        }
        if (this.hint) {
            this.describedBy.set('hint', this.hintId);
        }
        else {
            this.describedBy.delete('hint');
        }
        let currentDescribedBy = '';
        currentDescribedBy += ` ${this.describedBy.get('original') || ''}`;
        currentDescribedBy += ` ${this.describedBy.get('error') || ''}`;
        currentDescribedBy += ` ${this.describedBy.get('hint') || ''}`;
        if (this.input)
            this.input.setAttribute('aria-describedby', currentDescribedBy.trim());
    }
    render() {
        return (h(Host, { key: 'f2eb4d7cb47f480863125057a87e555253fa8565', class: {
                'alc-field': true,
            } }, this.label
            ?
                h("div", null, " ", h("label", { class: "alc-field__label", htmlFor: this.inputId }, this.label, this.required
                    ?
                        // aria-hidden porque o "required" do input já é suficiente para informar.
                        h("small", { "aria-hidden": "true" }, " (obrigat\u00F3rio)")
                    :
                        null))
            :
                h("slot", { name: "label" }), h("div", { key: 'd58883931ed0328c2ec0256fc0651681d1e1be4e', class: "alc-field__core" }, h("slot", { key: '598479d10425fc2dfa00d3870b8193d7cf423e84' }), this.errorMsg
            ?
                h("small", { class: "alc-field__text alc-field__text--error", id: this.errorId }, this.errorMsg)
            :
                null, this.hint
            ?
                h("small", { class: "alc-field__text", id: this.hintId }, this.hint)
            :
                null)));
    }
    get el() { return getElement(this); }
    static get watchers() { return {
        "errorMsg": ["watchErrorMsg"]
    }; }
};
AlcField.style = alcFieldCss;

const alcThemeBaseCss = "";

const alcThemeCss = "alc-theme{display:block}.alc-theme__label{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);white-space:nowrap;border-width:0}.alc-field__core .alc-theme__select{width:auto}";

const NO_THEME = 0;
const LIGHT_THEME = 1;
const DARK_THEME = 2;
const AlcTheme = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
    }
    change(theme) {
        logger.log('changed to', theme);
        switch (theme) {
            case LIGHT_THEME:
                setAppliedTheme('light');
                saveUserPreference('light');
                break;
            case DARK_THEME:
                setAppliedTheme('dark');
                saveUserPreference('dark');
                break;
            default:
                setAppliedTheme(getAppliedTheme('system'));
                removeUserPreference();
                break;
        }
        this.selectedTheme = theme;
    }
    getSelectedValue(select) {
        return parseInt(select.selectedOptions[0].value);
    }
    componentWillLoad() {
        const userPreference = loadUserPreference();
        if (userPreference === 'light') {
            this.selectedTheme = LIGHT_THEME;
        }
        else if (userPreference === 'dark') {
            this.selectedTheme = DARK_THEME;
        }
        else {
            this.selectedTheme = NO_THEME;
        }
        this.selectId = getUniqueId();
    }
    render() {
        return (h(Host, { key: '1303b40b7cf8291232126b54294abfeea9907b16' }, h("alc-field", { key: '6091a7a2ad536f854c532ce898fd40b7b4479ca9' }, h("label", Object.assign({ key: '8570c6bf2d41e99c4ef01b14f209613a82117b36', htmlFor: this.selectId, slot: "label", class: "alc-theme__label" }, testAttributes()), "Tema"), h("div", { key: 'b3e55038e3df6b4dc75e8b3d1ff71d0960d9a087' }, h("select", Object.assign({ key: 'aa73b515c5aa45ec04faaffff8e3948511f756ed', onChange: (e) => this.change(this.getSelectedValue(e.target)), class: "alc-theme__select", id: this.selectId }, testAttributes()), h("option", { key: 'c7b043b78f2c693051cb710ce12f51fe17139c16', value: NO_THEME, selected: this.selectedTheme === NO_THEME }, "Do Sistema", this.selectedTheme === NO_THEME ? ' ✔' : ''), h("option", { key: '66b49cf0fb421ae680c2b3750fbec2290676a532', value: LIGHT_THEME, selected: this.selectedTheme === LIGHT_THEME }, "Claro", this.selectedTheme === LIGHT_THEME ? ' ✔' : ''), h("option", { key: '86181cfa6e6507d83abc9f1cd0cef398a9c403d1', value: DARK_THEME, selected: this.selectedTheme === DARK_THEME }, "Escuro", this.selectedTheme === DARK_THEME ? ' ✔' : ''))))));
    }
};
AlcTheme.style = {
    base: alcThemeBaseCss,
    theme: alcThemeCss
};

export { AlcField as alc_field, AlcTheme as alc_theme };
//# sourceMappingURL=alc-field.alc-theme.entry.js.map

//# sourceMappingURL=alc-field_2.entry.js.map