'use strict';

var index = require('./index-BOXTLnv4.js');
var logger = require('./logger-D5AeZhi-.js');
var testAttributes = require('./testAttributes-uTFBrsRA.js');
var getUniqueId = require('./getUniqueId-DF3jJ4DE.js');

const alcLoadingCss = "[data-alc-theme=\"light\"] alc-loading{--bg-color-overlay:#2d2e2f66;--border-color-loading-default:#dfe1e2;--border-color-loading:var(--alc-color-action-60)}[data-alc-theme=\"dark\"] alc-loading{--bg-color-overlay:#565c6566;--border-color-loading-default:#2d2e2f;--border-color-loading:var(--alc-color-action-40)}alc-loading{--bg-color-card:var(--alc-color-surface)}.alc-loading__overlay{position:fixed;top:0px;left:0px;z-index:1090;height:100%;width:100%;background-color:var(--bg-color-overlay);display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;gap:0.5rem}.alc-loading__card{min-width:12rem;border-radius:var(--alc-radius-default);background-color:var(--bg-color-card);padding:1rem;display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;text-wrap:nowrap;text-align:center}.alc-loading__card::before{display:block;--tw-content:\"\\200C\";content:var(--tw-content);margin-bottom:var(--alc-spacing-03);height:3rem;width:3rem}@-webkit-keyframes spin{to{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes spin{to{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}.alc-loading__card::before{-webkit-animation:spin 1s linear infinite;animation:spin 1s linear infinite;border-radius:9999px;border-width:6px;border-style:solid;border-color:var(--border-color-loading);border-right-color:var(--border-color-loading-default)}.alc-loading__container{position:relative}.alc-loading__card-container{margin-bottom:0.5rem;margin-top:0.5rem;min-width:12rem;border-radius:var(--alc-radius-default);background-color:var(--bg-color-card);padding:1rem;display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;text-wrap:nowrap;text-align:center}.alc-loading__overlay-container{position:absolute;inset:0px;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;background-color:var(--bg-color-overlay);z-index:50}.alc-loading__spinner-container{height:2.5rem;width:2.5rem}@keyframes spin{to{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}.alc-loading__spinner-container{-webkit-animation:spin 1s linear infinite;animation:spin 1s linear infinite;border-radius:9999px;border-width:4px;border-style:solid;border-color:var(--border-color-loading);border-right-color:var(--border-color-loading-default)}.alc-loading__inline{display:inline-block}.alc-loading__spinner-inline,.alc-loading__label-inline{display:-ms-inline-flexbox;display:inline-flex;vertical-align:sub}.alc-loading__spinner-inline{margin-right:0.5rem;height:1.25rem;width:1.25rem;-ms-flex-negative:0;flex-shrink:0}@keyframes spin{to{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}.alc-loading__spinner-inline{-webkit-animation:spin 1s linear infinite;animation:spin 1s linear infinite;border-radius:9999px;border-width:2px;border-style:solid;border-color:var(--border-color-loading);border-right-color:var(--border-color-loading-default)}.alc-loading__label-inline{font-size:0.875rem;line-height:1rem;line-height:1}.alc-loading__button{display:inline-block}.alc-loading__button-wrapper{display:-ms-inline-flexbox;display:inline-flex;-ms-flex-align:center;align-items:center}.alc-loading__spinner-button{position:relative;top:0.125em;margin-top:-0.125em;height:1rem;width:1rem}@keyframes spin{to{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}.alc-loading__spinner-button{-webkit-animation:spin 1s linear infinite;animation:spin 1s linear infinite;border-radius:9999px;border-width:2px;border-style:solid;border-color:var(--border-color-loading);border-right-color:var(--border-color-loading-default)}.sr-only{position:absolute;margin:-1px;height:1px;width:1px;overflow:hidden;white-space:nowrap;border-width:0px;padding:0px;clip:rect(0, 0, 0, 0)}";

const AlcLoading = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        /**
         * Define se o indicador de carregamento aparece na tela. Quando o valor é `true` mostra o componente e quando o valor é `false` oculta.
         */
        this.active = false;
        /**
        * Texto mostrado na tela enquanto estiver carregando e também anunciado no leitor de tela quando o estado mudar para `active=true`.
        */
        this.label = 'Carregando...';
        /**
        * Texto anunciado ao leitor de tela quando mudar o estado para `active=false`.
        */
        this.endMsg = 'Finalizado.';
        /**
         * Define a variação visual do componente:
         * - `'full-screen'`: ocupa a tela inteira.
         * - `'container'`: ocupa o elemento pai.
         * - `'inline'`: utilizado dentro de textos.
         * - `'button'`: utilizado dentro de botões.
         */
        this.variant = 'full-screen';
        /**
         * Mensagem interna para a região aria-live.
         */
        this.ariaMessage = '';
        this.parentButton = null;
    }
    /**
     * Exibe o loading.
     * @returns O valor retornado é `true` se o loading foi realmente exibido com essa chamada ao método.
     */
    async show() {
        if (this.active) {
            return false;
        }
        this.active = true;
        return true;
    }
    /**
     * Esconde o loading.
     * @returns O valor retornado é `true` se o loading foi realmente oculto com essa chamada ao método.
     */
    async hide() {
        if (!this.active) {
            return false;
        }
        this.active = false;
        return true;
    }
    onActiveChange(newValue, oldValue) {
        if (newValue !== oldValue) {
            this.updateAriaMessage();
            if (this.variant === 'button') {
                this.updateParentButtonAttributes();
            }
        }
    }
    componentWillLoad() {
        this.updateAriaMessage();
    }
    componentDidLoad() {
        if (this.variant === 'button') {
            this.findParentButton();
            this.updateParentButtonAttributes();
        }
    }
    updateAriaMessage() {
        this.ariaMessage = this.active ? this.label : this.endMsg;
    }
    findParentButton() {
        this.parentButton = this.el.closest('button');
        if (!this.parentButton) {
            logger.logger.warn('alc-loading[variant="button"] deve estar dentro de um elemento <button>.');
        }
    }
    updateParentButtonAttributes() {
        if (this.parentButton) {
            if (this.active) {
                this.parentButton.setAttribute('aria-label', this.label);
            }
            else {
                this.parentButton.removeAttribute('aria-label');
            }
        }
    }
    render() {
        const shouldRenderAriaLive = this.variant !== 'button';
        return (index.h(index.Host, { key: '4e4d1315ccbcbd55c2718dd8421845ab217901fa' }, this.renderLoadingVisuals(), shouldRenderAriaLive && (index.h("div", Object.assign({ key: 'eab510d1080f9a3d1ec98600f86621a4faf99765', class: "sr-only", "aria-live": "polite", role: "status" }, testAttributes.testAttributes()), this.ariaMessage))));
    }
    renderLoadingVisuals() {
        switch (this.variant) {
            case 'full-screen':
                return this.renderFullScreen();
            case 'container':
                return this.renderContainer();
            case 'inline':
                return this.renderInline();
            case 'button':
                return this.renderButton();
            default:
                return null;
        }
    }
    renderFullScreen() {
        if (!this.active)
            return null;
        return (index.h("div", { class: "alc-loading__overlay", "aria-hidden": "true" }, index.h("div", { class: "alc-loading__card" }, index.h("p", null, this.label))));
    }
    renderContainer() {
        if (!this.active)
            return null;
        return (index.h("div", { class: "alc-loading__overlay-container", "aria-hidden": "true" }, index.h("div", { class: "alc-loading__card-container" }, index.h("div", { class: "alc-loading__spinner-container" }), index.h("p", null, this.label))));
    }
    renderInline() {
        if (!this.active)
            return null;
        return (index.h("div", { class: "alc-loading__inline", "aria-hidden": "true" }, index.h("div", { class: "alc-loading__spinner-inline" }), index.h("span", { class: "alc-loading__label" }, this.label)));
    }
    renderButton() {
        if (!this.active)
            return null;
        return (index.h("div", { class: "alc-loading__button", "aria-hidden": "true" }, index.h("span", { class: "alc-loading__button-wrapper" }, index.h("div", { class: "alc-loading__spinner-button" }))));
    }
    get el() { return index.getElement(this); }
    static get watchers() { return {
        "active": ["onActiveChange"]
    }; }
};
AlcLoading.style = alcLoadingCss;

const alcPaginationBaseCss = "alc-pagination{display:block}.alc-pagination{display:-ms-flexbox;display:flex;list-style-type:none;padding-left:0px;padding-right:0px}.alc-pagination__link{margin-left:0.25rem;margin-right:0.25rem;border-width:1px;border-style:solid;border-color:transparent;padding-left:0.5rem;padding-right:0.5rem}.alc-pagination__link.is-active{cursor:not-allowed;border-color:currentColor;color:currentColor;-webkit-text-decoration-line:none;text-decoration-line:none}.alc-pagination__link.is-disabled{cursor:not-allowed;color:currentColor;-webkit-text-decoration-line:none;text-decoration-line:none}";

const themeAlcPaginationCss = ".alc-pagination{display:-ms-flexbox;display:flex}.alc-pagination__content{display:-ms-flexbox;display:flex;list-style-type:none;-ms-flex-align:center;align-items:center}.alc-pagination__button--first,.alc-pagination__button--last{display:none}@media (min-width: 576px){.alc-pagination__button--first,.alc-pagination__button--last{display:block}}.alc-pagination__item{margin-left:0.125rem;margin-right:0.125rem;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}.alc-pagination__select{--border-width:1px;margin-left:0.25rem;margin-right:0.25rem;padding-top:0.25rem;padding-bottom:0.25rem;border-width:var(--border-width);padding-left:calc(0.25rem - var(--border-width));padding-right:calc(0.25rem - var(--border-width));max-height:2rem;min-width:4rem}";

const Pagination = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.alcChange = index.createEvent(this, "alc-change", 6);
        this.idSelectPagination = null;
        this.disabledSelect = false;
        /**
         * Número total de páginas.
         */
        this.totalPages = 1;
        /**
         * Número da página atual
         */
        this.currentPage = 1;
        /**
        * @type Array<number>
        * @default []
        *
        * Lista de páginas
        */
        this.pageList = [];
        this.paginationItem = {
            'isFirst': {
                icon: 'chevron-double-left',
                label: 'Ir para primeira página',
            },
            'isLast': {
                icon: 'chevron-double-right',
                label: 'Ir para última página',
            },
            'isPrev': {
                icon: 'chevron-left',
                label: 'Ir para página anterior',
            },
            'isNext': {
                icon: 'chevron-right',
                label: 'Ir para próxima página',
            },
        };
        this.checkPage = (using) => {
            const leftPaginationItems = ['isFirst', 'isPrev'];
            const rightPaginationItems = ['isLast', 'isNext'];
            if (leftPaginationItems.includes(using)) {
                return this.currentPage !== 1;
            }
            if (rightPaginationItems.includes(using)) {
                return this.currentPage !== this.pageList.length;
            }
            return true;
        };
        this.handleSelectedPage = (event) => {
            this.handleChangePage(parseInt(event.target.value), 'isSelect');
        };
        this.renderPaginationItem = (pageNumber, using) => {
            const paginationItemIsDisabled = !this.checkPage(using);
            const paginationItemLabel = (!paginationItemIsDisabled && using !== 'isFirst') ? `, Ir para página ${pageNumber}` : '';
            return (index.h("li", null, index.h("button", Object.assign({ onClick: () => this.handleChangePage(pageNumber, using), class: {
                    'alc-button alc-button-rounded': true,
                    'alc-pagination__button--first': using === 'isFirst',
                    'alc-pagination__button--last': using === 'isLast',
                }, "aria-label": this.paginationItem[using].label + paginationItemLabel, "aria-disabled": paginationItemIsDisabled, disabled: paginationItemIsDisabled }, testAttributes.testAttributes()), index.h("alc-icon", { name: this.paginationItem[using].icon, label: "" }))));
        };
    }
    watchPropTotalPages(newValue, oldValue) {
        if (newValue < this.currentPage) {
            this.totalPages = oldValue;
            logger.logger.warn(`"total-pages" não pode ser menor do que "current-page". Foi mantido o valor ${oldValue}`);
            return;
        }
        this.pageList = [...new Array(newValue)].map((_, index) => index + 1);
    }
    componentWillLoad() {
        this.pageList = [...new Array(this.totalPages)].map((_, index) => index + 1);
        this.idSelectPagination = getUniqueId.getUniqueId();
    }
    handleChangePage(pageNumber, using) {
        if (!this.checkPage(using)) {
            return;
        }
        const newChange = this.alcChange.emit({
            from: this.currentPage,
            to: pageNumber,
            using: using,
        });
        this.pageChangeHandler(newChange);
    }
    pageChangeHandler(event) {
        const { using, to } = event.detail;
        switch (using) {
            case 'isFirst':
                this.currentPage = 1;
                break;
            case 'isPrev':
                this.currentPage = this.currentPage - 1;
                break;
            case 'isNext':
                this.currentPage = this.currentPage + 1;
                break;
            case 'isLast':
                this.currentPage = this.totalPages;
                break;
            default:
                this.currentPage = to;
                break;
        }
    }
    render() {
        return (index.h(index.Host, { key: 'b9c2cd42db54e71b3c5a51a415954b1c54eb45a1' }, index.h("nav", { key: '882ca182b295ef0381c3ded7d7a0a0c050b46433', role: "navigation", "aria-label": "Navega\u00E7\u00E3o paginada", class: "alc-pagination" }, index.h("ul", { key: '477efe3227941828b93bce80c41059df2c5b0a98', class: "alc-pagination__content" }, this.renderPaginationItem(1, 'isFirst'), this.renderPaginationItem(this.currentPage - 1, 'isPrev'), index.h("li", { key: '9d359535992c6a6774da1d48470179da7eb0f58e', class: "alc-pagination__item" }, index.h("label", { key: 'fdeecaa87d18f33ba5a1d62cfe5405230ff6d7b9', htmlFor: this.idSelectPagination }, "P\u00E1gina"), index.h("select", { key: '9b30bfdd417a4dfbc719ef1625debd5ff4b650c4', onChange: this.handleSelectedPage, class: "alc-pagination__select", id: this.idSelectPagination, disabled: this.disabledSelect }, this.pageList.map(page => (index.h("option", { value: page, selected: page === this.currentPage, "aria-label": `Página ${page}` }, page)))), "de ", this.totalPages), this.renderPaginationItem(this.currentPage + 1, 'isNext'), this.renderPaginationItem(this.pageList.length, 'isLast')))));
    }
    static get watchers() { return {
        "totalPages": ["watchPropTotalPages"]
    }; }
};
Pagination.style = {
    base: alcPaginationBaseCss,
    theme: themeAlcPaginationCss
};

const iconMap = new Map();
iconMap.set('asc', {
    name: 'chevron-down'
});
iconMap.set('desc', {
    name: 'chevron-up'
});
iconMap.set('none', {
    name: 'chevron-expand'
});
const AlcSortIndicator = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        /**
        * Define indicação do sort.
        */
        this.sorting = 'none';
    }
    render() {
        return (index.h(index.Host, { key: 'd3de3f859d218235a32d3cbd2b1c78a1a667c903' }, index.h("span", { key: 'b08d705fef11a025faa69144ab539dadc8e22035', class: "alc-sort-indicator" }, index.h("alc-icon", { key: 'd9f35015d02ef4f5f8b82cb0a1ef1245e0fc9354', name: iconMap.get(this.sorting).name, class: "alc-sort-indicator__icon", label: "" }))));
    }
};

exports.alc_loading = AlcLoading;
exports.alc_pagination = Pagination;
exports.alc_sort_indicator = AlcSortIndicator;
//# sourceMappingURL=alc-loading.alc-pagination.alc-sort-indicator.entry.cjs.js.map

//# sourceMappingURL=alc-loading_3.cjs.entry.js.map