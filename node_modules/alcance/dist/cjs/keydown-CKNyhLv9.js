'use strict';

const getFocusableElements = (element) => {
    const focusableElements = getAllFocusableElements(element);
    // Retorna somente elementos visíveis
    // Valida se o elemento possui tabindex de qualquer valor negativo e adiciona à lista de filtrados
    return focusableElements.filter(element => {
        const el = element;
        return el.offsetParent !== null && !(el.hasAttribute('tabindex') && parseInt(el.getAttribute('tabindex') || '0') < 0);
    });
};
// Pega todos os elementos focaveis, inclusive invisíveis e com tabindex negativo 
// Pegar elementos invisíveis são úteis quando estão dentro de componentes que não foram renderizados, como a modal fechada.
// E tabindex negativo é usado para controlar o foco manualmente e, para isso, queremos pegar esses elementos.
const getAllFocusableElements = (element) => {
    const focusableElements = element.querySelectorAll('button, [href], input, select, textarea, [tabindex], [contenteditable]:not([contenteditable="false"])');
    // Converte NodeList para Array
    return Array.from(focusableElements);
};
const focusFirstElement = (focusableElements) => {
    if (focusableElements.length > 0) {
        const firstElement = focusableElements[0];
        firstElement.focus();
    }
};
const handleKeyDown = (event, focusableElements) => {
    if (focusableElements.length > 0) {
        const firstElement = focusableElements[0];
        const lastElement = focusableElements[focusableElements.length - 1];
        if (focusableElements.length === 1) {
            firstElement.focus();
            return event.preventDefault();
        }
        if (!event.shiftKey && document.activeElement === lastElement) {
            firstElement.focus();
            return event.preventDefault();
        }
        if (event.shiftKey && document.activeElement === firstElement) {
            lastElement.focus();
            return event.preventDefault();
        }
    }
};

exports.focusFirstElement = focusFirstElement;
exports.getFocusableElements = getFocusableElements;
exports.handleKeyDown = handleKeyDown;
//# sourceMappingURL=keydown-CKNyhLv9.js.map

//# sourceMappingURL=keydown-CKNyhLv9.js.map