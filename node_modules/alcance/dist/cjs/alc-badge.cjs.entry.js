'use strict';

var index = require('./index-BOXTLnv4.js');

const alcBadgeCss = ":host{display:-ms-inline-flexbox;display:inline-flex}[data-alc-theme=\"dark\"] alc-badge{--bg-color-info:var(--alc-color-info-70);--border-color-info:var(--alc-color-info-60);--text-color-info:var(--alc-color-text-1);--bg-color-warning:var(--alc-color-warning-60);--border-color-warning:var(--alc-color-warning-50);--text-color-warning:var(--alc-color-text-1);--bg-color-error:var(--alc-color-error-70);--border-color-error:var(--alc-color-error-60);--text-color-error:var(--alc-color-text-1);--bg-color-success:var(--alc-color-success-70);--border-color-success:var(--alc-color-success-60);--text-color-success:var(--alc-color-text-1)}[data-alc-theme=\"light\"] alc-badge{--bg-color-info:var(--alc-color-info-10);--border-color-info:var(--alc-color-info-40);--text-color-info:var(--alc-color-info-70);--bg-color-warning:var(--alc-color-warning-10);--border-color-warning:var(--alc-color-warning-20);--text-color-warning:var(--alc-color-warning-60);--bg-color-error:var(--alc-color-error-20);--border-color-error:var(--alc-color-error-50);--text-color-error:var(--alc-color-error-70);--bg-color-success:var(--alc-color-success-10);--border-color-success:var(--alc-color-success-50);--text-color-success:var(--alc-color-success-70)}.alc-badge-wrapper{position:relative;display:-ms-inline-flexbox;display:inline-flex;-ms-flex-align:center;align-items:center}.alc-badge{z-index:10;display:inline-block;border-radius:9999px;text-align:center;font-size:0.75rem;line-height:1rem}.alc-badge--default:not(.alc-badge--dot):not(.alc-badge--count){margin-left:0.5rem}.alc-badge--primary{background-color:var(--alc-color-layer-a);color:var(--alc-color-text-0)}.alc-badge--secondary{background-color:var(--alc-color-layer-b);color:var(--alc-color-text-0)}.alc-badge--success{background-color:var(--bg-color-success);color:var(--text-color-success)}.alc-badge--warning{background-color:var(--bg-color-warning);color:var(--text-color-warning)}.alc-badge--error{background-color:var(--bg-color-error);color:var(--text-color-error)}.alc-badge--info{background-color:var(--bg-color-info);color:var(--text-color-info)}.alc-badge--neutral{background-color:var(--alc-color-layer-c);color:var(--alc-color-text-0)}.alc-badge--dot{height:0.625rem;width:0.625rem;border-radius:9999px}.alc-badge--outlined{border-width:1px;background-color:transparent}.alc-badge--primary.alc-badge--outlined{border-color:var(--alc-color-border);color:var(--alc-color-text-0)}.alc-badge--secondary.alc-badge--outlined{border-color:var(--alc-color-border);color:var(--alc-color-text-0)}.alc-badge--success.alc-badge--outlined{border-color:var(--border-color-success);color:var(--text-color-success)}.alc-badge--warning.alc-badge--outlined{border-color:var(--border-color-warning);color:var(--text-color-warning)}.alc-badge--error.alc-badge--outlined{border-color:var(--border-color-error);color:var(--text-color-error)}.alc-badge--info.alc-badge--outlined{border-color:var(--border-color-info);color:var(--text-color-info)}.alc-badge--neutral.alc-badge--outlined{border-color:var(--alc-color-border);color:var(--alc-color-text-0)}.alc-badge--default.alc-badge--dot,.alc-badge--default.alc-badge--count{position:absolute;top:0px;right:0px;--tw-translate-x:50%;--tw-translate-y:-50%;-webkit-transform:translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));transform:translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}.alc-badge--floating.alc-badge--dot,.alc-badge--floating.alc-badge--count{position:absolute;top:0px;right:0px;--tw-translate-x:0.5rem;--tw-translate-y:-0.5rem;-webkit-transform:translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));transform:translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));--tw-shadow:0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);--tw-shadow-colored:0 10px 15px -3px var(--tw-shadow-color), 0 4px 6px -4px var(--tw-shadow-color);-webkit-box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)}.alc-badge--inline.alc-badge--dot,.alc-badge--inline.alc-badge--count{position:static;margin-left:0.5rem}.alc-badge:not(.alc-badge--dot){padding-left:0.5rem;padding-right:0.5rem;padding-top:0.25rem;padding-bottom:0.25rem}.alc-badge--pulsate{-webkit-animation:pulse 1.5s infinite;animation:pulse 1.5s infinite}.alc-badge--pulsate.alc-badge--primary{--pulse-color:var(--alc-color-layer-a)}.alc-badge--pulsate.alc-badge--secondary{--pulse-color:var(--alc-color-layer-b)}.alc-badge--pulsate.alc-badge--success{--pulse-color:var(--bg-color-success)}.alc-badge--pulsate.badge--neutral{--pulse-color:var(--alc-color-layer-c)}.alc-badge--pulsate.alc-badge--warning{--pulse-color:var(--bg-color-warning)}.alc-badge--pulsate.alc-badge--error{--pulse-color:var(--bg-color-error)}.alc-badge--pulsate.alc-badge--info{--pulse-color:var(--bg-color-info)}@-webkit-keyframes pulse{0%{-webkit-box-shadow:0 0 0 0 var(--pulse-color);box-shadow:0 0 0 0 var(--pulse-color)}70%{-webkit-box-shadow:0 0 0 0.5rem transparent;box-shadow:0 0 0 0.5rem transparent}100%{-webkit-box-shadow:0 0 0 0 transparent;box-shadow:0 0 0 0 transparent}}@keyframes pulse{0%{-webkit-box-shadow:0 0 0 0 var(--pulse-color);box-shadow:0 0 0 0 var(--pulse-color)}70%{-webkit-box-shadow:0 0 0 0.5rem transparent;box-shadow:0 0 0 0.5rem transparent}100%{-webkit-box-shadow:0 0 0 0 transparent;box-shadow:0 0 0 0 transparent}}";

const AlcBadge = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        /**
         * Define se o badge deve ser exibido como um contador.
         */
        this.count = false;
        /**
         * Define a cor do badge. Pode ser 'primary', 'secondary', 'success', 'warning', 'error', 'info' ou 'neutral'.
         */
        this.color = 'primary';
        /**
         * Define se o badge deve ser exibido como um ponto (dot) sem conteúdo.
         */
        this.dot = false;
        /**
         * Define se o badge deve ser exibido ou não.
         */
        this.hidden = false;
        /**
         * Define se o badge deve aparecer com um contorno ao invés de ser preenchido.
         */
        this.outlined = false;
        /**
         * Define a posição do badge: 'default', 'floating' ou 'inline'.
         */
        this.position = 'default';
        /**
         * Define se o badge deve ter animação de pulsação.
         */
        this.pulsate = false;
    }
    render() {
        if (this.hidden) {
            return null;
        }
        return (index.h(index.Host, { class: "alc-badge-wrapper" }, index.h("slot", null), (this.dot || this.label) && (index.h("span", { class: `alc-badge alc-badge--${this.color} 
              ${this.dot ? 'alc-badge--dot' : ''} 
              ${this.count ? 'alc-badge--count' : ''}
              ${this.outlined ? 'alc-badge--outlined' : ''} alc-badge--${this.position}
              ${this.pulsate ? 'alc-badge--pulsate' : ''}` }, !this.dot && this.label))));
    }
};
AlcBadge.style = alcBadgeCss;

exports.alc_badge = AlcBadge;
//# sourceMappingURL=alc-badge.entry.cjs.js.map

//# sourceMappingURL=alc-badge.cjs.entry.js.map