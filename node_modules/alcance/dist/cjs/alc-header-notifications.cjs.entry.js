'use strict';

var index = require('./index-BOXTLnv4.js');
var logger = require('./logger-D5AeZhi-.js');

const alcHeaderNotificationsCss = ".alc-header-notifications .alc-badge{border-radius:8px;--tw-bg-opacity:1;background-color:rgb(252 144 109 / var(--tw-bg-opacity));padding-top:0px;padding-bottom:0px;padding-left:2px;padding-right:2px;--tw-text-opacity:1;color:rgb(0 0 0 / var(--tw-text-opacity));line-height:1em}.alc-header-notifications__aria-live{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);white-space:nowrap;border-width:0}";

/*
  TODO: Avaliar possibilidade de "abrir" para modificar rótulo do botão
  Nessa versão, não será possível alterar o rótulo do botão.
  Há uma certa dificuldade para lidar com slot, possível html dentro do slot,
  e a extração do texto correspondente para criar os elementos audíveis.
*/
const BUTTON_LABEL = "Notificações";
const MAX_COUNTER = 99;
const AlcHeaderNotifications = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.alcClick = index.createEvent(this, "alc-click", 7);
        this.overflow = false;
        this.notificationsLabel = "";
        this.notificationsAudible = "";
        /**
         * Número de notificações a serem exibidas no botão.
         */
        this.notifications = 0;
        /**
         * Define o tipo de elemento a ser renderizado. Pode ser um button ou um link.
         */
        this.variant = 'button';
        /**
         * URL para a página de notificações. Usado quando a propriedade `variant` é `link`.
         * Se o `variant` for `button`, esse atributo será ignorado.
         */
        this.url = '';
    }
    watchNotifications(newValue) {
        if (Number.isNaN(newValue)) {
            logger.logger.warn('O valor do atributo "notifications" deve ser numérico. Assumindo o valor padrão 0.');
            newValue = 0;
        }
        if (newValue === 0) {
            this.notificationsLabel = "";
            this.notificationsAudible = "";
            this.overflow = false;
        }
        else if (newValue > MAX_COUNTER) {
            this.notificationsLabel = `${MAX_COUNTER}+`;
            this.notificationsAudible = `Mais de ${MAX_COUNTER} ${BUTTON_LABEL}`;
            this.overflow = true;
        }
        else {
            this.notificationsLabel = newValue.toString();
            this.notificationsAudible = `${newValue.toString()} ${BUTTON_LABEL}`;
            this.overflow = false;
        }
    }
    async handleClick(event) {
        const { defaultPrevented } = this.alcClick.emit();
        if (defaultPrevented) {
            event.preventDefault();
        }
    }
    componentWillLoad() {
        this.watchNotifications(this.notifications);
    }
    render() {
        const commonProps = {
            class: "alc-header-button",
            "aria-label": this.overflow ? `${this.notificationsAudible}` : null,
            onClick: (event) => this.handleClick(event),
        };
        return (index.h(index.Host, { key: '759c155108643e394a594a575849491a1e421292' }, index.h("span", { key: 'b7c18e91416ddc03f49fa4f43a1118eeb619a8da', class: "alc-header-notifications" }, this.variant === 'button' ? (index.h("button", Object.assign({}, commonProps), this.renderContent())) : (index.h("a", Object.assign({ href: this.url }, commonProps), this.renderContent())), index.h("span", { key: '8f5d05866bac68b79671c9ba22246aba679e8e10', role: "status", "aria-live": "polite", "aria-atomic": "true", class: "alc-header-notifications__aria-live" }, this.notifications
            ?
                `${this.notificationsAudible}`
            :
                null))));
    }
    renderContent() {
        const badge = (index.h("alc-badge", { color: "warning", count: true, label: this.notificationsLabel }, index.h("alc-icon", { name: "bell", label: "", class: "alc-header-button__icon" })));
        const label = (index.h("span", { class: "alc-header-button__label" }, BUTTON_LABEL));
        return [
            badge,
            label
        ];
    }
    static get watchers() { return {
        "notifications": ["watchNotifications"]
    }; }
};
AlcHeaderNotifications.style = alcHeaderNotificationsCss;

exports.alc_header_notifications = AlcHeaderNotifications;
//# sourceMappingURL=alc-header-notifications.entry.cjs.js.map

//# sourceMappingURL=alc-header-notifications.cjs.entry.js.map