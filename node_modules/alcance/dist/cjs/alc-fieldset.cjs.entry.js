'use strict';

var index = require('./index-BOXTLnv4.js');
var getUniqueId = require('./getUniqueId-DF3jJ4DE.js');
var logger = require('./logger-D5AeZhi-.js');
var testAttributes = require('./testAttributes-uTFBrsRA.js');

const alcFieldsetCss = "alc-fieldset{display:block}[data-alc-theme=\"dark\"] alc-fieldset{--border-color:var(--alc-color-border);--text-color:var(--alc-color-text-4);--text-color-error:var(--alc-color-error-45)}[data-alc-theme=\"light\"] alc-fieldset{--border-color:#76766a;--text-color:var(--alc-color-text-4);--text-color-error:var(--alc-color-error-50)}.alc-fieldset{border-radius:0.25rem;border-width:1px;border-style:solid;border-color:var(--border-color);padding:0.75rem}.alc-fieldset__legend{padding-left:0.375rem;padding-right:0.375rem;font-weight:600}.alc-fieldset__text-container{margin-top:1rem;display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;gap:0.25rem}.alc-fieldset__text{font-size:0.875rem;line-height:1rem;color:var(--text-color)}.alc-fieldset__text--error{color:var(--text-color-error)}";

const AlcFieldset = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.describedBy = new Map();
        this.errorId = '';
        this.hintId = '';
        /**
         * Texto de ajuda.
        */
        this.hint = '';
        /**
         * Indica se o fieldset é obrigatório.
        */
        this.required = false;
        /**
         * Texto de mensagem de erro.
         */
        this.errorMsg = '';
    }
    watchErrorMsg(newValue) {
        logger.logger.debug('watchErrorMsg', newValue);
        if (newValue) {
            this.el.classList.add('alc-form__input--error');
        }
        else {
            this.el.classList.remove('alc-form__input--error');
        }
    }
    componentWillLoad() {
        // Independentemente de qualquer coisa, reserva ids para esses elementos.
        this.errorId = getUniqueId.getUniqueId();
        this.hintId = getUniqueId.getUniqueId();
        if (this.el) {
            this.watchErrorMsg(this.errorMsg);
        }
    }
    componentWillRender() {
        if (this.errorMsg) {
            this.describedBy.set('error', this.errorId);
        }
        else {
            this.describedBy.delete('error');
        }
        if (this.hint) {
            this.describedBy.set('hint', this.hintId);
        }
        else {
            this.describedBy.delete('hint');
        }
    }
    render() {
        return (index.h(index.Host, { key: '13da7d1291538854017ab47348c086c484de42e5' }, index.h("fieldset", Object.assign({ key: '1bf206aaf951c0f43965e8512513e6f67a638dc7', class: "alc-fieldset", "aria-describedby": mapToString(this.describedBy) }, testAttributes.testAttributes()), index.h("legend", Object.assign({ key: '087915de3b2ab15449223a4df975d4d8077c9d49', class: "alc-fieldset__legend" }, testAttributes.testAttributes()), this.legend, this.required
            ?
                // aria-hidden porque o "required" do input já é suficiente para informar.
                index.h("small", { "aria-hidden": "true" }, " (obrigat\u00F3rio)")
            :
                null), index.h("slot", { key: '9fbadf05a4719285b0d4e76ed95270f5dbadfcf7' }), index.h("div", { key: 'b2ffb8687aa486a5d1c45ddecb52d9f30f31753b', class: "alc-fieldset__text-container" }, this.errorMsg
            ?
                index.h("small", Object.assign({ class: "alc-fieldset__text alc-fieldset__text--error", id: this.errorId }, testAttributes.testAttributes()), this.errorMsg)
            :
                null, this.hint
            ?
                index.h("small", Object.assign({ class: "alc-fieldset__text", id: this.hintId }, testAttributes.testAttributes()), this.hint)
            :
                null))));
    }
    get el() { return index.getElement(this); }
    static get watchers() { return {
        "errorMsg": ["watchErrorMsg"]
    }; }
};
// get Map and transform in a string with the values separated by spaces. return null if Map is empty.
function mapToString(map) {
    if (map.size > 0) {
        return Array.from(map.values()).join(' ');
    }
    else {
        return null;
    }
}
AlcFieldset.style = alcFieldsetCss;

exports.alc_fieldset = AlcFieldset;
//# sourceMappingURL=alc-fieldset.entry.cjs.js.map

//# sourceMappingURL=alc-fieldset.cjs.entry.js.map